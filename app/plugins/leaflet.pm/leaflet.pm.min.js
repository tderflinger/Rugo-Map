/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _Snapping = __webpack_require__(5);\n\nvar _Snapping2 = _interopRequireDefault(_Snapping);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Draw = L.Class.extend({\n    includes: [_Snapping2.default],\n    options: {\n        snappable: true,\n        snapDistance: 20,\n        cursorMarker: true,\n        finishOnDoubleClick: false,\n        finishOn: null,\n        allowSelfIntersection: true,\n        templineStyle: {},\n        hintlineStyle: {\n            dashArray: [5, 5]\n        },\n        markerStyle: {\n            draggable: true\n        }\n    },\n    initialize: function initialize(map) {\n        var _this = this;\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Marker', 'Line', 'Poly', 'Rectangle', 'Circle', 'Cut'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach(function (shape) {\n            _this[shape] = new L.PM.Draw[shape](_this._map);\n        });\n    },\n    setPathOptions: function setPathOptions(options) {\n        this.options.pathOptions = options;\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function enable(shape, options) {\n        if (!shape) {\n            throw new Error('Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(','));\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable(options);\n    },\n    disable: function disable() {\n        var _this2 = this;\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach(function (shape) {\n            _this2[shape].disable();\n        });\n    },\n    addControls: function addControls() {\n        var _this3 = this;\n\n        // add control buttons for our shapes\n        this.shapes.forEach(function (shape) {\n            _this3[shape].addButton();\n        });\n    }\n});\n\nexports.default = Draw;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9qcy9EcmF3L0wuUE0uRHJhdy5qcz9iMDE1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1NuYXBwaW5nID0gcmVxdWlyZSgnLi4vTWl4aW5zL1NuYXBwaW5nJyk7XG5cbnZhciBfU25hcHBpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU25hcHBpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRHJhdyA9IEwuQ2xhc3MuZXh0ZW5kKHtcbiAgICBpbmNsdWRlczogW19TbmFwcGluZzIuZGVmYXVsdF0sXG4gICAgb3B0aW9uczoge1xuICAgICAgICBzbmFwcGFibGU6IHRydWUsXG4gICAgICAgIHNuYXBEaXN0YW5jZTogMjAsXG4gICAgICAgIGN1cnNvck1hcmtlcjogdHJ1ZSxcbiAgICAgICAgZmluaXNoT25Eb3VibGVDbGljazogZmFsc2UsXG4gICAgICAgIGZpbmlzaE9uOiBudWxsLFxuICAgICAgICBhbGxvd1NlbGZJbnRlcnNlY3Rpb246IHRydWUsXG4gICAgICAgIHRlbXBsaW5lU3R5bGU6IHt9LFxuICAgICAgICBoaW50bGluZVN0eWxlOiB7XG4gICAgICAgICAgICBkYXNoQXJyYXk6IFs1LCA1XVxuICAgICAgICB9LFxuICAgICAgICBtYXJrZXJTdHlsZToge1xuICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUobWFwKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgLy8gc2F2ZSB0aGUgbWFwXG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcblxuICAgICAgICAvLyBkZWZpbmUgYWxsIHBvc3NpYmxlIHNoYXBlcyB0aGF0IGNhbiBiZSBkcmF3blxuICAgICAgICB0aGlzLnNoYXBlcyA9IFsnTWFya2VyJywgJ0xpbmUnLCAnUG9seScsICdSZWN0YW5nbGUnLCAnQ2lyY2xlJywgJ0N1dCddO1xuXG4gICAgICAgIC8vIGluaXRpYXRlIGRyYXdpbmcgY2xhc3MgZm9yIG91ciBzaGFwZXNcbiAgICAgICAgdGhpcy5zaGFwZXMuZm9yRWFjaChmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIF90aGlzW3NoYXBlXSA9IG5ldyBMLlBNLkRyYXdbc2hhcGVdKF90aGlzLl9tYXApO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHNldFBhdGhPcHRpb25zOiBmdW5jdGlvbiBzZXRQYXRoT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5wYXRoT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSxcbiAgICBnZXRTaGFwZXM6IGZ1bmN0aW9uIGdldFNoYXBlcygpIHtcbiAgICAgICAgLy8gaWYgc29tZWJvZHkgd2FudHMgdG8ga25vdyB3aGF0IHNoYXBlcyBhcmUgYXZhaWxhYmxlXG4gICAgICAgIHJldHVybiB0aGlzLnNoYXBlcztcbiAgICB9LFxuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKHNoYXBlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghc2hhcGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3I6IFBsZWFzZSBwYXNzIGEgc2hhcGUgYXMgYSBwYXJhbWV0ZXIuIFBvc3NpYmxlIHNoYXBlcyBhcmU6ICcgKyB0aGlzLmdldFNoYXBlcygpLmpvaW4oJywnKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkaXNhYmxlIGRyYXdpbmcgZm9yIGFsbCBzaGFwZXNcbiAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG5cbiAgICAgICAgLy8gZW5hYmxlIGRyYXcgZm9yIGEgc2hhcGVcbiAgICAgICAgdGhpc1tzaGFwZV0uZW5hYmxlKG9wdGlvbnMpO1xuICAgIH0sXG4gICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gdGhlcmUgY2FuIG9ubHkgYmUgb25lIGRyYXdpbmcgbW9kZSBhY3RpdmUgYXQgYSB0aW1lIG9uIGEgbWFwXG4gICAgICAgIC8vIHNvIGl0IGRvZXNuJ3QgbWF0dGVyIHdoaWNoIG9uZSBzaG91bGQgYmUgZGlzYWJsZWQuXG4gICAgICAgIC8vIGp1c3QgZGlzYWJsZSBhbGwgb2YgdGhlbVxuICAgICAgICB0aGlzLnNoYXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICAgICAgX3RoaXMyW3NoYXBlXS5kaXNhYmxlKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgYWRkQ29udHJvbHM6IGZ1bmN0aW9uIGFkZENvbnRyb2xzKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAvLyBhZGQgY29udHJvbCBidXR0b25zIGZvciBvdXIgc2hhcGVzXG4gICAgICAgIHRoaXMuc2hhcGVzLmZvckVhY2goZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICBfdGhpczNbc2hhcGVdLmFkZEJ1dHRvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRHJhdztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9EcmF3L0wuUE0uRHJhdy5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export earthRadius */\n/* unused harmony export factors */\n/* unused harmony export unitsFactors */\n/* unused harmony export areaFactors */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return feature; });\n/* unused harmony export geometry */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return point; });\n/* unused harmony export points */\n/* unused harmony export polygon */\n/* unused harmony export polygons */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return lineString; });\n/* unused harmony export lineStrings */\n/* unused harmony export featureCollection */\n/* unused harmony export multiLineString */\n/* unused harmony export multiPoint */\n/* unused harmony export multiPolygon */\n/* unused harmony export geometryCollection */\n/* unused harmony export round */\n/* unused harmony export radiansToLength */\n/* unused harmony export lengthToRadians */\n/* unused harmony export lengthToDegrees */\n/* unused harmony export bearingToAzimuth */\n/* unused harmony export radiansToDegrees */\n/* unused harmony export degreesToRadians */\n/* unused harmony export convertLength */\n/* unused harmony export convertArea */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return isObject; });\n/* unused harmony export validateBBox */\n/* unused harmony export validateId */\n/* unused harmony export radians2degrees */\n/* unused harmony export degrees2radians */\n/* unused harmony export distanceToDegrees */\n/* unused harmony export distanceToRadians */\n/* unused harmony export radiansToDistance */\n/* unused harmony export bearingToAngle */\n/* unused harmony export convertDistance */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n */\nvar earthRadius = 6371008.8;\n\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n */\nvar factors = {\n    meters: earthRadius,\n    metres: earthRadius,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    miles: earthRadius / 1609.344,\n    nauticalmiles: earthRadius / 1852,\n    inches: earthRadius * 39.370,\n    yards: earthRadius / 1.0936,\n    feet: earthRadius * 3.28084,\n    radians: 1,\n    degrees: earthRadius / 111325,\n};\n\n/**\n * Units of measurement factors based on 1 meter.\n */\nvar unitsFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000,\n    millimetres: 1000,\n    centimeters: 100,\n    centimetres: 100,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    miles: 1 / 1609.344,\n    nauticalmiles: 1 / 1852,\n    inches: 39.370,\n    yards: 1 / 1.0936,\n    feet: 3.28084,\n    radians: 1 / earthRadius,\n    degrees: 1 / 111325,\n};\n\n/**\n * Area of measurement factors based on 1 square meter.\n */\nvar areaFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    centimeters: 10000,\n    centimetres: 10000,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var feat = {type: 'Feature'};\n    if (id) feat.id = id;\n    if (bbox) feat.bbox = bbox;\n    feat.properties = properties || {};\n    feat.geometry = geometry;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Geometry\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (bbox) validateBBox(bbox);\n\n    // Main\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) geom.bbox = bbox;\n    return geom;\n}\n\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (coordinates.length < 2) throw new Error('coordinates must be at least 2 numbers long');\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('coordinates must contain numbers');\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (coordinates.length < 2) throw new Error('coordinates must be an array of two or more positions');\n    // Check if first point of LineString contains two numbers\n    if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<number>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var fc = {type: 'FeatureCollection'};\n    if (id) fc.id = id;\n    if (bbox) fc.bbox = bbox;\n    fc.features = features;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, options);\n}\n\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {string} originalUnit of the length\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (length === null || length === undefined) throw new Error('length is required');\n    if (!(length >= 0)) throw new Error('length must be a positive number');\n\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit || 'kilometers');\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {string} [originalUnit='meters'] of the distance\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\n\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) throw new Error('bbox is required');\n    if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');\n    if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) throw new Error('bbox must only contain numbers');\n    });\n}\n\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) throw new Error('id is required');\n    if (['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n}\n\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error('method has been renamed to `radiansToDegrees`');\n}\n\nfunction degrees2radians() {\n    throw new Error('method has been renamed to `degreesToRadians`');\n}\n\nfunction distanceToDegrees() {\n    throw new Error('method has been renamed to `lengthToDegrees`');\n}\n\nfunction distanceToRadians() {\n    throw new Error('method has been renamed to `lengthToRadians`');\n}\n\nfunction radiansToDistance() {\n    throw new Error('method has been renamed to `radiansToLength`');\n}\n\nfunction bearingToAngle() {\n    throw new Error('method has been renamed to `bearingToAzimuth`');\n}\n\nfunction convertDistance() {\n    throw new Error('method has been renamed to `convertLength`');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _Snapping = __webpack_require__(5);\n\nvar _Snapping2 = _interopRequireDefault(_Snapping);\n\nvar _Drag = __webpack_require__(26);\n\nvar _Drag2 = _interopRequireDefault(_Drag);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Edit = L.Class.extend({\n    includes: [_Drag2.default, _Snapping2.default],\n    options: {\n        snappable: true,\n        snapDistance: 20,\n        allowSelfIntersection: true,\n        draggable: true\n    },\n    isPolygon: function isPolygon() {\n        // if it's a polygon, it means the coordinates array is multi dimensional\n        return this._layer instanceof L.Polygon;\n    }\n});\n\nexports.default = Edit;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9qcy9FZGl0L0wuUE0uRWRpdC5qcz8yYzg0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1NuYXBwaW5nID0gcmVxdWlyZSgnLi4vTWl4aW5zL1NuYXBwaW5nJyk7XG5cbnZhciBfU25hcHBpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU25hcHBpbmcpO1xuXG52YXIgX0RyYWcgPSByZXF1aXJlKCcuLi9NaXhpbnMvRHJhZycpO1xuXG52YXIgX0RyYWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRHJhZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBFZGl0ID0gTC5DbGFzcy5leHRlbmQoe1xuICAgIGluY2x1ZGVzOiBbX0RyYWcyLmRlZmF1bHQsIF9TbmFwcGluZzIuZGVmYXVsdF0sXG4gICAgb3B0aW9uczoge1xuICAgICAgICBzbmFwcGFibGU6IHRydWUsXG4gICAgICAgIHNuYXBEaXN0YW5jZTogMjAsXG4gICAgICAgIGFsbG93U2VsZkludGVyc2VjdGlvbjogdHJ1ZSxcbiAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBpc1BvbHlnb246IGZ1bmN0aW9uIGlzUG9seWdvbigpIHtcbiAgICAgICAgLy8gaWYgaXQncyBhIHBvbHlnb24sIGl0IG1lYW5zIHRoZSBjb29yZGluYXRlcyBhcnJheSBpcyBtdWx0aSBkaW1lbnNpb25hbFxuICAgICAgICByZXR1cm4gdGhpcy5fbGF5ZXIgaW5zdGFuY2VvZiBMLlBvbHlnb247XG4gICAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEVkaXQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvRWRpdC9MLlBNLkVkaXQuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return coordEach; });\n/* unused harmony export coordReduce */\n/* unused harmony export propEach */\n/* unused harmony export propReduce */\n/* unused harmony export featureEach */\n/* unused harmony export featureReduce */\n/* unused harmony export coordAll */\n/* unused harmony export geomEach */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return geomReduce; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return flattenEach; });\n/* unused harmony export flattenReduce */\n/* unused harmony export segmentEach */\n/* unused harmony export segmentReduce */\n/* unused harmony export lineEach */\n/* unused harmony export lineReduce */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_helpers__ = __webpack_require__(1);\n\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n                            coordIndex++;\n                        }\n                        if (geomType === 'Polygon') geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    coordEach(geometry.geometries[j], callback, excludeWrapCoord);\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            callback(geojson.features[i].properties, i);\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            callback(geojson.features[i], i);\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                callback(null, featureIndex, featureProperties, featureBBox, featureId);\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                callback(geometry, featureIndex, featureProperties, featureBBox, featureId);\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId);\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            callback(Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"a\" /* feature */])(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0);\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        geometry.coordinates.forEach(function (coordinate, multiFeatureIndex) {\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            callback(Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"a\" /* feature */])(geom, properties), featureIndex, multiFeatureIndex);\n        });\n\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature$$1.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature$$1.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        coordReduce(feature$$1, function (previousCoords, currentCoord, coordIndex, featureIndexCoord, mutliPartIndexCoord, geometryIndex) {\n            var currentSegment = Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"d\" /* lineString */])([previousCoords, currentCoord], feature$$1.properties);\n            callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n            segmentIndex++;\n            return currentCoord;\n        });\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n        if (feature$$1.geometry === null) return;\n        var type = feature$$1.geometry.type;\n        var coords = feature$$1.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            callback(feature$$1, featureIndex, multiFeatureIndex, 0, 0);\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                callback(Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"d\" /* lineString */])(coords[geometryIndex], feature$$1.properties), featureIndex, multiFeatureIndex, geometryIndex);\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export getCoord */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getCoords; });\n/* unused harmony export containsNumber */\n/* unused harmony export geojsonType */\n/* unused harmony export featureOf */\n/* unused harmony export collectionOf */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return getGeom; });\n/* unused harmony export getGeomType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return getType; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_helpers__ = __webpack_require__(1);\n\n\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} obj Object\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(obj) {\n    if (!obj) throw new Error('obj is required');\n\n    var coordinates = getCoords(obj);\n\n    // getCoord() must contain at least two numbers (Point)\n    if (coordinates.length > 1 && Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"b\" /* isNumber */])(coordinates[0]) && Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"b\" /* isNumber */])(coordinates[1])) {\n        return coordinates;\n    } else {\n        throw new Error('Coordinate is not a valid Point');\n    }\n}\n\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array of numbers\n *\n * @name getCoords\n * @param {Array<number>|Geometry|Feature} obj Object\n * @returns {Array<number>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coord = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords(obj) {\n    if (!obj) throw new Error('obj is required');\n    var coordinates;\n\n    // Array of numbers\n    if (obj.length) {\n        coordinates = obj;\n\n    // Geometry Object\n    } else if (obj.coordinates) {\n        coordinates = obj.coordinates;\n\n    // Feature\n    } else if (obj.geometry && obj.geometry.coordinates) {\n        coordinates = obj.geometry.coordinates;\n    }\n    // Checks if coordinates contains a number\n    if (coordinates) {\n        containsNumber(coordinates);\n        return coordinates;\n    }\n    throw new Error('No valid coordinates');\n}\n\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates) {\n    if (coordinates.length > 1 && Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"b\" /* isNumber */])(coordinates[0]) && Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"b\" /* isNumber */])(coordinates[1])) {\n        return true;\n    }\n\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error('coordinates must only contain numbers');\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) throw new Error('type and name required');\n\n    if (!value || value.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!feature) throw new Error('No feature passed');\n    if (!name) throw new Error('.featureOf() requires a name');\n    if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n        throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featureCollection, type, name) {\n    if (!featureCollection) throw new Error('No featureCollection passed');\n    if (!name) throw new Error('.collectionOf() requires a name');\n    if (!featureCollection || featureCollection.type !== 'FeatureCollection') {\n        throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n    }\n    for (var i = 0; i < featureCollection.features.length; i++) {\n        var feature = featureCollection.features[i];\n        if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n            throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n        }\n    }\n}\n\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom(geojson) {\n    if (!geojson) throw new Error('geojson is required');\n    if (geojson.geometry !== undefined) return geojson.geometry;\n    if (geojson.coordinates || geojson.geometries) return geojson;\n    throw new Error('geojson must be a valid Feature or Geometry Object');\n}\n\n/**\n * Get Geometry Type from Feature or Geometry Object\n *\n * @throws {Error} **DEPRECATED** in v5.0.0 in favor of getType\n */\nfunction getGeomType() {\n    throw new Error('invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType');\n}\n\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name] name of the variable to display in error message\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(geojson, name) {\n    if (!geojson) throw new Error((name || 'geojson') + ' is required');\n    // GeoJSON Feature & GeometryCollection\n    if (geojson.geometry && geojson.geometry.type) return geojson.geometry.type;\n    // GeoJSON Geometry & FeatureCollection\n    if (geojson.type) return geojson.type;\n    throw new Error((name || 'geojson') + ' is invalid');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar SnapMixin = {\n    _initSnappableMarkers: function _initSnappableMarkers() {\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        if (this.isPolygon()) {\n            // coords is a multidimansional array, handle all rings\n            this._markers.map(this._assignEvents, this);\n        } else {\n            // coords is one dimensional, handle the ring\n            this._assignEvents(this._markers);\n        }\n\n        this._layer.off('pm:dragstart', this._unsnap, this);\n        this._layer.on('pm:dragstart', this._unsnap, this);\n    },\n    _assignEvents: function _assignEvents(markerArr) {\n        var _this = this;\n\n        // loop through marker array and assign events to the markers\n        markerArr.forEach(function (marker) {\n            marker.off('drag', _this._handleSnapping, _this);\n            marker.on('drag', _this._handleSnapping, _this);\n\n            marker.off('dragend', _this._cleanupSnapping, _this);\n            marker.on('dragend', _this._cleanupSnapping, _this);\n        });\n    },\n    _unsnap: function _unsnap() {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping: function _cleanupSnapping() {\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        // remove map event\n        this._map.off('pm:remove', this._handleSnapLayerRemoval, this);\n\n        if (this.debugIndicatorLines) {\n            this.debugIndicatorLines.forEach(function (line) {\n                line.remove();\n            });\n        }\n    },\n    _handleSnapLayerRemoval: function _handleSnapLayerRemoval(_ref) {\n        var layer = _ref.layer;\n\n        // find the layers index in snaplist\n        var index = this._snapList.findIndex(function (e) {\n            return e._leaflet_id === layer._leaflet_id;\n        });\n        // remove it from the snaplist\n        this._snapList.splice(index, 1);\n    },\n    _handleSnapping: function _handleSnapping(e) {\n        var _this2 = this;\n\n        // if snapping is disabled via holding ALT during drag, stop right here\n        if (e.originalEvent.altKey) {\n            return false;\n        }\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if (this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        // if there are no layers to snap to, stop here\n        if (this._snapList.length <= 0) {\n            return false;\n        }\n\n        var marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        var closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        var isMarker = closestLayer.layer instanceof L.Marker || closestLayer.layer instanceof L.CircleMarker;\n\n        // find the final latlng that we want to snap to\n        var snapLatLng = void 0;\n        if (!isMarker) {\n            snapLatLng = this._checkPrioritiySnapping(closestLayer);\n        } else {\n            snapLatLng = closestLayer.latlng;\n        }\n\n        // minimal distance before marker snaps (in pixels)\n        var minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        var eventInfo = {\n            marker: marker,\n            snapLatLng: snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._layer,\n            layerInteractedWith: closestLayer.layer // for lack of a better property name\n        };\n\n        if (closestLayer.distance < minDistance) {\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n\n            marker._snapped = true;\n\n            var triggerSnap = function triggerSnap() {\n                _this2._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                _this2._layer.fire('pm:snap', eventInfo);\n            };\n\n            // check if the snapping position differs from the last snap\n            // Thanks Max & car2go Team\n            var a = this._snapLatLng || {};\n            var b = snapLatLng || {};\n\n            if (a.lat !== b.lat || a.lng !== b.lng) {\n                triggerSnap();\n            }\n        } else if (this._snapLatLng) {\n            // no more snapping\n\n            // if it was previously snapped...\n            // ...unsnap\n            this._unsnap(eventInfo);\n\n            marker._snapped = false;\n\n            // and fire unsnap event\n            eventInfo.marker.fire('pm:unsnap', eventInfo);\n            this._layer.fire('pm:unsnap', eventInfo);\n        }\n\n        return true;\n    },\n\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping: function _checkPrioritiySnapping(closestLayer) {\n        var map = this._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        var A = closestLayer.segment[0];\n        var B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        var C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        var distanceAC = this._getDistance(map, A, C);\n        var distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        var closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        var shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        var priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        var snapLatlng = void 0;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if (shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = C;\n        }\n\n        // return the copy of snapping point\n        return Object.assign({}, snapLatlng);\n    },\n    _createSnapList: function _createSnapList() {\n        var _this3 = this;\n\n        var layers = [];\n        var debugIndicatorLines = [];\n        var map = this._map;\n\n        // find all layers that are or inherit from Polylines... and markers that are not\n        // temporary markers of polygon-edits\n        map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline || layer instanceof L.Marker || layer instanceof L.CircleMarker) {\n                layers.push(layer);\n\n                map.off('pm:remove', _this3._handleSnapLayerRemoval, _this3);\n                map.on('pm:remove', _this3._handleSnapLayerRemoval, _this3);\n\n                // this is for debugging\n                var debugLine = L.polyline([], { color: 'red', pmIgnore: true });\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this line to show helper lines for debugging\n                // debugLine.addTo(map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter(function (layer) {\n            return _this3._layer !== layer;\n        });\n\n        // also remove everything that has no coordinates yet\n        layers = layers.filter(function (layer) {\n            return layer._latlng || layer._latlngs && layer._latlngs.length > 0;\n        });\n\n        // finally remove everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(function (layer) {\n            return !layer._pmTempLayer;\n        });\n\n        // save snaplist from layers and the other snap layers added from other classes/scripts\n        if (this._otherSnapLayers) {\n            this._snapList = layers.concat(this._otherSnapLayers);\n        } else {\n            this._snapList = layers;\n        }\n\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer: function _calcClosestLayer(latlng, layers) {\n        var _this4 = this;\n\n        // the closest polygon to our dragged marker latlng\n        var closestLayer = {};\n\n        // loop through the layers\n        layers.forEach(function (layer, index) {\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            var results = _this4._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            _this4.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if (closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n        });\n\n        // return the closest layer and it's data\n        // if there is no closest layer, return undefined\n        return closestLayer;\n    },\n    _calcLayerDistances: function _calcLayerDistances(latlng, layer) {\n        var _this5 = this;\n\n        var map = this._map;\n\n        // is this a polyline, marker or polygon?\n        var isPolygon = layer instanceof L.Polygon;\n        var isPolyline = !(layer instanceof L.Polygon) && layer instanceof L.Polyline;\n        var isMarker = layer instanceof L.Marker || layer instanceof L.CircleMarker;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        var P = latlng;\n\n        var coords = void 0;\n\n        // the coords of the layer\n        if (isPolygon) {\n            // polygon\n            coords = layer.getLatLngs()[0];\n        } else if (isPolyline) {\n            // polyline\n            coords = layer.getLatLngs();\n        } else if (isMarker) {\n            // marker\n            coords = layer.getLatLng();\n\n            // return the info for the marker, no more calculations needed\n            return {\n                latlng: Object.assign({}, coords),\n                distance: this._getDistance(map, coords, P)\n            };\n        }\n\n        // the closest segment (line between two points) of the layer\n        var closestSegment = void 0;\n\n        // the shortest distance from P to closestSegment\n        var shortestDistance = void 0;\n\n        // loop through the coords of the layer\n        coords.forEach(function (coord, index) {\n            // take this coord (A)...\n            var A = coord;\n            var nextIndex = void 0;\n\n            // and the next coord (B) as points\n            if (isPolygon) {\n                nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            } else {\n                nextIndex = index + 1 === coords.length ? undefined : index + 1;\n            }\n\n            var B = coords[nextIndex];\n\n            if (B) {\n                // calc the distance between P and AB-segment\n                var distance = _this5._getDistanceToSegment(map, P, A, B);\n\n                // is the distance shorter than the previous one? Save it and the segment\n                if (shortestDistance === undefined || distance < shortestDistance) {\n                    shortestDistance = distance;\n                    closestSegment = [A, B];\n                }\n            }\n\n            return true;\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        var C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: Object.assign({}, C),\n            segment: closestSegment,\n            distance: shortestDistance\n        };\n    },\n    _getClosestPointOnSegment: function _getClosestPointOnSegment(map, latlng, latlngA, latlngB) {\n        var maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        var P = map.project(latlng, maxzoom);\n        var A = map.project(latlngA, maxzoom);\n        var B = map.project(latlngB, maxzoom);\n        var closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment: function _getDistanceToSegment(map, latlng, latlngA, latlngB) {\n        var P = map.latLngToLayerPoint(latlng);\n        var A = map.latLngToLayerPoint(latlngA);\n        var B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance: function _getDistance(map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    }\n};\n\nexports.default = SnapMixin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_helpers__ = __webpack_require__(1);\n\n\n/**\n * Takes a {@link LineString|linestring}, {@link MultiLineString|multi-linestring}, {@link MultiPolygon|multi-polygon}, or {@link Polygon|polygon} and returns {@link Point|points} at all self-intersections.\n *\n * @name kinks\n * @param {Feature<LineString|MultiLineString|MultiPolygon|Polygon>} featureIn input feature\n * @returns {FeatureCollection<Point>} self-intersections\n * @example\n * var poly = turf.polygon([[\n *   [-12.034835, 8.901183],\n *   [-12.060413, 8.899826],\n *   [-12.03638, 8.873199],\n *   [-12.059383, 8.871418],\n *   [-12.034835, 8.901183]\n * ]]);\n *\n * var kinks = turf.kinks(poly);\n *\n * //addToMap\n * var addToMap = [poly, kinks]\n */\nfunction kinks(featureIn) {\n    var coordinates;\n    var feature;\n    var results = {\n        type: 'FeatureCollection',\n        features: []\n    };\n    if (featureIn.type === 'Feature') {\n        feature = featureIn.geometry;\n    } else {\n        feature = featureIn;\n    }\n    if (feature.type === 'LineString') {\n        coordinates = [feature.coordinates];\n    } else if (feature.type === 'MultiLineString') {\n        coordinates = feature.coordinates;\n    } else if (feature.type === 'MultiPolygon') {\n        coordinates = [].concat.apply([], feature.coordinates);\n    } else if (feature.type === 'Polygon') {\n        coordinates = feature.coordinates;\n    } else {\n        throw new Error('Input must be a LineString, MultiLineString, ' +\n            'Polygon, or MultiPolygon Feature or Geometry');\n    }\n    coordinates.forEach(function (line1) {\n        coordinates.forEach(function (line2) {\n            for (var i = 0; i < line1.length - 1; i++) {\n                // start iteration at i, intersections for k < i have already been checked in previous outer loop iterations\n                for (var k = i; k < line2.length - 1; k++) {\n                    if (line1 === line2) {\n                        // segments are adjacent and always share a vertex, not a kink\n                        if (Math.abs(i - k) === 1) {\n                            continue;\n                        }\n                        // first and last segment in a closed lineString or ring always share a vertex, not a kink\n                        if (\n                            // segments are first and last segment of lineString\n                            i === 0 &&\n                            k === line1.length - 2 &&\n                            // lineString is closed\n                            line1[i][0] === line1[line1.length - 1][0] &&\n                            line1[i][1] === line1[line1.length - 1][1]\n                        ) {\n                            continue;\n                        }\n                    }\n\n                    var intersection = lineIntersects(line1[i][0], line1[i][1], line1[i + 1][0], line1[i + 1][1],\n                        line2[k][0], line2[k][1], line2[k + 1][0], line2[k + 1][1]);\n                    if (intersection) {\n                        results.features.push(Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"e\" /* point */])([intersection[0], intersection[1]]));\n                    }\n                }\n            }\n        });\n    });\n    return results;\n}\n\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n    var denominator, a, b, numerator1, numerator2,\n        result = {\n            x: null,\n            y: null,\n            onLine1: false,\n            onLine2: false\n        };\n    denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n    if (denominator === 0) {\n        if (result.x !== null && result.y !== null) {\n            return result;\n        } else {\n            return false;\n        }\n    }\n    a = line1StartY - line2StartY;\n    b = line1StartX - line2StartX;\n    numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n    numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n    a = numerator1 / denominator;\n    b = numerator2 / denominator;\n\n    // if we cast these lines infinitely in both directions, they intersect here:\n    result.x = line1StartX + (a * (line1EndX - line1StartX));\n    result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n    // if line1 is a segment and line2 is infinite, they intersect if:\n    if (a >= 0 && a <= 1) {\n        result.onLine1 = true;\n    }\n    // if line2 is a segment and line1 is infinite, they intersect if:\n    if (b >= 0 && b <= 1) {\n        result.onLine2 = true;\n    }\n    // if line1 and line2 are segments, they intersect if both of the above are true\n    if (result.onLine1 && result.onLine2) {\n        return [result.x, result.y];\n    } else {\n        return false;\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (kinks);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(t,e){ true?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e(t.jsts={})}(this,function(t){\"use strict\";function e(){}function n(t){this.message=t||\"\"}function i(t){this.message=t||\"\"}function r(){}function o(t){return null===t?Mt:t.color}function s(t){return null===t?null:t.parent}function a(t,e){null!==t&&(t.color=e)}function u(t){return null===t?null:t.left}function l(t){return null===t?null:t.right}function c(){this.root_=null,this.size_=0}function p(){}function h(){this.array_=[],arguments[0]instanceof vt&&this.addAll(arguments[0])}function f(){}function g(t){this.message=t||\"\"}function d(){this.array_=[]}\"fill\"in Array.prototype||Object.defineProperty(Array.prototype,\"fill\",{configurable:!0,value:function(t){if(void 0===this||null===this)throw new TypeError(this+\" is not an object\");var e=Object(this),n=Math.max(Math.min(e.length,9007199254740991),0)||0,i=1 in arguments?parseInt(Number(arguments[1]),10)||0:0;i=i<0?Math.max(n+i,0):Math.min(i,n);var r=2 in arguments&&void 0!==arguments[2]?parseInt(Number(arguments[2]),10)||0:n;for(r=r<0?Math.max(n+arguments[2],0):Math.min(r,n);i<r;)e[i]=t,++i;return e},writable:!0}),Number.isFinite=Number.isFinite||function(t){return\"number\"==typeof t&&isFinite(t)},Number.isInteger=Number.isInteger||function(t){return\"number\"==typeof t&&isFinite(t)&&Math.floor(t)===t},Number.parseFloat=Number.parseFloat||parseFloat,Number.isNaN=Number.isNaN||function(t){return t!=t},Math.trunc=Math.trunc||function(t){return t<0?Math.ceil(t):Math.floor(t)};var y=function(){};y.prototype.interfaces_=function(){return[]},y.prototype.getClass=function(){return y},y.prototype.equalsWithTolerance=function(t,e,n){return Math.abs(t-e)<=n};var _=function(){},m=function(){},v={MAX_VALUE:{configurable:!0}};m.isNaN=function(t){return Number.isNaN(t)},m.doubleToLongBits=function(t){return t},m.longBitsToDouble=function(t){return t},m.isInfinite=function(t){return!Number.isFinite(t)},v.MAX_VALUE.get=function(){return Number.MAX_VALUE},Object.defineProperties(m,v);var I=function(){},E=function(){},x=function(){},N=function t(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)this.x=0,this.y=0,this.z=t.NULL_ORDINATE;else if(1===arguments.length){var e=arguments[0];this.x=e.x,this.y=e.y,this.z=e.z}else 2===arguments.length?(this.x=arguments[0],this.y=arguments[1],this.z=t.NULL_ORDINATE):3===arguments.length&&(this.x=arguments[0],this.y=arguments[1],this.z=arguments[2])},C={DimensionalComparator:{configurable:!0},serialVersionUID:{configurable:!0},NULL_ORDINATE:{configurable:!0},X:{configurable:!0},Y:{configurable:!0},Z:{configurable:!0}};N.prototype.setOrdinate=function(t,e){switch(t){case N.X:this.x=e;break;case N.Y:this.y=e;break;case N.Z:this.z=e;break;default:throw new _(\"Invalid ordinate index: \"+t)}},N.prototype.equals2D=function(){if(1===arguments.length){var t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!y.equalsWithTolerance(this.x,e.x,n)&&!!y.equalsWithTolerance(this.y,e.y,n)}},N.prototype.getOrdinate=function(t){switch(t){case N.X:return this.x;case N.Y:return this.y;case N.Z:return this.z}throw new _(\"Invalid ordinate index: \"+t)},N.prototype.equals3D=function(t){return this.x===t.x&&this.y===t.y&&(this.z===t.z||m.isNaN(this.z))&&m.isNaN(t.z)},N.prototype.equals=function(t){return t instanceof N&&this.equals2D(t)},N.prototype.equalInZ=function(t,e){return y.equalsWithTolerance(this.z,t.z,e)},N.prototype.compareTo=function(t){var e=t;return this.x<e.x?-1:this.x>e.x?1:this.y<e.y?-1:this.y>e.y?1:0},N.prototype.clone=function(){},N.prototype.copy=function(){return new N(this)},N.prototype.toString=function(){return\"(\"+this.x+\", \"+this.y+\", \"+this.z+\")\"},N.prototype.distance3D=function(t){var e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return Math.sqrt(e*e+n*n+i*i)},N.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},N.prototype.hashCode=function(){var t=17;return t=37*t+N.hashCode(this.x),t=37*t+N.hashCode(this.y)},N.prototype.setCoordinate=function(t){this.x=t.x,this.y=t.y,this.z=t.z},N.prototype.interfaces_=function(){return[I,E,e]},N.prototype.getClass=function(){return N},N.hashCode=function(){if(1===arguments.length){var t=arguments[0],e=m.doubleToLongBits(t);return Math.trunc((e^e)>>>32)}},C.DimensionalComparator.get=function(){return S},C.serialVersionUID.get=function(){return 0x5cbf2c235c7e5800},C.NULL_ORDINATE.get=function(){return m.NaN},C.X.get=function(){return 0},C.Y.get=function(){return 1},C.Z.get=function(){return 2},Object.defineProperties(N,C);var S=function(t){if(this._dimensionsToTest=2,0===arguments.length);else if(1===arguments.length){var e=arguments[0];if(2!==e&&3!==e)throw new _(\"only 2 or 3 dimensions may be specified\");this._dimensionsToTest=e}};S.prototype.compare=function(t,e){var n=t,i=e,r=S.compare(n.x,i.x);if(0!==r)return r;var o=S.compare(n.y,i.y);if(0!==o)return o;if(this._dimensionsToTest<=2)return 0;return S.compare(n.z,i.z)},S.prototype.interfaces_=function(){return[x]},S.prototype.getClass=function(){return S},S.compare=function(t,e){return t<e?-1:t>e?1:m.isNaN(t)?m.isNaN(e)?0:-1:m.isNaN(e)?1:0};var L=function(){};L.prototype.create=function(){},L.prototype.interfaces_=function(){return[]},L.prototype.getClass=function(){return L};var b=function(){},w={INTERIOR:{configurable:!0},BOUNDARY:{configurable:!0},EXTERIOR:{configurable:!0},NONE:{configurable:!0}};b.prototype.interfaces_=function(){return[]},b.prototype.getClass=function(){return b},b.toLocationSymbol=function(t){switch(t){case b.EXTERIOR:return\"e\";case b.BOUNDARY:return\"b\";case b.INTERIOR:return\"i\";case b.NONE:return\"-\"}throw new _(\"Unknown location value: \"+t)},w.INTERIOR.get=function(){return 0},w.BOUNDARY.get=function(){return 1},w.EXTERIOR.get=function(){return 2},w.NONE.get=function(){return-1},Object.defineProperties(b,w);var O=function(t,e){return t.interfaces_&&t.interfaces_().indexOf(e)>-1},T=function(){},R={LOG_10:{configurable:!0}};T.prototype.interfaces_=function(){return[]},T.prototype.getClass=function(){return T},T.log10=function(t){var e=Math.log(t);return m.isInfinite(e)?e:m.isNaN(e)?e:e/T.LOG_10},T.min=function(t,e,n,i){var r=t;return e<r&&(r=e),n<r&&(r=n),i<r&&(r=i),r},T.clamp=function(){if(\"number\"==typeof arguments[2]&&\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],e=arguments[1],n=arguments[2];return t<e?e:t>n?n:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var i=arguments[0],r=arguments[1],o=arguments[2];return i<r?r:i>o?o:i}},T.wrap=function(t,e){return t<0?e- -t%e:t%e},T.max=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=t;return e>i&&(i=e),n>i&&(i=n),i}if(4===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3],u=r;return o>u&&(u=o),s>u&&(u=s),a>u&&(u=a),u}},T.average=function(t,e){return(t+e)/2},R.LOG_10.get=function(){return Math.log(10)},Object.defineProperties(T,R);var P=function(t){this.str=t};P.prototype.append=function(t){this.str+=t},P.prototype.setCharAt=function(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)},P.prototype.toString=function(t){return this.str};var D=function(t){this.value=t};D.prototype.intValue=function(){return this.value},D.prototype.compareTo=function(t){return this.value<t?-1:this.value>t?1:0},D.isNaN=function(t){return Number.isNaN(t)};var M=function(){};M.isWhitespace=function(t){return t<=32&&t>=0||127===t},M.toUpperCase=function(t){return t.toUpperCase()};var A=function t(){if(this._hi=0,this._lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if(\"number\"==typeof arguments[0]){var e=arguments[0];this.init(e)}else if(arguments[0]instanceof t){var n=arguments[0];this.init(n)}else if(\"string\"==typeof arguments[0]){var i=arguments[0];t.call(this,t.parse(i))}}else if(2===arguments.length){var r=arguments[0],o=arguments[1];this.init(r,o)}},F={PI:{configurable:!0},TWO_PI:{configurable:!0},PI_2:{configurable:!0},E:{configurable:!0},NaN:{configurable:!0},EPS:{configurable:!0},SPLIT:{configurable:!0},MAX_PRINT_DIGITS:{configurable:!0},TEN:{configurable:!0},ONE:{configurable:!0},SCI_NOT_EXPONENT_CHAR:{configurable:!0},SCI_NOT_ZERO:{configurable:!0}};A.prototype.le=function(t){return(this._hi<t._hi||this._hi===t._hi)&&this._lo<=t._lo},A.prototype.extractSignificantDigits=function(t,e){var n=this.abs(),i=A.magnitude(n._hi),r=A.TEN.pow(i);(n=n.divide(r)).gt(A.TEN)?(n=n.divide(A.TEN),i+=1):n.lt(A.ONE)&&(n=n.multiply(A.TEN),i-=1);for(var o=i+1,s=new P,a=A.MAX_PRINT_DIGITS-1,u=0;u<=a;u++){t&&u===o&&s.append(\".\");var l=Math.trunc(n._hi);if(l<0)break;var c=!1,p=0;l>9?(c=!0,p=\"9\"):p=\"0\"+l,s.append(p),n=n.subtract(A.valueOf(l)).multiply(A.TEN),c&&n.selfAdd(A.TEN);var h=!0,f=A.magnitude(n._hi);if(f<0&&Math.abs(f)>=a-u&&(h=!1),!h)break}return e[0]=i,s.toString()},A.prototype.sqr=function(){return this.multiply(this)},A.prototype.doubleValue=function(){return this._hi+this._lo},A.prototype.subtract=function(){if(arguments[0]instanceof A){var t=arguments[0];return this.add(t.negate())}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.add(-e)}},A.prototype.equals=function(){if(1===arguments.length){var t=arguments[0];return this._hi===t._hi&&this._lo===t._lo}},A.prototype.isZero=function(){return 0===this._hi&&0===this._lo},A.prototype.selfSubtract=function(){if(arguments[0]instanceof A){var t=arguments[0];return this.isNaN()?this:this.selfAdd(-t._hi,-t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.isNaN()?this:this.selfAdd(-e,0)}},A.prototype.getSpecialNumberString=function(){return this.isZero()?\"0.0\":this.isNaN()?\"NaN \":null},A.prototype.min=function(t){return this.le(t)?this:t},A.prototype.selfDivide=function(){if(1===arguments.length){if(arguments[0]instanceof A){var t=arguments[0];return this.selfDivide(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.selfDivide(e,0)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1],r=null,o=null,s=null,a=null,u=null,l=null,c=null,p=null;return u=this._hi/n,l=A.SPLIT*u,r=l-u,p=A.SPLIT*n,r=l-r,o=u-r,s=p-n,c=u*n,s=p-s,a=n-s,p=r*s-c+r*a+o*s+o*a,l=(this._hi-c-p+this._lo-u*i)/n,p=u+l,this._hi=p,this._lo=u-p+l,this}},A.prototype.dump=function(){return\"DD<\"+this._hi+\", \"+this._lo+\">\"},A.prototype.divide=function(){if(arguments[0]instanceof A){var t=arguments[0],e=null,n=null,i=null,r=null,o=null,s=null,a=null,u=null;n=(o=this._hi/t._hi)-(e=(s=A.SPLIT*o)-(e=s-o)),u=e*(i=(u=A.SPLIT*t._hi)-(i=u-t._hi))-(a=o*t._hi)+e*(r=t._hi-i)+n*i+n*r,s=(this._hi-a-u+this._lo-o*t._lo)/t._hi;return new A(u=o+s,o-u+s)}if(\"number\"==typeof arguments[0]){var l=arguments[0];return m.isNaN(l)?A.createNaN():A.copy(this).selfDivide(l,0)}},A.prototype.ge=function(t){return(this._hi>t._hi||this._hi===t._hi)&&this._lo>=t._lo},A.prototype.pow=function(t){if(0===t)return A.valueOf(1);var e=new A(this),n=A.valueOf(1),i=Math.abs(t);if(i>1)for(;i>0;)i%2==1&&n.selfMultiply(e),(i/=2)>0&&(e=e.sqr());else n=e;return t<0?n.reciprocal():n},A.prototype.ceil=function(){if(this.isNaN())return A.NaN;var t=Math.ceil(this._hi),e=0;return t===this._hi&&(e=Math.ceil(this._lo)),new A(t,e)},A.prototype.compareTo=function(t){var e=t;return this._hi<e._hi?-1:this._hi>e._hi?1:this._lo<e._lo?-1:this._lo>e._lo?1:0},A.prototype.rint=function(){if(this.isNaN())return this;return this.add(.5).floor()},A.prototype.setValue=function(){if(arguments[0]instanceof A){var t=arguments[0];return this.init(t),this}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.init(e),this}},A.prototype.max=function(t){return this.ge(t)?this:t},A.prototype.sqrt=function(){if(this.isZero())return A.valueOf(0);if(this.isNegative())return A.NaN;var t=1/Math.sqrt(this._hi),e=this._hi*t,n=A.valueOf(e),i=this.subtract(n.sqr())._hi*(.5*t);return n.add(i)},A.prototype.selfAdd=function(){if(1===arguments.length){if(arguments[0]instanceof A){var t=arguments[0];return this.selfAdd(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0],n=null,i=null,r=null,o=null,s=null,a=null;return r=this._hi+e,s=r-this._hi,o=r-s,o=e-s+(this._hi-o),a=o+this._lo,n=r+a,i=a+(r-n),this._hi=n+i,this._lo=i+(n-this._hi),this}}else if(2===arguments.length){var u=arguments[0],l=arguments[1],c=null,p=null,h=null,f=null,g=null,d=null,y=null;f=this._hi+u,p=this._lo+l,g=f-(d=f-this._hi),h=p-(y=p-this._lo);var _=(c=f+(d=(g=u-d+(this._hi-g))+p))+(d=(h=l-y+(this._lo-h))+(d+(f-c))),m=d+(c-_);return this._hi=_,this._lo=m,this}},A.prototype.selfMultiply=function(){if(1===arguments.length){if(arguments[0]instanceof A){var t=arguments[0];return this.selfMultiply(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.selfMultiply(e,0)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1],r=null,o=null,s=null,a=null,u=null,l=null;r=(u=A.SPLIT*this._hi)-this._hi,l=A.SPLIT*n,r=u-r,o=this._hi-r,s=l-n;var c=(u=this._hi*n)+(l=r*(s=l-s)-u+r*(a=n-s)+o*s+o*a+(this._hi*i+this._lo*n)),p=l+(r=u-c);return this._hi=c,this._lo=p,this}},A.prototype.selfSqr=function(){return this.selfMultiply(this)},A.prototype.floor=function(){if(this.isNaN())return A.NaN;var t=Math.floor(this._hi),e=0;return t===this._hi&&(e=Math.floor(this._lo)),new A(t,e)},A.prototype.negate=function(){return this.isNaN()?this:new A(-this._hi,-this._lo)},A.prototype.clone=function(){},A.prototype.multiply=function(){if(arguments[0]instanceof A){var t=arguments[0];return t.isNaN()?A.createNaN():A.copy(this).selfMultiply(t)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return m.isNaN(e)?A.createNaN():A.copy(this).selfMultiply(e,0)}},A.prototype.isNaN=function(){return m.isNaN(this._hi)},A.prototype.intValue=function(){return Math.trunc(this._hi)},A.prototype.toString=function(){var t=A.magnitude(this._hi);return t>=-3&&t<=20?this.toStandardNotation():this.toSciNotation()},A.prototype.toStandardNotation=function(){var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!0,e),i=e[0]+1,r=n;if(\".\"===n.charAt(0))r=\"0\"+n;else if(i<0)r=\"0.\"+A.stringOfChar(\"0\",-i)+n;else if(-1===n.indexOf(\".\")){var o=i-n.length;r=n+A.stringOfChar(\"0\",o)+\".0\"}return this.isNegative()?\"-\"+r:r},A.prototype.reciprocal=function(){var t=null,e=null,n=null,i=null,r=null,o=null,s=null,a=null;e=(r=1/this._hi)-(t=(o=A.SPLIT*r)-(t=o-r)),n=(a=A.SPLIT*this._hi)-this._hi;var u=r+(o=(1-(s=r*this._hi)-(a=t*(n=a-n)-s+t*(i=this._hi-n)+e*n+e*i)-r*this._lo)/this._hi);return new A(u,r-u+o)},A.prototype.toSciNotation=function(){if(this.isZero())return A.SCI_NOT_ZERO;var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!1,e),i=A.SCI_NOT_EXPONENT_CHAR+e[0];if(\"0\"===n.charAt(0))throw new Error(\"Found leading zero: \"+n);var r=\"\";n.length>1&&(r=n.substring(1));var o=n.charAt(0)+\".\"+r;return this.isNegative()?\"-\"+o+i:o+i},A.prototype.abs=function(){return this.isNaN()?A.NaN:this.isNegative()?this.negate():new A(this)},A.prototype.isPositive=function(){return(this._hi>0||0===this._hi)&&this._lo>0},A.prototype.lt=function(t){return(this._hi<t._hi||this._hi===t._hi)&&this._lo<t._lo},A.prototype.add=function(){if(arguments[0]instanceof A){var t=arguments[0];return A.copy(this).selfAdd(t)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return A.copy(this).selfAdd(e)}},A.prototype.init=function(){if(1===arguments.length){if(\"number\"==typeof arguments[0]){var t=arguments[0];this._hi=t,this._lo=0}else if(arguments[0]instanceof A){var e=arguments[0];this._hi=e._hi,this._lo=e._lo}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this._hi=n,this._lo=i}},A.prototype.gt=function(t){return(this._hi>t._hi||this._hi===t._hi)&&this._lo>t._lo},A.prototype.isNegative=function(){return(this._hi<0||0===this._hi)&&this._lo<0},A.prototype.trunc=function(){return this.isNaN()?A.NaN:this.isPositive()?this.floor():this.ceil()},A.prototype.signum=function(){return this._hi>0?1:this._hi<0?-1:this._lo>0?1:this._lo<0?-1:0},A.prototype.interfaces_=function(){return[e,I,E]},A.prototype.getClass=function(){return A},A.sqr=function(t){return A.valueOf(t).selfMultiply(t)},A.valueOf=function(){if(\"string\"==typeof arguments[0]){var t=arguments[0];return A.parse(t)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return new A(e)}},A.sqrt=function(t){return A.valueOf(t).sqrt()},A.parse=function(t){for(var e=0,n=t.length;M.isWhitespace(t.charAt(e));)e++;var i=!1;if(e<n){var r=t.charAt(e);\"-\"!==r&&\"+\"!==r||(e++,\"-\"===r&&(i=!0))}for(var o=new A,s=0,a=0,u=0;!(e>=n);){var l=t.charAt(e);if(e++,M.isDigit(l)){var c=l-\"0\";o.selfMultiply(A.TEN),o.selfAdd(c),s++}else{if(\".\"!==l){if(\"e\"===l||\"E\"===l){var p=t.substring(e);try{u=D.parseInt(p)}catch(e){throw e instanceof Error?new Error(\"Invalid exponent \"+p+\" in string \"+t):e}break}throw new Error(\"Unexpected character '\"+l+\"' at position \"+e+\" in string \"+t)}a=s}}var h=o,f=s-a-u;if(0===f)h=o;else if(f>0){var g=A.TEN.pow(f);h=o.divide(g)}else if(f<0){var d=A.TEN.pow(-f);h=o.multiply(d)}return i?h.negate():h},A.createNaN=function(){return new A(m.NaN,m.NaN)},A.copy=function(t){return new A(t)},A.magnitude=function(t){var e=Math.abs(t),n=Math.log(e)/Math.log(10),i=Math.trunc(Math.floor(n));return 10*Math.pow(10,i)<=e&&(i+=1),i},A.stringOfChar=function(t,e){for(var n=new P,i=0;i<e;i++)n.append(t);return n.toString()},F.PI.get=function(){return new A(3.141592653589793,1.2246467991473532e-16)},F.TWO_PI.get=function(){return new A(6.283185307179586,2.4492935982947064e-16)},F.PI_2.get=function(){return new A(1.5707963267948966,6.123233995736766e-17)},F.E.get=function(){return new A(2.718281828459045,1.4456468917292502e-16)},F.NaN.get=function(){return new A(m.NaN,m.NaN)},F.EPS.get=function(){return 1.23259516440783e-32},F.SPLIT.get=function(){return 134217729},F.MAX_PRINT_DIGITS.get=function(){return 32},F.TEN.get=function(){return A.valueOf(10)},F.ONE.get=function(){return A.valueOf(1)},F.SCI_NOT_EXPONENT_CHAR.get=function(){return\"E\"},F.SCI_NOT_ZERO.get=function(){return\"0.0E0\"},Object.defineProperties(A,F);var G=function(){},q={DP_SAFE_EPSILON:{configurable:!0}};G.prototype.interfaces_=function(){return[]},G.prototype.getClass=function(){return G},G.orientationIndex=function(t,e,n){var i=G.orientationIndexFilter(t,e,n);if(i<=1)return i;var r=A.valueOf(e.x).selfAdd(-t.x),o=A.valueOf(e.y).selfAdd(-t.y),s=A.valueOf(n.x).selfAdd(-e.x),a=A.valueOf(n.y).selfAdd(-e.y);return r.selfMultiply(a).selfSubtract(o.selfMultiply(s)).signum()},G.signOfDet2x2=function(t,e,n,i){return t.multiply(i).selfSubtract(e.multiply(n)).signum()},G.intersection=function(t,e,n,i){var r=A.valueOf(i.y).selfSubtract(n.y).selfMultiply(A.valueOf(e.x).selfSubtract(t.x)),o=A.valueOf(i.x).selfSubtract(n.x).selfMultiply(A.valueOf(e.y).selfSubtract(t.y)),s=r.subtract(o),a=A.valueOf(i.x).selfSubtract(n.x).selfMultiply(A.valueOf(t.y).selfSubtract(n.y)),u=A.valueOf(i.y).selfSubtract(n.y).selfMultiply(A.valueOf(t.x).selfSubtract(n.x)),l=a.subtract(u).selfDivide(s).doubleValue(),c=A.valueOf(t.x).selfAdd(A.valueOf(e.x).selfSubtract(t.x).selfMultiply(l)).doubleValue(),p=A.valueOf(e.x).selfSubtract(t.x).selfMultiply(A.valueOf(t.y).selfSubtract(n.y)),h=A.valueOf(e.y).selfSubtract(t.y).selfMultiply(A.valueOf(t.x).selfSubtract(n.x)),f=p.subtract(h).selfDivide(s).doubleValue(),g=A.valueOf(n.y).selfAdd(A.valueOf(i.y).selfSubtract(n.y).selfMultiply(f)).doubleValue();return new N(c,g)},G.orientationIndexFilter=function(t,e,n){var i=null,r=(t.x-n.x)*(e.y-n.y),o=(t.y-n.y)*(e.x-n.x),s=r-o;if(r>0){if(o<=0)return G.signum(s);i=r+o}else{if(!(r<0))return G.signum(s);if(o>=0)return G.signum(s);i=-r-o}var a=G.DP_SAFE_EPSILON*i;return s>=a||-s>=a?G.signum(s):2},G.signum=function(t){return t>0?1:t<0?-1:0},q.DP_SAFE_EPSILON.get=function(){return 1e-15},Object.defineProperties(G,q);var B=function(){},V={X:{configurable:!0},Y:{configurable:!0},Z:{configurable:!0},M:{configurable:!0}};V.X.get=function(){return 0},V.Y.get=function(){return 1},V.Z.get=function(){return 2},V.M.get=function(){return 3},B.prototype.setOrdinate=function(t,e,n){},B.prototype.size=function(){},B.prototype.getOrdinate=function(t,e){},B.prototype.getCoordinate=function(){},B.prototype.getCoordinateCopy=function(t){},B.prototype.getDimension=function(){},B.prototype.getX=function(t){},B.prototype.clone=function(){},B.prototype.expandEnvelope=function(t){},B.prototype.copy=function(){},B.prototype.getY=function(t){},B.prototype.toCoordinateArray=function(){},B.prototype.interfaces_=function(){return[E]},B.prototype.getClass=function(){return B},Object.defineProperties(B,V);var U=function(){},z=function(t){function e(){t.call(this,\"Projective point not representable on the Cartesian plane.\")}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(U),X=function(){};X.arraycopy=function(t,e,n,i,r){for(var o=0,s=e;s<e+r;s++)n[i+o]=t[s],o++},X.getProperty=function(t){return{\"line.separator\":\"\\n\"}[t]};var Y=function t(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){var e=arguments[0];this.x=e.x,this.y=e.y,this.w=1}else if(2===arguments.length){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var n=arguments[0],i=arguments[1];this.x=n,this.y=i,this.w=1}else if(arguments[0]instanceof t&&arguments[1]instanceof t){var r=arguments[0],o=arguments[1];this.x=r.y*o.w-o.y*r.w,this.y=o.x*r.w-r.x*o.w,this.w=r.x*o.y-o.x*r.y}else if(arguments[0]instanceof N&&arguments[1]instanceof N){var s=arguments[0],a=arguments[1];this.x=s.y-a.y,this.y=a.x-s.x,this.w=s.x*a.y-a.x*s.y}}else if(3===arguments.length){var u=arguments[0],l=arguments[1],c=arguments[2];this.x=u,this.y=l,this.w=c}else if(4===arguments.length){var p=arguments[0],h=arguments[1],f=arguments[2],g=arguments[3],d=p.y-h.y,y=h.x-p.x,_=p.x*h.y-h.x*p.y,m=f.y-g.y,v=g.x-f.x,I=f.x*g.y-g.x*f.y;this.x=y*I-v*_,this.y=m*_-d*I,this.w=d*v-m*y}};Y.prototype.getY=function(){var t=this.y/this.w;if(m.isNaN(t)||m.isInfinite(t))throw new z;return t},Y.prototype.getX=function(){var t=this.x/this.w;if(m.isNaN(t)||m.isInfinite(t))throw new z;return t},Y.prototype.getCoordinate=function(){var t=new N;return t.x=this.getX(),t.y=this.getY(),t},Y.prototype.interfaces_=function(){return[]},Y.prototype.getClass=function(){return Y},Y.intersection=function(t,e,n,i){var r=t.y-e.y,o=e.x-t.x,s=t.x*e.y-e.x*t.y,a=n.y-i.y,u=i.x-n.x,l=n.x*i.y-i.x*n.y,c=r*u-a*o,p=(o*l-u*s)/c,h=(a*s-r*l)/c;if(m.isNaN(p)||m.isInfinite(p)||m.isNaN(h)||m.isInfinite(h))throw new z;return new N(p,h)};var k=function t(){if(this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof N){var e=arguments[0];this.init(e.x,e.x,e.y,e.y)}else if(arguments[0]instanceof t){var n=arguments[0];this.init(n)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.init(i.x,r.x,i.y,r.y)}else if(4===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2],u=arguments[3];this.init(o,s,a,u)}},j={serialVersionUID:{configurable:!0}};k.prototype.getArea=function(){return this.getWidth()*this.getHeight()},k.prototype.equals=function(t){if(!(t instanceof k))return!1;var e=t;return this.isNull()?e.isNull():this._maxx===e.getMaxX()&&this._maxy===e.getMaxY()&&this._minx===e.getMinX()&&this._miny===e.getMinY()},k.prototype.intersection=function(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new k;var e=this._minx>t._minx?this._minx:t._minx,n=this._miny>t._miny?this._miny:t._miny,i=this._maxx<t._maxx?this._maxx:t._maxx,r=this._maxy<t._maxy?this._maxy:t._maxy;return new k(e,i,n,r)},k.prototype.isNull=function(){return this._maxx<this._minx},k.prototype.getMaxX=function(){return this._maxx},k.prototype.covers=function(){if(1===arguments.length){if(arguments[0]instanceof N){var t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof k){var e=arguments[0];return!this.isNull()&&!e.isNull()&&(e.getMinX()>=this._minx&&e.getMaxX()<=this._maxx&&e.getMinY()>=this._miny&&e.getMaxY()<=this._maxy)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return!this.isNull()&&(n>=this._minx&&n<=this._maxx&&i>=this._miny&&i<=this._maxy)}},k.prototype.intersects=function(){if(1===arguments.length){if(arguments[0]instanceof k){var t=arguments[0];return!this.isNull()&&!t.isNull()&&!(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}if(arguments[0]instanceof N){var e=arguments[0];return this.intersects(e.x,e.y)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return!this.isNull()&&!(n>this._maxx||n<this._minx||i>this._maxy||i<this._miny)}},k.prototype.getMinY=function(){return this._miny},k.prototype.getMinX=function(){return this._minx},k.prototype.expandToInclude=function(){if(1===arguments.length){if(arguments[0]instanceof N){var t=arguments[0];this.expandToInclude(t.x,t.y)}else if(arguments[0]instanceof k){var e=arguments[0];if(e.isNull())return null;this.isNull()?(this._minx=e.getMinX(),this._maxx=e.getMaxX(),this._miny=e.getMinY(),this._maxy=e.getMaxY()):(e._minx<this._minx&&(this._minx=e._minx),e._maxx>this._maxx&&(this._maxx=e._maxx),e._miny<this._miny&&(this._miny=e._miny),e._maxy>this._maxy&&(this._maxy=e._maxy))}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.isNull()?(this._minx=n,this._maxx=n,this._miny=i,this._maxy=i):(n<this._minx&&(this._minx=n),n>this._maxx&&(this._maxx=n),i<this._miny&&(this._miny=i),i>this._maxy&&(this._maxy=i))}},k.prototype.minExtent=function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t<e?t:e},k.prototype.getWidth=function(){return this.isNull()?0:this._maxx-this._minx},k.prototype.compareTo=function(t){var e=t;return this.isNull()?e.isNull()?0:-1:e.isNull()?1:this._minx<e._minx?-1:this._minx>e._minx?1:this._miny<e._miny?-1:this._miny>e._miny?1:this._maxx<e._maxx?-1:this._maxx>e._maxx?1:this._maxy<e._maxy?-1:this._maxy>e._maxy?1:0},k.prototype.translate=function(t,e){if(this.isNull())return null;this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e)},k.prototype.toString=function(){return\"Env[\"+this._minx+\" : \"+this._maxx+\", \"+this._miny+\" : \"+this._maxy+\"]\"},k.prototype.setToNull=function(){this._minx=0,this._maxx=-1,this._miny=0,this._maxy=-1},k.prototype.getHeight=function(){return this.isNull()?0:this._maxy-this._miny},k.prototype.maxExtent=function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t>e?t:e},k.prototype.expandBy=function(){if(1===arguments.length){var t=arguments[0];this.expandBy(t,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this.isNull())return null;this._minx-=e,this._maxx+=e,this._miny-=n,this._maxy+=n,(this._minx>this._maxx||this._miny>this._maxy)&&this.setToNull()}},k.prototype.contains=function(){if(1===arguments.length){if(arguments[0]instanceof k){var t=arguments[0];return this.covers(t)}if(arguments[0]instanceof N){var e=arguments[0];return this.covers(e)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return this.covers(n,i)}},k.prototype.centre=function(){return this.isNull()?null:new N((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)},k.prototype.init=function(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof N){var t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof k){var e=arguments[0];this._minx=e._minx,this._maxx=e._maxx,this._miny=e._miny,this._maxy=e._maxy}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.init(n.x,i.x,n.y,i.y)}else if(4===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];r<o?(this._minx=r,this._maxx=o):(this._minx=o,this._maxx=r),s<a?(this._miny=s,this._maxy=a):(this._miny=a,this._maxy=s)}},k.prototype.getMaxY=function(){return this._maxy},k.prototype.distance=function(t){if(this.intersects(t))return 0;var e=0;this._maxx<t._minx?e=t._minx-this._maxx:this._minx>t._maxx&&(e=this._minx-t._maxx);var n=0;return this._maxy<t._miny?n=t._miny-this._maxy:this._miny>t._maxy&&(n=this._miny-t._maxy),0===e?n:0===n?e:Math.sqrt(e*e+n*n)},k.prototype.hashCode=function(){var t=17;return t=37*t+N.hashCode(this._minx),t=37*t+N.hashCode(this._maxx),t=37*t+N.hashCode(this._miny),t=37*t+N.hashCode(this._maxy)},k.prototype.interfaces_=function(){return[I,e]},k.prototype.getClass=function(){return k},k.intersects=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];return n.x>=(t.x<e.x?t.x:e.x)&&n.x<=(t.x>e.x?t.x:e.x)&&n.y>=(t.y<e.y?t.y:e.y)&&n.y<=(t.y>e.y?t.y:e.y)}if(4===arguments.length){var i=arguments[0],r=arguments[1],o=arguments[2],s=arguments[3],a=Math.min(o.x,s.x),u=Math.max(o.x,s.x),l=Math.min(i.x,r.x),c=Math.max(i.x,r.x);return!(l>u)&&(!(c<a)&&(a=Math.min(o.y,s.y),u=Math.max(o.y,s.y),l=Math.min(i.y,r.y),c=Math.max(i.y,r.y),!(l>u)&&!(c<a)))}},j.serialVersionUID.get=function(){return 0x51845cd552189800},Object.defineProperties(k,j);var H={typeStr:/^\\s*(\\w+)\\s*\\(\\s*(.*)\\s*\\)\\s*$/,emptyTypeStr:/^\\s*(\\w+)\\s*EMPTY\\s*$/,spaces:/\\s+/,parenComma:/\\)\\s*,\\s*\\(/,doubleParenComma:/\\)\\s*\\)\\s*,\\s*\\(\\s*\\(/,trimParens:/^\\s*\\(?(.*?)\\)?\\s*$/},W=function(t){this.geometryFactory=t||new _e};W.prototype.read=function(t){var e,n,i;t=t.replace(/[\\n\\r]/g,\" \");var r=H.typeStr.exec(t);if(-1!==t.search(\"EMPTY\")&&((r=H.emptyTypeStr.exec(t))[2]=void 0),r&&(n=r[1].toLowerCase(),i=r[2],J[n]&&(e=J[n].apply(this,[i]))),void 0===e)throw new Error(\"Could not parse WKT \"+t);return e},W.prototype.write=function(t){return this.extractGeometry(t)},W.prototype.extractGeometry=function(t){var e=t.getGeometryType().toLowerCase();if(!K[e])return null;var n=e.toUpperCase();return t.isEmpty()?n+\" EMPTY\":n+\"(\"+K[e].apply(this,[t])+\")\"};var K={coordinate:function(t){return t.x+\" \"+t.y},point:function(t){return K.coordinate.call(this,t._coordinates._coordinates[0])},multipoint:function(t){for(var e=[],n=0,i=t._geometries.length;n<i;++n)e.push(\"(\"+K.point.apply(this,[t._geometries[n]])+\")\");return e.join(\",\")},linestring:function(t){for(var e=[],n=0,i=t._points._coordinates.length;n<i;++n)e.push(K.coordinate.apply(this,[t._points._coordinates[n]]));return e.join(\",\")},linearring:function(t){for(var e=[],n=0,i=t._points._coordinates.length;n<i;++n)e.push(K.coordinate.apply(this,[t._points._coordinates[n]]));return e.join(\",\")},multilinestring:function(t){for(var e=[],n=0,i=t._geometries.length;n<i;++n)e.push(\"(\"+K.linestring.apply(this,[t._geometries[n]])+\")\");return e.join(\",\")},polygon:function(t){var e=[];e.push(\"(\"+K.linestring.apply(this,[t._shell])+\")\");for(var n=0,i=t._holes.length;n<i;++n)e.push(\"(\"+K.linestring.apply(this,[t._holes[n]])+\")\");return e.join(\",\")},multipolygon:function(t){for(var e=[],n=0,i=t._geometries.length;n<i;++n)e.push(\"(\"+K.polygon.apply(this,[t._geometries[n]])+\")\");return e.join(\",\")},geometrycollection:function(t){for(var e=[],n=0,i=t._geometries.length;n<i;++n)e.push(this.extractGeometry(t._geometries[n]));return e.join(\",\")}},J={point:function(t){if(void 0===t)return this.geometryFactory.createPoint();var e=t.trim().split(H.spaces);return this.geometryFactory.createPoint(new N(Number.parseFloat(e[0]),Number.parseFloat(e[1])))},multipoint:function(t){if(void 0===t)return this.geometryFactory.createMultiPoint();for(var e,n=t.trim().split(\",\"),i=[],r=0,o=n.length;r<o;++r)e=n[r].replace(H.trimParens,\"$1\"),i.push(J.point.apply(this,[e]));return this.geometryFactory.createMultiPoint(i)},linestring:function(t){if(void 0===t)return this.geometryFactory.createLineString();for(var e,n=t.trim().split(\",\"),i=[],r=0,o=n.length;r<o;++r)e=n[r].trim().split(H.spaces),i.push(new N(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLineString(i)},linearring:function(t){if(void 0===t)return this.geometryFactory.createLinearRing();for(var e,n=t.trim().split(\",\"),i=[],r=0,o=n.length;r<o;++r)e=n[r].trim().split(H.spaces),i.push(new N(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLinearRing(i)},multilinestring:function(t){if(void 0===t)return this.geometryFactory.createMultiLineString();for(var e,n=t.trim().split(H.parenComma),i=[],r=0,o=n.length;r<o;++r)e=n[r].replace(H.trimParens,\"$1\"),i.push(J.linestring.apply(this,[e]));return this.geometryFactory.createMultiLineString(i)},polygon:function(t){if(void 0===t)return this.geometryFactory.createPolygon();for(var e,n,i,r,o=t.trim().split(H.parenComma),s=[],a=0,u=o.length;a<u;++a)e=o[a].replace(H.trimParens,\"$1\"),n=J.linestring.apply(this,[e]),i=this.geometryFactory.createLinearRing(n._points),0===a?r=i:s.push(i);return this.geometryFactory.createPolygon(r,s)},multipolygon:function(t){if(void 0===t)return this.geometryFactory.createMultiPolygon();for(var e,n=t.trim().split(H.doubleParenComma),i=[],r=0,o=n.length;r<o;++r)e=n[r].replace(H.trimParens,\"$1\"),i.push(J.polygon.apply(this,[e]));return this.geometryFactory.createMultiPolygon(i)},geometrycollection:function(t){if(void 0===t)return this.geometryFactory.createGeometryCollection();for(var e=(t=t.replace(/,\\s*([A-Za-z])/g,\"|$1\")).trim().split(\"|\"),n=[],i=0,r=e.length;i<r;++i)n.push(this.read(e[i]));return this.geometryFactory.createGeometryCollection(n)}},Q=function(t){this.parser=new W(t)};Q.prototype.write=function(t){return this.parser.write(t)},Q.toLineString=function(t,e){if(2!==arguments.length)throw new Error(\"Not implemented\");return\"LINESTRING ( \"+t.x+\" \"+t.y+\", \"+e.x+\" \"+e.y+\" )\"};var Z=function(t){function e(e){t.call(this,e),this.name=\"RuntimeException\",this.message=e,this.stack=(new t).stack}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Error),$=function(t){function e(){if(t.call(this),0===arguments.length)t.call(this);else if(1===arguments.length){var e=arguments[0];t.call(this,e)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Z),tt=function(){};tt.prototype.interfaces_=function(){return[]},tt.prototype.getClass=function(){return tt},tt.shouldNeverReachHere=function(){if(0===arguments.length)tt.shouldNeverReachHere(null);else if(1===arguments.length){var t=arguments[0];throw new $(\"Should never reach here\"+(null!==t?\": \"+t:\"\"))}},tt.isTrue=function(){var t,e;if(1===arguments.length)t=arguments[0],tt.isTrue(t,null);else if(2===arguments.length&&(t=arguments[0],e=arguments[1],!t))throw null===e?new $:new $(e)},tt.equals=function(){var t,e,n;if(2===arguments.length)t=arguments[0],e=arguments[1],tt.equals(t,e,null);else if(3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],!e.equals(t)))throw new $(\"Expected \"+t+\" but encountered \"+e+(null!==n?\": \"+n:\"\"))};var et=function(){this._result=null,this._inputLines=Array(2).fill().map(function(){return Array(2)}),this._intPt=new Array(2).fill(null),this._intLineIndex=null,this._isProper=null,this._pa=null,this._pb=null,this._precisionModel=null,this._intPt[0]=new N,this._intPt[1]=new N,this._pa=this._intPt[0],this._pb=this._intPt[1],this._result=0},nt={DONT_INTERSECT:{configurable:!0},DO_INTERSECT:{configurable:!0},COLLINEAR:{configurable:!0},NO_INTERSECTION:{configurable:!0},POINT_INTERSECTION:{configurable:!0},COLLINEAR_INTERSECTION:{configurable:!0}};et.prototype.getIndexAlongSegment=function(t,e){return this.computeIntLineIndex(),this._intLineIndex[t][e]},et.prototype.getTopologySummary=function(){var t=new P;return this.isEndPoint()&&t.append(\" endpoint\"),this._isProper&&t.append(\" proper\"),this.isCollinear()&&t.append(\" collinear\"),t.toString()},et.prototype.computeIntersection=function(t,e,n,i){this._inputLines[0][0]=t,this._inputLines[0][1]=e,this._inputLines[1][0]=n,this._inputLines[1][1]=i,this._result=this.computeIntersect(t,e,n,i)},et.prototype.getIntersectionNum=function(){return this._result},et.prototype.computeIntLineIndex=function(){if(0===arguments.length)null===this._intLineIndex&&(this._intLineIndex=Array(2).fill().map(function(){return Array(2)}),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){var t=arguments[0];this.getEdgeDistance(t,0)>this.getEdgeDistance(t,1)?(this._intLineIndex[t][0]=0,this._intLineIndex[t][1]=1):(this._intLineIndex[t][0]=1,this._intLineIndex[t][1]=0)}},et.prototype.isProper=function(){return this.hasIntersection()&&this._isProper},et.prototype.setPrecisionModel=function(t){this._precisionModel=t},et.prototype.isInteriorIntersection=function(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){for(var t=arguments[0],e=0;e<this._result;e++)if(!this._intPt[e].equals2D(this._inputLines[t][0])&&!this._intPt[e].equals2D(this._inputLines[t][1]))return!0;return!1}},et.prototype.getIntersection=function(t){return this._intPt[t]},et.prototype.isEndPoint=function(){return this.hasIntersection()&&!this._isProper},et.prototype.hasIntersection=function(){return this._result!==et.NO_INTERSECTION},et.prototype.getEdgeDistance=function(t,e){return et.computeEdgeDistance(this._intPt[e],this._inputLines[t][0],this._inputLines[t][1])},et.prototype.isCollinear=function(){return this._result===et.COLLINEAR_INTERSECTION},et.prototype.toString=function(){return Q.toLineString(this._inputLines[0][0],this._inputLines[0][1])+\" - \"+Q.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary()},et.prototype.getEndpoint=function(t,e){return this._inputLines[t][e]},et.prototype.isIntersection=function(t){for(var e=0;e<this._result;e++)if(this._intPt[e].equals2D(t))return!0;return!1},et.prototype.getIntersectionAlongSegment=function(t,e){return this.computeIntLineIndex(),this._intPt[this._intLineIndex[t][e]]},et.prototype.interfaces_=function(){return[]},et.prototype.getClass=function(){return et},et.computeEdgeDistance=function(t,e,n){var i=Math.abs(n.x-e.x),r=Math.abs(n.y-e.y),o=-1;if(t.equals(e))o=0;else if(t.equals(n))o=i>r?i:r;else{var s=Math.abs(t.x-e.x),a=Math.abs(t.y-e.y);0!==(o=i>r?s:a)||t.equals(e)||(o=Math.max(s,a))}return tt.isTrue(!(0===o&&!t.equals(e)),\"Bad distance calculation\"),o},et.nonRobustComputeEdgeDistance=function(t,e,n){var i=t.x-e.x,r=t.y-e.y,o=Math.sqrt(i*i+r*r);return tt.isTrue(!(0===o&&!t.equals(e)),\"Invalid distance calculation\"),o},nt.DONT_INTERSECT.get=function(){return 0},nt.DO_INTERSECT.get=function(){return 1},nt.COLLINEAR.get=function(){return 2},nt.NO_INTERSECTION.get=function(){return 0},nt.POINT_INTERSECTION.get=function(){return 1},nt.COLLINEAR_INTERSECTION.get=function(){return 2},Object.defineProperties(et,nt);var it=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isInSegmentEnvelopes=function(t){var e=new k(this._inputLines[0][0],this._inputLines[0][1]),n=new k(this._inputLines[1][0],this._inputLines[1][1]);return e.contains(t)&&n.contains(t)},e.prototype.computeIntersection=function(){if(3!==arguments.length)return t.prototype.computeIntersection.apply(this,arguments);var e=arguments[0],n=arguments[1],i=arguments[2];if(this._isProper=!1,k.intersects(n,i,e)&&0===st.orientationIndex(n,i,e)&&0===st.orientationIndex(i,n,e))return this._isProper=!0,(e.equals(n)||e.equals(i))&&(this._isProper=!1),this._result=t.POINT_INTERSECTION,null;this._result=t.NO_INTERSECTION},e.prototype.normalizeToMinimum=function(t,e,n,i,r){r.x=this.smallestInAbsValue(t.x,e.x,n.x,i.x),r.y=this.smallestInAbsValue(t.y,e.y,n.y,i.y),t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,n.x-=r.x,n.y-=r.y,i.x-=r.x,i.y-=r.y},e.prototype.safeHCoordinateIntersection=function(t,n,i,r){var o=null;try{o=Y.intersection(t,n,i,r)}catch(s){if(!(s instanceof z))throw s;o=e.nearestEndpoint(t,n,i,r)}return o},e.prototype.intersection=function(t,n,i,r){var o=this.intersectionWithNormalization(t,n,i,r);return this.isInSegmentEnvelopes(o)||(o=new N(e.nearestEndpoint(t,n,i,r))),null!==this._precisionModel&&this._precisionModel.makePrecise(o),o},e.prototype.smallestInAbsValue=function(t,e,n,i){var r=t,o=Math.abs(r);return Math.abs(e)<o&&(r=e,o=Math.abs(e)),Math.abs(n)<o&&(r=n,o=Math.abs(n)),Math.abs(i)<o&&(r=i),r},e.prototype.checkDD=function(t,e,n,i,r){var o=G.intersection(t,e,n,i),s=this.isInSegmentEnvelopes(o);X.out.println(\"DD in env = \"+s+\"  --------------------- \"+o),r.distance(o)>1e-4&&X.out.println(\"Distance = \"+r.distance(o))},e.prototype.intersectionWithNormalization=function(t,e,n,i){var r=new N(t),o=new N(e),s=new N(n),a=new N(i),u=new N;this.normalizeToEnvCentre(r,o,s,a,u);var l=this.safeHCoordinateIntersection(r,o,s,a);return l.x+=u.x,l.y+=u.y,l},e.prototype.computeCollinearIntersection=function(e,n,i,r){var o=k.intersects(e,n,i),s=k.intersects(e,n,r),a=k.intersects(i,r,e),u=k.intersects(i,r,n);return o&&s?(this._intPt[0]=i,this._intPt[1]=r,t.COLLINEAR_INTERSECTION):a&&u?(this._intPt[0]=e,this._intPt[1]=n,t.COLLINEAR_INTERSECTION):o&&a?(this._intPt[0]=i,this._intPt[1]=e,!i.equals(e)||s||u?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):o&&u?(this._intPt[0]=i,this._intPt[1]=n,!i.equals(n)||s||a?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):s&&a?(this._intPt[0]=r,this._intPt[1]=e,!r.equals(e)||o||u?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):s&&u?(this._intPt[0]=r,this._intPt[1]=n,!r.equals(n)||o||a?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):t.NO_INTERSECTION},e.prototype.normalizeToEnvCentre=function(t,e,n,i,r){var o=t.x<e.x?t.x:e.x,s=t.y<e.y?t.y:e.y,a=t.x>e.x?t.x:e.x,u=t.y>e.y?t.y:e.y,l=n.x<i.x?n.x:i.x,c=n.y<i.y?n.y:i.y,p=n.x>i.x?n.x:i.x,h=n.y>i.y?n.y:i.y,f=((o>l?o:l)+(a<p?a:p))/2,g=((s>c?s:c)+(u<h?u:h))/2;r.x=f,r.y=g,t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,n.x-=r.x,n.y-=r.y,i.x-=r.x,i.y-=r.y},e.prototype.computeIntersect=function(e,n,i,r){if(this._isProper=!1,!k.intersects(e,n,i,r))return t.NO_INTERSECTION;var o=st.orientationIndex(e,n,i),s=st.orientationIndex(e,n,r);if(o>0&&s>0||o<0&&s<0)return t.NO_INTERSECTION;var a=st.orientationIndex(i,r,e),u=st.orientationIndex(i,r,n);if(a>0&&u>0||a<0&&u<0)return t.NO_INTERSECTION;return 0===o&&0===s&&0===a&&0===u?this.computeCollinearIntersection(e,n,i,r):(0===o||0===s||0===a||0===u?(this._isProper=!1,e.equals2D(i)||e.equals2D(r)?this._intPt[0]=e:n.equals2D(i)||n.equals2D(r)?this._intPt[0]=n:0===o?this._intPt[0]=new N(i):0===s?this._intPt[0]=new N(r):0===a?this._intPt[0]=new N(e):0===u&&(this._intPt[0]=new N(n))):(this._isProper=!0,this._intPt[0]=this.intersection(e,n,i,r)),t.POINT_INTERSECTION)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.nearestEndpoint=function(t,e,n,i){var r=t,o=st.distancePointLine(t,n,i),s=st.distancePointLine(e,n,i);return s<o&&(o=s,r=e),(s=st.distancePointLine(n,t,e))<o&&(o=s,r=n),(s=st.distancePointLine(i,t,e))<o&&(o=s,r=i),r},e}(et),rt=function(){};rt.prototype.interfaces_=function(){return[]},rt.prototype.getClass=function(){return rt},rt.orientationIndex=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,o=n.x-e.x,s=n.y-e.y;return rt.signOfDet2x2(i,r,o,s)},rt.signOfDet2x2=function(t,e,n,i){var r=null,o=null,s=null;if(r=1,0===t||0===i)return 0===e||0===n?0:e>0?n>0?-r:r:n>0?r:-r;if(0===e||0===n)return i>0?t>0?r:-r:t>0?-r:r;if(e>0?i>0?e<=i||(r=-r,o=t,t=n,n=o,o=e,e=i,i=o):e<=-i?(r=-r,n=-n,i=-i):(o=t,t=-n,n=o,o=e,e=-i,i=o):i>0?-e<=i?(r=-r,t=-t,e=-e):(o=-t,t=n,n=o,o=-e,e=i,i=o):e>=i?(t=-t,e=-e,n=-n,i=-i):(r=-r,o=-t,t=-n,n=o,o=-e,e=-i,i=o),t>0){if(!(n>0))return r;if(!(t<=n))return r}else{if(n>0)return-r;if(!(t>=n))return-r;r=-r,t=-t,n=-n}for(;;){if(s=Math.floor(n/t),n-=s*t,(i-=s*e)<0)return-r;if(i>e)return r;if(t>n+n){if(e<i+i)return r}else{if(e>i+i)return-r;n=t-n,i=e-i,r=-r}if(0===i)return 0===n?0:-r;if(0===n)return r;if(s=Math.floor(t/n),t-=s*n,(e-=s*i)<0)return r;if(e>i)return-r;if(n>t+t){if(i<e+e)return-r}else{if(i>e+e)return r;t=n-t,e=i-e,r=-r}if(0===e)return 0===t?0:r;if(0===t)return-r}};var ot=function(){this._p=null,this._crossingCount=0,this._isPointOnSegment=!1;var t=arguments[0];this._p=t};ot.prototype.countSegment=function(t,e){if(t.x<this._p.x&&e.x<this._p.x)return null;if(this._p.x===e.x&&this._p.y===e.y)return this._isPointOnSegment=!0,null;if(t.y===this._p.y&&e.y===this._p.y){var n=t.x,i=e.x;return n>i&&(n=e.x,i=t.x),this._p.x>=n&&this._p.x<=i&&(this._isPointOnSegment=!0),null}if(t.y>this._p.y&&e.y<=this._p.y||e.y>this._p.y&&t.y<=this._p.y){var r=t.x-this._p.x,o=t.y-this._p.y,s=e.x-this._p.x,a=e.y-this._p.y,u=rt.signOfDet2x2(r,o,s,a);if(0===u)return this._isPointOnSegment=!0,null;a<o&&(u=-u),u>0&&this._crossingCount++}},ot.prototype.isPointInPolygon=function(){return this.getLocation()!==b.EXTERIOR},ot.prototype.getLocation=function(){return this._isPointOnSegment?b.BOUNDARY:this._crossingCount%2==1?b.INTERIOR:b.EXTERIOR},ot.prototype.isOnSegment=function(){return this._isPointOnSegment},ot.prototype.interfaces_=function(){return[]},ot.prototype.getClass=function(){return ot},ot.locatePointInRing=function(){if(arguments[0]instanceof N&&O(arguments[1],B)){for(var t=arguments[0],e=arguments[1],n=new ot(t),i=new N,r=new N,o=1;o<e.size();o++)if(e.getCoordinate(o,i),e.getCoordinate(o-1,r),n.countSegment(i,r),n.isOnSegment())return n.getLocation();return n.getLocation()}if(arguments[0]instanceof N&&arguments[1]instanceof Array){for(var s=arguments[0],a=arguments[1],u=new ot(s),l=1;l<a.length;l++){var c=a[l],p=a[l-1];if(u.countSegment(c,p),u.isOnSegment())return u.getLocation()}return u.getLocation()}};var st=function(){},at={CLOCKWISE:{configurable:!0},RIGHT:{configurable:!0},COUNTERCLOCKWISE:{configurable:!0},LEFT:{configurable:!0},COLLINEAR:{configurable:!0},STRAIGHT:{configurable:!0}};st.prototype.interfaces_=function(){return[]},st.prototype.getClass=function(){return st},st.orientationIndex=function(t,e,n){return G.orientationIndex(t,e,n)},st.signedArea=function(){if(arguments[0]instanceof Array){var t=arguments[0];if(t.length<3)return 0;for(var e=0,n=t[0].x,i=1;i<t.length-1;i++){var r=t[i].x-n,o=t[i+1].y;e+=r*(t[i-1].y-o)}return e/2}if(O(arguments[0],B)){var s=arguments[0],a=s.size();if(a<3)return 0;var u=new N,l=new N,c=new N;s.getCoordinate(0,l),s.getCoordinate(1,c);var p=l.x;c.x-=p;for(var h=0,f=1;f<a-1;f++)u.y=l.y,l.x=c.x,l.y=c.y,s.getCoordinate(f+1,c),c.x-=p,h+=l.x*(u.y-c.y);return h/2}},st.distanceLineLine=function(t,e,n,i){if(t.equals(e))return st.distancePointLine(t,n,i);if(n.equals(i))return st.distancePointLine(i,t,e);var r=!1;if(k.intersects(t,e,n,i)){var o=(e.x-t.x)*(i.y-n.y)-(e.y-t.y)*(i.x-n.x);if(0===o)r=!0;else{var s=(t.y-n.y)*(i.x-n.x)-(t.x-n.x)*(i.y-n.y),a=((t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y))/o,u=s/o;(u<0||u>1||a<0||a>1)&&(r=!0)}}else r=!0;return r?T.min(st.distancePointLine(t,n,i),st.distancePointLine(e,n,i),st.distancePointLine(n,t,e),st.distancePointLine(i,t,e)):0},st.isPointInRing=function(t,e){return st.locatePointInRing(t,e)!==b.EXTERIOR},st.computeLength=function(t){var e=t.size();if(e<=1)return 0;var n=0,i=new N;t.getCoordinate(0,i);for(var r=i.x,o=i.y,s=1;s<e;s++){t.getCoordinate(s,i);var a=i.x,u=i.y,l=a-r,c=u-o;n+=Math.sqrt(l*l+c*c),r=a,o=u}return n},st.isCCW=function(t){var e=t.length-1;if(e<3)throw new _(\"Ring has fewer than 4 points, so orientation cannot be determined\");for(var n=t[0],i=0,r=1;r<=e;r++){var o=t[r];o.y>n.y&&(n=o,i=r)}var s=i;do{(s-=1)<0&&(s=e)}while(t[s].equals2D(n)&&s!==i);var a=i;do{a=(a+1)%e}while(t[a].equals2D(n)&&a!==i);var u=t[s],l=t[a];if(u.equals2D(n)||l.equals2D(n)||u.equals2D(l))return!1;var c=st.computeOrientation(u,n,l),p=!1;return p=0===c?u.x>l.x:c>0,p},st.locatePointInRing=function(t,e){return ot.locatePointInRing(t,e)},st.distancePointLinePerpendicular=function(t,e,n){var i=(n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y),r=((e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y))/i;return Math.abs(r)*Math.sqrt(i)},st.computeOrientation=function(t,e,n){return st.orientationIndex(t,e,n)},st.distancePointLine=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(0===e.length)throw new _(\"Line array must contain at least one vertex\");for(var n=t.distance(e[0]),i=0;i<e.length-1;i++){var r=st.distancePointLine(t,e[i],e[i+1]);r<n&&(n=r)}return n}if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];if(s.x===a.x&&s.y===a.y)return o.distance(s);var u=(a.x-s.x)*(a.x-s.x)+(a.y-s.y)*(a.y-s.y),l=((o.x-s.x)*(a.x-s.x)+(o.y-s.y)*(a.y-s.y))/u;if(l<=0)return o.distance(s);if(l>=1)return o.distance(a);var c=((s.y-o.y)*(a.x-s.x)-(s.x-o.x)*(a.y-s.y))/u;return Math.abs(c)*Math.sqrt(u)}},st.isOnLine=function(t,e){for(var n=new it,i=1;i<e.length;i++){var r=e[i-1],o=e[i];if(n.computeIntersection(t,r,o),n.hasIntersection())return!0}return!1},at.CLOCKWISE.get=function(){return-1},at.RIGHT.get=function(){return st.CLOCKWISE},at.COUNTERCLOCKWISE.get=function(){return 1},at.LEFT.get=function(){return st.COUNTERCLOCKWISE},at.COLLINEAR.get=function(){return 0},at.STRAIGHT.get=function(){return st.COLLINEAR},Object.defineProperties(st,at);var ut=function(){};ut.prototype.filter=function(t){},ut.prototype.interfaces_=function(){return[]},ut.prototype.getClass=function(){return ut};var lt=function(){var t=arguments[0];this._envelope=null,this._factory=null,this._SRID=null,this._userData=null,this._factory=t,this._SRID=t.getSRID()},ct={serialVersionUID:{configurable:!0},SORTINDEX_POINT:{configurable:!0},SORTINDEX_MULTIPOINT:{configurable:!0},SORTINDEX_LINESTRING:{configurable:!0},SORTINDEX_LINEARRING:{configurable:!0},SORTINDEX_MULTILINESTRING:{configurable:!0},SORTINDEX_POLYGON:{configurable:!0},SORTINDEX_MULTIPOLYGON:{configurable:!0},SORTINDEX_GEOMETRYCOLLECTION:{configurable:!0},geometryChangedFilter:{configurable:!0}};lt.prototype.isGeometryCollection=function(){return this.getSortIndex()===lt.SORTINDEX_GEOMETRYCOLLECTION},lt.prototype.getFactory=function(){return this._factory},lt.prototype.getGeometryN=function(t){return this},lt.prototype.getArea=function(){return 0},lt.prototype.isRectangle=function(){return!1},lt.prototype.equals=function(){if(arguments[0]instanceof lt){var t=arguments[0];return null!==t&&this.equalsTopo(t)}if(arguments[0]instanceof Object){var e=arguments[0];if(!(e instanceof lt))return!1;var n=e;return this.equalsExact(n)}},lt.prototype.equalsExact=function(t){return this===t||this.equalsExact(t,0)},lt.prototype.geometryChanged=function(){this.apply(lt.geometryChangedFilter)},lt.prototype.geometryChangedAction=function(){this._envelope=null},lt.prototype.equalsNorm=function(t){return null!==t&&this.norm().equalsExact(t.norm())},lt.prototype.getLength=function(){return 0},lt.prototype.getNumGeometries=function(){return 1},lt.prototype.compareTo=function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getSortIndex()!==e.getSortIndex()?this.getSortIndex()-e.getSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t)}if(2===arguments.length){var n=arguments[0],i=arguments[1];return this.getSortIndex()!==n.getSortIndex()?this.getSortIndex()-n.getSortIndex():this.isEmpty()&&n.isEmpty()?0:this.isEmpty()?-1:n.isEmpty()?1:this.compareToSameClass(n,i)}},lt.prototype.getUserData=function(){return this._userData},lt.prototype.getSRID=function(){return this._SRID},lt.prototype.getEnvelope=function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())},lt.prototype.checkNotGeometryCollection=function(t){if(t.getSortIndex()===lt.SORTINDEX_GEOMETRYCOLLECTION)throw new _(\"This method does not support GeometryCollection arguments\")},lt.prototype.equal=function(t,e,n){return 0===n?t.equals(e):t.distance(e)<=n},lt.prototype.norm=function(){var t=this.copy();return t.normalize(),t},lt.prototype.getPrecisionModel=function(){return this._factory.getPrecisionModel()},lt.prototype.getEnvelopeInternal=function(){return null===this._envelope&&(this._envelope=this.computeEnvelopeInternal()),new k(this._envelope)},lt.prototype.setSRID=function(t){this._SRID=t},lt.prototype.setUserData=function(t){this._userData=t},lt.prototype.compare=function(t,e){for(var n=t.iterator(),i=e.iterator();n.hasNext()&&i.hasNext();){var r=n.next(),o=i.next(),s=r.compareTo(o);if(0!==s)return s}return n.hasNext()?1:i.hasNext()?-1:0},lt.prototype.hashCode=function(){return this.getEnvelopeInternal().hashCode()},lt.prototype.isGeometryCollectionOrDerived=function(){return this.getSortIndex()===lt.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===lt.SORTINDEX_MULTIPOINT||this.getSortIndex()===lt.SORTINDEX_MULTILINESTRING||this.getSortIndex()===lt.SORTINDEX_MULTIPOLYGON},lt.prototype.interfaces_=function(){return[E,I,e]},lt.prototype.getClass=function(){return lt},lt.hasNonEmptyElements=function(t){for(var e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1},lt.hasNullElements=function(t){for(var e=0;e<t.length;e++)if(null===t[e])return!0;return!1},ct.serialVersionUID.get=function(){return 0x799ea46522854c00},ct.SORTINDEX_POINT.get=function(){return 0},ct.SORTINDEX_MULTIPOINT.get=function(){return 1},ct.SORTINDEX_LINESTRING.get=function(){return 2},ct.SORTINDEX_LINEARRING.get=function(){return 3},ct.SORTINDEX_MULTILINESTRING.get=function(){return 4},ct.SORTINDEX_POLYGON.get=function(){return 5},ct.SORTINDEX_MULTIPOLYGON.get=function(){return 6},ct.SORTINDEX_GEOMETRYCOLLECTION.get=function(){return 7},ct.geometryChangedFilter.get=function(){return pt},Object.defineProperties(lt,ct);var pt=function(){};pt.interfaces_=function(){return[ut]},pt.filter=function(t){t.geometryChangedAction()};var ht=function(){};ht.prototype.filter=function(t){},ht.prototype.interfaces_=function(){return[]},ht.prototype.getClass=function(){return ht};var ft=function(){},gt={Mod2BoundaryNodeRule:{configurable:!0},EndPointBoundaryNodeRule:{configurable:!0},MultiValentEndPointBoundaryNodeRule:{configurable:!0},MonoValentEndPointBoundaryNodeRule:{configurable:!0},MOD2_BOUNDARY_RULE:{configurable:!0},ENDPOINT_BOUNDARY_RULE:{configurable:!0},MULTIVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:!0},MONOVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:!0},OGC_SFS_BOUNDARY_RULE:{configurable:!0}};ft.prototype.isInBoundary=function(t){},ft.prototype.interfaces_=function(){return[]},ft.prototype.getClass=function(){return ft},gt.Mod2BoundaryNodeRule.get=function(){return dt},gt.EndPointBoundaryNodeRule.get=function(){return yt},gt.MultiValentEndPointBoundaryNodeRule.get=function(){return _t},gt.MonoValentEndPointBoundaryNodeRule.get=function(){return mt},gt.MOD2_BOUNDARY_RULE.get=function(){return new dt},gt.ENDPOINT_BOUNDARY_RULE.get=function(){return new yt},gt.MULTIVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new _t},gt.MONOVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new mt},gt.OGC_SFS_BOUNDARY_RULE.get=function(){return ft.MOD2_BOUNDARY_RULE},Object.defineProperties(ft,gt);var dt=function(){};dt.prototype.isInBoundary=function(t){return t%2==1},dt.prototype.interfaces_=function(){return[ft]},dt.prototype.getClass=function(){return dt};var yt=function(){};yt.prototype.isInBoundary=function(t){return t>0},yt.prototype.interfaces_=function(){return[ft]},yt.prototype.getClass=function(){return yt};var _t=function(){};_t.prototype.isInBoundary=function(t){return t>1},_t.prototype.interfaces_=function(){return[ft]},_t.prototype.getClass=function(){return _t};var mt=function(){};mt.prototype.isInBoundary=function(t){return 1===t},mt.prototype.interfaces_=function(){return[ft]},mt.prototype.getClass=function(){return mt};var vt=function(){};vt.prototype.add=function(){},vt.prototype.addAll=function(){},vt.prototype.isEmpty=function(){},vt.prototype.iterator=function(){},vt.prototype.size=function(){},vt.prototype.toArray=function(){},vt.prototype.remove=function(){};var It=function(t){function e(e){t.call(this),this.message=e||\"\"}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={name:{configurable:!0}};return n.name.get=function(){return\"IndexOutOfBoundsException\"},Object.defineProperties(e,n),e}(Error),Et=function(){};Et.prototype.hasNext=function(){},Et.prototype.next=function(){},Et.prototype.remove=function(){};var xt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.get=function(){},e.prototype.set=function(){},e.prototype.isEmpty=function(){},e}(vt);(n.prototype=new Error).name=\"NoSuchElementException\";var Nt=function(t){function e(){t.call(this),this.array_=[],arguments[0]instanceof vt&&this.addAll(arguments[0])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.ensureCapacity=function(){},e.prototype.interfaces_=function(){return[t,vt]},e.prototype.add=function(t){return 1===arguments.length?this.array_.push(t):this.array_.splice(arguments[0],arguments[1]),!0},e.prototype.clear=function(){this.array_=[]},e.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},e.prototype.set=function(t,e){var n=this.array_[t];return this.array_[t]=e,n},e.prototype.iterator=function(){return new Ct(this)},e.prototype.get=function(t){if(t<0||t>=this.size())throw new It;return this.array_[t]},e.prototype.isEmpty=function(){return 0===this.array_.length},e.prototype.size=function(){return this.array_.length},e.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},e.prototype.remove=function(t){for(var e=!1,n=0,i=this.array_.length;n<i;n++)if(this.array_[n]===t){this.array_.splice(n,1),e=!0;break}return e},e}(xt),Ct=function(t){function e(e){t.call(this),this.arrayList_=e,this.position_=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.next=function(){if(this.position_===this.arrayList_.size())throw new n;return this.arrayList_.get(this.position_++)},e.prototype.hasNext=function(){return this.position_<this.arrayList_.size()},e.prototype.set=function(t){return this.arrayList_.set(this.position_-1,t)},e.prototype.remove=function(){this.arrayList_.remove(this.arrayList_.get(this.position_))},e}(Et),St=function(t){function e(){if(t.call(this),0===arguments.length);else if(1===arguments.length){var e=arguments[0];this.ensureCapacity(e.length),this.add(e,!0)}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.ensureCapacity(n.length),this.add(n,i)}}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={coordArrayType:{configurable:!0}};return n.coordArrayType.get=function(){return new Array(0).fill(null)},e.prototype.getCoordinate=function(t){return this.get(t)},e.prototype.addAll=function(){if(2===arguments.length){for(var e=arguments[0],n=arguments[1],i=!1,r=e.iterator();r.hasNext();)this.add(r.next(),n),i=!0;return i}return t.prototype.addAll.apply(this,arguments)},e.prototype.clone=function(){for(var e=t.prototype.clone.call(this),n=0;n<this.size();n++)e.add(n,this.get(n).copy());return e},e.prototype.toCoordinateArray=function(){return this.toArray(e.coordArrayType)},e.prototype.add=function(){if(1===arguments.length){var e=arguments[0];t.prototype.add.call(this,e)}else if(2===arguments.length){if(arguments[0]instanceof Array&&\"boolean\"==typeof arguments[1]){var n=arguments[0],i=arguments[1];return this.add(n,i,!0),!0}if(arguments[0]instanceof N&&\"boolean\"==typeof arguments[1]){var r=arguments[0];if(!arguments[1]&&this.size()>=1){if(this.get(this.size()-1).equals2D(r))return null}t.prototype.add.call(this,r)}else if(arguments[0]instanceof Object&&\"boolean\"==typeof arguments[1]){var o=arguments[0],s=arguments[1];return this.add(o,s),!0}}else if(3===arguments.length){if(\"boolean\"==typeof arguments[2]&&arguments[0]instanceof Array&&\"boolean\"==typeof arguments[1]){var a=arguments[0],u=arguments[1];if(arguments[2])for(var l=0;l<a.length;l++)this.add(a[l],u);else for(var c=a.length-1;c>=0;c--)this.add(a[c],u);return!0}if(\"boolean\"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof N){var p=arguments[0],h=arguments[1];if(!arguments[2]){var f=this.size();if(f>0){if(p>0){if(this.get(p-1).equals2D(h))return null}if(p<f){if(this.get(p).equals2D(h))return null}}}t.prototype.add.call(this,p,h)}}else if(4===arguments.length){var g=arguments[0],d=arguments[1],y=arguments[2],_=arguments[3],m=1;y>_&&(m=-1);for(var v=y;v!==_;v+=m)this.add(g[v],d);return!0}},e.prototype.closeRing=function(){this.size()>0&&this.add(new N(this.get(0)),!1)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},Object.defineProperties(e,n),e}(Nt),Lt=function(){},bt={ForwardComparator:{configurable:!0},BidirectionalComparator:{configurable:!0},coordArrayType:{configurable:!0}};bt.ForwardComparator.get=function(){return wt},bt.BidirectionalComparator.get=function(){return Ot},bt.coordArrayType.get=function(){return new Array(0).fill(null)},Lt.prototype.interfaces_=function(){return[]},Lt.prototype.getClass=function(){return Lt},Lt.isRing=function(t){return!(t.length<4)&&!!t[0].equals2D(t[t.length-1])},Lt.ptNotInList=function(t,e){for(var n=0;n<t.length;n++){var i=t[n];if(Lt.indexOf(i,e)<0)return i}return null},Lt.scroll=function(t,e){var n=Lt.indexOf(e,t);if(n<0)return null;var i=new Array(t.length).fill(null);X.arraycopy(t,n,i,0,t.length-n),X.arraycopy(t,0,i,t.length-n,n),X.arraycopy(i,0,t,0,t.length)},Lt.equals=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].equals(e[n]))return!1;return!0}if(3===arguments.length){var i=arguments[0],r=arguments[1],o=arguments[2];if(i===r)return!0;if(null===i||null===r)return!1;if(i.length!==r.length)return!1;for(var s=0;s<i.length;s++)if(0!==o.compare(i[s],r[s]))return!1;return!0}},Lt.intersection=function(t,e){for(var n=new St,i=0;i<t.length;i++)e.intersects(t[i])&&n.add(t[i],!0);return n.toCoordinateArray()},Lt.hasRepeatedPoints=function(t){for(var e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1},Lt.removeRepeatedPoints=function(t){if(!Lt.hasRepeatedPoints(t))return t;return new St(t,!1).toCoordinateArray()},Lt.reverse=function(t){for(var e=t.length-1,n=Math.trunc(e/2),i=0;i<=n;i++){var r=t[i];t[i]=t[e-i],t[e-i]=r}},Lt.removeNull=function(t){for(var e=0,n=0;n<t.length;n++)null!==t[n]&&e++;var i=new Array(e).fill(null);if(0===e)return i;for(var r=0,o=0;o<t.length;o++)null!==t[o]&&(i[r++]=t[o]);return i},Lt.copyDeep=function(){if(1===arguments.length){for(var t=arguments[0],e=new Array(t.length).fill(null),n=0;n<t.length;n++)e[n]=new N(t[n]);return e}if(5===arguments.length)for(var i=arguments[0],r=arguments[1],o=arguments[2],s=arguments[3],a=arguments[4],u=0;u<a;u++)o[s+u]=new N(i[r+u])},Lt.isEqualReversed=function(t,e){for(var n=0;n<t.length;n++){var i=t[n],r=e[t.length-n-1];if(0!==i.compareTo(r))return!1}return!0},Lt.envelope=function(t){for(var e=new k,n=0;n<t.length;n++)e.expandToInclude(t[n]);return e},Lt.toCoordinateArray=function(t){return t.toArray(Lt.coordArrayType)},Lt.atLeastNCoordinatesOrNothing=function(t,e){return e.length>=t?e:[]},Lt.indexOf=function(t,e){for(var n=0;n<e.length;n++)if(t.equals(e[n]))return n;return-1},Lt.increasingDirection=function(t){for(var e=0;e<Math.trunc(t.length/2);e++){var n=t.length-1-e,i=t[e].compareTo(t[n]);if(0!==i)return i}return 1},Lt.compare=function(t,e){for(var n=0;n<t.length&&n<e.length;){var i=t[n].compareTo(e[n]);if(0!==i)return i;n++}return n<e.length?-1:n<t.length?1:0},Lt.minCoordinate=function(t){for(var e=null,n=0;n<t.length;n++)(null===e||e.compareTo(t[n])>0)&&(e=t[n]);return e},Lt.extract=function(t,e,n){e=T.clamp(e,0,t.length);var i=(n=T.clamp(n,-1,t.length))-e+1;n<0&&(i=0),e>=t.length&&(i=0),n<e&&(i=0);var r=new Array(i).fill(null);if(0===i)return r;for(var o=0,s=e;s<=n;s++)r[o++]=t[s];return r},Object.defineProperties(Lt,bt);var wt=function(){};wt.prototype.compare=function(t,e){return Lt.compare(t,e)},wt.prototype.interfaces_=function(){return[x]},wt.prototype.getClass=function(){return wt};var Ot=function(){};Ot.prototype.compare=function(t,e){var n=t,i=e;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;var r=Lt.compare(n,i);return Lt.isEqualReversed(n,i)?0:r},Ot.prototype.OLDcompare=function(t,e){var n=t,i=e;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;for(var r=Lt.increasingDirection(n),o=Lt.increasingDirection(i),s=r>0?0:n.length-1,a=o>0?0:n.length-1,u=0;u<n.length;u++){var l=n[s].compareTo(i[a]);if(0!==l)return l;s+=r,a+=o}return 0},Ot.prototype.interfaces_=function(){return[x]},Ot.prototype.getClass=function(){return Ot};var Tt=function(){};Tt.prototype.get=function(){},Tt.prototype.put=function(){},Tt.prototype.size=function(){},Tt.prototype.values=function(){},Tt.prototype.entrySet=function(){};var Rt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Tt);(i.prototype=new Error).name=\"OperationNotSupported\",(r.prototype=new vt).contains=function(){};var Pt=function(t){function e(){t.call(this),this.array_=[],arguments[0]instanceof vt&&this.addAll(arguments[0])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){if(this.array_[e]===t)return!0}return!1},e.prototype.add=function(t){return!this.contains(t)&&(this.array_.push(t),!0)},e.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},e.prototype.remove=function(t){throw new Error},e.prototype.size=function(){return this.array_.length},e.prototype.isEmpty=function(){return 0===this.array_.length},e.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},e.prototype.iterator=function(){return new Dt(this)},e}(r),Dt=function(t){function e(e){t.call(this),this.hashSet_=e,this.position_=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.next=function(){if(this.position_===this.hashSet_.size())throw new n;return this.hashSet_.array_[this.position_++]},e.prototype.hasNext=function(){return this.position_<this.hashSet_.size()},e.prototype.remove=function(){throw new i},e}(Et),Mt=0;(c.prototype=new Rt).get=function(t){for(var e=this.root_;null!==e;){var n=t.compareTo(e.key);if(n<0)e=e.left;else{if(!(n>0))return e.value;e=e.right}}return null},c.prototype.put=function(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:Mt,getValue:function(){return this.value},getKey:function(){return this.key}},this.size_=1,null;var n,i,r=this.root_;do{if(n=r,(i=t.compareTo(r.key))<0)r=r.left;else{if(!(i>0)){var o=r.value;return r.value=e,o}r=r.right}}while(null!==r);var s={key:t,left:null,right:null,value:e,parent:n,color:Mt,getValue:function(){return this.value},getKey:function(){return this.key}};return i<0?n.left=s:n.right=s,this.fixAfterInsertion(s),this.size_++,null},c.prototype.fixAfterInsertion=function(t){for(t.color=1;null!=t&&t!==this.root_&&1===t.parent.color;)if(s(t)===u(s(s(t)))){var e=l(s(s(t)));1===o(e)?(a(s(t),Mt),a(e,Mt),a(s(s(t)),1),t=s(s(t))):(t===l(s(t))&&(t=s(t),this.rotateLeft(t)),a(s(t),Mt),a(s(s(t)),1),this.rotateRight(s(s(t))))}else{var n=u(s(s(t)));1===o(n)?(a(s(t),Mt),a(n,Mt),a(s(s(t)),1),t=s(s(t))):(t===u(s(t))&&(t=s(t),this.rotateRight(t)),a(s(t),Mt),a(s(s(t)),1),this.rotateLeft(s(s(t))))}this.root_.color=Mt},c.prototype.values=function(){var t=new Nt,e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=c.successor(e));)t.add(e.value);return t},c.prototype.entrySet=function(){var t=new Pt,e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=c.successor(e));)t.add(e);return t},c.prototype.rotateLeft=function(t){if(null!=t){var e=t.right;t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null===t.parent?this.root_=e:t.parent.left===t?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e}},c.prototype.rotateRight=function(t){if(null!=t){var e=t.left;t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null===t.parent?this.root_=e:t.parent.right===t?t.parent.right=e:t.parent.left=e,e.right=t,t.parent=e}},c.prototype.getFirstEntry=function(){var t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t},c.successor=function(t){if(null===t)return null;if(null!==t.right){for(var e=t.right;null!==e.left;)e=e.left;return e}for(var n=t.parent,i=t;null!==n&&i===n.right;)i=n,n=n.parent;return n},c.prototype.size=function(){return this.size_};var At=function(){};At.prototype.interfaces_=function(){return[]},At.prototype.getClass=function(){return At},p.prototype=new r,(h.prototype=new p).contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){if(0===this.array_[e].compareTo(t))return!0}return!1},h.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,n=this.array_.length;e<n;e++){if(1===this.array_[e].compareTo(t))return this.array_.splice(e,0,t),!0}return this.array_.push(t),!0},h.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},h.prototype.remove=function(t){throw new i},h.prototype.size=function(){return this.array_.length},h.prototype.isEmpty=function(){return 0===this.array_.length},h.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},h.prototype.iterator=function(){return new Ft(this)};var Ft=function(t){this.treeSet_=t,this.position_=0};Ft.prototype.next=function(){if(this.position_===this.treeSet_.size())throw new n;return this.treeSet_.array_[this.position_++]},Ft.prototype.hasNext=function(){return this.position_<this.treeSet_.size()},Ft.prototype.remove=function(){throw new i};var Gt=function(){};Gt.sort=function(){var t,e,n,i,r=arguments[0];if(1===arguments.length)i=function(t,e){return t.compareTo(e)},r.sort(i);else if(2===arguments.length)n=arguments[1],i=function(t,e){return n.compare(t,e)},r.sort(i);else if(3===arguments.length){(e=r.slice(arguments[1],arguments[2])).sort();var o=r.slice(0,arguments[1]).concat(e,r.slice(arguments[2],r.length));for(r.splice(0,r.length),t=0;t<o.length;t++)r.push(o[t])}else if(4===arguments.length)for(e=r.slice(arguments[1],arguments[2]),n=arguments[3],i=function(t,e){return n.compare(t,e)},e.sort(i),o=r.slice(0,arguments[1]).concat(e,r.slice(arguments[2],r.length)),r.splice(0,r.length),t=0;t<o.length;t++)r.push(o[t])},Gt.asList=function(t){for(var e=new Nt,n=0,i=t.length;n<i;n++)e.add(t[n]);return e};var qt=function(){},Bt={P:{configurable:!0},L:{configurable:!0},A:{configurable:!0},FALSE:{configurable:!0},TRUE:{configurable:!0},DONTCARE:{configurable:!0},SYM_FALSE:{configurable:!0},SYM_TRUE:{configurable:!0},SYM_DONTCARE:{configurable:!0},SYM_P:{configurable:!0},SYM_L:{configurable:!0},SYM_A:{configurable:!0}};Bt.P.get=function(){return 0},Bt.L.get=function(){return 1},Bt.A.get=function(){return 2},Bt.FALSE.get=function(){return-1},Bt.TRUE.get=function(){return-2},Bt.DONTCARE.get=function(){return-3},Bt.SYM_FALSE.get=function(){return\"F\"},Bt.SYM_TRUE.get=function(){return\"T\"},Bt.SYM_DONTCARE.get=function(){return\"*\"},Bt.SYM_P.get=function(){return\"0\"},Bt.SYM_L.get=function(){return\"1\"},Bt.SYM_A.get=function(){return\"2\"},qt.prototype.interfaces_=function(){return[]},qt.prototype.getClass=function(){return qt},qt.toDimensionSymbol=function(t){switch(t){case qt.FALSE:return qt.SYM_FALSE;case qt.TRUE:return qt.SYM_TRUE;case qt.DONTCARE:return qt.SYM_DONTCARE;case qt.P:return qt.SYM_P;case qt.L:return qt.SYM_L;case qt.A:return qt.SYM_A}throw new _(\"Unknown dimension value: \"+t)},qt.toDimensionValue=function(t){switch(M.toUpperCase(t)){case qt.SYM_FALSE:return qt.FALSE;case qt.SYM_TRUE:return qt.TRUE;case qt.SYM_DONTCARE:return qt.DONTCARE;case qt.SYM_P:return qt.P;case qt.SYM_L:return qt.L;case qt.SYM_A:return qt.A}throw new _(\"Unknown dimension symbol: \"+t)},Object.defineProperties(qt,Bt);var Vt=function(){};Vt.prototype.filter=function(t){},Vt.prototype.interfaces_=function(){return[]},Vt.prototype.getClass=function(){return Vt};var Ut=function(){};Ut.prototype.filter=function(t,e){},Ut.prototype.isDone=function(){},Ut.prototype.isGeometryChanged=function(){},Ut.prototype.interfaces_=function(){return[]},Ut.prototype.getClass=function(){return Ut};var zt=function(t){function e(e,n){if(t.call(this,n),this._geometries=e||[],t.hasNullElements(this._geometries))throw new _(\"geometries must not contain null elements\")}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){for(var t=new k,e=0;e<this._geometries.length;e++)t.expandToInclude(this._geometries[e].getEnvelopeInternal());return t},e.prototype.getGeometryN=function(t){return this._geometries[t]},e.prototype.getSortIndex=function(){return t.SORTINDEX_GEOMETRYCOLLECTION},e.prototype.getCoordinates=function(){for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=0;n<this._geometries.length;n++)for(var i=this._geometries[n].getCoordinates(),r=0;r<i.length;r++)t[++e]=i[r];return t},e.prototype.getArea=function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getArea();return t},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];if(!this.isEquivalentClass(e))return!1;var i=e;if(this._geometries.length!==i._geometries.length)return!1;for(var r=0;r<this._geometries.length;r++)if(!this._geometries[r].equalsExact(i._geometries[r],n))return!1;return!0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){for(var t=0;t<this._geometries.length;t++)this._geometries[t].normalize();Gt.sort(this._geometries)},e.prototype.getCoordinate=function(){return this.isEmpty()?null:this._geometries[0].getCoordinate()},e.prototype.getBoundaryDimension=function(){for(var t=qt.FALSE,e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getBoundaryDimension());return t},e.prototype.getDimension=function(){for(var t=qt.FALSE,e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getDimension());return t},e.prototype.getLength=function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getLength();return t},e.prototype.getNumPoints=function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getNumPoints();return t},e.prototype.getNumGeometries=function(){return this._geometries.length},e.prototype.reverse=function(){for(var t=this._geometries.length,e=new Array(t).fill(null),n=0;n<this._geometries.length;n++)e[n]=this._geometries[n].reverse();return this.getFactory().createGeometryCollection(e)},e.prototype.compareToSameClass=function(){if(1===arguments.length){var t=arguments[0],e=new h(Gt.asList(this._geometries)),n=new h(Gt.asList(t._geometries));return this.compare(e,n)}if(2===arguments.length){for(var i=arguments[0],r=arguments[1],o=i,s=this.getNumGeometries(),a=o.getNumGeometries(),u=0;u<s&&u<a;){var l=this.getGeometryN(u),c=o.getGeometryN(u),p=l.compareToSameClass(c,r);if(0!==p)return p;u++}return u<s?1:u<a?-1:0}},e.prototype.apply=function(){if(O(arguments[0],ht))for(var t=arguments[0],e=0;e<this._geometries.length;e++)this._geometries[e].apply(t);else if(O(arguments[0],Ut)){var n=arguments[0];if(0===this._geometries.length)return null;for(var i=0;i<this._geometries.length&&(this._geometries[i].apply(n),!n.isDone());i++);n.isGeometryChanged()&&this.geometryChanged()}else if(O(arguments[0],Vt)){var r=arguments[0];r.filter(this);for(var o=0;o<this._geometries.length;o++)this._geometries[o].apply(r)}else if(O(arguments[0],ut)){var s=arguments[0];s.filter(this);for(var a=0;a<this._geometries.length;a++)this._geometries[a].apply(s)}},e.prototype.getBoundary=function(){return this.checkNotGeometryCollection(this),tt.shouldNeverReachHere(),null},e.prototype.clone=function(){var e=t.prototype.clone.call(this);e._geometries=new Array(this._geometries.length).fill(null);for(var n=0;n<this._geometries.length;n++)e._geometries[n]=this._geometries[n].clone();return e},e.prototype.getGeometryType=function(){return\"GeometryCollection\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.isEmpty=function(){for(var t=0;t<this._geometries.length;t++)if(!this._geometries[t].isEmpty())return!1;return!0},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x4f07bcb1f857d800},Object.defineProperties(e,n),e}(lt),Xt=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return lt.SORTINDEX_MULTILINESTRING},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return this.isClosed()?qt.FALSE:0},e.prototype.isClosed=function(){if(this.isEmpty())return!1;for(var t=0;t<this._geometries.length;t++)if(!this._geometries[t].isClosed())return!1;return!0},e.prototype.getDimension=function(){return 1},e.prototype.reverse=function(){for(var t=this._geometries.length,e=new Array(t).fill(null),n=0;n<this._geometries.length;n++)e[t-1-n]=this._geometries[n].reverse();return this.getFactory().createMultiLineString(e)},e.prototype.getBoundary=function(){return new Yt(this).getBoundary()},e.prototype.getGeometryType=function(){return\"MultiLineString\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.interfaces_=function(){return[At]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x7155d2ab4afa8000},Object.defineProperties(e,n),e}(zt),Yt=function(){if(this._geom=null,this._geomFact=null,this._bnRule=null,this._endpointMap=null,1===arguments.length){var t=arguments[0],e=ft.MOD2_BOUNDARY_RULE;this._geom=t,this._geomFact=t.getFactory(),this._bnRule=e}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this._geom=n,this._geomFact=n.getFactory(),this._bnRule=i}};Yt.prototype.boundaryMultiLineString=function(t){if(this._geom.isEmpty())return this.getEmptyMultiPoint();var e=this.computeBoundaryCoordinates(t);return 1===e.length?this._geomFact.createPoint(e[0]):this._geomFact.createMultiPointFromCoords(e)},Yt.prototype.getBoundary=function(){return this._geom instanceof Kt?this.boundaryLineString(this._geom):this._geom instanceof Xt?this.boundaryMultiLineString(this._geom):this._geom.getBoundary()},Yt.prototype.boundaryLineString=function(t){if(this._geom.isEmpty())return this.getEmptyMultiPoint();if(t.isClosed()){return this._bnRule.isInBoundary(2)?t.getStartPoint():this._geomFact.createMultiPoint()}return this._geomFact.createMultiPoint([t.getStartPoint(),t.getEndPoint()])},Yt.prototype.getEmptyMultiPoint=function(){return this._geomFact.createMultiPoint()},Yt.prototype.computeBoundaryCoordinates=function(t){var e=new Nt;this._endpointMap=new c;for(var n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n);0!==i.getNumPoints()&&(this.addEndpoint(i.getCoordinateN(0)),this.addEndpoint(i.getCoordinateN(i.getNumPoints()-1)))}for(var r=this._endpointMap.entrySet().iterator();r.hasNext();){var o=r.next(),s=o.getValue().count;this._bnRule.isInBoundary(s)&&e.add(o.getKey())}return Lt.toCoordinateArray(e)},Yt.prototype.addEndpoint=function(t){var e=this._endpointMap.get(t);null===e&&(e=new kt,this._endpointMap.put(t,e)),e.count++},Yt.prototype.interfaces_=function(){return[]},Yt.prototype.getClass=function(){return Yt},Yt.getBoundary=function(){if(1===arguments.length){var t=arguments[0];return new Yt(t).getBoundary()}if(2===arguments.length){var e=arguments[0],n=arguments[1];return new Yt(e,n).getBoundary()}};var kt=function(){this.count=null};kt.prototype.interfaces_=function(){return[]},kt.prototype.getClass=function(){return kt};var jt=function(){},Ht={NEWLINE:{configurable:!0},SIMPLE_ORDINATE_FORMAT:{configurable:!0}};jt.prototype.interfaces_=function(){return[]},jt.prototype.getClass=function(){return jt},jt.chars=function(t,e){for(var n=new Array(e).fill(null),i=0;i<e;i++)n[i]=t;return String(n)},jt.getStackTrace=function(){if(1===arguments.length){var t=arguments[0],e=new function(){},n=new function(){}(e);return t.printStackTrace(n),e.toString()}if(2===arguments.length){for(var i=arguments[0],r=arguments[1],o=\"\",s=new function(){}(new function(){}(jt.getStackTrace(i))),a=0;a<r;a++)try{o+=s.readLine()+jt.NEWLINE}catch(t){if(!(t instanceof f))throw t;tt.shouldNeverReachHere()}return o}},jt.split=function(t,e){for(var n=e.length,i=new Nt,r=\"\"+t,o=r.indexOf(e);o>=0;){var s=r.substring(0,o);i.add(s),o=(r=r.substring(o+n)).indexOf(e)}r.length>0&&i.add(r);for(var a=new Array(i.size()).fill(null),u=0;u<a.length;u++)a[u]=i.get(u);return a},jt.toString=function(){if(1===arguments.length){var t=arguments[0];return jt.SIMPLE_ORDINATE_FORMAT.format(t)}},jt.spaces=function(t){return jt.chars(\" \",t)},Ht.NEWLINE.get=function(){return X.getProperty(\"line.separator\")},Ht.SIMPLE_ORDINATE_FORMAT.get=function(){return new function(){}(\"0.#\")},Object.defineProperties(jt,Ht);var Wt=function(){};Wt.prototype.interfaces_=function(){return[]},Wt.prototype.getClass=function(){return Wt},Wt.copyCoord=function(t,e,n,i){for(var r=Math.min(t.getDimension(),n.getDimension()),o=0;o<r;o++)n.setOrdinate(i,o,t.getOrdinate(e,o))},Wt.isRing=function(t){var e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,B.X)===t.getOrdinate(e-1,B.X)&&t.getOrdinate(0,B.Y)===t.getOrdinate(e-1,B.Y))},Wt.isEqual=function(t,e){var n=t.size();if(n!==e.size())return!1;for(var i=Math.min(t.getDimension(),e.getDimension()),r=0;r<n;r++)for(var o=0;o<i;o++){var s=t.getOrdinate(r,o),a=e.getOrdinate(r,o);if(t.getOrdinate(r,o)!==e.getOrdinate(r,o)&&(!m.isNaN(s)||!m.isNaN(a)))return!1}return!0},Wt.extend=function(t,e,n){var i=t.create(n,e.getDimension()),r=e.size();if(Wt.copy(e,0,i,0,r),r>0)for(var o=r;o<n;o++)Wt.copy(e,r-1,i,o,1);return i},Wt.reverse=function(t){for(var e=t.size()-1,n=Math.trunc(e/2),i=0;i<=n;i++)Wt.swap(t,i,e-i)},Wt.swap=function(t,e,n){if(e===n)return null;for(var i=0;i<t.getDimension();i++){var r=t.getOrdinate(e,i);t.setOrdinate(e,i,t.getOrdinate(n,i)),t.setOrdinate(n,i,r)}},Wt.copy=function(t,e,n,i,r){for(var o=0;o<r;o++)Wt.copyCoord(t,e+o,n,i+o)},Wt.toString=function(){if(1===arguments.length){var t=arguments[0],e=t.size();if(0===e)return\"()\";var n=t.getDimension(),i=new P;i.append(\"(\");for(var r=0;r<e;r++){r>0&&i.append(\" \");for(var o=0;o<n;o++)o>0&&i.append(\",\"),i.append(jt.toString(t.getOrdinate(r,o)))}return i.append(\")\"),i.toString()}},Wt.ensureValidRing=function(t,e){var n=e.size();if(0===n)return e;if(n<=3)return Wt.createClosedRing(t,e,4);return e.getOrdinate(0,B.X)===e.getOrdinate(n-1,B.X)&&e.getOrdinate(0,B.Y)===e.getOrdinate(n-1,B.Y)?e:Wt.createClosedRing(t,e,n+1)},Wt.createClosedRing=function(t,e,n){var i=t.create(n,e.getDimension()),r=e.size();Wt.copy(e,0,i,0,r);for(var o=r;o<n;o++)Wt.copy(e,0,i,o,1);return i};var Kt=function(t){function e(e,n){t.call(this,n),this._points=null,this.init(e)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){return this.isEmpty()?new k:this._points.expandEnvelope(new k)},e.prototype.isRing=function(){return this.isClosed()&&this.isSimple()},e.prototype.getSortIndex=function(){return t.SORTINDEX_LINESTRING},e.prototype.getCoordinates=function(){return this._points.toCoordinateArray()},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];if(!this.isEquivalentClass(e))return!1;var i=e;if(this._points.size()!==i._points.size())return!1;for(var r=0;r<this._points.size();r++)if(!this.equal(this._points.getCoordinate(r),i._points.getCoordinate(r),n))return!1;return!0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){for(var t=0;t<Math.trunc(this._points.size()/2);t++){var e=this._points.size()-1-t;if(!this._points.getCoordinate(t).equals(this._points.getCoordinate(e)))return this._points.getCoordinate(t).compareTo(this._points.getCoordinate(e))>0&&Wt.reverse(this._points),null}},e.prototype.getCoordinate=function(){return this.isEmpty()?null:this._points.getCoordinate(0)},e.prototype.getBoundaryDimension=function(){return this.isClosed()?qt.FALSE:0},e.prototype.isClosed=function(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))},e.prototype.getEndPoint=function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)},e.prototype.getDimension=function(){return 1},e.prototype.getLength=function(){return st.computeLength(this._points)},e.prototype.getNumPoints=function(){return this._points.size()},e.prototype.reverse=function(){var t=this._points.copy();Wt.reverse(t);return this.getFactory().createLineString(t)},e.prototype.compareToSameClass=function(){if(1===arguments.length){for(var t=arguments[0],e=0,n=0;e<this._points.size()&&n<t._points.size();){var i=this._points.getCoordinate(e).compareTo(t._points.getCoordinate(n));if(0!==i)return i;e++,n++}return e<this._points.size()?1:n<t._points.size()?-1:0}if(2===arguments.length){var r=arguments[0];return arguments[1].compare(this._points,r._points)}},e.prototype.apply=function(){if(O(arguments[0],ht))for(var t=arguments[0],e=0;e<this._points.size();e++)t.filter(this._points.getCoordinate(e));else if(O(arguments[0],Ut)){var n=arguments[0];if(0===this._points.size())return null;for(var i=0;i<this._points.size()&&(n.filter(this._points,i),!n.isDone());i++);n.isGeometryChanged()&&this.geometryChanged()}else if(O(arguments[0],Vt)){arguments[0].filter(this)}else if(O(arguments[0],ut)){arguments[0].filter(this)}},e.prototype.getBoundary=function(){return new Yt(this).getBoundary()},e.prototype.isEquivalentClass=function(t){return t instanceof e},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e._points=this._points.clone(),e},e.prototype.getCoordinateN=function(t){return this._points.getCoordinate(t)},e.prototype.getGeometryType=function(){return\"LineString\"},e.prototype.copy=function(){return new e(this._points.copy(),this._factory)},e.prototype.getCoordinateSequence=function(){return this._points},e.prototype.isEmpty=function(){return 0===this._points.size()},e.prototype.init=function(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new _(\"Invalid number of points in LineString (found \"+t.size()+\" - must be 0 or >= 2)\");this._points=t},e.prototype.isCoordinate=function(t){for(var e=0;e<this._points.size();e++)if(this._points.getCoordinate(e).equals(t))return!0;return!1},e.prototype.getStartPoint=function(){return this.isEmpty()?null:this.getPointN(0)},e.prototype.getPointN=function(t){return this.getFactory().createPoint(this._points.getCoordinate(t))},e.prototype.interfaces_=function(){return[At]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x2b2b51ba435c8e00},Object.defineProperties(e,n),e}(lt),Jt=function(){};Jt.prototype.interfaces_=function(){return[]},Jt.prototype.getClass=function(){return Jt};var Qt=function(t){function e(e,n){t.call(this,n),this._coordinates=e||null,this.init(this._coordinates)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){if(this.isEmpty())return new k;var t=new k;return t.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0)),t},e.prototype.getSortIndex=function(){return t.SORTINDEX_POINT},e.prototype.getCoordinates=function(){return this.isEmpty()?[]:[this.getCoordinate()]},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&(!(!this.isEmpty()||!e.isEmpty())||this.isEmpty()===e.isEmpty()&&this.equal(e.getCoordinate(),this.getCoordinate(),n))}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){},e.prototype.getCoordinate=function(){return 0!==this._coordinates.size()?this._coordinates.getCoordinate(0):null},e.prototype.getBoundaryDimension=function(){return qt.FALSE},e.prototype.getDimension=function(){return 0},e.prototype.getNumPoints=function(){return this.isEmpty()?0:1},e.prototype.reverse=function(){return this.copy()},e.prototype.getX=function(){if(null===this.getCoordinate())throw new Error(\"getX called on empty Point\");return this.getCoordinate().x},e.prototype.compareToSameClass=function(){if(1===arguments.length){var t=arguments[0];return this.getCoordinate().compareTo(t.getCoordinate())}if(2===arguments.length){var e=arguments[0];return arguments[1].compare(this._coordinates,e._coordinates)}},e.prototype.apply=function(){if(O(arguments[0],ht)){var t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate())}else if(O(arguments[0],Ut)){var e=arguments[0];if(this.isEmpty())return null;e.filter(this._coordinates,0),e.isGeometryChanged()&&this.geometryChanged()}else if(O(arguments[0],Vt)){arguments[0].filter(this)}else if(O(arguments[0],ut)){arguments[0].filter(this)}},e.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null)},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e._coordinates=this._coordinates.clone(),e},e.prototype.getGeometryType=function(){return\"Point\"},e.prototype.copy=function(){return new e(this._coordinates.copy(),this._factory)},e.prototype.getCoordinateSequence=function(){return this._coordinates},e.prototype.getY=function(){if(null===this.getCoordinate())throw new Error(\"getY called on empty Point\");return this.getCoordinate().y},e.prototype.isEmpty=function(){return 0===this._coordinates.size()},e.prototype.init=function(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),tt.isTrue(t.size()<=1),this._coordinates=t},e.prototype.isSimple=function(){return!0},e.prototype.interfaces_=function(){return[Jt]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x44077bad161cbc00},Object.defineProperties(e,n),e}(lt),Zt=function(){};Zt.prototype.interfaces_=function(){return[]},Zt.prototype.getClass=function(){return Zt};var $t=function(t){function e(e,n,i){if(t.call(this,i),this._shell=null,this._holes=null,null===e&&(e=this.getFactory().createLinearRing()),null===n&&(n=[]),t.hasNullElements(n))throw new _(\"holes must not contain null elements\");if(e.isEmpty()&&t.hasNonEmptyElements(n))throw new _(\"shell is empty but holes are not\");this._shell=e,this._holes=n}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){return this._shell.getEnvelopeInternal()},e.prototype.getSortIndex=function(){return t.SORTINDEX_POLYGON},e.prototype.getCoordinates=function(){if(this.isEmpty())return[];for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=this._shell.getCoordinates(),i=0;i<n.length;i++)t[++e]=n[i];for(var r=0;r<this._holes.length;r++)for(var o=this._holes[r].getCoordinates(),s=0;s<o.length;s++)t[++e]=o[s];return t},e.prototype.getArea=function(){var t=0;t+=Math.abs(st.signedArea(this._shell.getCoordinateSequence()));for(var e=0;e<this._holes.length;e++)t-=Math.abs(st.signedArea(this._holes[e].getCoordinateSequence()));return t},e.prototype.isRectangle=function(){if(0!==this.getNumInteriorRing())return!1;if(null===this._shell)return!1;if(5!==this._shell.getNumPoints())return!1;for(var t=this._shell.getCoordinateSequence(),e=this.getEnvelopeInternal(),n=0;n<5;n++){var i=t.getX(n);if(i!==e.getMinX()&&i!==e.getMaxX())return!1;var r=t.getY(n);if(r!==e.getMinY()&&r!==e.getMaxY())return!1}for(var o=t.getX(0),s=t.getY(0),a=1;a<=4;a++){var u=t.getX(a),l=t.getY(a);if(u!==o===(l!==s))return!1;o=u,s=l}return!0},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];if(!this.isEquivalentClass(e))return!1;var i=e,r=this._shell,o=i._shell;if(!r.equalsExact(o,n))return!1;if(this._holes.length!==i._holes.length)return!1;for(var s=0;s<this._holes.length;s++)if(!this._holes[s].equalsExact(i._holes[s],n))return!1;return!0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){if(0===arguments.length){this.normalize(this._shell,!0);for(var t=0;t<this._holes.length;t++)this.normalize(this._holes[t],!1);Gt.sort(this._holes)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(e.isEmpty())return null;var i=new Array(e.getCoordinates().length-1).fill(null);X.arraycopy(e.getCoordinates(),0,i,0,i.length);var r=Lt.minCoordinate(e.getCoordinates());Lt.scroll(i,r),X.arraycopy(i,0,e.getCoordinates(),0,i.length),e.getCoordinates()[i.length]=i[0],st.isCCW(e.getCoordinates())===n&&Lt.reverse(e.getCoordinates())}},e.prototype.getCoordinate=function(){return this._shell.getCoordinate()},e.prototype.getNumInteriorRing=function(){return this._holes.length},e.prototype.getBoundaryDimension=function(){return 1},e.prototype.getDimension=function(){return 2},e.prototype.getLength=function(){var t=0;t+=this._shell.getLength();for(var e=0;e<this._holes.length;e++)t+=this._holes[e].getLength();return t},e.prototype.getNumPoints=function(){for(var t=this._shell.getNumPoints(),e=0;e<this._holes.length;e++)t+=this._holes[e].getNumPoints();return t},e.prototype.reverse=function(){var t=this.copy();t._shell=this._shell.copy().reverse(),t._holes=new Array(this._holes.length).fill(null);for(var e=0;e<this._holes.length;e++)t._holes[e]=this._holes[e].copy().reverse();return t},e.prototype.convexHull=function(){return this.getExteriorRing().convexHull()},e.prototype.compareToSameClass=function(){if(1===arguments.length){var t=arguments[0],e=this._shell,n=t._shell;return e.compareToSameClass(n)}if(2===arguments.length){var i=arguments[0],r=arguments[1],o=i,s=this._shell,a=o._shell,u=s.compareToSameClass(a,r);if(0!==u)return u;for(var l=this.getNumInteriorRing(),c=o.getNumInteriorRing(),p=0;p<l&&p<c;){var h=this.getInteriorRingN(p),f=o.getInteriorRingN(p),g=h.compareToSameClass(f,r);if(0!==g)return g;p++}return p<l?1:p<c?-1:0}},e.prototype.apply=function(t){if(O(t,ht)){this._shell.apply(t);for(var e=0;e<this._holes.length;e++)this._holes[e].apply(t)}else if(O(t,Ut)){if(this._shell.apply(t),!t.isDone())for(var n=0;n<this._holes.length&&(this._holes[n].apply(t),!t.isDone());n++);t.isGeometryChanged()&&this.geometryChanged()}else if(O(t,Vt))t.filter(this);else if(O(t,ut)){t.filter(this),this._shell.apply(t);for(var i=0;i<this._holes.length;i++)this._holes[i].apply(t)}},e.prototype.getBoundary=function(){if(this.isEmpty())return this.getFactory().createMultiLineString();var t=new Array(this._holes.length+1).fill(null);t[0]=this._shell;for(var e=0;e<this._holes.length;e++)t[e+1]=this._holes[e];return t.length<=1?this.getFactory().createLinearRing(t[0].getCoordinateSequence()):this.getFactory().createMultiLineString(t)},e.prototype.clone=function(){var e=t.prototype.clone.call(this);e._shell=this._shell.clone(),e._holes=new Array(this._holes.length).fill(null);for(var n=0;n<this._holes.length;n++)e._holes[n]=this._holes[n].clone();return e},e.prototype.getGeometryType=function(){return\"Polygon\"},e.prototype.copy=function(){for(var t=this._shell.copy(),n=new Array(this._holes.length).fill(null),i=0;i<n.length;i++)n[i]=this._holes[i].copy();return new e(t,n,this._factory)},e.prototype.getExteriorRing=function(){return this._shell},e.prototype.isEmpty=function(){return this._shell.isEmpty()},e.prototype.getInteriorRingN=function(t){return this._holes[t]},e.prototype.interfaces_=function(){return[Zt]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x307ffefd8dc97200},Object.defineProperties(e,n),e}(lt),te=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return lt.SORTINDEX_MULTIPOINT},e.prototype.isValid=function(){return!0},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getCoordinate=function(){if(1===arguments.length){var e=arguments[0];return this._geometries[e].getCoordinate()}return t.prototype.getCoordinate.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return qt.FALSE},e.prototype.getDimension=function(){return 0},e.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null)},e.prototype.getGeometryType=function(){return\"MultiPoint\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.interfaces_=function(){return[Jt]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x6fb1ed4162e0fc00},Object.defineProperties(e,n),e}(zt),ee=function(t){function e(e,n){e instanceof N&&n instanceof _e&&(e=n.getCoordinateSequenceFactory().create(e)),t.call(this,e,n),this.validateConstruction()}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={MINIMUM_VALID_SIZE:{configurable:!0},serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return lt.SORTINDEX_LINEARRING},e.prototype.getBoundaryDimension=function(){return qt.FALSE},e.prototype.isClosed=function(){return!!this.isEmpty()||t.prototype.isClosed.call(this)},e.prototype.reverse=function(){var t=this._points.copy();Wt.reverse(t);return this.getFactory().createLinearRing(t)},e.prototype.validateConstruction=function(){if(!this.isEmpty()&&!t.prototype.isClosed.call(this))throw new _(\"Points of LinearRing do not form a closed linestring\");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<e.MINIMUM_VALID_SIZE)throw new _(\"Invalid number of points in LinearRing (found \"+this.getCoordinateSequence().size()+\" - must be 0 or >= 4)\")},e.prototype.getGeometryType=function(){return\"LinearRing\"},e.prototype.copy=function(){return new e(this._points.copy(),this._factory)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},n.MINIMUM_VALID_SIZE.get=function(){return 4},n.serialVersionUID.get=function(){return-0x3b229e262367a600},Object.defineProperties(e,n),e}(Kt),ne=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return lt.SORTINDEX_MULTIPOLYGON},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return 1},e.prototype.getDimension=function(){return 2},e.prototype.reverse=function(){for(var t=this._geometries.length,e=new Array(t).fill(null),n=0;n<this._geometries.length;n++)e[n]=this._geometries[n].reverse();return this.getFactory().createMultiPolygon(e)},e.prototype.getBoundary=function(){if(this.isEmpty())return this.getFactory().createMultiLineString();for(var t=new Nt,e=0;e<this._geometries.length;e++)for(var n=this._geometries[e].getBoundary(),i=0;i<n.getNumGeometries();i++)t.add(n.getGeometryN(i));var r=new Array(t.size()).fill(null);return this.getFactory().createMultiLineString(t.toArray(r))},e.prototype.getGeometryType=function(){return\"MultiPolygon\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.interfaces_=function(){return[Zt]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x7a5aa1369171980},Object.defineProperties(e,n),e}(zt),ie=function(t){this._factory=t||null,this._isUserDataCopied=!1},re={NoOpGeometryOperation:{configurable:!0},CoordinateOperation:{configurable:!0},CoordinateSequenceOperation:{configurable:!0}};ie.prototype.setCopyUserData=function(t){this._isUserDataCopied=t},ie.prototype.edit=function(t,e){if(null===t)return null;var n=this.editInternal(t,e);return this._isUserDataCopied&&n.setUserData(t.getUserData()),n},ie.prototype.editInternal=function(t,e){return null===this._factory&&(this._factory=t.getFactory()),t instanceof zt?this.editGeometryCollection(t,e):t instanceof $t?this.editPolygon(t,e):t instanceof Qt?e.edit(t,this._factory):t instanceof Kt?e.edit(t,this._factory):(tt.shouldNeverReachHere(\"Unsupported Geometry class: \"+t.getClass().getName()),null)},ie.prototype.editGeometryCollection=function(t,e){for(var n=e.edit(t,this._factory),i=new Nt,r=0;r<n.getNumGeometries();r++){var o=this.edit(n.getGeometryN(r),e);null===o||o.isEmpty()||i.add(o)}return n.getClass()===te?this._factory.createMultiPoint(i.toArray([])):n.getClass()===Xt?this._factory.createMultiLineString(i.toArray([])):n.getClass()===ne?this._factory.createMultiPolygon(i.toArray([])):this._factory.createGeometryCollection(i.toArray([]))},ie.prototype.editPolygon=function(t,e){var n=e.edit(t,this._factory);if(null===n&&(n=this._factory.createPolygon(null)),n.isEmpty())return n;var i=this.edit(n.getExteriorRing(),e);if(null===i||i.isEmpty())return this._factory.createPolygon();for(var r=new Nt,o=0;o<n.getNumInteriorRing();o++){var s=this.edit(n.getInteriorRingN(o),e);null===s||s.isEmpty()||r.add(s)}return this._factory.createPolygon(i,r.toArray([]))},ie.prototype.interfaces_=function(){return[]},ie.prototype.getClass=function(){return ie},ie.GeometryEditorOperation=function(){},re.NoOpGeometryOperation.get=function(){return oe},re.CoordinateOperation.get=function(){return se},re.CoordinateSequenceOperation.get=function(){return ae},Object.defineProperties(ie,re);var oe=function(){};oe.prototype.edit=function(t,e){return t},oe.prototype.interfaces_=function(){return[ie.GeometryEditorOperation]},oe.prototype.getClass=function(){return oe};var se=function(){};se.prototype.edit=function(t,e){var n=this.editCoordinates(t.getCoordinates(),t);return null===n?t:t instanceof ee?e.createLinearRing(n):t instanceof Kt?e.createLineString(n):t instanceof Qt?n.length>0?e.createPoint(n[0]):e.createPoint():t},se.prototype.interfaces_=function(){return[ie.GeometryEditorOperation]},se.prototype.getClass=function(){return se};var ae=function(){};ae.prototype.edit=function(t,e){return t instanceof ee?e.createLinearRing(this.edit(t.getCoordinateSequence(),t)):t instanceof Kt?e.createLineString(this.edit(t.getCoordinateSequence(),t)):t instanceof Qt?e.createPoint(this.edit(t.getCoordinateSequence(),t)):t},ae.prototype.interfaces_=function(){return[ie.GeometryEditorOperation]},ae.prototype.getClass=function(){return ae};var ue=function(){if(this._dimension=3,this._coordinates=null,1===arguments.length){if(arguments[0]instanceof Array)this._coordinates=arguments[0],this._dimension=3;else if(Number.isInteger(arguments[0])){var t=arguments[0];this._coordinates=new Array(t).fill(null);for(var e=0;e<t;e++)this._coordinates[e]=new N}else if(O(arguments[0],B)){var n=arguments[0];if(null===n)return this._coordinates=new Array(0).fill(null),null;this._dimension=n.getDimension(),this._coordinates=new Array(n.size()).fill(null);for(var i=0;i<this._coordinates.length;i++)this._coordinates[i]=n.getCoordinateCopy(i)}}else if(2===arguments.length)if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var r=arguments[0],o=arguments[1];this._coordinates=r,this._dimension=o,null===r&&(this._coordinates=new Array(0).fill(null))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var s=arguments[0],a=arguments[1];this._coordinates=new Array(s).fill(null),this._dimension=a;for(var u=0;u<s;u++)this._coordinates[u]=new N}},le={serialVersionUID:{configurable:!0}};ue.prototype.setOrdinate=function(t,e,n){switch(e){case B.X:this._coordinates[t].x=n;break;case B.Y:this._coordinates[t].y=n;break;case B.Z:this._coordinates[t].z=n;break;default:throw new _(\"invalid ordinateIndex\")}},ue.prototype.size=function(){return this._coordinates.length},ue.prototype.getOrdinate=function(t,e){switch(e){case B.X:return this._coordinates[t].x;case B.Y:return this._coordinates[t].y;case B.Z:return this._coordinates[t].z}return m.NaN},ue.prototype.getCoordinate=function(){if(1===arguments.length){var t=arguments[0];return this._coordinates[t]}if(2===arguments.length){var e=arguments[0],n=arguments[1];n.x=this._coordinates[e].x,n.y=this._coordinates[e].y,n.z=this._coordinates[e].z}},ue.prototype.getCoordinateCopy=function(t){return new N(this._coordinates[t])},ue.prototype.getDimension=function(){return this._dimension},ue.prototype.getX=function(t){return this._coordinates[t].x},ue.prototype.clone=function(){for(var t=new Array(this.size()).fill(null),e=0;e<this._coordinates.length;e++)t[e]=this._coordinates[e].clone();return new ue(t,this._dimension)},ue.prototype.expandEnvelope=function(t){for(var e=0;e<this._coordinates.length;e++)t.expandToInclude(this._coordinates[e]);return t},ue.prototype.copy=function(){for(var t=new Array(this.size()).fill(null),e=0;e<this._coordinates.length;e++)t[e]=this._coordinates[e].copy();return new ue(t,this._dimension)},ue.prototype.toString=function(){if(this._coordinates.length>0){var t=new P(17*this._coordinates.length);t.append(\"(\"),t.append(this._coordinates[0]);for(var e=1;e<this._coordinates.length;e++)t.append(\", \"),t.append(this._coordinates[e]);return t.append(\")\"),t.toString()}return\"()\"},ue.prototype.getY=function(t){return this._coordinates[t].y},ue.prototype.toCoordinateArray=function(){return this._coordinates},ue.prototype.interfaces_=function(){return[B,e]},ue.prototype.getClass=function(){return ue},le.serialVersionUID.get=function(){return-0xcb44a778db18e00},Object.defineProperties(ue,le);var ce=function(){},pe={serialVersionUID:{configurable:!0},instanceObject:{configurable:!0}};ce.prototype.readResolve=function(){return ce.instance()},ce.prototype.create=function(){if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new ue(t)}if(O(arguments[0],B)){var e=arguments[0];return new ue(e)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return i>3&&(i=3),i<2?new ue(n):new ue(n,i)}},ce.prototype.interfaces_=function(){return[L,e]},ce.prototype.getClass=function(){return ce},ce.instance=function(){return ce.instanceObject},pe.serialVersionUID.get=function(){return-0x38e49fa6cf6f2e00},pe.instanceObject.get=function(){return new ce},Object.defineProperties(ce,pe);var he=function(t){function e(){t.call(this),this.map_=new Map}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.get=function(t){return this.map_.get(t)||null},e.prototype.put=function(t,e){return this.map_.set(t,e),e},e.prototype.values=function(){for(var t=new Nt,e=this.map_.values(),n=e.next();!n.done;)t.add(n.value),n=e.next();return t},e.prototype.entrySet=function(){var t=new Pt;return this.map_.entries().forEach(function(e){return t.add(e)}),t},e.prototype.size=function(){return this.map_.size()},e}(Tt),fe=function t(){if(this._modelType=null,this._scale=null,0===arguments.length)this._modelType=t.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof de){var e=arguments[0];this._modelType=e,e===t.FIXED&&this.setScale(1)}else if(\"number\"==typeof arguments[0]){var n=arguments[0];this._modelType=t.FIXED,this.setScale(n)}else if(arguments[0]instanceof t){var i=arguments[0];this._modelType=i._modelType,this._scale=i._scale}},ge={serialVersionUID:{configurable:!0},maximumPreciseValue:{configurable:!0}};fe.prototype.equals=function(t){if(!(t instanceof fe))return!1;var e=t;return this._modelType===e._modelType&&this._scale===e._scale},fe.prototype.compareTo=function(t){var e=t,n=this.getMaximumSignificantDigits(),i=e.getMaximumSignificantDigits();return new D(n).compareTo(new D(i))},fe.prototype.getScale=function(){return this._scale},fe.prototype.isFloating=function(){return this._modelType===fe.FLOATING||this._modelType===fe.FLOATING_SINGLE},fe.prototype.getType=function(){return this._modelType},fe.prototype.toString=function(){var t=\"UNKNOWN\";return this._modelType===fe.FLOATING?t=\"Floating\":this._modelType===fe.FLOATING_SINGLE?t=\"Floating-Single\":this._modelType===fe.FIXED&&(t=\"Fixed (Scale=\"+this.getScale()+\")\"),t},fe.prototype.makePrecise=function(){if(\"number\"==typeof arguments[0]){var t=arguments[0];if(m.isNaN(t))return t;if(this._modelType===fe.FLOATING_SINGLE){return t}return this._modelType===fe.FIXED?Math.round(t*this._scale)/this._scale:t}if(arguments[0]instanceof N){var e=arguments[0];if(this._modelType===fe.FLOATING)return null;e.x=this.makePrecise(e.x),e.y=this.makePrecise(e.y)}},fe.prototype.getMaximumSignificantDigits=function(){var t=16;return this._modelType===fe.FLOATING?t=16:this._modelType===fe.FLOATING_SINGLE?t=6:this._modelType===fe.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t},fe.prototype.setScale=function(t){this._scale=Math.abs(t)},fe.prototype.interfaces_=function(){return[e,I]},fe.prototype.getClass=function(){return fe},fe.mostPrecise=function(t,e){return t.compareTo(e)>=0?t:e},ge.serialVersionUID.get=function(){return 0x6bee6404e9a25c00},ge.maximumPreciseValue.get=function(){return 9007199254740992},Object.defineProperties(fe,ge);var de=function t(e){this._name=e||null,t.nameToTypeMap.put(e,this)},ye={serialVersionUID:{configurable:!0},nameToTypeMap:{configurable:!0}};de.prototype.readResolve=function(){return de.nameToTypeMap.get(this._name)},de.prototype.toString=function(){return this._name},de.prototype.interfaces_=function(){return[e]},de.prototype.getClass=function(){return de},ye.serialVersionUID.get=function(){return-552860263173159e4},ye.nameToTypeMap.get=function(){return new he},Object.defineProperties(de,ye),fe.Type=de,fe.FIXED=new de(\"FIXED\"),fe.FLOATING=new de(\"FLOATING\"),fe.FLOATING_SINGLE=new de(\"FLOATING SINGLE\");var _e=function t(){this._precisionModel=new fe,this._SRID=0,this._coordinateSequenceFactory=t.getDefaultCoordinateSequenceFactory(),0===arguments.length||(1===arguments.length?O(arguments[0],L)?this._coordinateSequenceFactory=arguments[0]:arguments[0]instanceof fe&&(this._precisionModel=arguments[0]):2===arguments.length?(this._precisionModel=arguments[0],this._SRID=arguments[1]):3===arguments.length&&(this._precisionModel=arguments[0],this._SRID=arguments[1],this._coordinateSequenceFactory=arguments[2]))},me={serialVersionUID:{configurable:!0}};_e.prototype.toGeometry=function(t){return t.isNull()?this.createPoint(null):t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new N(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new N(t.getMinX(),t.getMinY()),new N(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new N(t.getMinX(),t.getMinY()),new N(t.getMinX(),t.getMaxY()),new N(t.getMaxX(),t.getMaxY()),new N(t.getMaxX(),t.getMinY()),new N(t.getMinX(),t.getMinY())]),null)},_e.prototype.createLineString=function(t){return t?t instanceof Array?new Kt(this.getCoordinateSequenceFactory().create(t),this):O(t,B)?new Kt(t,this):void 0:new Kt(this.getCoordinateSequenceFactory().create([]),this)},_e.prototype.createMultiLineString=function(){if(0===arguments.length)return new Xt(null,this);if(1===arguments.length){var t=arguments[0];return new Xt(t,this)}},_e.prototype.buildGeometry=function(t){for(var e=null,n=!1,i=!1,r=t.iterator();r.hasNext();){var o=r.next(),s=o.getClass();null===e&&(e=s),s!==e&&(n=!0),o.isGeometryCollectionOrDerived()&&(i=!0)}if(null===e)return this.createGeometryCollection();if(n||i)return this.createGeometryCollection(_e.toGeometryArray(t));var a=t.iterator().next();if(t.size()>1){if(a instanceof $t)return this.createMultiPolygon(_e.toPolygonArray(t));if(a instanceof Kt)return this.createMultiLineString(_e.toLineStringArray(t));if(a instanceof Qt)return this.createMultiPoint(_e.toPointArray(t));tt.shouldNeverReachHere(\"Unhandled class: \"+a.getClass().getName())}return a},_e.prototype.createMultiPointFromCoords=function(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)},_e.prototype.createPoint=function(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof N){var t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(O(arguments[0],B)){var e=arguments[0];return new Qt(e,this)}}},_e.prototype.getCoordinateSequenceFactory=function(){return this._coordinateSequenceFactory},_e.prototype.createPolygon=function(){if(0===arguments.length)return new $t(null,null,this);if(1===arguments.length){if(O(arguments[0],B)){var t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){var e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof ee){var n=arguments[0];return this.createPolygon(n,null)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];return new $t(i,r,this)}},_e.prototype.getSRID=function(){return this._SRID},_e.prototype.createGeometryCollection=function(){if(0===arguments.length)return new zt(null,this);if(1===arguments.length){var t=arguments[0];return new zt(t,this)}},_e.prototype.createGeometry=function(t){return new ie(this).edit(t,{edit:function(){if(2===arguments.length){var t=arguments[0];return this._coordinateSequenceFactory.create(t)}}})},_e.prototype.getPrecisionModel=function(){return this._precisionModel},_e.prototype.createLinearRing=function(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(O(arguments[0],B)){var e=arguments[0];return new ee(e,this)}}},_e.prototype.createMultiPolygon=function(){if(0===arguments.length)return new ne(null,this);if(1===arguments.length){var t=arguments[0];return new ne(t,this)}},_e.prototype.createMultiPoint=function(){if(0===arguments.length)return new te(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new te(t,this)}if(arguments[0]instanceof Array){var e=arguments[0];return this.createMultiPoint(null!==e?this.getCoordinateSequenceFactory().create(e):null)}if(O(arguments[0],B)){var n=arguments[0];if(null===n)return this.createMultiPoint(new Array(0).fill(null));for(var i=new Array(n.size()).fill(null),r=0;r<n.size();r++){var o=this.getCoordinateSequenceFactory().create(1,n.getDimension());Wt.copy(n,r,o,0,1),i[r]=this.createPoint(o)}return this.createMultiPoint(i)}}},_e.prototype.interfaces_=function(){return[e]},_e.prototype.getClass=function(){return _e},_e.toMultiPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.toGeometryArray=function(t){if(null===t)return null;var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.getDefaultCoordinateSequenceFactory=function(){return ce.instance()},_e.toMultiLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.toLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.toMultiPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.toLinearRingArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.toPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.toPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_e.createPointFromInternalCoord=function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},me.serialVersionUID.get=function(){return-0x5ea75f2051eeb400},Object.defineProperties(_e,me);var ve=[\"Point\",\"MultiPoint\",\"LineString\",\"MultiLineString\",\"Polygon\",\"MultiPolygon\"],Ie=function(t){this.geometryFactory=t||new _e};Ie.prototype.read=function(t){var e,n=(e=\"string\"==typeof t?JSON.parse(t):t).type;if(!Ee[n])throw new Error(\"Unknown GeoJSON type: \"+e.type);return-1!==ve.indexOf(n)?Ee[n].apply(this,[e.coordinates]):\"GeometryCollection\"===n?Ee[n].apply(this,[e.geometries]):Ee[n].apply(this,[e])},Ie.prototype.write=function(t){var e=t.getGeometryType();if(!xe[e])throw new Error(\"Geometry is not supported\");return xe[e].apply(this,[t])};var Ee={Feature:function(t){var e={};for(var n in t)e[n]=t[n];if(t.geometry){var i=t.geometry.type;if(!Ee[i])throw new Error(\"Unknown GeoJSON type: \"+t.type);e.geometry=this.read(t.geometry)}return t.bbox&&(e.bbox=Ee.bbox.apply(this,[t.bbox])),e},FeatureCollection:function(t){var e={};if(t.features){e.features=[];for(var n=0;n<t.features.length;++n)e.features.push(this.read(t.features[n]))}return t.bbox&&(e.bbox=this.parse.bbox.apply(this,[t.bbox])),e},coordinates:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(new N(i[0],i[1]))}return e},bbox:function(t){return this.geometryFactory.createLinearRing([new N(t[0],t[1]),new N(t[2],t[1]),new N(t[2],t[3]),new N(t[0],t[3]),new N(t[0],t[1])])},Point:function(t){var e=new N(t[0],t[1]);return this.geometryFactory.createPoint(e)},MultiPoint:function(t){for(var e=[],n=0;n<t.length;++n)e.push(Ee.Point.apply(this,[t[n]]));return this.geometryFactory.createMultiPoint(e)},LineString:function(t){var e=Ee.coordinates.apply(this,[t]);return this.geometryFactory.createLineString(e)},MultiLineString:function(t){for(var e=[],n=0;n<t.length;++n)e.push(Ee.LineString.apply(this,[t[n]]));return this.geometryFactory.createMultiLineString(e)},Polygon:function(t){for(var e=Ee.coordinates.apply(this,[t[0]]),n=this.geometryFactory.createLinearRing(e),i=[],r=1;r<t.length;++r){var o=t[r],s=Ee.coordinates.apply(this,[o]),a=this.geometryFactory.createLinearRing(s);i.push(a)}return this.geometryFactory.createPolygon(n,i)},MultiPolygon:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(Ee.Polygon.apply(this,[i]))}return this.geometryFactory.createMultiPolygon(e)},GeometryCollection:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(this.read(i))}return this.geometryFactory.createGeometryCollection(e)}},xe={coordinate:function(t){return[t.x,t.y]},Point:function(t){return{type:\"Point\",coordinates:xe.coordinate.apply(this,[t.getCoordinate()])}},MultiPoint:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=xe.Point.apply(this,[i]);e.push(r.coordinates)}return{type:\"MultiPoint\",coordinates:e}},LineString:function(t){for(var e=[],n=t.getCoordinates(),i=0;i<n.length;++i){var r=n[i];e.push(xe.coordinate.apply(this,[r]))}return{type:\"LineString\",coordinates:e}},MultiLineString:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=xe.LineString.apply(this,[i]);e.push(r.coordinates)}return{type:\"MultiLineString\",coordinates:e}},Polygon:function(t){var e=[],n=xe.LineString.apply(this,[t._shell]);e.push(n.coordinates);for(var i=0;i<t._holes.length;++i){var r=t._holes[i],o=xe.LineString.apply(this,[r]);e.push(o.coordinates)}return{type:\"Polygon\",coordinates:e}},MultiPolygon:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=xe.Polygon.apply(this,[i]);e.push(r.coordinates)}return{type:\"MultiPolygon\",coordinates:e}},GeometryCollection:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var i=t._geometries[n],r=i.getGeometryType();e.push(xe[r].apply(this,[i]))}return{type:\"GeometryCollection\",geometries:e}}},Ne=function(t){this.geometryFactory=t||new _e,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new Ie(this.geometryFactory)};Ne.prototype.read=function(t){var e=this.parser.read(t);return this.precisionModel.getType()===fe.FIXED&&this.reducePrecision(e),e},Ne.prototype.reducePrecision=function(t){var e,n;if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(e=0,n=t.points.length;e<n;e++)this.precisionModel.makePrecise(t.points[e]);else if(t.geometries)for(e=0,n=t.geometries.length;e<n;e++)this.reducePrecision(t.geometries[e])};var Ce=function(){this.parser=new Ie(this.geometryFactory)};Ce.prototype.write=function(t){return this.parser.write(t)};var Se=function(){},Le={ON:{configurable:!0},LEFT:{configurable:!0},RIGHT:{configurable:!0}};Se.prototype.interfaces_=function(){return[]},Se.prototype.getClass=function(){return Se},Se.opposite=function(t){return t===Se.LEFT?Se.RIGHT:t===Se.RIGHT?Se.LEFT:t},Le.ON.get=function(){return 0},Le.LEFT.get=function(){return 1},Le.RIGHT.get=function(){return 2},Object.defineProperties(Se,Le),(g.prototype=new Error).name=\"EmptyStackException\",(d.prototype=new xt).add=function(t){return this.array_.push(t),!0},d.prototype.get=function(t){if(t<0||t>=this.size())throw new Error;return this.array_[t]},d.prototype.push=function(t){return this.array_.push(t),t},d.prototype.pop=function(t){if(0===this.array_.length)throw new g;return this.array_.pop()},d.prototype.peek=function(){if(0===this.array_.length)throw new g;return this.array_[this.array_.length-1]},d.prototype.empty=function(){return 0===this.array_.length},d.prototype.isEmpty=function(){return this.empty()},d.prototype.search=function(t){return this.array_.indexOf(t)},d.prototype.size=function(){return this.array_.length},d.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t};var be=function(){this._minIndex=-1,this._minCoord=null,this._minDe=null,this._orientedDe=null};be.prototype.getCoordinate=function(){return this._minCoord},be.prototype.getRightmostSide=function(t,e){var n=this.getRightmostSideOfSegment(t,e);return n<0&&(n=this.getRightmostSideOfSegment(t,e-1)),n<0&&(this._minCoord=null,this.checkForRightmostCoordinate(t)),n},be.prototype.findRightmostEdgeAtVertex=function(){var t=this._minDe.getEdge().getCoordinates();tt.isTrue(this._minIndex>0&&this._minIndex<t.length,\"rightmost point expected to be interior vertex of edge\");var e=t[this._minIndex-1],n=t[this._minIndex+1],i=st.computeOrientation(this._minCoord,n,e),r=!1;e.y<this._minCoord.y&&n.y<this._minCoord.y&&i===st.COUNTERCLOCKWISE?r=!0:e.y>this._minCoord.y&&n.y>this._minCoord.y&&i===st.CLOCKWISE&&(r=!0),r&&(this._minIndex=this._minIndex-1)},be.prototype.getRightmostSideOfSegment=function(t,e){var n=t.getEdge().getCoordinates();if(e<0||e+1>=n.length)return-1;if(n[e].y===n[e+1].y)return-1;var i=Se.LEFT;return n[e].y<n[e+1].y&&(i=Se.RIGHT),i},be.prototype.getEdge=function(){return this._orientedDe},be.prototype.checkForRightmostCoordinate=function(t){for(var e=t.getEdge().getCoordinates(),n=0;n<e.length-1;n++)(null===this._minCoord||e[n].x>this._minCoord.x)&&(this._minDe=t,this._minIndex=n,this._minCoord=e[n])},be.prototype.findRightmostEdgeAtNode=function(){var t=this._minDe.getNode().getEdges();this._minDe=t.getRightmostEdge(),this._minDe.isForward()||(this._minDe=this._minDe.getSym(),this._minIndex=this._minDe.getEdge().getCoordinates().length-1)},be.prototype.findEdge=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();n.isForward()&&this.checkForRightmostCoordinate(n)}tt.isTrue(0!==this._minIndex||this._minCoord.equals(this._minDe.getCoordinate()),\"inconsistency in rightmost processing\"),0===this._minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this._orientedDe=this._minDe;this.getRightmostSide(this._minDe,this._minIndex)===Se.LEFT&&(this._orientedDe=this._minDe.getSym())},be.prototype.interfaces_=function(){return[]},be.prototype.getClass=function(){return be};var we=function(t){function e(n,i){t.call(this,e.msgWithCoord(n,i)),this.pt=i?new N(i):null,this.name=\"TopologyException\"}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getCoordinate=function(){return this.pt},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.msgWithCoord=function(t,e){return e?t:t+\" [ \"+e+\" ]\"},e}(Z),Oe=function(){this.array_=[]};Oe.prototype.addLast=function(t){this.array_.push(t)},Oe.prototype.removeFirst=function(){return this.array_.shift()},Oe.prototype.isEmpty=function(){return 0===this.array_.length};var Te=function(){this._finder=null,this._dirEdgeList=new Nt,this._nodes=new Nt,this._rightMostCoord=null,this._env=null,this._finder=new be};Te.prototype.clearVisitedEdges=function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){t.next().setVisited(!1)}},Te.prototype.getRightmostCoordinate=function(){return this._rightMostCoord},Te.prototype.computeNodeDepth=function(t){for(var e=null,n=t.getEdges().iterator();n.hasNext();){var i=n.next();if(i.isVisited()||i.getSym().isVisited()){e=i;break}}if(null===e)throw new we(\"unable to find edge to compute depths at \"+t.getCoordinate());t.getEdges().computeDepths(e);for(var r=t.getEdges().iterator();r.hasNext();){var o=r.next();o.setVisited(!0),this.copySymDepths(o)}},Te.prototype.computeDepth=function(t){this.clearVisitedEdges();var e=this._finder.getEdge();e.setEdgeDepths(Se.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)},Te.prototype.create=function(t){this.addReachable(t),this._finder.findEdge(this._dirEdgeList),this._rightMostCoord=this._finder.getCoordinate()},Te.prototype.findResultEdges=function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){var e=t.next();e.getDepth(Se.RIGHT)>=1&&e.getDepth(Se.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}},Te.prototype.computeDepths=function(t){var e=new Pt,n=new Oe,i=t.getNode();for(n.addLast(i),e.add(i),t.setVisited(!0);!n.isEmpty();){var r=n.removeFirst();e.add(r),this.computeNodeDepth(r);for(var o=r.getEdges().iterator();o.hasNext();){var s=o.next().getSym();if(!s.isVisited()){var a=s.getNode();e.contains(a)||(n.addLast(a),e.add(a))}}}},Te.prototype.compareTo=function(t){var e=t;return this._rightMostCoord.x<e._rightMostCoord.x?-1:this._rightMostCoord.x>e._rightMostCoord.x?1:0},Te.prototype.getEnvelope=function(){if(null===this._env){for(var t=new k,e=this._dirEdgeList.iterator();e.hasNext();)for(var n=e.next().getEdge().getCoordinates(),i=0;i<n.length-1;i++)t.expandToInclude(n[i]);this._env=t}return this._env},Te.prototype.addReachable=function(t){var e=new d;for(e.add(t);!e.empty();){var n=e.pop();this.add(n,e)}},Te.prototype.copySymDepths=function(t){var e=t.getSym();e.setDepth(Se.LEFT,t.getDepth(Se.RIGHT)),e.setDepth(Se.RIGHT,t.getDepth(Se.LEFT))},Te.prototype.add=function(t,e){t.setVisited(!0),this._nodes.add(t);for(var n=t.getEdges().iterator();n.hasNext();){var i=n.next();this._dirEdgeList.add(i);var r=i.getSym().getNode();r.isVisited()||e.push(r)}},Te.prototype.getNodes=function(){return this._nodes},Te.prototype.getDirectedEdges=function(){return this._dirEdgeList},Te.prototype.interfaces_=function(){return[I]},Te.prototype.getClass=function(){return Te};var Re=function t(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){var e=arguments[0];this.init(e.length)}else if(Number.isInteger(arguments[0])){var n=arguments[0];this.init(1),this.location[Se.ON]=n}else if(arguments[0]instanceof t){var i=arguments[0];if(this.init(i.location.length),null!==i)for(var r=0;r<this.location.length;r++)this.location[r]=i.location[r]}}else if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];this.init(3),this.location[Se.ON]=o,this.location[Se.LEFT]=s,this.location[Se.RIGHT]=a}};Re.prototype.setAllLocations=function(t){for(var e=0;e<this.location.length;e++)this.location[e]=t},Re.prototype.isNull=function(){for(var t=0;t<this.location.length;t++)if(this.location[t]!==b.NONE)return!1;return!0},Re.prototype.setAllLocationsIfNull=function(t){for(var e=0;e<this.location.length;e++)this.location[e]===b.NONE&&(this.location[e]=t)},Re.prototype.isLine=function(){return 1===this.location.length},Re.prototype.merge=function(t){if(t.location.length>this.location.length){var e=new Array(3).fill(null);e[Se.ON]=this.location[Se.ON],e[Se.LEFT]=b.NONE,e[Se.RIGHT]=b.NONE,this.location=e}for(var n=0;n<this.location.length;n++)this.location[n]===b.NONE&&n<t.location.length&&(this.location[n]=t.location[n])},Re.prototype.getLocations=function(){return this.location},Re.prototype.flip=function(){if(this.location.length<=1)return null;var t=this.location[Se.LEFT];this.location[Se.LEFT]=this.location[Se.RIGHT],this.location[Se.RIGHT]=t},Re.prototype.toString=function(){var t=new P;return this.location.length>1&&t.append(b.toLocationSymbol(this.location[Se.LEFT])),t.append(b.toLocationSymbol(this.location[Se.ON])),this.location.length>1&&t.append(b.toLocationSymbol(this.location[Se.RIGHT])),t.toString()},Re.prototype.setLocations=function(t,e,n){this.location[Se.ON]=t,this.location[Se.LEFT]=e,this.location[Se.RIGHT]=n},Re.prototype.get=function(t){return t<this.location.length?this.location[t]:b.NONE},Re.prototype.isArea=function(){return this.location.length>1},Re.prototype.isAnyNull=function(){for(var t=0;t<this.location.length;t++)if(this.location[t]===b.NONE)return!0;return!1},Re.prototype.setLocation=function(){if(1===arguments.length){var t=arguments[0];this.setLocation(Se.ON,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.location[e]=n}},Re.prototype.init=function(t){this.location=new Array(t).fill(null),this.setAllLocations(b.NONE)},Re.prototype.isEqualOnSide=function(t,e){return this.location[e]===t.location[e]},Re.prototype.allPositionsEqual=function(t){for(var e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0},Re.prototype.interfaces_=function(){return[]},Re.prototype.getClass=function(){return Re};var Pe=function t(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){var e=arguments[0];this.elt[0]=new Re(e),this.elt[1]=new Re(e)}else if(arguments[0]instanceof t){var n=arguments[0];this.elt[0]=new Re(n.elt[0]),this.elt[1]=new Re(n.elt[1])}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.elt[0]=new Re(b.NONE),this.elt[1]=new Re(b.NONE),this.elt[i].setLocation(r)}else if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];this.elt[0]=new Re(o,s,a),this.elt[1]=new Re(o,s,a)}else if(4===arguments.length){var u=arguments[0],l=arguments[1],c=arguments[2],p=arguments[3];this.elt[0]=new Re(b.NONE,b.NONE,b.NONE),this.elt[1]=new Re(b.NONE,b.NONE,b.NONE),this.elt[u].setLocations(l,c,p)}};Pe.prototype.getGeometryCount=function(){var t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t},Pe.prototype.setAllLocations=function(t,e){this.elt[t].setAllLocations(e)},Pe.prototype.isNull=function(t){return this.elt[t].isNull()},Pe.prototype.setAllLocationsIfNull=function(){if(1===arguments.length){var t=arguments[0];this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.elt[e].setAllLocationsIfNull(n)}},Pe.prototype.isLine=function(t){return this.elt[t].isLine()},Pe.prototype.merge=function(t){for(var e=0;e<2;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new Re(t.elt[e]):this.elt[e].merge(t.elt[e])},Pe.prototype.flip=function(){this.elt[0].flip(),this.elt[1].flip()},Pe.prototype.getLocation=function(){if(1===arguments.length){var t=arguments[0];return this.elt[t].get(Se.ON)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return this.elt[e].get(n)}},Pe.prototype.toString=function(){var t=new P;return null!==this.elt[0]&&(t.append(\"A:\"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(\" B:\"),t.append(this.elt[1].toString())),t.toString()},Pe.prototype.isArea=function(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){var t=arguments[0];return this.elt[t].isArea()}},Pe.prototype.isAnyNull=function(t){return this.elt[t].isAnyNull()},Pe.prototype.setLocation=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.elt[t].setLocation(Se.ON,e)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.elt[n].setLocation(i,r)}},Pe.prototype.isEqualOnSide=function(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)},Pe.prototype.allPositionsEqual=function(t,e){return this.elt[t].allPositionsEqual(e)},Pe.prototype.toLine=function(t){this.elt[t].isArea()&&(this.elt[t]=new Re(this.elt[t].location[0]))},Pe.prototype.interfaces_=function(){return[]},Pe.prototype.getClass=function(){return Pe},Pe.toLineLabel=function(t){for(var e=new Pe(b.NONE),n=0;n<2;n++)e.setLocation(n,t.getLocation(n));return e};var De=function(){this._startDe=null,this._maxNodeDegree=-1,this._edges=new Nt,this._pts=new Nt,this._label=new Pe(b.NONE),this._ring=null,this._isHole=null,this._shell=null,this._holes=new Nt,this._geometryFactory=null;var t=arguments[0],e=arguments[1];this._geometryFactory=e,this.computePoints(t),this.computeRing()};De.prototype.computeRing=function(){if(null!==this._ring)return null;for(var t=new Array(this._pts.size()).fill(null),e=0;e<this._pts.size();e++)t[e]=this._pts.get(e);this._ring=this._geometryFactory.createLinearRing(t),this._isHole=st.isCCW(this._ring.getCoordinates())},De.prototype.isIsolated=function(){return 1===this._label.getGeometryCount()},De.prototype.computePoints=function(t){this._startDe=t;var e=t,n=!0;do{if(null===e)throw new we(\"Found null DirectedEdge\");if(e.getEdgeRing()===this)throw new we(\"Directed Edge visited twice during ring-building at \"+e.getCoordinate());this._edges.add(e);var i=e.getLabel();tt.isTrue(i.isArea()),this.mergeLabel(i),this.addPoints(e.getEdge(),e.isForward(),n),n=!1,this.setEdgeRing(e,this),e=this.getNext(e)}while(e!==this._startDe)},De.prototype.getLinearRing=function(){return this._ring},De.prototype.getCoordinate=function(t){return this._pts.get(t)},De.prototype.computeMaxNodeDegree=function(){this._maxNodeDegree=0;var t=this._startDe;do{var e=t.getNode().getEdges().getOutgoingDegree(this);e>this._maxNodeDegree&&(this._maxNodeDegree=e),t=this.getNext(t)}while(t!==this._startDe);this._maxNodeDegree*=2},De.prototype.addPoints=function(t,e,n){var i=t.getCoordinates();if(e){var r=1;n&&(r=0);for(var o=r;o<i.length;o++)this._pts.add(i[o])}else{var s=i.length-2;n&&(s=i.length-1);for(var a=s;a>=0;a--)this._pts.add(i[a])}},De.prototype.isHole=function(){return this._isHole},De.prototype.setInResult=function(){var t=this._startDe;do{t.getEdge().setInResult(!0),t=t.getNext()}while(t!==this._startDe)},De.prototype.containsPoint=function(t){var e=this.getLinearRing();if(!e.getEnvelopeInternal().contains(t))return!1;if(!st.isPointInRing(t,e.getCoordinates()))return!1;for(var n=this._holes.iterator();n.hasNext();){if(n.next().containsPoint(t))return!1}return!0},De.prototype.addHole=function(t){this._holes.add(t)},De.prototype.isShell=function(){return null===this._shell},De.prototype.getLabel=function(){return this._label},De.prototype.getEdges=function(){return this._edges},De.prototype.getMaxNodeDegree=function(){return this._maxNodeDegree<0&&this.computeMaxNodeDegree(),this._maxNodeDegree},De.prototype.getShell=function(){return this._shell},De.prototype.mergeLabel=function(){if(1===arguments.length){var t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=e.getLocation(n,Se.RIGHT);if(i===b.NONE)return null;if(this._label.getLocation(n)===b.NONE)return this._label.setLocation(n,i),null}},De.prototype.setShell=function(t){this._shell=t,null!==t&&t.addHole(this)},De.prototype.toPolygon=function(t){for(var e=new Array(this._holes.size()).fill(null),n=0;n<this._holes.size();n++)e[n]=this._holes.get(n).getLinearRing();return t.createPolygon(this.getLinearRing(),e)},De.prototype.interfaces_=function(){return[]},De.prototype.getClass=function(){return De};var Me=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setEdgeRing=function(t,e){t.setMinEdgeRing(e)},e.prototype.getNext=function(t){return t.getNextMin()},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(De),Ae=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.buildMinimalRings=function(){var t=new Nt,e=this._startDe;do{if(null===e.getMinEdgeRing()){var n=new Me(e,this._geometryFactory);t.add(n)}e=e.getNext()}while(e!==this._startDe);return t},e.prototype.setEdgeRing=function(t,e){t.setEdgeRing(e)},e.prototype.linkDirectedEdgesForMinimalEdgeRings=function(){var t=this._startDe;do{t.getNode().getEdges().linkMinimalDirectedEdges(this),t=t.getNext()}while(t!==this._startDe)},e.prototype.getNext=function(t){return t.getNext()},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(De),Fe=function(){if(this._label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._label=t}};Fe.prototype.setVisited=function(t){this._isVisited=t},Fe.prototype.setInResult=function(t){this._isInResult=t},Fe.prototype.isCovered=function(){return this._isCovered},Fe.prototype.isCoveredSet=function(){return this._isCoveredSet},Fe.prototype.setLabel=function(t){this._label=t},Fe.prototype.getLabel=function(){return this._label},Fe.prototype.setCovered=function(t){this._isCovered=t,this._isCoveredSet=!0},Fe.prototype.updateIM=function(t){tt.isTrue(this._label.getGeometryCount()>=2,\"found partial label\"),this.computeIM(t)},Fe.prototype.isInResult=function(){return this._isInResult},Fe.prototype.isVisited=function(){return this._isVisited},Fe.prototype.interfaces_=function(){return[]},Fe.prototype.getClass=function(){return Fe};var Ge=function(t){function e(){t.call(this),this._coord=null,this._edges=null;var e=arguments[0],n=arguments[1];this._coord=e,this._edges=n,this._label=new Pe(0,b.NONE)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isIncidentEdgeInResult=function(){for(var t=this.getEdges().getEdges().iterator();t.hasNext();){if(t.next().getEdge().isInResult())return!0}return!1},e.prototype.isIsolated=function(){return 1===this._label.getGeometryCount()},e.prototype.getCoordinate=function(){return this._coord},e.prototype.print=function(t){t.println(\"node \"+this._coord+\" lbl: \"+this._label)},e.prototype.computeIM=function(t){},e.prototype.computeMergedLocation=function(t,e){var n=b.NONE;if(n=this._label.getLocation(e),!t.isNull(e)){var i=t.getLocation(e);n!==b.BOUNDARY&&(n=i)}return n},e.prototype.setLabel=function(){if(2!==arguments.length)return t.prototype.setLabel.apply(this,arguments);var e=arguments[0],n=arguments[1];null===this._label?this._label=new Pe(e,n):this._label.setLocation(e,n)},e.prototype.getEdges=function(){return this._edges},e.prototype.mergeLabel=function(){if(arguments[0]instanceof e){var t=arguments[0];this.mergeLabel(t._label)}else if(arguments[0]instanceof Pe)for(var n=arguments[0],i=0;i<2;i++){var r=this.computeMergedLocation(n,i);this._label.getLocation(i)===b.NONE&&this._label.setLocation(i,r)}},e.prototype.add=function(t){this._edges.insert(t),t.setNode(this)},e.prototype.setLabelBoundary=function(t){if(null===this._label)return null;var e=b.NONE;null!==this._label&&(e=this._label.getLocation(t));var n=null;switch(e){case b.BOUNDARY:n=b.INTERIOR;break;case b.INTERIOR:default:n=b.BOUNDARY}this._label.setLocation(t,n)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Fe),qe=function(){this.nodeMap=new c,this.nodeFact=null;var t=arguments[0];this.nodeFact=t};qe.prototype.find=function(t){return this.nodeMap.get(t)},qe.prototype.addNode=function(){if(arguments[0]instanceof N){var t=arguments[0],e=this.nodeMap.get(t);return null===e&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof Ge){var n=arguments[0],i=this.nodeMap.get(n.getCoordinate());return null===i?(this.nodeMap.put(n.getCoordinate(),n),n):(i.mergeLabel(n),i)}},qe.prototype.print=function(t){for(var e=this.iterator();e.hasNext();){e.next().print(t)}},qe.prototype.iterator=function(){return this.nodeMap.values().iterator()},qe.prototype.values=function(){return this.nodeMap.values()},qe.prototype.getBoundaryNodes=function(t){for(var e=new Nt,n=this.iterator();n.hasNext();){var i=n.next();i.getLabel().getLocation(t)===b.BOUNDARY&&e.add(i)}return e},qe.prototype.add=function(t){var e=t.getCoordinate();this.addNode(e).add(t)},qe.prototype.interfaces_=function(){return[]},qe.prototype.getClass=function(){return qe};var Be=function(){},Ve={NE:{configurable:!0},NW:{configurable:!0},SW:{configurable:!0},SE:{configurable:!0}};Be.prototype.interfaces_=function(){return[]},Be.prototype.getClass=function(){return Be},Be.isNorthern=function(t){return t===Be.NE||t===Be.NW},Be.isOpposite=function(t,e){if(t===e)return!1;return 2===(t-e+4)%4},Be.commonHalfPlane=function(t,e){if(t===e)return t;if(2===(t-e+4)%4)return-1;var n=t<e?t:e;return 0===n&&3===(t>e?t:e)?3:n},Be.isInHalfPlane=function(t,e){return e===Be.SE?t===Be.SE||t===Be.SW:t===e||t===e+1},Be.quadrant=function(){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new _(\"Cannot compute the quadrant for point ( \"+t+\", \"+e+\" )\");return t>=0?e>=0?Be.NE:Be.SE:e>=0?Be.NW:Be.SW}if(arguments[0]instanceof N&&arguments[1]instanceof N){var n=arguments[0],i=arguments[1];if(i.x===n.x&&i.y===n.y)throw new _(\"Cannot compute the quadrant for two identical points \"+n);return i.x>=n.x?i.y>=n.y?Be.NE:Be.SE:i.y>=n.y?Be.NW:Be.SW}},Ve.NE.get=function(){return 0},Ve.NW.get=function(){return 1},Ve.SW.get=function(){return 2},Ve.SE.get=function(){return 3},Object.defineProperties(Be,Ve);var Ue=function(){if(this._edge=null,this._label=null,this._node=null,this._p0=null,this._p1=null,this._dx=null,this._dy=null,this._quadrant=null,1===arguments.length){var t=arguments[0];this._edge=t}else if(3===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2];this._edge=e,this.init(n,i),this._label=null}else if(4===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];this._edge=r,this.init(o,s),this._label=a}};Ue.prototype.compareDirection=function(t){return this._dx===t._dx&&this._dy===t._dy?0:this._quadrant>t._quadrant?1:this._quadrant<t._quadrant?-1:st.computeOrientation(t._p0,t._p1,this._p1)},Ue.prototype.getDy=function(){return this._dy},Ue.prototype.getCoordinate=function(){return this._p0},Ue.prototype.setNode=function(t){this._node=t},Ue.prototype.print=function(t){var e=Math.atan2(this._dy,this._dx),n=this.getClass().getName(),i=n.lastIndexOf(\".\"),r=n.substring(i+1);t.print(\"  \"+r+\": \"+this._p0+\" - \"+this._p1+\" \"+this._quadrant+\":\"+e+\"   \"+this._label)},Ue.prototype.compareTo=function(t){var e=t;return this.compareDirection(e)},Ue.prototype.getDirectedCoordinate=function(){return this._p1},Ue.prototype.getDx=function(){return this._dx},Ue.prototype.getLabel=function(){return this._label},Ue.prototype.getEdge=function(){return this._edge},Ue.prototype.getQuadrant=function(){return this._quadrant},Ue.prototype.getNode=function(){return this._node},Ue.prototype.toString=function(){var t=Math.atan2(this._dy,this._dx),e=this.getClass().getName(),n=e.lastIndexOf(\".\");return\"  \"+e.substring(n+1)+\": \"+this._p0+\" - \"+this._p1+\" \"+this._quadrant+\":\"+t+\"   \"+this._label},Ue.prototype.computeLabel=function(t){},Ue.prototype.init=function(t,e){this._p0=t,this._p1=e,this._dx=e.x-t.x,this._dy=e.y-t.y,this._quadrant=Be.quadrant(this._dx,this._dy),tt.isTrue(!(0===this._dx&&0===this._dy),\"EdgeEnd with identical endpoints found\")},Ue.prototype.interfaces_=function(){return[I]},Ue.prototype.getClass=function(){return Ue};var ze=function(t){function e(){var e=arguments[0],n=arguments[1];if(t.call(this,e),this._isForward=null,this._isInResult=!1,this._isVisited=!1,this._sym=null,this._next=null,this._nextMin=null,this._edgeRing=null,this._minEdgeRing=null,this._depth=[0,-999,-999],this._isForward=n,n)this.init(e.getCoordinate(0),e.getCoordinate(1));else{var i=e.getNumPoints()-1;this.init(e.getCoordinate(i),e.getCoordinate(i-1))}this.computeDirectedLabel()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getNextMin=function(){return this._nextMin},e.prototype.getDepth=function(t){return this._depth[t]},e.prototype.setVisited=function(t){this._isVisited=t},e.prototype.computeDirectedLabel=function(){this._label=new Pe(this._edge.getLabel()),this._isForward||this._label.flip()},e.prototype.getNext=function(){return this._next},e.prototype.setDepth=function(t,e){if(-999!==this._depth[t]&&this._depth[t]!==e)throw new we(\"assigned depths do not match\",this.getCoordinate());this._depth[t]=e},e.prototype.isInteriorAreaEdge=function(){for(var t=!0,e=0;e<2;e++)this._label.isArea(e)&&this._label.getLocation(e,Se.LEFT)===b.INTERIOR&&this._label.getLocation(e,Se.RIGHT)===b.INTERIOR||(t=!1);return t},e.prototype.setNextMin=function(t){this._nextMin=t},e.prototype.print=function(e){t.prototype.print.call(this,e),e.print(\" \"+this._depth[Se.LEFT]+\"/\"+this._depth[Se.RIGHT]),e.print(\" (\"+this.getDepthDelta()+\")\"),this._isInResult&&e.print(\" inResult\")},e.prototype.setMinEdgeRing=function(t){this._minEdgeRing=t},e.prototype.isLineEdge=function(){var t=this._label.isLine(0)||this._label.isLine(1),e=!this._label.isArea(0)||this._label.allPositionsEqual(0,b.EXTERIOR),n=!this._label.isArea(1)||this._label.allPositionsEqual(1,b.EXTERIOR);return t&&e&&n},e.prototype.setEdgeRing=function(t){this._edgeRing=t},e.prototype.getMinEdgeRing=function(){return this._minEdgeRing},e.prototype.getDepthDelta=function(){var t=this._edge.getDepthDelta();return this._isForward||(t=-t),t},e.prototype.setInResult=function(t){this._isInResult=t},e.prototype.getSym=function(){return this._sym},e.prototype.isForward=function(){return this._isForward},e.prototype.getEdge=function(){return this._edge},e.prototype.printEdge=function(t){this.print(t),t.print(\" \"),this._isForward?this._edge.print(t):this._edge.printReverse(t)},e.prototype.setSym=function(t){this._sym=t},e.prototype.setVisitedEdge=function(t){this.setVisited(t),this._sym.setVisited(t)},e.prototype.setEdgeDepths=function(t,e){var n=this.getEdge().getDepthDelta();this._isForward||(n=-n);var i=1;t===Se.LEFT&&(i=-1);var r=Se.opposite(t),o=e+n*i;this.setDepth(t,e),this.setDepth(r,o)},e.prototype.getEdgeRing=function(){return this._edgeRing},e.prototype.isInResult=function(){return this._isInResult},e.prototype.setNext=function(t){this._next=t},e.prototype.isVisited=function(){return this._isVisited},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.depthFactor=function(t,e){return t===b.EXTERIOR&&e===b.INTERIOR?1:t===b.INTERIOR&&e===b.EXTERIOR?-1:0},e}(Ue),Xe=function(){};Xe.prototype.createNode=function(t){return new Ge(t,null)},Xe.prototype.interfaces_=function(){return[]},Xe.prototype.getClass=function(){return Xe};var Ye=function(){if(this._edges=new Nt,this._nodes=null,this._edgeEndList=new Nt,0===arguments.length)this._nodes=new qe(new Xe);else if(1===arguments.length){var t=arguments[0];this._nodes=new qe(t)}};Ye.prototype.printEdges=function(t){t.println(\"Edges:\");for(var e=0;e<this._edges.size();e++){t.println(\"edge \"+e+\":\");var n=this._edges.get(e);n.print(t),n.eiList.print(t)}},Ye.prototype.find=function(t){return this._nodes.find(t)},Ye.prototype.addNode=function(){if(arguments[0]instanceof Ge){var t=arguments[0];return this._nodes.addNode(t)}if(arguments[0]instanceof N){var e=arguments[0];return this._nodes.addNode(e)}},Ye.prototype.getNodeIterator=function(){return this._nodes.iterator()},Ye.prototype.linkResultDirectedEdges=function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges()}},Ye.prototype.debugPrintln=function(t){X.out.println(t)},Ye.prototype.isBoundaryNode=function(t,e){var n=this._nodes.find(e);if(null===n)return!1;var i=n.getLabel();return null!==i&&i.getLocation(t)===b.BOUNDARY},Ye.prototype.linkAllDirectedEdges=function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkAllDirectedEdges()}},Ye.prototype.matchInSameDirection=function(t,e,n,i){return!!t.equals(n)&&(st.computeOrientation(t,e,i)===st.COLLINEAR&&Be.quadrant(t,e)===Be.quadrant(n,i))},Ye.prototype.getEdgeEnds=function(){return this._edgeEndList},Ye.prototype.debugPrint=function(t){X.out.print(t)},Ye.prototype.getEdgeIterator=function(){return this._edges.iterator()},Ye.prototype.findEdgeInSameDirection=function(t,e){for(var n=0;n<this._edges.size();n++){var i=this._edges.get(n),r=i.getCoordinates();if(this.matchInSameDirection(t,e,r[0],r[1]))return i;if(this.matchInSameDirection(t,e,r[r.length-1],r[r.length-2]))return i}return null},Ye.prototype.insertEdge=function(t){this._edges.add(t)},Ye.prototype.findEdgeEnd=function(t){for(var e=this.getEdgeEnds().iterator();e.hasNext();){var n=e.next();if(n.getEdge()===t)return n}return null},Ye.prototype.addEdges=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this._edges.add(n);var i=new ze(n,!0),r=new ze(n,!1);i.setSym(r),r.setSym(i),this.add(i),this.add(r)}},Ye.prototype.add=function(t){this._nodes.add(t),this._edgeEndList.add(t)},Ye.prototype.getNodes=function(){return this._nodes.values()},Ye.prototype.findEdge=function(t,e){for(var n=0;n<this._edges.size();n++){var i=this._edges.get(n),r=i.getCoordinates();if(t.equals(r[0])&&e.equals(r[1]))return i}return null},Ye.prototype.interfaces_=function(){return[]},Ye.prototype.getClass=function(){return Ye},Ye.linkResultDirectedEdges=function(t){for(var e=t.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges()}};var ke=function(){this._geometryFactory=null,this._shellList=new Nt;var t=arguments[0];this._geometryFactory=t};ke.prototype.sortShellsAndHoles=function(t,e,n){for(var i=t.iterator();i.hasNext();){var r=i.next();r.isHole()?n.add(r):e.add(r)}},ke.prototype.computePolygons=function(t){for(var e=new Nt,n=t.iterator();n.hasNext();){var i=n.next().toPolygon(this._geometryFactory);e.add(i)}return e},ke.prototype.placeFreeHoles=function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();if(null===i.getShell()){var r=this.findEdgeRingContaining(i,t);if(null===r)throw new we(\"unable to assign hole to a shell\",i.getCoordinate(0));i.setShell(r)}}},ke.prototype.buildMinimalEdgeRings=function(t,e,n){for(var i=new Nt,r=t.iterator();r.hasNext();){var o=r.next();if(o.getMaxNodeDegree()>2){o.linkDirectedEdgesForMinimalEdgeRings();var s=o.buildMinimalRings(),a=this.findShell(s);null!==a?(this.placePolygonHoles(a,s),e.add(a)):n.addAll(s)}else i.add(o)}return i},ke.prototype.containsPoint=function(t){for(var e=this._shellList.iterator();e.hasNext();){if(e.next().containsPoint(t))return!0}return!1},ke.prototype.buildMaximalEdgeRings=function(t){for(var e=new Nt,n=t.iterator();n.hasNext();){var i=n.next();if(i.isInResult()&&i.getLabel().isArea()&&null===i.getEdgeRing()){var r=new Ae(i,this._geometryFactory);e.add(r),r.setInResult()}}return e},ke.prototype.placePolygonHoles=function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();i.isHole()&&i.setShell(t)}},ke.prototype.getPolygons=function(){return this.computePolygons(this._shellList)},ke.prototype.findEdgeRingContaining=function(t,e){for(var n=t.getLinearRing(),i=n.getEnvelopeInternal(),r=n.getCoordinateN(0),o=null,s=null,a=e.iterator();a.hasNext();){var u=a.next(),l=u.getLinearRing(),c=l.getEnvelopeInternal();null!==o&&(s=o.getLinearRing().getEnvelopeInternal());var p=!1;c.contains(i)&&st.isPointInRing(r,l.getCoordinates())&&(p=!0),p&&(null===o||s.contains(c))&&(o=u)}return o},ke.prototype.findShell=function(t){for(var e=0,n=null,i=t.iterator();i.hasNext();){var r=i.next();r.isHole()||(n=r,e++)}return tt.isTrue(e<=1,\"found two shells in MinimalEdgeRing list\"),n},ke.prototype.add=function(){if(1===arguments.length){var t=arguments[0];this.add(t.getEdgeEnds(),t.getNodes())}else if(2===arguments.length){var e=arguments[0],n=arguments[1];Ye.linkResultDirectedEdges(n);var i=this.buildMaximalEdgeRings(e),r=new Nt,o=this.buildMinimalEdgeRings(i,this._shellList,r);this.sortShellsAndHoles(o,this._shellList,r),this.placeFreeHoles(this._shellList,r)}},ke.prototype.interfaces_=function(){return[]},ke.prototype.getClass=function(){return ke};var je=function(){};je.prototype.getBounds=function(){},je.prototype.interfaces_=function(){return[]},je.prototype.getClass=function(){return je};var He=function(){this._bounds=null,this._item=null;var t=arguments[0],e=arguments[1];this._bounds=t,this._item=e};He.prototype.getItem=function(){return this._item},He.prototype.getBounds=function(){return this._bounds},He.prototype.interfaces_=function(){return[je,e]},He.prototype.getClass=function(){return He};var We=function(){this._size=null,this._items=null,this._size=0,this._items=new Nt,this._items.add(null)};We.prototype.poll=function(){if(this.isEmpty())return null;var t=this._items.get(1);return this._items.set(1,this._items.get(this._size)),this._size-=1,this.reorder(1),t},We.prototype.size=function(){return this._size},We.prototype.reorder=function(t){for(var e=null,n=this._items.get(t);2*t<=this._size&&((e=2*t)!==this._size&&this._items.get(e+1).compareTo(this._items.get(e))<0&&e++,this._items.get(e).compareTo(n)<0);t=e)this._items.set(t,this._items.get(e));this._items.set(t,n)},We.prototype.clear=function(){this._size=0,this._items.clear()},We.prototype.isEmpty=function(){return 0===this._size},We.prototype.add=function(t){this._items.add(null),this._size+=1;var e=this._size;for(this._items.set(0,t);t.compareTo(this._items.get(Math.trunc(e/2)))<0;e/=2)this._items.set(e,this._items.get(Math.trunc(e/2)));this._items.set(e,t)},We.prototype.interfaces_=function(){return[]},We.prototype.getClass=function(){return We};var Ke=function(){};Ke.prototype.visitItem=function(t){},Ke.prototype.interfaces_=function(){return[]},Ke.prototype.getClass=function(){return Ke};var Je=function(){};Je.prototype.insert=function(t,e){},Je.prototype.remove=function(t,e){},Je.prototype.query=function(){},Je.prototype.interfaces_=function(){return[]},Je.prototype.getClass=function(){return Je};var Qe=function(){if(this._childBoundables=new Nt,this._bounds=null,this._level=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._level=t}},Ze={serialVersionUID:{configurable:!0}};Qe.prototype.getLevel=function(){return this._level},Qe.prototype.size=function(){return this._childBoundables.size()},Qe.prototype.getChildBoundables=function(){return this._childBoundables},Qe.prototype.addChildBoundable=function(t){tt.isTrue(null===this._bounds),this._childBoundables.add(t)},Qe.prototype.isEmpty=function(){return this._childBoundables.isEmpty()},Qe.prototype.getBounds=function(){return null===this._bounds&&(this._bounds=this.computeBounds()),this._bounds},Qe.prototype.interfaces_=function(){return[je,e]},Qe.prototype.getClass=function(){return Qe},Ze.serialVersionUID.get=function(){return 0x5a1e55ec41369800},Object.defineProperties(Qe,Ze);var $e=function(){};$e.reverseOrder=function(){return{compare:function(t,e){return e.compareTo(t)}}},$e.min=function(t){return $e.sort(t),t.get(0)},$e.sort=function(t,e){var n=t.toArray();e?Gt.sort(n,e):Gt.sort(n);for(var i=t.iterator(),r=0,o=n.length;r<o;r++)i.next(),i.set(n[r])},$e.singletonList=function(t){var e=new Nt;return e.add(t),e};var tn=function(){this._boundable1=null,this._boundable2=null,this._distance=null,this._itemDistance=null;var t=arguments[0],e=arguments[1],n=arguments[2];this._boundable1=t,this._boundable2=e,this._itemDistance=n,this._distance=this.distance()};tn.prototype.expandToQueue=function(t,e){var n=tn.isComposite(this._boundable1),i=tn.isComposite(this._boundable2);if(n&&i)return tn.area(this._boundable1)>tn.area(this._boundable2)?(this.expand(this._boundable1,this._boundable2,t,e),null):(this.expand(this._boundable2,this._boundable1,t,e),null);if(n)return this.expand(this._boundable1,this._boundable2,t,e),null;if(i)return this.expand(this._boundable2,this._boundable1,t,e),null;throw new _(\"neither boundable is composite\")},tn.prototype.isLeaves=function(){return!(tn.isComposite(this._boundable1)||tn.isComposite(this._boundable2))},tn.prototype.compareTo=function(t){var e=t;return this._distance<e._distance?-1:this._distance>e._distance?1:0},tn.prototype.expand=function(t,e,n,i){for(var r=t.getChildBoundables().iterator();r.hasNext();){var o=r.next(),s=new tn(o,e,this._itemDistance);s.getDistance()<i&&n.add(s)}},tn.prototype.getBoundable=function(t){return 0===t?this._boundable1:this._boundable2},tn.prototype.getDistance=function(){return this._distance},tn.prototype.distance=function(){return this.isLeaves()?this._itemDistance.distance(this._boundable1,this._boundable2):this._boundable1.getBounds().distance(this._boundable2.getBounds())},tn.prototype.interfaces_=function(){return[I]},tn.prototype.getClass=function(){return tn},tn.area=function(t){return t.getBounds().getArea()},tn.isComposite=function(t){return t instanceof Qe};var en=function t(){if(this._root=null,this._built=!1,this._itemBoundables=new Nt,this._nodeCapacity=null,0===arguments.length){var e=t.DEFAULT_NODE_CAPACITY;this._nodeCapacity=e}else if(1===arguments.length){var n=arguments[0];tt.isTrue(n>1,\"Node capacity must be greater than 1\"),this._nodeCapacity=n}},nn={IntersectsOp:{configurable:!0},serialVersionUID:{configurable:!0},DEFAULT_NODE_CAPACITY:{configurable:!0}};en.prototype.getNodeCapacity=function(){return this._nodeCapacity},en.prototype.lastNode=function(t){return t.get(t.size()-1)},en.prototype.size=function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this._root));if(1===arguments.length){for(var t=0,e=arguments[0].getChildBoundables().iterator();e.hasNext();){var n=e.next();n instanceof Qe?t+=this.size(n):n instanceof He&&(t+=1)}return t}},en.prototype.removeItem=function(t,e){for(var n=null,i=t.getChildBoundables().iterator();i.hasNext();){var r=i.next();r instanceof He&&r.getItem()===e&&(n=r)}return null!==n&&(t.getChildBoundables().remove(n),!0)},en.prototype.itemsTree=function(){if(0===arguments.length){this.build();var t=this.itemsTree(this._root);return null===t?new Nt:t}if(1===arguments.length){for(var e=arguments[0],n=new Nt,i=e.getChildBoundables().iterator();i.hasNext();){var r=i.next();if(r instanceof Qe){var o=this.itemsTree(r);null!==o&&n.add(o)}else r instanceof He?n.add(r.getItem()):tt.shouldNeverReachHere()}return n.size()<=0?null:n}},en.prototype.insert=function(t,e){tt.isTrue(!this._built,\"Cannot insert items into an STR packed R-tree after it has been built.\"),this._itemBoundables.add(new He(t,e))},en.prototype.boundablesAtLevel=function(){if(1===arguments.length){var t=arguments[0],e=new Nt;return this.boundablesAtLevel(t,this._root,e),e}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];if(tt.isTrue(n>-2),i.getLevel()===n)return r.add(i),null;for(var o=i.getChildBoundables().iterator();o.hasNext();){var s=o.next();s instanceof Qe?this.boundablesAtLevel(n,s,r):(tt.isTrue(s instanceof He),-1===n&&r.add(s))}return null}},en.prototype.query=function(){if(1===arguments.length){var t=arguments[0];this.build();var e=new Nt;return this.isEmpty()?e:(this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.query(t,this._root,e),e)}if(2===arguments.length){var n=arguments[0],i=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this._root.getBounds(),n)&&this.query(n,this._root,i)}else if(3===arguments.length)if(O(arguments[2],Ke)&&arguments[0]instanceof Object&&arguments[1]instanceof Qe)for(var r=arguments[0],o=arguments[1],s=arguments[2],a=o.getChildBoundables(),u=0;u<a.size();u++){var l=a.get(u);this.getIntersectsOp().intersects(l.getBounds(),r)&&(l instanceof Qe?this.query(r,l,s):l instanceof He?s.visitItem(l.getItem()):tt.shouldNeverReachHere())}else if(O(arguments[2],xt)&&arguments[0]instanceof Object&&arguments[1]instanceof Qe)for(var c=arguments[0],p=arguments[1],h=arguments[2],f=p.getChildBoundables(),g=0;g<f.size();g++){var d=f.get(g);this.getIntersectsOp().intersects(d.getBounds(),c)&&(d instanceof Qe?this.query(c,d,h):d instanceof He?h.add(d.getItem()):tt.shouldNeverReachHere())}},en.prototype.build=function(){if(this._built)return null;this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1),this._itemBoundables=null,this._built=!0},en.prototype.getRoot=function(){return this.build(),this._root},en.prototype.remove=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.remove(t,this._root,e)}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],o=this.removeItem(i,r);if(o)return!0;for(var s=null,a=i.getChildBoundables().iterator();a.hasNext();){var u=a.next();if(this.getIntersectsOp().intersects(u.getBounds(),n)&&(u instanceof Qe&&(o=this.remove(n,u,r)))){s=u;break}}return null!==s&&s.getChildBoundables().isEmpty()&&i.getChildBoundables().remove(s),o}},en.prototype.createHigherLevels=function(t,e){tt.isTrue(!t.isEmpty());var n=this.createParentBoundables(t,e+1);return 1===n.size()?n.get(0):this.createHigherLevels(n,e+1)},en.prototype.depth=function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this._root));if(1===arguments.length){for(var t=0,e=arguments[0].getChildBoundables().iterator();e.hasNext();){var n=e.next();if(n instanceof Qe){var i=this.depth(n);i>t&&(t=i)}}return t+1}},en.prototype.createParentBoundables=function(t,e){tt.isTrue(!t.isEmpty());var n=new Nt;n.add(this.createNode(e));var i=new Nt(t);$e.sort(i,this.getComparator());for(var r=i.iterator();r.hasNext();){var o=r.next();this.lastNode(n).getChildBoundables().size()===this.getNodeCapacity()&&n.add(this.createNode(e)),this.lastNode(n).addChildBoundable(o)}return n},en.prototype.isEmpty=function(){return this._built?this._root.isEmpty():this._itemBoundables.isEmpty()},en.prototype.interfaces_=function(){return[e]},en.prototype.getClass=function(){return en},en.compareDoubles=function(t,e){return t>e?1:t<e?-1:0},nn.IntersectsOp.get=function(){return rn},nn.serialVersionUID.get=function(){return-0x35ef64c82d4c5400},nn.DEFAULT_NODE_CAPACITY.get=function(){return 10},Object.defineProperties(en,nn);var rn=function(){},on=function(){};on.prototype.distance=function(t,e){},on.prototype.interfaces_=function(){return[]},on.prototype.getClass=function(){return on};var sn=function(t){function n(e){e=e||n.DEFAULT_NODE_CAPACITY,t.call(this,e)}t&&(n.__proto__=t),(n.prototype=Object.create(t&&t.prototype)).constructor=n;var i={STRtreeNode:{configurable:!0},serialVersionUID:{configurable:!0},xComparator:{configurable:!0},yComparator:{configurable:!0},intersectsOp:{configurable:!0},DEFAULT_NODE_CAPACITY:{configurable:!0}};return n.prototype.createParentBoundablesFromVerticalSlices=function(t,e){tt.isTrue(t.length>0);for(var n=new Nt,i=0;i<t.length;i++)n.addAll(this.createParentBoundablesFromVerticalSlice(t[i],e));return n},n.prototype.createNode=function(t){return new an(t)},n.prototype.size=function(){return 0===arguments.length?t.prototype.size.call(this):t.prototype.size.apply(this,arguments)},n.prototype.insert=function(){if(2!==arguments.length)return t.prototype.insert.apply(this,arguments);var e=arguments[0],n=arguments[1];if(e.isNull())return null;t.prototype.insert.call(this,e,n)},n.prototype.getIntersectsOp=function(){return n.intersectsOp},n.prototype.verticalSlices=function(t,e){for(var n=Math.trunc(Math.ceil(t.size()/e)),i=new Array(e).fill(null),r=t.iterator(),o=0;o<e;o++){i[o]=new Nt;for(var s=0;r.hasNext()&&s<n;){var a=r.next();i[o].add(a),s++}}return i},n.prototype.query=function(){if(1===arguments.length){var e=arguments[0];return t.prototype.query.call(this,e)}if(2===arguments.length){var n=arguments[0],i=arguments[1];t.prototype.query.call(this,n,i)}else if(3===arguments.length)if(O(arguments[2],Ke)&&arguments[0]instanceof Object&&arguments[1]instanceof Qe){var r=arguments[0],o=arguments[1],s=arguments[2];t.prototype.query.call(this,r,o,s)}else if(O(arguments[2],xt)&&arguments[0]instanceof Object&&arguments[1]instanceof Qe){var a=arguments[0],u=arguments[1],l=arguments[2];t.prototype.query.call(this,a,u,l)}},n.prototype.getComparator=function(){return n.yComparator},n.prototype.createParentBoundablesFromVerticalSlice=function(e,n){return t.prototype.createParentBoundables.call(this,e,n)},n.prototype.remove=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return t.prototype.remove.call(this,e,n)}return t.prototype.remove.apply(this,arguments)},n.prototype.depth=function(){return 0===arguments.length?t.prototype.depth.call(this):t.prototype.depth.apply(this,arguments)},n.prototype.createParentBoundables=function(t,e){tt.isTrue(!t.isEmpty());var i=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),r=new Nt(t);$e.sort(r,n.xComparator);var o=this.verticalSlices(r,Math.trunc(Math.ceil(Math.sqrt(i))));return this.createParentBoundablesFromVerticalSlices(o,e)},n.prototype.nearestNeighbour=function(){if(1===arguments.length){if(O(arguments[0],on)){var t=arguments[0],e=new tn(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(e)}if(arguments[0]instanceof tn){var i=arguments[0];return this.nearestNeighbour(i,m.POSITIVE_INFINITY)}}else if(2===arguments.length){if(arguments[0]instanceof n&&O(arguments[1],on)){var r=arguments[0],o=arguments[1],s=new tn(this.getRoot(),r.getRoot(),o);return this.nearestNeighbour(s)}if(arguments[0]instanceof tn&&\"number\"==typeof arguments[1]){var a=arguments[0],u=arguments[1],l=null,c=new We;for(c.add(a);!c.isEmpty()&&u>0;){var p=c.poll(),h=p.getDistance();if(h>=u)break;p.isLeaves()?(u=h,l=p):p.expandToQueue(c,u)}return[l.getBoundable(0).getItem(),l.getBoundable(1).getItem()]}}else if(3===arguments.length){var f=arguments[0],g=arguments[1],d=arguments[2],y=new He(f,g),_=new tn(this.getRoot(),y,d);return this.nearestNeighbour(_)[0]}},n.prototype.interfaces_=function(){return[Je,e]},n.prototype.getClass=function(){return n},n.centreX=function(t){return n.avg(t.getMinX(),t.getMaxX())},n.avg=function(t,e){return(t+e)/2},n.centreY=function(t){return n.avg(t.getMinY(),t.getMaxY())},i.STRtreeNode.get=function(){return an},i.serialVersionUID.get=function(){return 0x39920f7d5f261e0},i.xComparator.get=function(){return{interfaces_:function(){return[x]},compare:function(e,i){return t.compareDoubles(n.centreX(e.getBounds()),n.centreX(i.getBounds()))}}},i.yComparator.get=function(){return{interfaces_:function(){return[x]},compare:function(e,i){return t.compareDoubles(n.centreY(e.getBounds()),n.centreY(i.getBounds()))}}},i.intersectsOp.get=function(){return{interfaces_:function(){return[t.IntersectsOp]},intersects:function(t,e){return t.intersects(e)}}},i.DEFAULT_NODE_CAPACITY.get=function(){return 10},Object.defineProperties(n,i),n}(en),an=function(t){function e(){var e=arguments[0];t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.computeBounds=function(){for(var t=null,e=this.getChildBoundables().iterator();e.hasNext();){var n=e.next();null===t?t=new k(n.getBounds()):t.expandToInclude(n.getBounds())}return t},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Qe),un=function(){};un.prototype.interfaces_=function(){return[]},un.prototype.getClass=function(){return un},un.relativeSign=function(t,e){return t<e?-1:t>e?1:0},un.compare=function(t,e,n){if(e.equals2D(n))return 0;var i=un.relativeSign(e.x,n.x),r=un.relativeSign(e.y,n.y);switch(t){case 0:return un.compareValue(i,r);case 1:return un.compareValue(r,i);case 2:return un.compareValue(r,-i);case 3:return un.compareValue(-i,r);case 4:return un.compareValue(-i,-r);case 5:return un.compareValue(-r,-i);case 6:return un.compareValue(-r,i);case 7:return un.compareValue(i,-r)}return tt.shouldNeverReachHere(\"invalid octant value\"),0},un.compareValue=function(t,e){return t<0?-1:t>0?1:e<0?-1:e>0?1:0};var ln=function(){this._segString=null,this.coord=null,this.segmentIndex=null,this._segmentOctant=null,this._isInterior=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this._segString=t,this.coord=new N(e),this.segmentIndex=n,this._segmentOctant=i,this._isInterior=!e.equals2D(t.getCoordinate(n))};ln.prototype.getCoordinate=function(){return this.coord},ln.prototype.print=function(t){t.print(this.coord),t.print(\" seg # = \"+this.segmentIndex)},ln.prototype.compareTo=function(t){var e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:un.compare(this._segmentOctant,this.coord,e.coord)},ln.prototype.isEndPoint=function(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t},ln.prototype.isInterior=function(){return this._isInterior},ln.prototype.interfaces_=function(){return[I]},ln.prototype.getClass=function(){return ln};var cn=function(){this._nodeMap=new c,this._edge=null;var t=arguments[0];this._edge=t};cn.prototype.getSplitCoordinates=function(){var t=new St;this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next();this.addEdgeCoordinates(n,i,t),n=i}return t.toCoordinateArray()},cn.prototype.addCollapsedNodes=function(){var t=new Nt;this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(var e=t.iterator();e.hasNext();){var n=e.next().intValue();this.add(this._edge.getCoordinate(n),n)}},cn.prototype.print=function(t){t.println(\"Intersections:\");for(var e=this.iterator();e.hasNext();){e.next().print(t)}},cn.prototype.findCollapsesFromExistingVertices=function(t){for(var e=0;e<this._edge.size()-2;e++){var n=this._edge.getCoordinate(e),i=this._edge.getCoordinate(e+2);n.equals2D(i)&&t.add(new D(e+1))}},cn.prototype.addEdgeCoordinates=function(t,e,n){var i=this._edge.getCoordinate(e.segmentIndex),r=e.isInterior()||!e.coord.equals2D(i);n.add(new N(t.coord),!1);for(var o=t.segmentIndex+1;o<=e.segmentIndex;o++)n.add(this._edge.getCoordinate(o));r&&n.add(new N(e.coord))},cn.prototype.iterator=function(){return this._nodeMap.values().iterator()},cn.prototype.addSplitEdges=function(t){this.addEndpoints(),this.addCollapsedNodes();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}},cn.prototype.findCollapseIndex=function(t,e,n){if(!t.coord.equals2D(e.coord))return!1;var i=e.segmentIndex-t.segmentIndex;return e.isInterior()||i--,1===i&&(n[0]=t.segmentIndex+1,!0)},cn.prototype.findCollapsesFromInsertedNodes=function(t){for(var e=new Array(1).fill(null),n=this.iterator(),i=n.next();n.hasNext();){var r=n.next();this.findCollapseIndex(i,r,e)&&t.add(new D(e[0])),i=r}},cn.prototype.getEdge=function(){return this._edge},cn.prototype.addEndpoints=function(){var t=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0),this.add(this._edge.getCoordinate(t),t)},cn.prototype.createSplitEdge=function(t,e){var n=e.segmentIndex-t.segmentIndex+2,i=this._edge.getCoordinate(e.segmentIndex),r=e.isInterior()||!e.coord.equals2D(i);r||n--;var o=new Array(n).fill(null),s=0;o[s++]=new N(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)o[s++]=this._edge.getCoordinate(a);return r&&(o[s]=new N(e.coord)),new gn(o,this._edge.getData())},cn.prototype.add=function(t,e){var n=new ln(this._edge,t,e,this._edge.getSegmentOctant(e)),i=this._nodeMap.get(n);return null!==i?(tt.isTrue(i.coord.equals2D(t),\"Found equal nodes with different coordinates\"),i):(this._nodeMap.put(n,n),n)},cn.prototype.checkSplitEdgesCorrectness=function(t){var e=this._edge.getCoordinates(),n=t.get(0).getCoordinate(0);if(!n.equals2D(e[0]))throw new Z(\"bad split edge start point at \"+n);var i=t.get(t.size()-1).getCoordinates(),r=i[i.length-1];if(!r.equals2D(e[e.length-1]))throw new Z(\"bad split edge end point at \"+r)},cn.prototype.interfaces_=function(){return[]},cn.prototype.getClass=function(){return cn};var pn=function(){};pn.prototype.interfaces_=function(){return[]},pn.prototype.getClass=function(){return pn},pn.octant=function(){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new _(\"Cannot compute the octant for point ( \"+t+\", \"+e+\" )\");var n=Math.abs(t),i=Math.abs(e);return t>=0?e>=0?n>=i?0:1:n>=i?7:6:e>=0?n>=i?3:2:n>=i?4:5}if(arguments[0]instanceof N&&arguments[1]instanceof N){var r=arguments[0],o=arguments[1],s=o.x-r.x,a=o.y-r.y;if(0===s&&0===a)throw new _(\"Cannot compute the octant for two identical points \"+r);return pn.octant(s,a)}};var hn=function(){};hn.prototype.getCoordinates=function(){},hn.prototype.size=function(){},hn.prototype.getCoordinate=function(t){},hn.prototype.isClosed=function(){},hn.prototype.setData=function(t){},hn.prototype.getData=function(){},hn.prototype.interfaces_=function(){return[]},hn.prototype.getClass=function(){return hn};var fn=function(){};fn.prototype.addIntersection=function(t,e){},fn.prototype.interfaces_=function(){return[hn]},fn.prototype.getClass=function(){return fn};var gn=function(){this._nodeList=new cn(this),this._pts=null,this._data=null;var t=arguments[0],e=arguments[1];this._pts=t,this._data=e};gn.prototype.getCoordinates=function(){return this._pts},gn.prototype.size=function(){return this._pts.length},gn.prototype.getCoordinate=function(t){return this._pts[t]},gn.prototype.isClosed=function(){return this._pts[0].equals(this._pts[this._pts.length-1])},gn.prototype.getSegmentOctant=function(t){return t===this._pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))},gn.prototype.setData=function(t){this._data=t},gn.prototype.safeOctant=function(t,e){return t.equals2D(e)?0:pn.octant(t,e)},gn.prototype.getData=function(){return this._data},gn.prototype.addIntersection=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.addIntersectionNode(t,e)}else if(4===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[3],o=new N(n.getIntersection(r));this.addIntersection(o,i)}},gn.prototype.toString=function(){return Q.toLineString(new ue(this._pts))},gn.prototype.getNodeList=function(){return this._nodeList},gn.prototype.addIntersectionNode=function(t,e){var n=e,i=n+1;if(i<this._pts.length){var r=this._pts[i];t.equals2D(r)&&(n=i)}return this._nodeList.add(t,n)},gn.prototype.addIntersections=function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)},gn.prototype.interfaces_=function(){return[fn]},gn.prototype.getClass=function(){return gn},gn.getNodedSubstrings=function(){if(1===arguments.length){var t=arguments[0],e=new Nt;return gn.getNodedSubstrings(t,e),e}if(2===arguments.length)for(var n=arguments[0],i=arguments[1],r=n.iterator();r.hasNext();){r.next().getNodeList().addSplitEdges(i)}};var dn=function(){if(this.p0=null,this.p1=null,0===arguments.length)this.p0=new N,this.p1=new N;else if(1===arguments.length){var t=arguments[0];this.p0=new N(t.p0),this.p1=new N(t.p1)}else if(2===arguments.length)this.p0=arguments[0],this.p1=arguments[1];else if(4===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2],r=arguments[3];this.p0=new N(e,n),this.p1=new N(i,r)}},yn={serialVersionUID:{configurable:!0}};dn.prototype.minX=function(){return Math.min(this.p0.x,this.p1.x)},dn.prototype.orientationIndex=function(){if(arguments[0]instanceof dn){var t=arguments[0],e=st.orientationIndex(this.p0,this.p1,t.p0),n=st.orientationIndex(this.p0,this.p1,t.p1);return e>=0&&n>=0?Math.max(e,n):e<=0&&n<=0?Math.max(e,n):0}if(arguments[0]instanceof N){var i=arguments[0];return st.orientationIndex(this.p0,this.p1,i)}},dn.prototype.toGeometry=function(t){return t.createLineString([this.p0,this.p1])},dn.prototype.isVertical=function(){return this.p0.x===this.p1.x},dn.prototype.equals=function(t){if(!(t instanceof dn))return!1;var e=t;return this.p0.equals(e.p0)&&this.p1.equals(e.p1)},dn.prototype.intersection=function(t){var e=new it;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null},dn.prototype.project=function(){if(arguments[0]instanceof N){var t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new N(t);var e=this.projectionFactor(t),n=new N;return n.x=this.p0.x+e*(this.p1.x-this.p0.x),n.y=this.p0.y+e*(this.p1.y-this.p0.y),n}if(arguments[0]instanceof dn){var i=arguments[0],r=this.projectionFactor(i.p0),o=this.projectionFactor(i.p1);if(r>=1&&o>=1)return null;if(r<=0&&o<=0)return null;var s=this.project(i.p0);r<0&&(s=this.p0),r>1&&(s=this.p1);var a=this.project(i.p1);return o<0&&(a=this.p0),o>1&&(a=this.p1),new dn(s,a)}},dn.prototype.normalize=function(){this.p1.compareTo(this.p0)<0&&this.reverse()},dn.prototype.angle=function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)},dn.prototype.getCoordinate=function(t){return 0===t?this.p0:this.p1},dn.prototype.distancePerpendicular=function(t){return st.distancePointLinePerpendicular(t,this.p0,this.p1)},dn.prototype.minY=function(){return Math.min(this.p0.y,this.p1.y)},dn.prototype.midPoint=function(){return dn.midPoint(this.p0,this.p1)},dn.prototype.projectionFactor=function(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;var e=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y,i=e*e+n*n;if(i<=0)return m.NaN;return((t.x-this.p0.x)*e+(t.y-this.p0.y)*n)/i},dn.prototype.closestPoints=function(t){var e=this.intersection(t);if(null!==e)return[e,e];var n=new Array(2).fill(null),i=m.MAX_VALUE,r=null,o=this.closestPoint(t.p0);i=o.distance(t.p0),n[0]=o,n[1]=t.p0;var s=this.closestPoint(t.p1);(r=s.distance(t.p1))<i&&(i=r,n[0]=s,n[1]=t.p1);var a=t.closestPoint(this.p0);(r=a.distance(this.p0))<i&&(i=r,n[0]=this.p0,n[1]=a);var u=t.closestPoint(this.p1);return(r=u.distance(this.p1))<i&&(i=r,n[0]=this.p1,n[1]=u),n},dn.prototype.closestPoint=function(t){var e=this.projectionFactor(t);if(e>0&&e<1)return this.project(t);return this.p0.distance(t)<this.p1.distance(t)?this.p0:this.p1},dn.prototype.maxX=function(){return Math.max(this.p0.x,this.p1.x)},dn.prototype.getLength=function(){return this.p0.distance(this.p1)},dn.prototype.compareTo=function(t){var e=t,n=this.p0.compareTo(e.p0);return 0!==n?n:this.p1.compareTo(e.p1)},dn.prototype.reverse=function(){var t=this.p0;this.p0=this.p1,this.p1=t},dn.prototype.equalsTopo=function(t){return this.p0.equals(t.p0)&&(this.p1.equals(t.p1)||this.p0.equals(t.p1))&&this.p1.equals(t.p0)},dn.prototype.lineIntersection=function(t){try{return Y.intersection(this.p0,this.p1,t.p0,t.p1)}catch(t){if(!(t instanceof z))throw t}return null},dn.prototype.maxY=function(){return Math.max(this.p0.y,this.p1.y)},dn.prototype.pointAlongOffset=function(t,e){var n=this.p0.x+t*(this.p1.x-this.p0.x),i=this.p0.y+t*(this.p1.y-this.p0.y),r=this.p1.x-this.p0.x,o=this.p1.y-this.p0.y,s=Math.sqrt(r*r+o*o),a=0,u=0;if(0!==e){if(s<=0)throw new Error(\"Cannot compute offset from zero-length line segment\");a=e*r/s,u=e*o/s}return new N(n-u,i+a)},dn.prototype.setCoordinates=function(){if(1===arguments.length){var t=arguments[0];this.setCoordinates(t.p0,t.p1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.p0.x=e.x,this.p0.y=e.y,this.p1.x=n.x,this.p1.y=n.y}},dn.prototype.segmentFraction=function(t){var e=this.projectionFactor(t);return e<0?e=0:(e>1||m.isNaN(e))&&(e=1),e},dn.prototype.toString=function(){return\"LINESTRING( \"+this.p0.x+\" \"+this.p0.y+\", \"+this.p1.x+\" \"+this.p1.y+\")\"},dn.prototype.isHorizontal=function(){return this.p0.y===this.p1.y},dn.prototype.distance=function(){if(arguments[0]instanceof dn){var t=arguments[0];return st.distanceLineLine(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof N){var e=arguments[0];return st.distancePointLine(e,this.p0,this.p1)}},dn.prototype.pointAlong=function(t){var e=new N;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e},dn.prototype.hashCode=function(){var t=m.doubleToLongBits(this.p0.x);t^=31*m.doubleToLongBits(this.p0.y);var e=Math.trunc(t)^Math.trunc(t>>32),n=m.doubleToLongBits(this.p1.x);n^=31*m.doubleToLongBits(this.p1.y);return e^(Math.trunc(n)^Math.trunc(n>>32))},dn.prototype.interfaces_=function(){return[I,e]},dn.prototype.getClass=function(){return dn},dn.midPoint=function(t,e){return new N((t.x+e.x)/2,(t.y+e.y)/2)},yn.serialVersionUID.get=function(){return 0x2d2172135f411c00},Object.defineProperties(dn,yn);var _n=function(){this.tempEnv1=new k,this.tempEnv2=new k,this._overlapSeg1=new dn,this._overlapSeg2=new dn};_n.prototype.overlap=function(){if(2===arguments.length);else if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];t.getLineSegment(e,this._overlapSeg1),n.getLineSegment(i,this._overlapSeg2),this.overlap(this._overlapSeg1,this._overlapSeg2)}},_n.prototype.interfaces_=function(){return[]},_n.prototype.getClass=function(){return _n};var mn=function(){this._pts=null,this._start=null,this._end=null,this._env=null,this._context=null,this._id=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this._pts=t,this._start=e,this._end=n,this._context=i};mn.prototype.getLineSegment=function(t,e){e.p0=this._pts[t],e.p1=this._pts[t+1]},mn.prototype.computeSelect=function(t,e,n,i){var r=this._pts[e],o=this._pts[n];if(i.tempEnv1.init(r,o),n-e==1)return i.select(this,e),null;if(!t.intersects(i.tempEnv1))return null;var s=Math.trunc((e+n)/2);e<s&&this.computeSelect(t,e,s,i),s<n&&this.computeSelect(t,s,n,i)},mn.prototype.getCoordinates=function(){for(var t=new Array(this._end-this._start+1).fill(null),e=0,n=this._start;n<=this._end;n++)t[e++]=this._pts[n];return t},mn.prototype.computeOverlaps=function(t,e){this.computeOverlapsInternal(this._start,this._end,t,t._start,t._end,e)},mn.prototype.setId=function(t){this._id=t},mn.prototype.select=function(t,e){this.computeSelect(t,this._start,this._end,e)},mn.prototype.getEnvelope=function(){if(null===this._env){var t=this._pts[this._start],e=this._pts[this._end];this._env=new k(t,e)}return this._env},mn.prototype.getEndIndex=function(){return this._end},mn.prototype.getStartIndex=function(){return this._start},mn.prototype.getContext=function(){return this._context},mn.prototype.getId=function(){return this._id},mn.prototype.computeOverlapsInternal=function(t,e,n,i,r,o){var s=this._pts[t],a=this._pts[e],u=n._pts[i],l=n._pts[r];if(e-t==1&&r-i==1)return o.overlap(this,t,n,i),null;if(o.tempEnv1.init(s,a),o.tempEnv2.init(u,l),!o.tempEnv1.intersects(o.tempEnv2))return null;var c=Math.trunc((t+e)/2),p=Math.trunc((i+r)/2);t<c&&(i<p&&this.computeOverlapsInternal(t,c,n,i,p,o),p<r&&this.computeOverlapsInternal(t,c,n,p,r,o)),c<e&&(i<p&&this.computeOverlapsInternal(c,e,n,i,p,o),p<r&&this.computeOverlapsInternal(c,e,n,p,r,o))},mn.prototype.interfaces_=function(){return[]},mn.prototype.getClass=function(){return mn};var vn=function(){};vn.prototype.interfaces_=function(){return[]},vn.prototype.getClass=function(){return vn},vn.getChainStartIndices=function(t){var e=0,n=new Nt;n.add(new D(e));do{var i=vn.findChainEnd(t,e);n.add(new D(i)),e=i}while(e<t.length-1);return vn.toIntArray(n)},vn.findChainEnd=function(t,e){for(var n=e;n<t.length-1&&t[n].equals2D(t[n+1]);)n++;if(n>=t.length-1)return t.length-1;for(var i=Be.quadrant(t[n],t[n+1]),r=e+1;r<t.length;){if(!t[r-1].equals2D(t[r])){if(Be.quadrant(t[r-1],t[r])!==i)break}r++}return r-1},vn.getChains=function(){if(1===arguments.length){var t=arguments[0];return vn.getChains(t,null)}if(2===arguments.length){for(var e=arguments[0],n=arguments[1],i=new Nt,r=vn.getChainStartIndices(e),o=0;o<r.length-1;o++){var s=new mn(e,r[o],r[o+1],n);i.add(s)}return i}},vn.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e};var In=function(){};In.prototype.computeNodes=function(t){},In.prototype.getNodedSubstrings=function(){},In.prototype.interfaces_=function(){return[]},In.prototype.getClass=function(){return In};var En=function(){if(this._segInt=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.setSegmentIntersector(t)}};En.prototype.setSegmentIntersector=function(t){this._segInt=t},En.prototype.interfaces_=function(){return[In]},En.prototype.getClass=function(){return En};var xn=function(t){function e(e){e?t.call(this,e):t.call(this),this._monoChains=new Nt,this._index=new sn,this._idCounter=0,this._nodedSegStrings=null,this._nOverlaps=0}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={SegmentOverlapAction:{configurable:!0}};return e.prototype.getMonotoneChains=function(){return this._monoChains},e.prototype.getNodedSubstrings=function(){return gn.getNodedSubstrings(this._nodedSegStrings)},e.prototype.getIndex=function(){return this._index},e.prototype.add=function(t){for(var e=vn.getChains(t.getCoordinates(),t).iterator();e.hasNext();){var n=e.next();n.setId(this._idCounter++),this._index.insert(n.getEnvelope(),n),this._monoChains.add(n)}},e.prototype.computeNodes=function(t){this._nodedSegStrings=t;for(var e=t.iterator();e.hasNext();)this.add(e.next());this.intersectChains()},e.prototype.intersectChains=function(){for(var t=new Nn(this._segInt),e=this._monoChains.iterator();e.hasNext();)for(var n=e.next(),i=this._index.query(n.getEnvelope()).iterator();i.hasNext();){var r=i.next();if(r.getId()>n.getId()&&(n.computeOverlaps(r,t),this._nOverlaps++),this._segInt.isDone())return null}},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},n.SegmentOverlapAction.get=function(){return Nn},Object.defineProperties(e,n),e}(En),Nn=function(t){function e(){t.call(this),this._si=null;var e=arguments[0];this._si=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.overlap=function(){if(4!==arguments.length)return t.prototype.overlap.apply(this,arguments);var e=arguments[0],n=arguments[1],i=arguments[2],r=arguments[3],o=e.getContext(),s=i.getContext();this._si.processIntersections(o,n,s,r)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(_n),Cn=function t(){if(this._quadrantSegments=t.DEFAULT_QUADRANT_SEGMENTS,this._endCapStyle=t.CAP_ROUND,this._joinStyle=t.JOIN_ROUND,this._mitreLimit=t.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this._simplifyFactor=t.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){var e=arguments[0];this.setQuadrantSegments(e)}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.setQuadrantSegments(n),this.setEndCapStyle(i)}else if(4===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];this.setQuadrantSegments(r),this.setEndCapStyle(o),this.setJoinStyle(s),this.setMitreLimit(a)}},Sn={CAP_ROUND:{configurable:!0},CAP_FLAT:{configurable:!0},CAP_SQUARE:{configurable:!0},JOIN_ROUND:{configurable:!0},JOIN_MITRE:{configurable:!0},JOIN_BEVEL:{configurable:!0},DEFAULT_QUADRANT_SEGMENTS:{configurable:!0},DEFAULT_MITRE_LIMIT:{configurable:!0},DEFAULT_SIMPLIFY_FACTOR:{configurable:!0}};Cn.prototype.getEndCapStyle=function(){return this._endCapStyle},Cn.prototype.isSingleSided=function(){return this._isSingleSided},Cn.prototype.setQuadrantSegments=function(t){this._quadrantSegments=t,0===this._quadrantSegments&&(this._joinStyle=Cn.JOIN_BEVEL),this._quadrantSegments<0&&(this._joinStyle=Cn.JOIN_MITRE,this._mitreLimit=Math.abs(this._quadrantSegments)),t<=0&&(this._quadrantSegments=1),this._joinStyle!==Cn.JOIN_ROUND&&(this._quadrantSegments=Cn.DEFAULT_QUADRANT_SEGMENTS)},Cn.prototype.getJoinStyle=function(){return this._joinStyle},Cn.prototype.setJoinStyle=function(t){this._joinStyle=t},Cn.prototype.setSimplifyFactor=function(t){this._simplifyFactor=t<0?0:t},Cn.prototype.getSimplifyFactor=function(){return this._simplifyFactor},Cn.prototype.getQuadrantSegments=function(){return this._quadrantSegments},Cn.prototype.setEndCapStyle=function(t){this._endCapStyle=t},Cn.prototype.getMitreLimit=function(){return this._mitreLimit},Cn.prototype.setMitreLimit=function(t){this._mitreLimit=t},Cn.prototype.setSingleSided=function(t){this._isSingleSided=t},Cn.prototype.interfaces_=function(){return[]},Cn.prototype.getClass=function(){return Cn},Cn.bufferDistanceError=function(t){var e=Math.PI/2/t;return 1-Math.cos(e/2)},Sn.CAP_ROUND.get=function(){return 1},Sn.CAP_FLAT.get=function(){return 2},Sn.CAP_SQUARE.get=function(){return 3},Sn.JOIN_ROUND.get=function(){return 1},Sn.JOIN_MITRE.get=function(){return 2},Sn.JOIN_BEVEL.get=function(){return 3},Sn.DEFAULT_QUADRANT_SEGMENTS.get=function(){return 8},Sn.DEFAULT_MITRE_LIMIT.get=function(){return 5},Sn.DEFAULT_SIMPLIFY_FACTOR.get=function(){return.01},Object.defineProperties(Cn,Sn);var Ln=function(t){this._distanceTol=null,this._isDeleted=null,this._angleOrientation=st.COUNTERCLOCKWISE,this._inputLine=t||null},bn={INIT:{configurable:!0},DELETE:{configurable:!0},KEEP:{configurable:!0},NUM_PTS_TO_CHECK:{configurable:!0}};Ln.prototype.isDeletable=function(t,e,n,i){var r=this._inputLine[t],o=this._inputLine[e],s=this._inputLine[n];return!!this.isConcave(r,o,s)&&(!!this.isShallow(r,o,s,i)&&this.isShallowSampled(r,o,t,n,i))},Ln.prototype.deleteShallowConcavities=function(){for(var t=1,e=this.findNextNonDeletedIndex(t),n=this.findNextNonDeletedIndex(e),i=!1;n<this._inputLine.length;){var r=!1;this.isDeletable(t,e,n,this._distanceTol)&&(this._isDeleted[e]=Ln.DELETE,r=!0,i=!0),t=r?n:e,e=this.findNextNonDeletedIndex(t),n=this.findNextNonDeletedIndex(e)}return i},Ln.prototype.isShallowConcavity=function(t,e,n,i){if(!(st.computeOrientation(t,e,n)===this._angleOrientation))return!1;return st.distancePointLine(e,t,n)<i},Ln.prototype.isShallowSampled=function(t,e,n,i,r){var o=Math.trunc((i-n)/Ln.NUM_PTS_TO_CHECK);o<=0&&(o=1);for(var s=n;s<i;s+=o)if(!this.isShallow(t,e,this._inputLine[s],r))return!1;return!0},Ln.prototype.isConcave=function(t,e,n){var i=st.computeOrientation(t,e,n)===this._angleOrientation;return i},Ln.prototype.simplify=function(t){this._distanceTol=Math.abs(t),t<0&&(this._angleOrientation=st.CLOCKWISE),this._isDeleted=new Array(this._inputLine.length).fill(null);var e=!1;do{e=this.deleteShallowConcavities()}while(e);return this.collapseLine()},Ln.prototype.findNextNonDeletedIndex=function(t){for(var e=t+1;e<this._inputLine.length&&this._isDeleted[e]===Ln.DELETE;)e++;return e},Ln.prototype.isShallow=function(t,e,n,i){return st.distancePointLine(e,t,n)<i},Ln.prototype.collapseLine=function(){for(var t=new St,e=0;e<this._inputLine.length;e++)this._isDeleted[e]!==Ln.DELETE&&t.add(this._inputLine[e]);return t.toCoordinateArray()},Ln.prototype.interfaces_=function(){return[]},Ln.prototype.getClass=function(){return Ln},Ln.simplify=function(t,e){return new Ln(t).simplify(e)},bn.INIT.get=function(){return 0},bn.DELETE.get=function(){return 1},bn.KEEP.get=function(){return 1},bn.NUM_PTS_TO_CHECK.get=function(){return 10},Object.defineProperties(Ln,bn);var wn=function(){this._ptList=null,this._precisionModel=null,this._minimimVertexDistance=0,this._ptList=new Nt},On={COORDINATE_ARRAY_TYPE:{configurable:!0}};wn.prototype.getCoordinates=function(){return this._ptList.toArray(wn.COORDINATE_ARRAY_TYPE)},wn.prototype.setPrecisionModel=function(t){this._precisionModel=t},wn.prototype.addPt=function(t){var e=new N(t);if(this._precisionModel.makePrecise(e),this.isRedundant(e))return null;this._ptList.add(e)},wn.prototype.revere=function(){},wn.prototype.addPts=function(t,e){if(e)for(var n=0;n<t.length;n++)this.addPt(t[n]);else for(var i=t.length-1;i>=0;i--)this.addPt(t[i])},wn.prototype.isRedundant=function(t){if(this._ptList.size()<1)return!1;var e=this._ptList.get(this._ptList.size()-1);return t.distance(e)<this._minimimVertexDistance},wn.prototype.toString=function(){return(new _e).createLineString(this.getCoordinates()).toString()},wn.prototype.closeRing=function(){if(this._ptList.size()<1)return null;var t=new N(this._ptList.get(0)),e=this._ptList.get(this._ptList.size()-1);if(t.equals(e))return null;this._ptList.add(t)},wn.prototype.setMinimumVertexDistance=function(t){this._minimimVertexDistance=t},wn.prototype.interfaces_=function(){return[]},wn.prototype.getClass=function(){return wn},On.COORDINATE_ARRAY_TYPE.get=function(){return new Array(0).fill(null)},Object.defineProperties(wn,On);var Tn=function(){},Rn={PI_TIMES_2:{configurable:!0},PI_OVER_2:{configurable:!0},PI_OVER_4:{configurable:!0},COUNTERCLOCKWISE:{configurable:!0},CLOCKWISE:{configurable:!0},NONE:{configurable:!0}};Tn.prototype.interfaces_=function(){return[]},Tn.prototype.getClass=function(){return Tn},Tn.toDegrees=function(t){return 180*t/Math.PI},Tn.normalize=function(t){for(;t>Math.PI;)t-=Tn.PI_TIMES_2;for(;t<=-Math.PI;)t+=Tn.PI_TIMES_2;return t},Tn.angle=function(){if(1===arguments.length){var t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){var e=arguments[0],n=arguments[1],i=n.x-e.x,r=n.y-e.y;return Math.atan2(r,i)}},Tn.isAcute=function(t,e,n){var i=t.x-e.x,r=t.y-e.y;return i*(n.x-e.x)+r*(n.y-e.y)>0},Tn.isObtuse=function(t,e,n){var i=t.x-e.x,r=t.y-e.y;return i*(n.x-e.x)+r*(n.y-e.y)<0},Tn.interiorAngle=function(t,e,n){var i=Tn.angle(e,t),r=Tn.angle(e,n);return Math.abs(r-i)},Tn.normalizePositive=function(t){if(t<0){for(;t<0;)t+=Tn.PI_TIMES_2;t>=Tn.PI_TIMES_2&&(t=0)}else{for(;t>=Tn.PI_TIMES_2;)t-=Tn.PI_TIMES_2;t<0&&(t=0)}return t},Tn.angleBetween=function(t,e,n){var i=Tn.angle(e,t),r=Tn.angle(e,n);return Tn.diff(i,r)},Tn.diff=function(t,e){var n=null;return(n=t<e?e-t:t-e)>Math.PI&&(n=2*Math.PI-n),n},Tn.toRadians=function(t){return t*Math.PI/180},Tn.getTurn=function(t,e){var n=Math.sin(e-t);return n>0?Tn.COUNTERCLOCKWISE:n<0?Tn.CLOCKWISE:Tn.NONE},Tn.angleBetweenOriented=function(t,e,n){var i=Tn.angle(e,t),r=Tn.angle(e,n)-i;return r<=-Math.PI?r+Tn.PI_TIMES_2:r>Math.PI?r-Tn.PI_TIMES_2:r},Rn.PI_TIMES_2.get=function(){return 2*Math.PI},Rn.PI_OVER_2.get=function(){return Math.PI/2},Rn.PI_OVER_4.get=function(){return Math.PI/4},Rn.COUNTERCLOCKWISE.get=function(){return st.COUNTERCLOCKWISE},Rn.CLOCKWISE.get=function(){return st.CLOCKWISE},Rn.NONE.get=function(){return st.COLLINEAR},Object.defineProperties(Tn,Rn);var Pn=function t(){this._maxCurveSegmentError=0,this._filletAngleQuantum=null,this._closingSegLengthFactor=1,this._segList=null,this._distance=0,this._precisionModel=null,this._bufParams=null,this._li=null,this._s0=null,this._s1=null,this._s2=null,this._seg0=new dn,this._seg1=new dn,this._offset0=new dn,this._offset1=new dn,this._side=0,this._hasNarrowConcaveAngle=!1;var e=arguments[0],n=arguments[1],i=arguments[2];this._precisionModel=e,this._bufParams=n,this._li=new it,this._filletAngleQuantum=Math.PI/2/n.getQuadrantSegments(),n.getQuadrantSegments()>=8&&n.getJoinStyle()===Cn.JOIN_ROUND&&(this._closingSegLengthFactor=t.MAX_CLOSING_SEG_LEN_FACTOR),this.init(i)},Dn={OFFSET_SEGMENT_SEPARATION_FACTOR:{configurable:!0},INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:!0},CURVE_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:!0},MAX_CLOSING_SEG_LEN_FACTOR:{configurable:!0}};Pn.prototype.addNextSegment=function(t,e){if(this._s0=this._s1,this._s1=this._s2,this._s2=t,this._seg0.setCoordinates(this._s0,this._s1),this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0),this._seg1.setCoordinates(this._s1,this._s2),this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1),this._s1.equals(this._s2))return null;var n=st.computeOrientation(this._s0,this._s1,this._s2),i=n===st.CLOCKWISE&&this._side===Se.LEFT||n===st.COUNTERCLOCKWISE&&this._side===Se.RIGHT;0===n?this.addCollinear(e):i?this.addOutsideTurn(n,e):this.addInsideTurn(n,e)},Pn.prototype.addLineEndCap=function(t,e){var n=new dn(t,e),i=new dn;this.computeOffsetSegment(n,Se.LEFT,this._distance,i);var r=new dn;this.computeOffsetSegment(n,Se.RIGHT,this._distance,r);var o=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,o);switch(this._bufParams.getEndCapStyle()){case Cn.CAP_ROUND:this._segList.addPt(i.p1),this.addFilletArc(e,a+Math.PI/2,a-Math.PI/2,st.CLOCKWISE,this._distance),this._segList.addPt(r.p1);break;case Cn.CAP_FLAT:this._segList.addPt(i.p1),this._segList.addPt(r.p1);break;case Cn.CAP_SQUARE:var u=new N;u.x=Math.abs(this._distance)*Math.cos(a),u.y=Math.abs(this._distance)*Math.sin(a);var l=new N(i.p1.x+u.x,i.p1.y+u.y),c=new N(r.p1.x+u.x,r.p1.y+u.y);this._segList.addPt(l),this._segList.addPt(c)}},Pn.prototype.getCoordinates=function(){return this._segList.getCoordinates()},Pn.prototype.addMitreJoin=function(t,e,n,i){var r=!0,o=null;try{o=Y.intersection(e.p0,e.p1,n.p0,n.p1);(i<=0?1:o.distance(t)/Math.abs(i))>this._bufParams.getMitreLimit()&&(r=!1)}catch(t){if(!(t instanceof z))throw t;o=new N(0,0),r=!1}r?this._segList.addPt(o):this.addLimitedMitreJoin(e,n,i,this._bufParams.getMitreLimit())},Pn.prototype.addFilletCorner=function(t,e,n,i,r){var o=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,o),u=n.x-t.x,l=n.y-t.y,c=Math.atan2(l,u);i===st.CLOCKWISE?a<=c&&(a+=2*Math.PI):a>=c&&(a-=2*Math.PI),this._segList.addPt(e),this.addFilletArc(t,a,c,i,r),this._segList.addPt(n)},Pn.prototype.addOutsideTurn=function(t,e){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*Pn.OFFSET_SEGMENT_SEPARATION_FACTOR)return this._segList.addPt(this._offset0.p1),null;this._bufParams.getJoinStyle()===Cn.JOIN_MITRE?this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance):this._bufParams.getJoinStyle()===Cn.JOIN_BEVEL?this.addBevelJoin(this._offset0,this._offset1):(e&&this._segList.addPt(this._offset0.p1),this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,t,this._distance),this._segList.addPt(this._offset1.p0))},Pn.prototype.createSquare=function(t){this._segList.addPt(new N(t.x+this._distance,t.y+this._distance)),this._segList.addPt(new N(t.x+this._distance,t.y-this._distance)),this._segList.addPt(new N(t.x-this._distance,t.y-this._distance)),this._segList.addPt(new N(t.x-this._distance,t.y+this._distance)),this._segList.closeRing()},Pn.prototype.addSegments=function(t,e){this._segList.addPts(t,e)},Pn.prototype.addFirstSegment=function(){this._segList.addPt(this._offset1.p0)},Pn.prototype.addLastSegment=function(){this._segList.addPt(this._offset1.p1)},Pn.prototype.initSideSegments=function(t,e,n){this._s1=t,this._s2=e,this._side=n,this._seg1.setCoordinates(t,e),this.computeOffsetSegment(this._seg1,n,this._distance,this._offset1)},Pn.prototype.addLimitedMitreJoin=function(t,e,n,i){var r=this._seg0.p1,o=Tn.angle(r,this._seg0.p0),s=Tn.angleBetweenOriented(this._seg0.p0,r,this._seg1.p1)/2,a=Tn.normalize(o+s),u=Tn.normalize(a+Math.PI),l=i*n,c=n-l*Math.abs(Math.sin(s)),p=r.x+l*Math.cos(u),h=r.y+l*Math.sin(u),f=new N(p,h),g=new dn(r,f),d=g.pointAlongOffset(1,c),y=g.pointAlongOffset(1,-c);this._side===Se.LEFT?(this._segList.addPt(d),this._segList.addPt(y)):(this._segList.addPt(y),this._segList.addPt(d))},Pn.prototype.computeOffsetSegment=function(t,e,n,i){var r=e===Se.LEFT?1:-1,o=t.p1.x-t.p0.x,s=t.p1.y-t.p0.y,a=Math.sqrt(o*o+s*s),u=r*n*o/a,l=r*n*s/a;i.p0.x=t.p0.x-l,i.p0.y=t.p0.y+u,i.p1.x=t.p1.x-l,i.p1.y=t.p1.y+u},Pn.prototype.addFilletArc=function(t,e,n,i,r){var o=i===st.CLOCKWISE?-1:1,s=Math.abs(e-n),a=Math.trunc(s/this._filletAngleQuantum+.5);if(a<1)return null;for(var u=s/a,l=0,c=new N;l<s;){var p=e+o*l;c.x=t.x+r*Math.cos(p),c.y=t.y+r*Math.sin(p),this._segList.addPt(c),l+=u}},Pn.prototype.addInsideTurn=function(t,e){if(this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1),this._li.hasIntersection())this._segList.addPt(this._li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this._offset0.p1.distance(this._offset1.p0)<this._distance*Pn.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this._segList.addPt(this._offset0.p1);else{if(this._segList.addPt(this._offset0.p1),this._closingSegLengthFactor>0){var n=new N((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(n);var i=new N((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(i)}else this._segList.addPt(this._s1);this._segList.addPt(this._offset1.p0)}},Pn.prototype.createCircle=function(t){var e=new N(t.x+this._distance,t.y);this._segList.addPt(e),this.addFilletArc(t,0,2*Math.PI,-1,this._distance),this._segList.closeRing()},Pn.prototype.addBevelJoin=function(t,e){this._segList.addPt(t.p1),this._segList.addPt(e.p0)},Pn.prototype.init=function(t){this._distance=t,this._maxCurveSegmentError=t*(1-Math.cos(this._filletAngleQuantum/2)),this._segList=new wn,this._segList.setPrecisionModel(this._precisionModel),this._segList.setMinimumVertexDistance(t*Pn.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)},Pn.prototype.addCollinear=function(t){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2);this._li.getIntersectionNum()>=2&&(this._bufParams.getJoinStyle()===Cn.JOIN_BEVEL||this._bufParams.getJoinStyle()===Cn.JOIN_MITRE?(t&&this._segList.addPt(this._offset0.p1),this._segList.addPt(this._offset1.p0)):this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,st.CLOCKWISE,this._distance))},Pn.prototype.closeRing=function(){this._segList.closeRing()},Pn.prototype.hasNarrowConcaveAngle=function(){return this._hasNarrowConcaveAngle},Pn.prototype.interfaces_=function(){return[]},Pn.prototype.getClass=function(){return Pn},Dn.OFFSET_SEGMENT_SEPARATION_FACTOR.get=function(){return.001},Dn.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return.001},Dn.CURVE_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return 1e-6},Dn.MAX_CLOSING_SEG_LEN_FACTOR.get=function(){return 80},Object.defineProperties(Pn,Dn);var Mn=function(){this._distance=0,this._precisionModel=null,this._bufParams=null;var t=arguments[0],e=arguments[1];this._precisionModel=t,this._bufParams=e};Mn.prototype.getOffsetCurve=function(t,e){if(this._distance=e,0===e)return null;var n=e<0,i=Math.abs(e),r=this.getSegGen(i);t.length<=1?this.computePointCurve(t[0],r):this.computeOffsetCurve(t,n,r);var o=r.getCoordinates();return n&&Lt.reverse(o),o},Mn.prototype.computeSingleSidedBufferCurve=function(t,e,n){var i=this.simplifyTolerance(this._distance);if(e){n.addSegments(t,!0);var r=Ln.simplify(t,-i),o=r.length-1;n.initSideSegments(r[o],r[o-1],Se.LEFT),n.addFirstSegment();for(var s=o-2;s>=0;s--)n.addNextSegment(r[s],!0)}else{n.addSegments(t,!1);var a=Ln.simplify(t,i),u=a.length-1;n.initSideSegments(a[0],a[1],Se.LEFT),n.addFirstSegment();for(var l=2;l<=u;l++)n.addNextSegment(a[l],!0)}n.addLastSegment(),n.closeRing()},Mn.prototype.computeRingBufferCurve=function(t,e,n){var i=this.simplifyTolerance(this._distance);e===Se.RIGHT&&(i=-i);var r=Ln.simplify(t,i),o=r.length-1;n.initSideSegments(r[o-1],r[0],e);for(var s=1;s<=o;s++){var a=1!==s;n.addNextSegment(r[s],a)}n.closeRing()},Mn.prototype.computeLineBufferCurve=function(t,e){var n=this.simplifyTolerance(this._distance),i=Ln.simplify(t,n),r=i.length-1;e.initSideSegments(i[0],i[1],Se.LEFT);for(var o=2;o<=r;o++)e.addNextSegment(i[o],!0);e.addLastSegment(),e.addLineEndCap(i[r-1],i[r]);var s=Ln.simplify(t,-n),a=s.length-1;e.initSideSegments(s[a],s[a-1],Se.LEFT);for(var u=a-2;u>=0;u--)e.addNextSegment(s[u],!0);e.addLastSegment(),e.addLineEndCap(s[1],s[0]),e.closeRing()},Mn.prototype.computePointCurve=function(t,e){switch(this._bufParams.getEndCapStyle()){case Cn.CAP_ROUND:e.createCircle(t);break;case Cn.CAP_SQUARE:e.createSquare(t)}},Mn.prototype.getLineCurve=function(t,e){if(this._distance=e,e<0&&!this._bufParams.isSingleSided())return null;if(0===e)return null;var n=Math.abs(e),i=this.getSegGen(n);if(t.length<=1)this.computePointCurve(t[0],i);else if(this._bufParams.isSingleSided()){var r=e<0;this.computeSingleSidedBufferCurve(t,r,i)}else this.computeLineBufferCurve(t,i);return i.getCoordinates()},Mn.prototype.getBufferParameters=function(){return this._bufParams},Mn.prototype.simplifyTolerance=function(t){return t*this._bufParams.getSimplifyFactor()},Mn.prototype.getRingCurve=function(t,e,n){if(this._distance=n,t.length<=2)return this.getLineCurve(t,n);if(0===n)return Mn.copyCoordinates(t);var i=this.getSegGen(n);return this.computeRingBufferCurve(t,e,i),i.getCoordinates()},Mn.prototype.computeOffsetCurve=function(t,e,n){var i=this.simplifyTolerance(this._distance);if(e){var r=Ln.simplify(t,-i),o=r.length-1;n.initSideSegments(r[o],r[o-1],Se.LEFT),n.addFirstSegment();for(var s=o-2;s>=0;s--)n.addNextSegment(r[s],!0)}else{var a=Ln.simplify(t,i),u=a.length-1;n.initSideSegments(a[0],a[1],Se.LEFT),n.addFirstSegment();for(var l=2;l<=u;l++)n.addNextSegment(a[l],!0)}n.addLastSegment()},Mn.prototype.getSegGen=function(t){return new Pn(this._precisionModel,this._bufParams,t)},Mn.prototype.interfaces_=function(){return[]},Mn.prototype.getClass=function(){return Mn},Mn.copyCoordinates=function(t){for(var e=new Array(t.length).fill(null),n=0;n<e.length;n++)e[n]=new N(t[n]);return e};var An=function(){this._subgraphs=null,this._seg=new dn,this._cga=new st;var t=arguments[0];this._subgraphs=t},Fn={DepthSegment:{configurable:!0}};An.prototype.findStabbedSegments=function(){if(1===arguments.length){for(var t=arguments[0],e=new Nt,n=this._subgraphs.iterator();n.hasNext();){var i=n.next(),r=i.getEnvelope();t.y<r.getMinY()||t.y>r.getMaxY()||this.findStabbedSegments(t,i.getDirectedEdges(),e)}return e}if(3===arguments.length)if(O(arguments[2],xt)&&arguments[0]instanceof N&&arguments[1]instanceof ze)for(var o=arguments[0],s=arguments[1],a=arguments[2],u=s.getEdge().getCoordinates(),l=0;l<u.length-1;l++){this._seg.p0=u[l],this._seg.p1=u[l+1],this._seg.p0.y>this._seg.p1.y&&this._seg.reverse();if(!(Math.max(this._seg.p0.x,this._seg.p1.x)<o.x)&&!(this._seg.isHorizontal()||o.y<this._seg.p0.y||o.y>this._seg.p1.y||st.computeOrientation(this._seg.p0,this._seg.p1,o)===st.RIGHT)){var c=s.getDepth(Se.LEFT);this._seg.p0.equals(u[l])||(c=s.getDepth(Se.RIGHT));var p=new Gn(this._seg,c);a.add(p)}}else if(O(arguments[2],xt)&&arguments[0]instanceof N&&O(arguments[1],xt))for(var h=arguments[0],f=arguments[1],g=arguments[2],d=f.iterator();d.hasNext();){var y=d.next();y.isForward()&&this.findStabbedSegments(h,y,g)}},An.prototype.getDepth=function(t){var e=this.findStabbedSegments(t);if(0===e.size())return 0;return $e.min(e)._leftDepth},An.prototype.interfaces_=function(){return[]},An.prototype.getClass=function(){return An},Fn.DepthSegment.get=function(){return Gn},Object.defineProperties(An,Fn);var Gn=function(){this._upwardSeg=null,this._leftDepth=null;var t=arguments[0],e=arguments[1];this._upwardSeg=new dn(t),this._leftDepth=e};Gn.prototype.compareTo=function(t){var e=t;if(this._upwardSeg.minX()>=e._upwardSeg.maxX())return 1;if(this._upwardSeg.maxX()<=e._upwardSeg.minX())return-1;var n=this._upwardSeg.orientationIndex(e._upwardSeg);return 0!==n?n:0!=(n=-1*e._upwardSeg.orientationIndex(this._upwardSeg))?n:this._upwardSeg.compareTo(e._upwardSeg)},Gn.prototype.compareX=function(t,e){var n=t.p0.compareTo(e.p0);return 0!==n?n:t.p1.compareTo(e.p1)},Gn.prototype.toString=function(){return this._upwardSeg.toString()},Gn.prototype.interfaces_=function(){return[I]},Gn.prototype.getClass=function(){return Gn};var qn=function(t,e,n){this.p0=t||null,this.p1=e||null,this.p2=n||null};qn.prototype.area=function(){return qn.area(this.p0,this.p1,this.p2)},qn.prototype.signedArea=function(){return qn.signedArea(this.p0,this.p1,this.p2)},qn.prototype.interpolateZ=function(t){if(null===t)throw new _(\"Supplied point is null.\");return qn.interpolateZ(t,this.p0,this.p1,this.p2)},qn.prototype.longestSideLength=function(){return qn.longestSideLength(this.p0,this.p1,this.p2)},qn.prototype.isAcute=function(){return qn.isAcute(this.p0,this.p1,this.p2)},qn.prototype.circumcentre=function(){return qn.circumcentre(this.p0,this.p1,this.p2)},qn.prototype.area3D=function(){return qn.area3D(this.p0,this.p1,this.p2)},qn.prototype.centroid=function(){return qn.centroid(this.p0,this.p1,this.p2)},qn.prototype.inCentre=function(){return qn.inCentre(this.p0,this.p1,this.p2)},qn.prototype.interfaces_=function(){return[]},qn.prototype.getClass=function(){return qn},qn.area=function(t,e,n){return Math.abs(((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2)},qn.signedArea=function(t,e,n){return((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2},qn.det=function(t,e,n,i){return t*i-e*n},qn.interpolateZ=function(t,e,n,i){var r=e.x,o=e.y,s=n.x-r,a=i.x-r,u=n.y-o,l=i.y-o,c=s*l-a*u,p=t.x-r,h=t.y-o,f=(l*p-a*h)/c,g=(-u*p+s*h)/c;return e.z+f*(n.z-e.z)+g*(i.z-e.z)},qn.longestSideLength=function(t,e,n){var i=t.distance(e),r=e.distance(n),o=n.distance(t),s=i;return r>s&&(s=r),o>s&&(s=o),s},qn.isAcute=function(t,e,n){return!!Tn.isAcute(t,e,n)&&(!!Tn.isAcute(e,n,t)&&!!Tn.isAcute(n,t,e))},qn.circumcentre=function(t,e,n){var i=n.x,r=n.y,o=t.x-i,s=t.y-r,a=e.x-i,u=e.y-r,l=2*qn.det(o,s,a,u),c=qn.det(s,o*o+s*s,u,a*a+u*u),p=qn.det(o,o*o+s*s,a,a*a+u*u);return new N(i-c/l,r+p/l)},qn.perpendicularBisector=function(t,e){var n=e.x-t.x,i=e.y-t.y,r=new Y(t.x+n/2,t.y+i/2,1),o=new Y(t.x-i+n/2,t.y+n+i/2,1);return new Y(r,o)},qn.angleBisector=function(t,e,n){var i=e.distance(t),r=i/(i+e.distance(n)),o=n.x-t.x,s=n.y-t.y;return new N(t.x+r*o,t.y+r*s)},qn.area3D=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,o=e.z-t.z,s=n.x-t.x,a=n.y-t.y,u=n.z-t.z,l=r*u-o*a,c=o*s-i*u,p=i*a-r*s,h=l*l+c*c+p*p,f=Math.sqrt(h)/2;return f},qn.centroid=function(t,e,n){var i=(t.x+e.x+n.x)/3,r=(t.y+e.y+n.y)/3;return new N(i,r)},qn.inCentre=function(t,e,n){var i=e.distance(n),r=t.distance(n),o=t.distance(e),s=i+r+o,a=(i*t.x+r*e.x+o*n.x)/s,u=(i*t.y+r*e.y+o*n.y)/s;return new N(a,u)};var Bn=function(){this._inputGeom=null,this._distance=null,this._curveBuilder=null,this._curveList=new Nt;var t=arguments[0],e=arguments[1],n=arguments[2];this._inputGeom=t,this._distance=e,this._curveBuilder=n};Bn.prototype.addPoint=function(t){if(this._distance<=0)return null;var e=t.getCoordinates(),n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,b.EXTERIOR,b.INTERIOR)},Bn.prototype.addPolygon=function(t){var e=this._distance,n=Se.LEFT;this._distance<0&&(e=-this._distance,n=Se.RIGHT);var i=t.getExteriorRing(),r=Lt.removeRepeatedPoints(i.getCoordinates());if(this._distance<0&&this.isErodedCompletely(i,this._distance))return null;if(this._distance<=0&&r.length<3)return null;this.addPolygonRing(r,e,n,b.EXTERIOR,b.INTERIOR);for(var o=0;o<t.getNumInteriorRing();o++){var s=t.getInteriorRingN(o),a=Lt.removeRepeatedPoints(s.getCoordinates());this._distance>0&&this.isErodedCompletely(s,-this._distance)||this.addPolygonRing(a,e,Se.opposite(n),b.INTERIOR,b.EXTERIOR)}},Bn.prototype.isTriangleErodedCompletely=function(t,e){var n=new qn(t[0],t[1],t[2]),i=n.inCentre();return st.distancePointLine(i,n.p0,n.p1)<Math.abs(e)},Bn.prototype.addLineString=function(t){if(this._distance<=0&&!this._curveBuilder.getBufferParameters().isSingleSided())return null;var e=Lt.removeRepeatedPoints(t.getCoordinates()),n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,b.EXTERIOR,b.INTERIOR)},Bn.prototype.addCurve=function(t,e,n){if(null===t||t.length<2)return null;var i=new gn(t,new Pe(0,b.BOUNDARY,e,n));this._curveList.add(i)},Bn.prototype.getCurves=function(){return this.add(this._inputGeom),this._curveList},Bn.prototype.addPolygonRing=function(t,e,n,i,r){if(0===e&&t.length<ee.MINIMUM_VALID_SIZE)return null;var o=i,s=r;t.length>=ee.MINIMUM_VALID_SIZE&&st.isCCW(t)&&(o=r,s=i,n=Se.opposite(n));var a=this._curveBuilder.getRingCurve(t,n,e);this.addCurve(a,o,s)},Bn.prototype.add=function(t){if(t.isEmpty())return null;t instanceof $t?this.addPolygon(t):t instanceof Kt?this.addLineString(t):t instanceof Qt?this.addPoint(t):t instanceof te?this.addCollection(t):t instanceof Xt?this.addCollection(t):t instanceof ne?this.addCollection(t):t instanceof zt&&this.addCollection(t)},Bn.prototype.isErodedCompletely=function(t,e){var n=t.getCoordinates();if(n.length<4)return e<0;if(4===n.length)return this.isTriangleErodedCompletely(n,e);var i=t.getEnvelopeInternal(),r=Math.min(i.getHeight(),i.getWidth());return e<0&&2*Math.abs(e)>r},Bn.prototype.addCollection=function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},Bn.prototype.interfaces_=function(){return[]},Bn.prototype.getClass=function(){return Bn};var Vn=function(){};Vn.prototype.locate=function(t){},Vn.prototype.interfaces_=function(){return[]},Vn.prototype.getClass=function(){return Vn};var Un=function(){this._parent=null,this._atStart=null,this._max=null,this._index=null,this._subcollectionIterator=null;var t=arguments[0];this._parent=t,this._atStart=!0,this._index=0,this._max=t.getNumGeometries()};Un.prototype.next=function(){if(this._atStart)return this._atStart=!1,Un.isAtomic(this._parent)&&this._index++,this._parent;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return this._subcollectionIterator.next();this._subcollectionIterator=null}if(this._index>=this._max)throw new n;var t=this._parent.getGeometryN(this._index++);return t instanceof zt?(this._subcollectionIterator=new Un(t),this._subcollectionIterator.next()):t},Un.prototype.remove=function(){throw new Error(this.getClass().getName())},Un.prototype.hasNext=function(){if(this._atStart)return!0;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return!0;this._subcollectionIterator=null}return!(this._index>=this._max)},Un.prototype.interfaces_=function(){return[Et]},Un.prototype.getClass=function(){return Un},Un.isAtomic=function(t){return!(t instanceof zt)};var zn=function(){this._geom=null;var t=arguments[0];this._geom=t};zn.prototype.locate=function(t){return zn.locate(t,this._geom)},zn.prototype.interfaces_=function(){return[Vn]},zn.prototype.getClass=function(){return zn},zn.isPointInRing=function(t,e){return!!e.getEnvelopeInternal().intersects(t)&&st.isPointInRing(t,e.getCoordinates())},zn.containsPointInPolygon=function(t,e){if(e.isEmpty())return!1;var n=e.getExteriorRing();if(!zn.isPointInRing(t,n))return!1;for(var i=0;i<e.getNumInteriorRing();i++){var r=e.getInteriorRingN(i);if(zn.isPointInRing(t,r))return!1}return!0},zn.containsPoint=function(t,e){if(e instanceof $t)return zn.containsPointInPolygon(t,e);if(e instanceof zt)for(var n=new Un(e);n.hasNext();){var i=n.next();if(i!==e&&zn.containsPoint(t,i))return!0}return!1},zn.locate=function(t,e){return e.isEmpty()?b.EXTERIOR:zn.containsPoint(t,e)?b.INTERIOR:b.EXTERIOR};var Xn=function(){this._edgeMap=new c,this._edgeList=null,this._ptInAreaLocation=[b.NONE,b.NONE]};Xn.prototype.getNextCW=function(t){this.getEdges();var e=this._edgeList.indexOf(t),n=e-1;return 0===e&&(n=this._edgeList.size()-1),this._edgeList.get(n)},Xn.prototype.propagateSideLabels=function(t){for(var e=b.NONE,n=this.iterator();n.hasNext();){var i=n.next().getLabel();i.isArea(t)&&i.getLocation(t,Se.LEFT)!==b.NONE&&(e=i.getLocation(t,Se.LEFT))}if(e===b.NONE)return null;for(var r=e,o=this.iterator();o.hasNext();){var s=o.next(),a=s.getLabel();if(a.getLocation(t,Se.ON)===b.NONE&&a.setLocation(t,Se.ON,r),a.isArea(t)){var u=a.getLocation(t,Se.LEFT),l=a.getLocation(t,Se.RIGHT);if(l!==b.NONE){if(l!==r)throw new we(\"side location conflict\",s.getCoordinate());u===b.NONE&&tt.shouldNeverReachHere(\"found single null side (at \"+s.getCoordinate()+\")\"),r=u}else tt.isTrue(a.getLocation(t,Se.LEFT)===b.NONE,\"found single null side\"),a.setLocation(t,Se.RIGHT,r),a.setLocation(t,Se.LEFT,r)}}},Xn.prototype.getCoordinate=function(){var t=this.iterator();if(!t.hasNext())return null;return t.next().getCoordinate()},Xn.prototype.print=function(t){X.out.println(\"EdgeEndStar:   \"+this.getCoordinate());for(var e=this.iterator();e.hasNext();){e.next().print(t)}},Xn.prototype.isAreaLabelsConsistent=function(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)},Xn.prototype.checkAreaLabelsConsistent=function(t){var e=this.getEdges();if(e.size()<=0)return!0;var n=e.size()-1,i=e.get(n).getLabel().getLocation(t,Se.LEFT);tt.isTrue(i!==b.NONE,\"Found unlabelled area edge\");for(var r=i,o=this.iterator();o.hasNext();){var s=o.next().getLabel();tt.isTrue(s.isArea(t),\"Found non-area edge\");var a=s.getLocation(t,Se.LEFT),u=s.getLocation(t,Se.RIGHT);if(a===u)return!1;if(u!==r)return!1;r=a}return!0},Xn.prototype.findIndex=function(t){this.iterator();for(var e=0;e<this._edgeList.size();e++){if(this._edgeList.get(e)===t)return e}return-1},Xn.prototype.iterator=function(){return this.getEdges().iterator()},Xn.prototype.getEdges=function(){return null===this._edgeList&&(this._edgeList=new Nt(this._edgeMap.values())),this._edgeList},Xn.prototype.getLocation=function(t,e,n){return this._ptInAreaLocation[t]===b.NONE&&(this._ptInAreaLocation[t]=zn.locate(e,n[t].getGeometry())),this._ptInAreaLocation[t]},Xn.prototype.toString=function(){var t=new P;t.append(\"EdgeEndStar:   \"+this.getCoordinate()),t.append(\"\\n\");for(var e=this.iterator();e.hasNext();){var n=e.next();t.append(n),t.append(\"\\n\")}return t.toString()},Xn.prototype.computeEdgeEndLabels=function(t){for(var e=this.iterator();e.hasNext();){e.next().computeLabel(t)}},Xn.prototype.computeLabelling=function(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var e=[!1,!1],n=this.iterator();n.hasNext();)for(var i=n.next().getLabel(),r=0;r<2;r++)i.isLine(r)&&i.getLocation(r)===b.BOUNDARY&&(e[r]=!0);for(var o=this.iterator();o.hasNext();)for(var s=o.next(),a=s.getLabel(),u=0;u<2;u++)if(a.isAnyNull(u)){var l=b.NONE;if(e[u])l=b.EXTERIOR;else{var c=s.getCoordinate();l=this.getLocation(u,c,t)}a.setAllLocationsIfNull(u,l)}},Xn.prototype.getDegree=function(){return this._edgeMap.size()},Xn.prototype.insertEdgeEnd=function(t,e){this._edgeMap.put(t,e),this._edgeList=null},Xn.prototype.interfaces_=function(){return[]},Xn.prototype.getClass=function(){return Xn};var Yn=function(t){function e(){t.call(this),this._resultAreaEdgeList=null,this._label=null,this._SCANNING_FOR_INCOMING=1,this._LINKING_TO_OUTGOING=2}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.linkResultDirectedEdges=function(){this.getResultAreaEdges();for(var t=null,e=null,n=this._SCANNING_FOR_INCOMING,i=0;i<this._resultAreaEdgeList.size();i++){var r=this._resultAreaEdgeList.get(i),o=r.getSym();if(r.getLabel().isArea())switch(null===t&&r.isInResult()&&(t=r),n){case this._SCANNING_FOR_INCOMING:if(!o.isInResult())continue;e=o,n=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(!r.isInResult())continue;e.setNext(r),n=this._SCANNING_FOR_INCOMING}}if(n===this._LINKING_TO_OUTGOING){if(null===t)throw new we(\"no outgoing dirEdge found\",this.getCoordinate());tt.isTrue(t.isInResult(),\"unable to link last incoming dirEdge\"),e.setNext(t)}},e.prototype.insert=function(t){var e=t;this.insertEdgeEnd(e,e)},e.prototype.getRightmostEdge=function(){var t=this.getEdges(),e=t.size();if(e<1)return null;var n=t.get(0);if(1===e)return n;var i=t.get(e-1),r=n.getQuadrant(),o=i.getQuadrant();return Be.isNorthern(r)&&Be.isNorthern(o)?n:Be.isNorthern(r)||Be.isNorthern(o)?0!==n.getDy()?n:0!==i.getDy()?i:(tt.shouldNeverReachHere(\"found two horizontal edges incident on node\"),null):i},e.prototype.print=function(t){X.out.println(\"DirectedEdgeStar: \"+this.getCoordinate());for(var e=this.iterator();e.hasNext();){var n=e.next();t.print(\"out \"),n.print(t),t.println(),t.print(\"in \"),n.getSym().print(t),t.println()}},e.prototype.getResultAreaEdges=function(){if(null!==this._resultAreaEdgeList)return this._resultAreaEdgeList;this._resultAreaEdgeList=new Nt;for(var t=this.iterator();t.hasNext();){var e=t.next();(e.isInResult()||e.getSym().isInResult())&&this._resultAreaEdgeList.add(e)}return this._resultAreaEdgeList},e.prototype.updateLabelling=function(t){for(var e=this.iterator();e.hasNext();){var n=e.next().getLabel();n.setAllLocationsIfNull(0,t.getLocation(0)),n.setAllLocationsIfNull(1,t.getLocation(1))}},e.prototype.linkAllDirectedEdges=function(){this.getEdges();for(var t=null,e=null,n=this._edgeList.size()-1;n>=0;n--){var i=this._edgeList.get(n),r=i.getSym();null===e&&(e=r),null!==t&&r.setNext(t),t=i}e.setNext(t)},e.prototype.computeDepths=function(){if(1===arguments.length){var t=arguments[0],e=this.findIndex(t),n=t.getDepth(Se.LEFT),i=t.getDepth(Se.RIGHT),r=this.computeDepths(e+1,this._edgeList.size(),n);if(this.computeDepths(0,e,r)!==i)throw new we(\"depth mismatch at \"+t.getCoordinate())}else if(3===arguments.length){for(var o=arguments[0],s=arguments[1],a=arguments[2],u=o;u<s;u++){var l=this._edgeList.get(u);l.setEdgeDepths(Se.RIGHT,a),a=l.getDepth(Se.LEFT)}return a}},e.prototype.mergeSymLabels=function(){for(var t=this.iterator();t.hasNext();){var e=t.next();e.getLabel().merge(e.getSym().getLabel())}},e.prototype.linkMinimalDirectedEdges=function(t){for(var e=null,n=null,i=this._SCANNING_FOR_INCOMING,r=this._resultAreaEdgeList.size()-1;r>=0;r--){var o=this._resultAreaEdgeList.get(r),s=o.getSym();switch(null===e&&o.getEdgeRing()===t&&(e=o),i){case this._SCANNING_FOR_INCOMING:if(s.getEdgeRing()!==t)continue;n=s,i=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(o.getEdgeRing()!==t)continue;n.setNextMin(o),i=this._SCANNING_FOR_INCOMING}}i===this._LINKING_TO_OUTGOING&&(tt.isTrue(null!==e,\"found null for first outgoing dirEdge\"),tt.isTrue(e.getEdgeRing()===t,\"unable to link last incoming dirEdge\"),n.setNextMin(e))},e.prototype.getOutgoingDegree=function(){if(0===arguments.length){for(var t=0,e=this.iterator();e.hasNext();){e.next().isInResult()&&t++}return t}if(1===arguments.length){for(var n=arguments[0],i=0,r=this.iterator();r.hasNext();){r.next().getEdgeRing()===n&&i++}return i}},e.prototype.getLabel=function(){return this._label},e.prototype.findCoveredLineEdges=function(){for(var t=b.NONE,e=this.iterator();e.hasNext();){var n=e.next(),i=n.getSym();if(!n.isLineEdge()){if(n.isInResult()){t=b.INTERIOR;break}if(i.isInResult()){t=b.EXTERIOR;break}}}if(t===b.NONE)return null;for(var r=t,o=this.iterator();o.hasNext();){var s=o.next(),a=s.getSym();s.isLineEdge()?s.getEdge().setCovered(r===b.INTERIOR):(s.isInResult()&&(r=b.EXTERIOR),a.isInResult()&&(r=b.INTERIOR))}},e.prototype.computeLabelling=function(e){t.prototype.computeLabelling.call(this,e),this._label=new Pe(b.NONE);for(var n=this.iterator();n.hasNext();)for(var i=n.next().getEdge().getLabel(),r=0;r<2;r++){var o=i.getLocation(r);o!==b.INTERIOR&&o!==b.BOUNDARY||this._label.setLocation(r,b.INTERIOR)}},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Xn),kn=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createNode=function(t){return new Ge(t,new Yn)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Xe),jn=function t(){this._pts=null,this._orientation=null;var e=arguments[0];this._pts=e,this._orientation=t.orientation(e)};jn.prototype.compareTo=function(t){var e=t;return jn.compareOriented(this._pts,this._orientation,e._pts,e._orientation)},jn.prototype.interfaces_=function(){return[I]},jn.prototype.getClass=function(){return jn},jn.orientation=function(t){return 1===Lt.increasingDirection(t)},jn.compareOriented=function(t,e,n,i){for(var r=e?1:-1,o=i?1:-1,s=e?t.length:-1,a=i?n.length:-1,u=e?0:t.length-1,l=i?0:n.length-1;;){var c=t[u].compareTo(n[l]);if(0!==c)return c;var p=(u+=r)===s,h=(l+=o)===a;if(p&&!h)return-1;if(!p&&h)return 1;if(p&&h)return 0}};var Hn=function(){this._edges=new Nt,this._ocaMap=new c};Hn.prototype.print=function(t){t.print(\"MULTILINESTRING ( \");for(var e=0;e<this._edges.size();e++){var n=this._edges.get(e);e>0&&t.print(\",\"),t.print(\"(\");for(var i=n.getCoordinates(),r=0;r<i.length;r++)r>0&&t.print(\",\"),t.print(i[r].x+\" \"+i[r].y);t.println(\")\")}t.print(\")  \")},Hn.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next())},Hn.prototype.findEdgeIndex=function(t){for(var e=0;e<this._edges.size();e++)if(this._edges.get(e).equals(t))return e;return-1},Hn.prototype.iterator=function(){return this._edges.iterator()},Hn.prototype.getEdges=function(){return this._edges},Hn.prototype.get=function(t){return this._edges.get(t)},Hn.prototype.findEqualEdge=function(t){var e=new jn(t.getCoordinates());return this._ocaMap.get(e)},Hn.prototype.add=function(t){this._edges.add(t);var e=new jn(t.getCoordinates());this._ocaMap.put(e,t)},Hn.prototype.interfaces_=function(){return[]},Hn.prototype.getClass=function(){return Hn};var Wn=function(){};Wn.prototype.processIntersections=function(t,e,n,i){},Wn.prototype.isDone=function(){},Wn.prototype.interfaces_=function(){return[]},Wn.prototype.getClass=function(){return Wn};var Kn=function(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._hasInterior=!1,this._properIntersectionPoint=null,this._li=null,this._isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;var t=arguments[0];this._li=t};Kn.prototype.isTrivialIntersection=function(t,e,n,i){if(t===n&&1===this._li.getIntersectionNum()){if(Kn.isAdjacentSegments(e,i))return!0;if(t.isClosed()){var r=t.size()-1;if(0===e&&i===r||0===i&&e===r)return!0}}return!1},Kn.prototype.getProperIntersectionPoint=function(){return this._properIntersectionPoint},Kn.prototype.hasProperInteriorIntersection=function(){return this._hasProperInterior},Kn.prototype.getLineIntersector=function(){return this._li},Kn.prototype.hasProperIntersection=function(){return this._hasProper},Kn.prototype.processIntersections=function(t,e,n,i){if(t===n&&e===i)return null;this.numTests++;var r=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[i],a=n.getCoordinates()[i+1];this._li.computeIntersection(r,o,s,a),this._li.hasIntersection()&&(this.numIntersections++,this._li.isInteriorIntersection()&&(this.numInteriorIntersections++,this._hasInterior=!0),this.isTrivialIntersection(t,e,n,i)||(this._hasIntersection=!0,t.addIntersections(this._li,e,0),n.addIntersections(this._li,i,1),this._li.isProper()&&(this.numProperIntersections++,this._hasProper=!0,this._hasProperInterior=!0)))},Kn.prototype.hasIntersection=function(){return this._hasIntersection},Kn.prototype.isDone=function(){return!1},Kn.prototype.hasInteriorIntersection=function(){return this._hasInterior},Kn.prototype.interfaces_=function(){return[Wn]},Kn.prototype.getClass=function(){return Kn},Kn.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)};var Jn=function(){this.coord=null,this.segmentIndex=null,this.dist=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.coord=new N(t),this.segmentIndex=e,this.dist=n};Jn.prototype.getSegmentIndex=function(){return this.segmentIndex},Jn.prototype.getCoordinate=function(){return this.coord},Jn.prototype.print=function(t){t.print(this.coord),t.print(\" seg # = \"+this.segmentIndex),t.println(\" dist = \"+this.dist)},Jn.prototype.compareTo=function(t){var e=t;return this.compare(e.segmentIndex,e.dist)},Jn.prototype.isEndPoint=function(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t},Jn.prototype.toString=function(){return this.coord+\" seg # = \"+this.segmentIndex+\" dist = \"+this.dist},Jn.prototype.getDistance=function(){return this.dist},Jn.prototype.compare=function(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0},Jn.prototype.interfaces_=function(){return[I]},Jn.prototype.getClass=function(){return Jn};var Qn=function(){this._nodeMap=new c,this.edge=null;var t=arguments[0];this.edge=t};Qn.prototype.print=function(t){t.println(\"Intersections:\");for(var e=this.iterator();e.hasNext();){e.next().print(t)}},Qn.prototype.iterator=function(){return this._nodeMap.values().iterator()},Qn.prototype.addSplitEdges=function(t){this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}},Qn.prototype.addEndpoints=function(){var t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)},Qn.prototype.createSplitEdge=function(t,e){var n=e.segmentIndex-t.segmentIndex+2,i=this.edge.pts[e.segmentIndex],r=e.dist>0||!e.coord.equals2D(i);r||n--;var o=new Array(n).fill(null),s=0;o[s++]=new N(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)o[s++]=this.edge.pts[a];return r&&(o[s]=e.coord),new ni(o,new Pe(this.edge._label))},Qn.prototype.add=function(t,e,n){var i=new Jn(t,e,n),r=this._nodeMap.get(i);return null!==r?r:(this._nodeMap.put(i,i),i)},Qn.prototype.isIntersection=function(t){for(var e=this.iterator();e.hasNext();){if(e.next().coord.equals(t))return!0}return!1},Qn.prototype.interfaces_=function(){return[]},Qn.prototype.getClass=function(){return Qn};var Zn=function(){};Zn.prototype.getChainStartIndices=function(t){var e=0,n=new Nt;n.add(new D(e));do{var i=this.findChainEnd(t,e);n.add(new D(i)),e=i}while(e<t.length-1);return Zn.toIntArray(n)},Zn.prototype.findChainEnd=function(t,e){for(var n=Be.quadrant(t[e],t[e+1]),i=e+1;i<t.length;){if(Be.quadrant(t[i-1],t[i])!==n)break;i++}return i-1},Zn.prototype.interfaces_=function(){return[]},Zn.prototype.getClass=function(){return Zn},Zn.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e};var $n=function(){this.e=null,this.pts=null,this.startIndex=null,this.env1=new k,this.env2=new k;var t=arguments[0];this.e=t,this.pts=t.getCoordinates();var e=new Zn;this.startIndex=e.getChainStartIndices(this.pts)};$n.prototype.getCoordinates=function(){return this.pts},$n.prototype.getMaxX=function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e>n?e:n},$n.prototype.getMinX=function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e<n?e:n},$n.prototype.computeIntersectsForChain=function(){if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[n],e.startIndex[n+1],i)}else if(6===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3],u=arguments[4],l=arguments[5],c=this.pts[r],p=this.pts[o],h=s.pts[a],f=s.pts[u];if(o-r==1&&u-a==1)return l.addIntersections(this.e,r,s.e,a),null;if(this.env1.init(c,p),this.env2.init(h,f),!this.env1.intersects(this.env2))return null;var g=Math.trunc((r+o)/2),d=Math.trunc((a+u)/2);r<g&&(a<d&&this.computeIntersectsForChain(r,g,s,a,d,l),d<u&&this.computeIntersectsForChain(r,g,s,d,u,l)),g<o&&(a<d&&this.computeIntersectsForChain(g,o,s,a,d,l),d<u&&this.computeIntersectsForChain(g,o,s,d,u,l))}},$n.prototype.getStartIndexes=function(){return this.startIndex},$n.prototype.computeIntersects=function(t,e){for(var n=0;n<this.startIndex.length-1;n++)for(var i=0;i<t.startIndex.length-1;i++)this.computeIntersectsForChain(n,t,i,e)},$n.prototype.interfaces_=function(){return[]},$n.prototype.getClass=function(){return $n};var ti=function t(){this._depth=Array(2).fill().map(function(){return Array(3)});for(var e=0;e<2;e++)for(var n=0;n<3;n++)this._depth[e][n]=t.NULL_VALUE},ei={NULL_VALUE:{configurable:!0}};ti.prototype.getDepth=function(t,e){return this._depth[t][e]},ti.prototype.setDepth=function(t,e,n){this._depth[t][e]=n},ti.prototype.isNull=function(){if(0===arguments.length){for(var t=0;t<2;t++)for(var e=0;e<3;e++)if(this._depth[t][e]!==ti.NULL_VALUE)return!1;return!0}if(1===arguments.length){var n=arguments[0];return this._depth[n][1]===ti.NULL_VALUE}if(2===arguments.length){var i=arguments[0],r=arguments[1];return this._depth[i][r]===ti.NULL_VALUE}},ti.prototype.normalize=function(){for(var t=0;t<2;t++)if(!this.isNull(t)){var e=this._depth[t][1];this._depth[t][2]<e&&(e=this._depth[t][2]),e<0&&(e=0);for(var n=1;n<3;n++){var i=0;this._depth[t][n]>e&&(i=1),this._depth[t][n]=i}}},ti.prototype.getDelta=function(t){return this._depth[t][Se.RIGHT]-this._depth[t][Se.LEFT]},ti.prototype.getLocation=function(t,e){return this._depth[t][e]<=0?b.EXTERIOR:b.INTERIOR},ti.prototype.toString=function(){return\"A: \"+this._depth[0][1]+\",\"+this._depth[0][2]+\" B: \"+this._depth[1][1]+\",\"+this._depth[1][2]},ti.prototype.add=function(){if(1===arguments.length)for(var t=arguments[0],e=0;e<2;e++)for(var n=1;n<3;n++){var i=t.getLocation(e,n);i!==b.EXTERIOR&&i!==b.INTERIOR||(this.isNull(e,n)?this._depth[e][n]=ti.depthAtLocation(i):this._depth[e][n]+=ti.depthAtLocation(i))}else if(3===arguments.length){var r=arguments[0],o=arguments[1];arguments[2]===b.INTERIOR&&this._depth[r][o]++}},ti.prototype.interfaces_=function(){return[]},ti.prototype.getClass=function(){return ti},ti.depthAtLocation=function(t){return t===b.EXTERIOR?0:t===b.INTERIOR?1:ti.NULL_VALUE},ei.NULL_VALUE.get=function(){return-1},Object.defineProperties(ti,ei);var ni=function(t){function e(){if(t.call(this),this.pts=null,this._env=null,this.eiList=new Qn(this),this._name=null,this._mce=null,this._isIsolated=!0,this._depth=new ti,this._depthDelta=0,1===arguments.length){var n=arguments[0];e.call(this,n,null)}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.pts=i,this._label=r}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getDepth=function(){return this._depth},e.prototype.getCollapsedEdge=function(){var t=new Array(2).fill(null);t[0]=this.pts[0],t[1]=this.pts[1];return new e(t,Pe.toLineLabel(this._label))},e.prototype.isIsolated=function(){return this._isIsolated},e.prototype.getCoordinates=function(){return this.pts},e.prototype.setIsolated=function(t){this._isIsolated=t},e.prototype.setName=function(t){this._name=t},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;if(this.pts.length!==n.pts.length)return!1;for(var i=!0,r=!0,o=this.pts.length,s=0;s<this.pts.length;s++)if(this.pts[s].equals2D(n.pts[s])||(i=!1),this.pts[s].equals2D(n.pts[--o])||(r=!1),!i&&!r)return!1;return!0},e.prototype.getCoordinate=function(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){var t=arguments[0];return this.pts[t]}},e.prototype.print=function(t){t.print(\"edge \"+this._name+\": \"),t.print(\"LINESTRING (\");for(var e=0;e<this.pts.length;e++)e>0&&t.print(\",\"),t.print(this.pts[e].x+\" \"+this.pts[e].y);t.print(\")  \"+this._label+\" \"+this._depthDelta)},e.prototype.computeIM=function(t){e.updateIM(this._label,t)},e.prototype.isCollapsed=function(){return!!this._label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))},e.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1])},e.prototype.getMaximumSegmentIndex=function(){return this.pts.length-1},e.prototype.getDepthDelta=function(){return this._depthDelta},e.prototype.getNumPoints=function(){return this.pts.length},e.prototype.printReverse=function(t){t.print(\"edge \"+this._name+\": \");for(var e=this.pts.length-1;e>=0;e--)t.print(this.pts[e]+\" \");t.println(\"\")},e.prototype.getMonotoneChainEdge=function(){return null===this._mce&&(this._mce=new $n(this)),this._mce},e.prototype.getEnvelope=function(){if(null===this._env){this._env=new k;for(var t=0;t<this.pts.length;t++)this._env.expandToInclude(this.pts[t])}return this._env},e.prototype.addIntersection=function(t,e,n,i){var r=new N(t.getIntersection(i)),o=e,s=t.getEdgeDistance(n,i),a=o+1;if(a<this.pts.length){var u=this.pts[a];r.equals2D(u)&&(o=a,s=0)}this.eiList.add(r,o,s)},e.prototype.toString=function(){var t=new P;t.append(\"edge \"+this._name+\": \"),t.append(\"LINESTRING (\");for(var e=0;e<this.pts.length;e++)e>0&&t.append(\",\"),t.append(this.pts[e].x+\" \"+this.pts[e].y);return t.append(\")  \"+this._label+\" \"+this._depthDelta),t.toString()},e.prototype.isPointwiseEqual=function(t){if(this.pts.length!==t.pts.length)return!1;for(var e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0},e.prototype.setDepthDelta=function(t){this._depthDelta=t},e.prototype.getEdgeIntersectionList=function(){return this.eiList},e.prototype.addIntersections=function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.updateIM=function(){if(2!==arguments.length)return t.prototype.updateIM.apply(this,arguments);var e=arguments[0],n=arguments[1];n.setAtLeastIfValid(e.getLocation(0,Se.ON),e.getLocation(1,Se.ON),1),e.isArea()&&(n.setAtLeastIfValid(e.getLocation(0,Se.LEFT),e.getLocation(1,Se.LEFT),2),n.setAtLeastIfValid(e.getLocation(0,Se.RIGHT),e.getLocation(1,Se.RIGHT),2))},e}(Fe),ii=function(t){this._workingPrecisionModel=null,this._workingNoder=null,this._geomFact=null,this._graph=null,this._edgeList=new Hn,this._bufParams=t||null};ii.prototype.setWorkingPrecisionModel=function(t){this._workingPrecisionModel=t},ii.prototype.insertUniqueEdge=function(t){var e=this._edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),i=t.getLabel();e.isPointwiseEqual(t)||(i=new Pe(t.getLabel())).flip(),n.merge(i);var r=ii.depthDelta(i),o=e.getDepthDelta()+r;e.setDepthDelta(o)}else this._edgeList.add(t),t.setDepthDelta(ii.depthDelta(t.getLabel()))},ii.prototype.buildSubgraphs=function(t,e){for(var n=new Nt,i=t.iterator();i.hasNext();){var r=i.next(),o=r.getRightmostCoordinate(),s=new An(n).getDepth(o);r.computeDepth(s),r.findResultEdges(),n.add(r),e.add(r.getDirectedEdges(),r.getNodes())}},ii.prototype.createSubgraphs=function(t){for(var e=new Nt,n=t.getNodes().iterator();n.hasNext();){var i=n.next();if(!i.isVisited()){var r=new Te;r.create(i),e.add(r)}}return $e.sort(e,$e.reverseOrder()),e},ii.prototype.createEmptyResultGeometry=function(){return this._geomFact.createPolygon()},ii.prototype.getNoder=function(t){if(null!==this._workingNoder)return this._workingNoder;var e=new xn,n=new it;return n.setPrecisionModel(t),e.setSegmentIntersector(new Kn(n)),e},ii.prototype.buffer=function(t,e){var n=this._workingPrecisionModel;null===n&&(n=t.getPrecisionModel()),this._geomFact=t.getFactory();var i=new Mn(n,this._bufParams),r=new Bn(t,e,i).getCurves();if(r.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(r,n),this._graph=new Ye(new kn),this._graph.addEdges(this._edgeList.getEdges());var o=this.createSubgraphs(this._graph),s=new ke(this._geomFact);this.buildSubgraphs(o,s);var a=s.getPolygons();if(a.size()<=0)return this.createEmptyResultGeometry();return this._geomFact.buildGeometry(a)},ii.prototype.computeNodedEdges=function(t,e){var n=this.getNoder(e);n.computeNodes(t);for(var i=n.getNodedSubstrings().iterator();i.hasNext();){var r=i.next(),o=r.getCoordinates();if(2!==o.length||!o[0].equals2D(o[1])){var s=r.getData(),a=new ni(r.getCoordinates(),new Pe(s));this.insertUniqueEdge(a)}}},ii.prototype.setNoder=function(t){this._workingNoder=t},ii.prototype.interfaces_=function(){return[]},ii.prototype.getClass=function(){return ii},ii.depthDelta=function(t){var e=t.getLocation(0,Se.LEFT),n=t.getLocation(0,Se.RIGHT);return e===b.INTERIOR&&n===b.EXTERIOR?1:e===b.EXTERIOR&&n===b.INTERIOR?-1:0},ii.convertSegStrings=function(t){for(var e=new _e,n=new Nt;t.hasNext();){var i=t.next(),r=e.createLineString(i.getCoordinates());n.add(r)}return e.buildGeometry(n)};var ri=function(){if(this._noder=null,this._scaleFactor=null,this._offsetX=null,this._offsetY=null,this._isScaled=!1,2===arguments.length){var t=arguments[0],e=arguments[1];this._noder=t,this._scaleFactor=e,this._offsetX=0,this._offsetY=0,this._isScaled=!this.isIntegerPrecision()}else if(4===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],o=arguments[3];this._noder=n,this._scaleFactor=i,this._offsetX=r,this._offsetY=o,this._isScaled=!this.isIntegerPrecision()}};ri.prototype.rescale=function(){if(O(arguments[0],vt))for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.rescale(e.getCoordinates())}else if(arguments[0]instanceof Array){for(var n=arguments[0],i=0;i<n.length;i++)n[i].x=n[i].x/this._scaleFactor+this._offsetX,n[i].y=n[i].y/this._scaleFactor+this._offsetY;2===n.length&&n[0].equals2D(n[1])&&X.out.println(n)}},ri.prototype.scale=function(){if(O(arguments[0],vt)){for(var t=arguments[0],e=new Nt,n=t.iterator();n.hasNext();){var i=n.next();e.add(new gn(this.scale(i.getCoordinates()),i.getData()))}return e}if(arguments[0]instanceof Array){for(var r=arguments[0],o=new Array(r.length).fill(null),s=0;s<r.length;s++)o[s]=new N(Math.round((r[s].x-this._offsetX)*this._scaleFactor),Math.round((r[s].y-this._offsetY)*this._scaleFactor),r[s].z);return Lt.removeRepeatedPoints(o)}},ri.prototype.isIntegerPrecision=function(){return 1===this._scaleFactor},ri.prototype.getNodedSubstrings=function(){var t=this._noder.getNodedSubstrings();return this._isScaled&&this.rescale(t),t},ri.prototype.computeNodes=function(t){var e=t;this._isScaled&&(e=this.scale(t)),this._noder.computeNodes(e)},ri.prototype.interfaces_=function(){return[In]},ri.prototype.getClass=function(){return ri};var oi=function(){this._li=new it,this._segStrings=null;var t=arguments[0];this._segStrings=t},si={fact:{configurable:!0}};oi.prototype.checkEndPtVertexIntersections=function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();){var e=t.next().getCoordinates();this.checkEndPtVertexIntersections(e[0],this._segStrings),this.checkEndPtVertexIntersections(e[e.length-1],this._segStrings)}else if(2===arguments.length)for(var n=arguments[0],i=arguments[1].iterator();i.hasNext();)for(var r=i.next().getCoordinates(),o=1;o<r.length-1;o++)if(r[o].equals(n))throw new Z(\"found endpt/interior pt intersection at index \"+o+\" :pt \"+n)},oi.prototype.checkInteriorIntersections=function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();)for(var e=t.next(),n=this._segStrings.iterator();n.hasNext();){var i=n.next();this.checkInteriorIntersections(e,i)}else if(2===arguments.length)for(var r=arguments[0],o=arguments[1],s=r.getCoordinates(),a=o.getCoordinates(),u=0;u<s.length-1;u++)for(var l=0;l<a.length-1;l++)this.checkInteriorIntersections(r,u,o,l);else if(4===arguments.length){var c=arguments[0],p=arguments[1],h=arguments[2],f=arguments[3];if(c===h&&p===f)return null;var g=c.getCoordinates()[p],d=c.getCoordinates()[p+1],y=h.getCoordinates()[f],_=h.getCoordinates()[f+1];if(this._li.computeIntersection(g,d,y,_),this._li.hasIntersection()&&(this._li.isProper()||this.hasInteriorIntersection(this._li,g,d)||this.hasInteriorIntersection(this._li,y,_)))throw new Z(\"found non-noded intersection at \"+g+\"-\"+d+\" and \"+y+\"-\"+_)}},oi.prototype.checkValid=function(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()},oi.prototype.checkCollapses=function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();){var e=t.next();this.checkCollapses(e)}else if(1===arguments.length)for(var n=arguments[0].getCoordinates(),i=0;i<n.length-2;i++)this.checkCollapse(n[i],n[i+1],n[i+2])},oi.prototype.hasInteriorIntersection=function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++){var r=t.getIntersection(i);if(!r.equals(e)&&!r.equals(n))return!0}return!1},oi.prototype.checkCollapse=function(t,e,n){if(t.equals(n))throw new Z(\"found non-noded collapse at \"+oi.fact.createLineString([t,e,n]))},oi.prototype.interfaces_=function(){return[]},oi.prototype.getClass=function(){return oi},si.fact.get=function(){return new _e},Object.defineProperties(oi,si);var ai=function(){this._li=null,this._pt=null,this._originalPt=null,this._ptScaled=null,this._p0Scaled=null,this._p1Scaled=null,this._scaleFactor=null,this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,this._corner=new Array(4).fill(null),this._safeEnv=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(this._originalPt=t,this._pt=t,this._scaleFactor=e,this._li=n,e<=0)throw new _(\"Scale factor must be non-zero\");1!==e&&(this._pt=new N(this.scale(t.x),this.scale(t.y)),this._p0Scaled=new N,this._p1Scaled=new N),this.initCorners(this._pt)},ui={SAFE_ENV_EXPANSION_FACTOR:{configurable:!0}};ai.prototype.intersectsScaled=function(t,e){var n=Math.min(t.x,e.x),i=Math.max(t.x,e.x),r=Math.min(t.y,e.y),o=Math.max(t.y,e.y),s=this._maxx<n||this._minx>i||this._maxy<r||this._miny>o;if(s)return!1;var a=this.intersectsToleranceSquare(t,e);return tt.isTrue(!(s&&a),\"Found bad envelope test\"),a},ai.prototype.initCorners=function(t){this._minx=t.x-.5,this._maxx=t.x+.5,this._miny=t.y-.5,this._maxy=t.y+.5,this._corner[0]=new N(this._maxx,this._maxy),this._corner[1]=new N(this._minx,this._maxy),this._corner[2]=new N(this._minx,this._miny),this._corner[3]=new N(this._maxx,this._miny)},ai.prototype.intersects=function(t,e){return 1===this._scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this._p0Scaled),this.copyScaled(e,this._p1Scaled),this.intersectsScaled(this._p0Scaled,this._p1Scaled))},ai.prototype.scale=function(t){return Math.round(t*this._scaleFactor)},ai.prototype.getCoordinate=function(){return this._originalPt},ai.prototype.copyScaled=function(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)},ai.prototype.getSafeEnvelope=function(){if(null===this._safeEnv){var t=ai.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new k(this._originalPt.x-t,this._originalPt.x+t,this._originalPt.y-t,this._originalPt.y+t)}return this._safeEnv},ai.prototype.intersectsPixelClosure=function(t,e){return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.hasIntersection())))},ai.prototype.intersectsToleranceSquare=function(t,e){var n=!1,i=!1;return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.isProper()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.isProper()||(this._li.hasIntersection()&&(n=!0),this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.isProper()||(this._li.hasIntersection()&&(i=!0),this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.isProper()||(!(!n||!i)||(!!t.equals(this._pt)||!!e.equals(this._pt))))))},ai.prototype.addSnappedNode=function(t,e){var n=t.getCoordinate(e),i=t.getCoordinate(e+1);return!!this.intersects(n,i)&&(t.addIntersection(this.getCoordinate(),e),!0)},ai.prototype.interfaces_=function(){return[]},ai.prototype.getClass=function(){return ai},ui.SAFE_ENV_EXPANSION_FACTOR.get=function(){return.75},Object.defineProperties(ai,ui);var li=function(){this.tempEnv1=new k,this.selectedSegment=new dn};li.prototype.select=function(){if(1===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];t.getLineSegment(e,this.selectedSegment),this.select(this.selectedSegment)}},li.prototype.interfaces_=function(){return[]},li.prototype.getClass=function(){return li};var ci=function(){this._index=null;var t=arguments[0];this._index=t},pi={HotPixelSnapAction:{configurable:!0}};ci.prototype.snap=function(){if(1===arguments.length){var t=arguments[0];return this.snap(t,null,-1)}if(3===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2],r=e.getSafeEnvelope(),o=new hi(e,n,i);return this._index.query(r,{interfaces_:function(){return[Ke]},visitItem:function(t){t.select(r,o)}}),o.isNodeAdded()}},ci.prototype.interfaces_=function(){return[]},ci.prototype.getClass=function(){return ci},pi.HotPixelSnapAction.get=function(){return hi},Object.defineProperties(ci,pi);var hi=function(t){function e(){t.call(this),this._hotPixel=null,this._parentEdge=null,this._hotPixelVertexIndex=null,this._isNodeAdded=!1;var e=arguments[0],n=arguments[1],i=arguments[2];this._hotPixel=e,this._parentEdge=n,this._hotPixelVertexIndex=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isNodeAdded=function(){return this._isNodeAdded},e.prototype.select=function(){if(2!==arguments.length)return t.prototype.select.apply(this,arguments);var e=arguments[0],n=arguments[1],i=e.getContext();if(null!==this._parentEdge&&i===this._parentEdge&&n===this._hotPixelVertexIndex)return null;this._isNodeAdded=this._hotPixel.addSnappedNode(i,n)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(li),fi=function(){this._li=null,this._interiorIntersections=null;var t=arguments[0];this._li=t,this._interiorIntersections=new Nt};fi.prototype.processIntersections=function(t,e,n,i){if(t===n&&e===i)return null;var r=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[i],a=n.getCoordinates()[i+1];if(this._li.computeIntersection(r,o,s,a),this._li.hasIntersection()&&this._li.isInteriorIntersection()){for(var u=0;u<this._li.getIntersectionNum();u++)this._interiorIntersections.add(this._li.getIntersection(u));t.addIntersections(this._li,e,0),n.addIntersections(this._li,i,1)}},fi.prototype.isDone=function(){return!1},fi.prototype.getInteriorIntersections=function(){return this._interiorIntersections},fi.prototype.interfaces_=function(){return[Wn]},fi.prototype.getClass=function(){return fi};var gi=function(){this._pm=null,this._li=null,this._scaleFactor=null,this._noder=null,this._pointSnapper=null,this._nodedSegStrings=null;var t=arguments[0];this._pm=t,this._li=new it,this._li.setPrecisionModel(t),this._scaleFactor=t.getScale()};gi.prototype.checkCorrectness=function(t){var e=gn.getNodedSubstrings(t),n=new oi(e);try{n.checkValid()}catch(t){if(!(t instanceof U))throw t;t.printStackTrace()}},gi.prototype.getNodedSubstrings=function(){return gn.getNodedSubstrings(this._nodedSegStrings)},gi.prototype.snapRound=function(t,e){var n=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(n),this.computeVertexSnaps(t)},gi.prototype.findInteriorIntersections=function(t,e){var n=new fi(e);return this._noder.setSegmentIntersector(n),this._noder.computeNodes(t),n.getInteriorIntersections()},gi.prototype.computeVertexSnaps=function(){if(O(arguments[0],vt))for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.computeVertexSnaps(e)}else if(arguments[0]instanceof gn)for(var n=arguments[0],i=n.getCoordinates(),r=0;r<i.length;r++){var o=new ai(i[r],this._scaleFactor,this._li);this._pointSnapper.snap(o,n,r)&&n.addIntersection(i[r],r)}},gi.prototype.computeNodes=function(t){this._nodedSegStrings=t,this._noder=new xn,this._pointSnapper=new ci(this._noder.getIndex()),this.snapRound(t,this._li)},gi.prototype.computeIntersectionSnaps=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=new ai(n,this._scaleFactor,this._li);this._pointSnapper.snap(i)}},gi.prototype.interfaces_=function(){return[In]},gi.prototype.getClass=function(){return gi};var di=function(){if(this._argGeom=null,this._distance=null,this._bufParams=new Cn,this._resultGeometry=null,this._saveException=null,1===arguments.length){var t=arguments[0];this._argGeom=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this._argGeom=e,this._bufParams=n}},yi={CAP_ROUND:{configurable:!0},CAP_BUTT:{configurable:!0},CAP_FLAT:{configurable:!0},CAP_SQUARE:{configurable:!0},MAX_PRECISION_DIGITS:{configurable:!0}};di.prototype.bufferFixedPrecision=function(t){var e=new ri(new gi(new fe(1)),t.getScale()),n=new ii(this._bufParams);n.setWorkingPrecisionModel(t),n.setNoder(e),this._resultGeometry=n.buffer(this._argGeom,this._distance)},di.prototype.bufferReducedPrecision=function(){var t=this;if(0===arguments.length){for(var e=di.MAX_PRECISION_DIGITS;e>=0;e--){try{t.bufferReducedPrecision(e)}catch(e){if(!(e instanceof we))throw e;t._saveException=e}if(null!==t._resultGeometry)return null}throw this._saveException}if(1===arguments.length){var n=arguments[0],i=di.precisionScaleFactor(this._argGeom,this._distance,n),r=new fe(i);this.bufferFixedPrecision(r)}},di.prototype.computeGeometry=function(){if(this.bufferOriginalPrecision(),null!==this._resultGeometry)return null;var t=this._argGeom.getFactory().getPrecisionModel();t.getType()===fe.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()},di.prototype.setQuadrantSegments=function(t){this._bufParams.setQuadrantSegments(t)},di.prototype.bufferOriginalPrecision=function(){try{var t=new ii(this._bufParams);this._resultGeometry=t.buffer(this._argGeom,this._distance)}catch(t){if(!(t instanceof Z))throw t;this._saveException=t}},di.prototype.getResultGeometry=function(t){return this._distance=t,this.computeGeometry(),this._resultGeometry},di.prototype.setEndCapStyle=function(t){this._bufParams.setEndCapStyle(t)},di.prototype.interfaces_=function(){return[]},di.prototype.getClass=function(){return di},di.bufferOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return new di(t).getResultGeometry(e)}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof lt&&\"number\"==typeof arguments[1]){var n=arguments[0],i=arguments[1],r=arguments[2],o=new di(n);o.setQuadrantSegments(r);return o.getResultGeometry(i)}if(arguments[2]instanceof Cn&&arguments[0]instanceof lt&&\"number\"==typeof arguments[1]){var s=arguments[0],a=arguments[1],u=arguments[2];return new di(s,u).getResultGeometry(a)}}else if(4===arguments.length){var l=arguments[0],c=arguments[1],p=arguments[2],h=arguments[3],f=new di(l);f.setQuadrantSegments(p),f.setEndCapStyle(h);return f.getResultGeometry(c)}},di.precisionScaleFactor=function(t,e,n){var i=t.getEnvelopeInternal(),r=T.max(Math.abs(i.getMaxX()),Math.abs(i.getMaxY()),Math.abs(i.getMinX()),Math.abs(i.getMinY()))+2*(e>0?e:0),o=n-Math.trunc(Math.log(r)/Math.log(10)+1);return Math.pow(10,o)},yi.CAP_ROUND.get=function(){return Cn.CAP_ROUND},yi.CAP_BUTT.get=function(){return Cn.CAP_FLAT},yi.CAP_FLAT.get=function(){return Cn.CAP_FLAT},yi.CAP_SQUARE.get=function(){return Cn.CAP_SQUARE},yi.MAX_PRECISION_DIGITS.get=function(){return 12},Object.defineProperties(di,yi);var _i=function(){this._pt=[new N,new N],this._distance=m.NaN,this._isNull=!0};_i.prototype.getCoordinates=function(){return this._pt},_i.prototype.getCoordinate=function(t){return this._pt[t]},_i.prototype.setMinimum=function(){if(1===arguments.length){var t=arguments[0];this.setMinimum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var i=e.distance(n);i<this._distance&&this.initialize(e,n,i)}},_i.prototype.initialize=function(){if(0===arguments.length)this._isNull=!0;else if(2===arguments.length){var t=arguments[0],e=arguments[1];this._pt[0].setCoordinate(t),this._pt[1].setCoordinate(e),this._distance=t.distance(e),this._isNull=!1}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this._pt[0].setCoordinate(n),this._pt[1].setCoordinate(i),this._distance=r,this._isNull=!1}},_i.prototype.getDistance=function(){return this._distance},_i.prototype.setMaximum=function(){if(1===arguments.length){var t=arguments[0];this.setMaximum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var i=e.distance(n);i>this._distance&&this.initialize(e,n,i)}},_i.prototype.interfaces_=function(){return[]},_i.prototype.getClass=function(){return _i};var mi=function(){};mi.prototype.interfaces_=function(){return[]},mi.prototype.getClass=function(){return mi},mi.computeDistance=function(){if(arguments[2]instanceof _i&&arguments[0]instanceof Kt&&arguments[1]instanceof N)for(var t=arguments[0],e=arguments[1],n=arguments[2],i=t.getCoordinates(),r=new dn,o=0;o<i.length-1;o++){r.setCoordinates(i[o],i[o+1]);var s=r.closestPoint(e);n.setMinimum(s,e)}else if(arguments[2]instanceof _i&&arguments[0]instanceof $t&&arguments[1]instanceof N){var a=arguments[0],u=arguments[1],l=arguments[2];mi.computeDistance(a.getExteriorRing(),u,l);for(var c=0;c<a.getNumInteriorRing();c++)mi.computeDistance(a.getInteriorRingN(c),u,l)}else if(arguments[2]instanceof _i&&arguments[0]instanceof lt&&arguments[1]instanceof N){var p=arguments[0],h=arguments[1],f=arguments[2];if(p instanceof Kt)mi.computeDistance(p,h,f);else if(p instanceof $t)mi.computeDistance(p,h,f);else if(p instanceof zt)for(var g=p,d=0;d<g.getNumGeometries();d++){var y=g.getGeometryN(d);mi.computeDistance(y,h,f)}else f.setMinimum(p.getCoordinate(),h)}else if(arguments[2]instanceof _i&&arguments[0]instanceof dn&&arguments[1]instanceof N){var _=arguments[0],m=arguments[1],v=arguments[2],I=_.closestPoint(m);v.setMinimum(I,m)}};var vi=function(t){this._maxPtDist=new _i,this._inputGeom=t||null},Ii={MaxPointDistanceFilter:{configurable:!0},MaxMidpointDistanceFilter:{configurable:!0}};vi.prototype.computeMaxMidpointDistance=function(t){var e=new xi(this._inputGeom);t.apply(e),this._maxPtDist.setMaximum(e.getMaxPointDistance())},vi.prototype.computeMaxVertexDistance=function(t){var e=new Ei(this._inputGeom);t.apply(e),this._maxPtDist.setMaximum(e.getMaxPointDistance())},vi.prototype.findDistance=function(t){return this.computeMaxVertexDistance(t),this.computeMaxMidpointDistance(t),this._maxPtDist.getDistance()},vi.prototype.getDistancePoints=function(){return this._maxPtDist},vi.prototype.interfaces_=function(){return[]},vi.prototype.getClass=function(){return vi},Ii.MaxPointDistanceFilter.get=function(){return Ei},Ii.MaxMidpointDistanceFilter.get=function(){return xi},Object.defineProperties(vi,Ii);var Ei=function(t){this._maxPtDist=new _i,this._minPtDist=new _i,this._geom=t||null};Ei.prototype.filter=function(t){this._minPtDist.initialize(),mi.computeDistance(this._geom,t,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)},Ei.prototype.getMaxPointDistance=function(){return this._maxPtDist},Ei.prototype.interfaces_=function(){return[ht]},Ei.prototype.getClass=function(){return Ei};var xi=function(t){this._maxPtDist=new _i,this._minPtDist=new _i,this._geom=t||null};xi.prototype.filter=function(t,e){if(0===e)return null;var n=t.getCoordinate(e-1),i=t.getCoordinate(e),r=new N((n.x+i.x)/2,(n.y+i.y)/2);this._minPtDist.initialize(),mi.computeDistance(this._geom,r,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)},xi.prototype.isDone=function(){return!1},xi.prototype.isGeometryChanged=function(){return!1},xi.prototype.getMaxPointDistance=function(){return this._maxPtDist},xi.prototype.interfaces_=function(){return[Ut]},xi.prototype.getClass=function(){return xi};var Ni=function(t){this._comps=t||null};Ni.prototype.filter=function(t){t instanceof $t&&this._comps.add(t)},Ni.prototype.interfaces_=function(){return[Vt]},Ni.prototype.getClass=function(){return Ni},Ni.getPolygons=function(){if(1===arguments.length){var t=arguments[0];return Ni.getPolygons(t,new Nt)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof $t?n.add(e):e instanceof zt&&e.apply(new Ni(n)),n}};var Ci=function(){if(this._lines=null,this._isForcedToLineString=!1,1===arguments.length){var t=arguments[0];this._lines=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this._lines=e,this._isForcedToLineString=n}};Ci.prototype.filter=function(t){if(this._isForcedToLineString&&t instanceof ee){var e=t.getFactory().createLineString(t.getCoordinateSequence());return this._lines.add(e),null}t instanceof Kt&&this._lines.add(t)},Ci.prototype.setForceToLineString=function(t){this._isForcedToLineString=t},Ci.prototype.interfaces_=function(){return[ut]},Ci.prototype.getClass=function(){return Ci},Ci.getGeometry=function(){if(1===arguments.length){var t=arguments[0];return t.getFactory().buildGeometry(Ci.getLines(t))}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e.getFactory().buildGeometry(Ci.getLines(e,n))}},Ci.getLines=function(){if(1===arguments.length){var t=arguments[0];return Ci.getLines(t,!1)}if(2===arguments.length){if(O(arguments[0],vt)&&O(arguments[1],vt)){for(var e=arguments[0],n=arguments[1],i=e.iterator();i.hasNext();){var r=i.next();Ci.getLines(r,n)}return n}if(arguments[0]instanceof lt&&\"boolean\"==typeof arguments[1]){var o=arguments[0],s=arguments[1],a=new Nt;return o.apply(new Ci(a,s)),a}if(arguments[0]instanceof lt&&O(arguments[1],vt)){var u=arguments[0],l=arguments[1];return u instanceof Kt?l.add(u):u.apply(new Ci(l)),l}}else if(3===arguments.length){if(\"boolean\"==typeof arguments[2]&&O(arguments[0],vt)&&O(arguments[1],vt)){for(var c=arguments[0],p=arguments[1],h=arguments[2],f=c.iterator();f.hasNext();){var g=f.next();Ci.getLines(g,p,h)}return p}if(\"boolean\"==typeof arguments[2]&&arguments[0]instanceof lt&&O(arguments[1],vt)){var d=arguments[0],y=arguments[1],_=arguments[2];return d.apply(new Ci(y,_)),y}}};var Si=function(){if(this._boundaryRule=ft.OGC_SFS_BOUNDARY_RULE,this._isIn=null,this._numBoundaries=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];if(null===t)throw new _(\"Rule must be non-null\");this._boundaryRule=t}};Si.prototype.locateInternal=function(){if(arguments[0]instanceof N&&arguments[1]instanceof $t){var t=arguments[0],e=arguments[1];if(e.isEmpty())return b.EXTERIOR;var n=e.getExteriorRing(),i=this.locateInPolygonRing(t,n);if(i===b.EXTERIOR)return b.EXTERIOR;if(i===b.BOUNDARY)return b.BOUNDARY;for(var r=0;r<e.getNumInteriorRing();r++){var o=e.getInteriorRingN(r),s=this.locateInPolygonRing(t,o);if(s===b.INTERIOR)return b.EXTERIOR;if(s===b.BOUNDARY)return b.BOUNDARY}return b.INTERIOR}if(arguments[0]instanceof N&&arguments[1]instanceof Kt){var a=arguments[0],u=arguments[1];if(!u.getEnvelopeInternal().intersects(a))return b.EXTERIOR;var l=u.getCoordinates();return u.isClosed()||!a.equals(l[0])&&!a.equals(l[l.length-1])?st.isOnLine(a,l)?b.INTERIOR:b.EXTERIOR:b.BOUNDARY}if(arguments[0]instanceof N&&arguments[1]instanceof Qt){var c=arguments[0];return arguments[1].getCoordinate().equals2D(c)?b.INTERIOR:b.EXTERIOR}},Si.prototype.locateInPolygonRing=function(t,e){return e.getEnvelopeInternal().intersects(t)?st.locatePointInRing(t,e.getCoordinates()):b.EXTERIOR},Si.prototype.intersects=function(t,e){return this.locate(t,e)!==b.EXTERIOR},Si.prototype.updateLocationInfo=function(t){t===b.INTERIOR&&(this._isIn=!0),t===b.BOUNDARY&&this._numBoundaries++},Si.prototype.computeLocation=function(t,e){if(e instanceof Qt&&this.updateLocationInfo(this.locateInternal(t,e)),e instanceof Kt)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof $t)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof Xt)for(var n=e,i=0;i<n.getNumGeometries();i++){var r=n.getGeometryN(i);this.updateLocationInfo(this.locateInternal(t,r))}else if(e instanceof ne)for(var o=e,s=0;s<o.getNumGeometries();s++){var a=o.getGeometryN(s);this.updateLocationInfo(this.locateInternal(t,a))}else if(e instanceof zt)for(var u=new Un(e);u.hasNext();){var l=u.next();l!==e&&this.computeLocation(t,l)}},Si.prototype.locate=function(t,e){return e.isEmpty()?b.EXTERIOR:e instanceof Kt?this.locateInternal(t,e):e instanceof $t?this.locateInternal(t,e):(this._isIn=!1,this._numBoundaries=0,this.computeLocation(t,e),this._boundaryRule.isInBoundary(this._numBoundaries)?b.BOUNDARY:this._numBoundaries>0||this._isIn?b.INTERIOR:b.EXTERIOR)},Si.prototype.interfaces_=function(){return[]},Si.prototype.getClass=function(){return Si};var Li=function t(){if(this._component=null,this._segIndex=null,this._pt=null,2===arguments.length){var e=arguments[0],n=arguments[1];t.call(this,e,t.INSIDE_AREA,n)}else if(3===arguments.length){var i=arguments[0],r=arguments[1],o=arguments[2];this._component=i,this._segIndex=r,this._pt=o}},bi={INSIDE_AREA:{configurable:!0}};Li.prototype.isInsideArea=function(){return this._segIndex===Li.INSIDE_AREA},Li.prototype.getCoordinate=function(){return this._pt},Li.prototype.getGeometryComponent=function(){return this._component},Li.prototype.getSegmentIndex=function(){return this._segIndex},Li.prototype.interfaces_=function(){return[]},Li.prototype.getClass=function(){return Li},bi.INSIDE_AREA.get=function(){return-1},Object.defineProperties(Li,bi);var wi=function(t){this._pts=t||null};wi.prototype.filter=function(t){t instanceof Qt&&this._pts.add(t)},wi.prototype.interfaces_=function(){return[Vt]},wi.prototype.getClass=function(){return wi},wi.getPoints=function(){if(1===arguments.length){var t=arguments[0];return t instanceof Qt?$e.singletonList(t):wi.getPoints(t,new Nt)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof Qt?n.add(e):e instanceof zt&&e.apply(new wi(n)),n}};var Oi=function(){this._locations=null;var t=arguments[0];this._locations=t};Oi.prototype.filter=function(t){(t instanceof Qt||t instanceof Kt||t instanceof $t)&&this._locations.add(new Li(t,0,t.getCoordinate()))},Oi.prototype.interfaces_=function(){return[Vt]},Oi.prototype.getClass=function(){return Oi},Oi.getLocations=function(t){var e=new Nt;return t.apply(new Oi(e)),e};var Ti=function(){if(this._geom=null,this._terminateDistance=0,this._ptLocator=new Si,this._minDistanceLocation=null,this._minDistance=m.MAX_VALUE,2===arguments.length){var t=arguments[0],e=arguments[1];this._geom=[t,e],this._terminateDistance=0}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this._geom=new Array(2).fill(null),this._geom[0]=n,this._geom[1]=i,this._terminateDistance=r}};Ti.prototype.computeContainmentDistance=function(){if(0===arguments.length){var t=new Array(2).fill(null);if(this.computeContainmentDistance(0,t),this._minDistance<=this._terminateDistance)return null;this.computeContainmentDistance(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=1-e,r=Ni.getPolygons(this._geom[e]);if(r.size()>0){var o=Oi.getLocations(this._geom[i]);if(this.computeContainmentDistance(o,r,n),this._minDistance<=this._terminateDistance)return this._minDistanceLocation[i]=n[0],this._minDistanceLocation[e]=n[1],null}}else if(3===arguments.length)if(arguments[2]instanceof Array&&O(arguments[0],xt)&&O(arguments[1],xt)){for(var s=arguments[0],a=arguments[1],u=arguments[2],l=0;l<s.size();l++)for(var c=s.get(l),p=0;p<a.size();p++)if(this.computeContainmentDistance(c,a.get(p),u),this._minDistance<=this._terminateDistance)return null}else if(arguments[2]instanceof Array&&arguments[0]instanceof Li&&arguments[1]instanceof $t){var h=arguments[0],f=arguments[1],g=arguments[2],d=h.getCoordinate();if(b.EXTERIOR!==this._ptLocator.locate(d,f))return this._minDistance=0,g[0]=h,g[1]=new Li(f,d),null}},Ti.prototype.computeMinDistanceLinesPoints=function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),o=0;o<e.size();o++){var s=e.get(o);if(this.computeMinDistance(r,s,n),this._minDistance<=this._terminateDistance)return null}},Ti.prototype.computeFacetDistance=function(){var t=new Array(2).fill(null),e=Ci.getLines(this._geom[0]),n=Ci.getLines(this._geom[1]),i=wi.getPoints(this._geom[0]),r=wi.getPoints(this._geom[1]);return this.computeMinDistanceLines(e,n,t),this.updateMinDistance(t,!1),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(e,r,t),this.updateMinDistance(t,!1),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(n,i,t),this.updateMinDistance(t,!0),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistancePoints(i,r,t),void this.updateMinDistance(t,!1))))},Ti.prototype.nearestLocations=function(){return this.computeMinDistance(),this._minDistanceLocation},Ti.prototype.updateMinDistance=function(t,e){if(null===t[0])return null;e?(this._minDistanceLocation[0]=t[1],this._minDistanceLocation[1]=t[0]):(this._minDistanceLocation[0]=t[0],this._minDistanceLocation[1]=t[1])},Ti.prototype.nearestPoints=function(){this.computeMinDistance();return[this._minDistanceLocation[0].getCoordinate(),this._minDistanceLocation[1].getCoordinate()]},Ti.prototype.computeMinDistance=function(){if(0===arguments.length){if(null!==this._minDistanceLocation)return null;if(this._minDistanceLocation=new Array(2).fill(null),this.computeContainmentDistance(),this._minDistance<=this._terminateDistance)return null;this.computeFacetDistance()}else if(3===arguments.length)if(arguments[2]instanceof Array&&arguments[0]instanceof Kt&&arguments[1]instanceof Qt){var t=arguments[0],e=arguments[1],n=arguments[2];if(t.getEnvelopeInternal().distance(e.getEnvelopeInternal())>this._minDistance)return null;for(var i=t.getCoordinates(),r=e.getCoordinate(),o=0;o<i.length-1;o++){var s=st.distancePointLine(r,i[o],i[o+1]);if(s<this._minDistance){this._minDistance=s;var a=new dn(i[o],i[o+1]).closestPoint(r);n[0]=new Li(t,o,a),n[1]=new Li(e,0,r)}if(this._minDistance<=this._terminateDistance)return null}}else if(arguments[2]instanceof Array&&arguments[0]instanceof Kt&&arguments[1]instanceof Kt){var u=arguments[0],l=arguments[1],c=arguments[2];if(u.getEnvelopeInternal().distance(l.getEnvelopeInternal())>this._minDistance)return null;for(var p=u.getCoordinates(),h=l.getCoordinates(),f=0;f<p.length-1;f++)for(var g=0;g<h.length-1;g++){var d=st.distanceLineLine(p[f],p[f+1],h[g],h[g+1]);if(d<this._minDistance){this._minDistance=d;var y=new dn(p[f],p[f+1]),_=new dn(h[g],h[g+1]),m=y.closestPoints(_);c[0]=new Li(u,f,m[0]),c[1]=new Li(l,g,m[1])}if(this._minDistance<=this._terminateDistance)return null}}},Ti.prototype.computeMinDistancePoints=function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),o=0;o<e.size();o++){var s=e.get(o),a=r.getCoordinate().distance(s.getCoordinate());if(a<this._minDistance&&(this._minDistance=a,n[0]=new Li(r,0,r.getCoordinate()),n[1]=new Li(s,0,s.getCoordinate())),this._minDistance<=this._terminateDistance)return null}},Ti.prototype.distance=function(){if(null===this._geom[0]||null===this._geom[1])throw new _(\"null geometries are not supported\");return this._geom[0].isEmpty()||this._geom[1].isEmpty()?0:(this.computeMinDistance(),this._minDistance)},Ti.prototype.computeMinDistanceLines=function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),o=0;o<e.size();o++){var s=e.get(o);if(this.computeMinDistance(r,s,n),this._minDistance<=this._terminateDistance)return null}},Ti.prototype.interfaces_=function(){return[]},Ti.prototype.getClass=function(){return Ti},Ti.distance=function(t,e){return new Ti(t,e).distance()},Ti.isWithinDistance=function(t,e,n){return new Ti(t,e,n).distance()<=n},Ti.nearestPoints=function(t,e){return new Ti(t,e).nearestPoints()};var Ri=function(){this._pt=[new N,new N],this._distance=m.NaN,this._isNull=!0};Ri.prototype.getCoordinates=function(){return this._pt},Ri.prototype.getCoordinate=function(t){return this._pt[t]},Ri.prototype.setMinimum=function(){if(1===arguments.length){var t=arguments[0];this.setMinimum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var i=e.distance(n);i<this._distance&&this.initialize(e,n,i)}},Ri.prototype.initialize=function(){if(0===arguments.length)this._isNull=!0;else if(2===arguments.length){var t=arguments[0],e=arguments[1];this._pt[0].setCoordinate(t),this._pt[1].setCoordinate(e),this._distance=t.distance(e),this._isNull=!1}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this._pt[0].setCoordinate(n),this._pt[1].setCoordinate(i),this._distance=r,this._isNull=!1}},Ri.prototype.toString=function(){return Q.toLineString(this._pt[0],this._pt[1])},Ri.prototype.getDistance=function(){return this._distance},Ri.prototype.setMaximum=function(){if(1===arguments.length){var t=arguments[0];this.setMaximum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var i=e.distance(n);i>this._distance&&this.initialize(e,n,i)}},Ri.prototype.interfaces_=function(){return[]},Ri.prototype.getClass=function(){return Ri};var Pi=function(){};Pi.prototype.interfaces_=function(){return[]},Pi.prototype.getClass=function(){return Pi},Pi.computeDistance=function(){if(arguments[2]instanceof Ri&&arguments[0]instanceof Kt&&arguments[1]instanceof N)for(var t=arguments[0],e=arguments[1],n=arguments[2],i=new dn,r=t.getCoordinates(),o=0;o<r.length-1;o++){i.setCoordinates(r[o],r[o+1]);var s=i.closestPoint(e);n.setMinimum(s,e)}else if(arguments[2]instanceof Ri&&arguments[0]instanceof $t&&arguments[1]instanceof N){var a=arguments[0],u=arguments[1],l=arguments[2];Pi.computeDistance(a.getExteriorRing(),u,l);for(var c=0;c<a.getNumInteriorRing();c++)Pi.computeDistance(a.getInteriorRingN(c),u,l)}else if(arguments[2]instanceof Ri&&arguments[0]instanceof lt&&arguments[1]instanceof N){var p=arguments[0],h=arguments[1],f=arguments[2];if(p instanceof Kt)Pi.computeDistance(p,h,f);else if(p instanceof $t)Pi.computeDistance(p,h,f);else if(p instanceof zt)for(var g=p,d=0;d<g.getNumGeometries();d++){var y=g.getGeometryN(d);Pi.computeDistance(y,h,f)}else f.setMinimum(p.getCoordinate(),h)}else if(arguments[2]instanceof Ri&&arguments[0]instanceof dn&&arguments[1]instanceof N){var _=arguments[0],m=arguments[1],v=arguments[2],I=_.closestPoint(m);v.setMinimum(I,m)}};var Di=function(){this._g0=null,this._g1=null,this._ptDist=new Ri,this._densifyFrac=0;var t=arguments[0],e=arguments[1];this._g0=t,this._g1=e},Mi={MaxPointDistanceFilter:{configurable:!0},MaxDensifiedByFractionDistanceFilter:{configurable:!0}};Di.prototype.getCoordinates=function(){return this._ptDist.getCoordinates()},Di.prototype.setDensifyFraction=function(t){if(t>1||t<=0)throw new _(\"Fraction is not in range (0.0 - 1.0]\");this._densifyFrac=t},Di.prototype.compute=function(t,e){this.computeOrientedDistance(t,e,this._ptDist),this.computeOrientedDistance(e,t,this._ptDist)},Di.prototype.distance=function(){return this.compute(this._g0,this._g1),this._ptDist.getDistance()},Di.prototype.computeOrientedDistance=function(t,e,n){var i=new Ai(e);if(t.apply(i),n.setMaximum(i.getMaxPointDistance()),this._densifyFrac>0){var r=new Fi(e,this._densifyFrac);t.apply(r),n.setMaximum(r.getMaxPointDistance())}},Di.prototype.orientedDistance=function(){return this.computeOrientedDistance(this._g0,this._g1,this._ptDist),this._ptDist.getDistance()},Di.prototype.interfaces_=function(){return[]},Di.prototype.getClass=function(){return Di},Di.distance=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return new Di(t,e).distance()}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],o=new Di(n,i);return o.setDensifyFraction(r),o.distance()}},Mi.MaxPointDistanceFilter.get=function(){return Ai},Mi.MaxDensifiedByFractionDistanceFilter.get=function(){return Fi},Object.defineProperties(Di,Mi);var Ai=function(){this._maxPtDist=new Ri,this._minPtDist=new Ri,this._euclideanDist=new Pi,this._geom=null;var t=arguments[0];this._geom=t};Ai.prototype.filter=function(t){this._minPtDist.initialize(),Pi.computeDistance(this._geom,t,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)},Ai.prototype.getMaxPointDistance=function(){return this._maxPtDist},Ai.prototype.interfaces_=function(){return[ht]},Ai.prototype.getClass=function(){return Ai};var Fi=function(){this._maxPtDist=new Ri,this._minPtDist=new Ri,this._geom=null,this._numSubSegs=0;var t=arguments[0],e=arguments[1];this._geom=t,this._numSubSegs=Math.trunc(Math.round(1/e))};Fi.prototype.filter=function(t,e){if(0===e)return null;for(var n=t.getCoordinate(e-1),i=t.getCoordinate(e),r=(i.x-n.x)/this._numSubSegs,o=(i.y-n.y)/this._numSubSegs,s=0;s<this._numSubSegs;s++){var a=n.x+s*r,u=n.y+s*o,l=new N(a,u);this._minPtDist.initialize(),Pi.computeDistance(this._geom,l,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)}},Fi.prototype.isDone=function(){return!1},Fi.prototype.isGeometryChanged=function(){return!1},Fi.prototype.getMaxPointDistance=function(){return this._maxPtDist},Fi.prototype.interfaces_=function(){return[Ut]},Fi.prototype.getClass=function(){return Fi};var Gi=function(t,e,n){this._minValidDistance=null,this._maxValidDistance=null,this._minDistanceFound=null,this._maxDistanceFound=null,this._isValid=!0,this._errMsg=null,this._errorLocation=null,this._errorIndicator=null,this._input=t||null,this._bufDistance=e||null,this._result=n||null},qi={VERBOSE:{configurable:!0},MAX_DISTANCE_DIFF_FRAC:{configurable:!0}};Gi.prototype.checkMaximumDistance=function(t,e,n){var i=new Di(e,t);if(i.setDensifyFraction(.25),this._maxDistanceFound=i.orientedDistance(),this._maxDistanceFound>n){this._isValid=!1;var r=i.getCoordinates();this._errorLocation=r[1],this._errorIndicator=t.getFactory().createLineString(r),this._errMsg=\"Distance between buffer curve and input is too large (\"+this._maxDistanceFound+\" at \"+Q.toLineString(r[0],r[1])+\")\"}},Gi.prototype.isValid=function(){var t=Math.abs(this._bufDistance),e=Gi.MAX_DISTANCE_DIFF_FRAC*t;return this._minValidDistance=t-e,this._maxValidDistance=t+e,!(!this._input.isEmpty()&&!this._result.isEmpty())||(this._bufDistance>0?this.checkPositiveValid():this.checkNegativeValid(),Gi.VERBOSE&&X.out.println(\"Min Dist= \"+this._minDistanceFound+\"  err= \"+(1-this._minDistanceFound/this._bufDistance)+\"  Max Dist= \"+this._maxDistanceFound+\"  err= \"+(this._maxDistanceFound/this._bufDistance-1)),this._isValid)},Gi.prototype.checkNegativeValid=function(){if(!(this._input instanceof $t||this._input instanceof ne||this._input instanceof zt))return null;var t=this.getPolygonLines(this._input);if(this.checkMinimumDistance(t,this._result,this._minValidDistance),!this._isValid)return null;this.checkMaximumDistance(t,this._result,this._maxValidDistance)},Gi.prototype.getErrorIndicator=function(){return this._errorIndicator},Gi.prototype.checkMinimumDistance=function(t,e,n){var i=new Ti(t,e,n);if(this._minDistanceFound=i.distance(),this._minDistanceFound<n){this._isValid=!1;var r=i.nearestPoints();this._errorLocation=i.nearestPoints()[1],this._errorIndicator=t.getFactory().createLineString(r),this._errMsg=\"Distance between buffer curve and input is too small (\"+this._minDistanceFound+\" at \"+Q.toLineString(r[0],r[1])+\" )\"}},Gi.prototype.checkPositiveValid=function(){var t=this._result.getBoundary();if(this.checkMinimumDistance(this._input,t,this._minValidDistance),!this._isValid)return null;this.checkMaximumDistance(this._input,t,this._maxValidDistance)},Gi.prototype.getErrorLocation=function(){return this._errorLocation},Gi.prototype.getPolygonLines=function(t){for(var e=new Nt,n=new Ci(e),i=Ni.getPolygons(t).iterator();i.hasNext();){i.next().apply(n)}return t.getFactory().buildGeometry(e)},Gi.prototype.getErrorMessage=function(){return this._errMsg},Gi.prototype.interfaces_=function(){return[]},Gi.prototype.getClass=function(){return Gi},qi.VERBOSE.get=function(){return!1},qi.MAX_DISTANCE_DIFF_FRAC.get=function(){return.012},Object.defineProperties(Gi,qi);var Bi=function(t,e,n){this._isValid=!0,this._errorMsg=null,this._errorLocation=null,this._errorIndicator=null,this._input=t||null,this._distance=e||null,this._result=n||null},Vi={VERBOSE:{configurable:!0},MAX_ENV_DIFF_FRAC:{configurable:!0}};Bi.prototype.isValid=function(){return this.checkPolygonal(),this._isValid?(this.checkExpectedEmpty(),this._isValid?(this.checkEnvelope(),this._isValid?(this.checkArea(),this._isValid?(this.checkDistance(),this._isValid):this._isValid):this._isValid):this._isValid):this._isValid},Bi.prototype.checkEnvelope=function(){if(this._distance<0)return null;var t=this._distance*Bi.MAX_ENV_DIFF_FRAC;0===t&&(t=.001);var e=new k(this._input.getEnvelopeInternal());e.expandBy(this._distance);var n=new k(this._result.getEnvelopeInternal());n.expandBy(t),n.contains(e)||(this._isValid=!1,this._errorMsg=\"Buffer envelope is incorrect\",this._errorIndicator=this._input.getFactory().toGeometry(n)),this.report(\"Envelope\")},Bi.prototype.checkDistance=function(){var t=new Gi(this._input,this._distance,this._result);t.isValid()||(this._isValid=!1,this._errorMsg=t.getErrorMessage(),this._errorLocation=t.getErrorLocation(),this._errorIndicator=t.getErrorIndicator()),this.report(\"Distance\")},Bi.prototype.checkArea=function(){var t=this._input.getArea(),e=this._result.getArea();this._distance>0&&t>e&&(this._isValid=!1,this._errorMsg=\"Area of positive buffer is smaller than input\",this._errorIndicator=this._result),this._distance<0&&t<e&&(this._isValid=!1,this._errorMsg=\"Area of negative buffer is larger than input\",this._errorIndicator=this._result),this.report(\"Area\")},Bi.prototype.checkPolygonal=function(){this._result instanceof $t||this._result instanceof ne||(this._isValid=!1),this._errorMsg=\"Result is not polygonal\",this._errorIndicator=this._result,this.report(\"Polygonal\")},Bi.prototype.getErrorIndicator=function(){return this._errorIndicator},Bi.prototype.getErrorLocation=function(){return this._errorLocation},Bi.prototype.checkExpectedEmpty=function(){return this._input.getDimension()>=2?null:this._distance>0?null:(this._result.isEmpty()||(this._isValid=!1,this._errorMsg=\"Result is non-empty\",this._errorIndicator=this._result),void this.report(\"ExpectedEmpty\"))},Bi.prototype.report=function(t){if(!Bi.VERBOSE)return null;X.out.println(\"Check \"+t+\": \"+(this._isValid?\"passed\":\"FAILED\"))},Bi.prototype.getErrorMessage=function(){return this._errorMsg},Bi.prototype.interfaces_=function(){return[]},Bi.prototype.getClass=function(){return Bi},Bi.isValidMsg=function(t,e,n){var i=new Bi(t,e,n);return i.isValid()?null:i.getErrorMessage()},Bi.isValid=function(t,e,n){return!!new Bi(t,e,n).isValid()},Vi.VERBOSE.get=function(){return!1},Vi.MAX_ENV_DIFF_FRAC.get=function(){return.012},Object.defineProperties(Bi,Vi);var Ui=function(){this._pts=null,this._data=null;var t=arguments[0],e=arguments[1];this._pts=t,this._data=e};Ui.prototype.getCoordinates=function(){return this._pts},Ui.prototype.size=function(){return this._pts.length},Ui.prototype.getCoordinate=function(t){return this._pts[t]},Ui.prototype.isClosed=function(){return this._pts[0].equals(this._pts[this._pts.length-1])},Ui.prototype.getSegmentOctant=function(t){return t===this._pts.length-1?-1:pn.octant(this.getCoordinate(t),this.getCoordinate(t+1))},Ui.prototype.setData=function(t){this._data=t},Ui.prototype.getData=function(){return this._data},Ui.prototype.toString=function(){return Q.toLineString(new ue(this._pts))},Ui.prototype.interfaces_=function(){return[hn]},Ui.prototype.getClass=function(){return Ui};var zi=function(){this._findAllIntersections=!1,this._isCheckEndSegmentsOnly=!1,this._li=null,this._interiorIntersection=null,this._intSegments=null,this._intersections=new Nt,this._intersectionCount=0,this._keepIntersections=!0;var t=arguments[0];this._li=t,this._interiorIntersection=null};zi.prototype.getInteriorIntersection=function(){return this._interiorIntersection},zi.prototype.setCheckEndSegmentsOnly=function(t){this._isCheckEndSegmentsOnly=t},zi.prototype.getIntersectionSegments=function(){return this._intSegments},zi.prototype.count=function(){return this._intersectionCount},zi.prototype.getIntersections=function(){return this._intersections},zi.prototype.setFindAllIntersections=function(t){this._findAllIntersections=t},zi.prototype.setKeepIntersections=function(t){this._keepIntersections=t},zi.prototype.processIntersections=function(t,e,n,i){if(!this._findAllIntersections&&this.hasIntersection())return null;if(t===n&&e===i)return null;if(this._isCheckEndSegmentsOnly){if(!(this.isEndSegment(t,e)||this.isEndSegment(n,i)))return null}var r=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[i],a=n.getCoordinates()[i+1];this._li.computeIntersection(r,o,s,a),this._li.hasIntersection()&&this._li.isInteriorIntersection()&&(this._intSegments=new Array(4).fill(null),this._intSegments[0]=r,this._intSegments[1]=o,this._intSegments[2]=s,this._intSegments[3]=a,this._interiorIntersection=this._li.getIntersection(0),this._keepIntersections&&this._intersections.add(this._interiorIntersection),this._intersectionCount++)},zi.prototype.isEndSegment=function(t,e){return 0===e||e>=t.size()-2},zi.prototype.hasIntersection=function(){return null!==this._interiorIntersection},zi.prototype.isDone=function(){return!this._findAllIntersections&&null!==this._interiorIntersection},zi.prototype.interfaces_=function(){return[Wn]},zi.prototype.getClass=function(){return zi},zi.createAllIntersectionsFinder=function(t){var e=new zi(t);return e.setFindAllIntersections(!0),e},zi.createAnyIntersectionFinder=function(t){return new zi(t)},zi.createIntersectionCounter=function(t){var e=new zi(t);return e.setFindAllIntersections(!0),e.setKeepIntersections(!1),e};var Xi=function(){this._li=new it,this._segStrings=null,this._findAllIntersections=!1,this._segInt=null,this._isValid=!0;var t=arguments[0];this._segStrings=t};Xi.prototype.execute=function(){if(null!==this._segInt)return null;this.checkInteriorIntersections()},Xi.prototype.getIntersections=function(){return this._segInt.getIntersections()},Xi.prototype.isValid=function(){return this.execute(),this._isValid},Xi.prototype.setFindAllIntersections=function(t){this._findAllIntersections=t},Xi.prototype.checkInteriorIntersections=function(){this._isValid=!0,this._segInt=new zi(this._li),this._segInt.setFindAllIntersections(this._findAllIntersections);var t=new xn;if(t.setSegmentIntersector(this._segInt),t.computeNodes(this._segStrings),this._segInt.hasIntersection())return this._isValid=!1,null},Xi.prototype.checkValid=function(){if(this.execute(),!this._isValid)throw new we(this.getErrorMessage(),this._segInt.getInteriorIntersection())},Xi.prototype.getErrorMessage=function(){if(this._isValid)return\"no intersections found\";var t=this._segInt.getIntersectionSegments();return\"found non-noded intersection between \"+Q.toLineString(t[0],t[1])+\" and \"+Q.toLineString(t[2],t[3])},Xi.prototype.interfaces_=function(){return[]},Xi.prototype.getClass=function(){return Xi},Xi.computeIntersections=function(t){var e=new Xi(t);return e.setFindAllIntersections(!0),e.isValid(),e.getIntersections()};var Yi=function t(){this._nv=null;var e=arguments[0];this._nv=new Xi(t.toSegmentStrings(e))};Yi.prototype.checkValid=function(){this._nv.checkValid()},Yi.prototype.interfaces_=function(){return[]},Yi.prototype.getClass=function(){return Yi},Yi.toSegmentStrings=function(t){for(var e=new Nt,n=t.iterator();n.hasNext();){var i=n.next();e.add(new Ui(i.getCoordinates(),i))}return e},Yi.checkValid=function(t){new Yi(t).checkValid()};var ki=function(t){this._mapOp=t};ki.prototype.map=function(t){for(var e=new Nt,n=0;n<t.getNumGeometries();n++){var i=this._mapOp.map(t.getGeometryN(n));i.isEmpty()||e.add(i)}return t.getFactory().createGeometryCollection(_e.toGeometryArray(e))},ki.prototype.interfaces_=function(){return[]},ki.prototype.getClass=function(){return ki},ki.map=function(t,e){return new ki(e).map(t)};var ji=function(){this._op=null,this._geometryFactory=null,this._ptLocator=null,this._lineEdgesList=new Nt,this._resultLineList=new Nt;var t=arguments[0],e=arguments[1],n=arguments[2];this._op=t,this._geometryFactory=e,this._ptLocator=n};ji.prototype.collectLines=function(t){for(var e=this._op.getGraph().getEdgeEnds().iterator();e.hasNext();){var n=e.next();this.collectLineEdge(n,t,this._lineEdgesList),this.collectBoundaryTouchEdge(n,t,this._lineEdgesList)}},ji.prototype.labelIsolatedLine=function(t,e){var n=this._ptLocator.locate(t.getCoordinate(),this._op.getArgGeometry(e));t.getLabel().setLocation(e,n)},ji.prototype.build=function(t){return this.findCoveredLineEdges(),this.collectLines(t),this.buildLines(t),this._resultLineList},ji.prototype.collectLineEdge=function(t,e,n){var i=t.getLabel(),r=t.getEdge();t.isLineEdge()&&(t.isVisited()||!Lr.isResultOfOp(i,e)||r.isCovered()||(n.add(r),t.setVisitedEdge(!0)))},ji.prototype.findCoveredLineEdges=function(){for(var t=this._op.getGraph().getNodes().iterator();t.hasNext();){t.next().getEdges().findCoveredLineEdges()}for(var e=this._op.getGraph().getEdgeEnds().iterator();e.hasNext();){var n=e.next(),i=n.getEdge();if(n.isLineEdge()&&!i.isCoveredSet()){var r=this._op.isCoveredByA(n.getCoordinate());i.setCovered(r)}}},ji.prototype.labelIsolatedLines=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=n.getLabel();n.isIsolated()&&(i.isNull(0)?this.labelIsolatedLine(n,0):this.labelIsolatedLine(n,1))}},ji.prototype.buildLines=function(t){for(var e=this._lineEdgesList.iterator();e.hasNext();){var n=e.next(),i=this._geometryFactory.createLineString(n.getCoordinates());this._resultLineList.add(i),n.setInResult(!0)}},ji.prototype.collectBoundaryTouchEdge=function(t,e,n){var i=t.getLabel();return t.isLineEdge()?null:t.isVisited()?null:t.isInteriorAreaEdge()?null:t.getEdge().isInResult()?null:(tt.isTrue(!(t.isInResult()||t.getSym().isInResult())||!t.getEdge().isInResult()),void(Lr.isResultOfOp(i,e)&&e===Lr.INTERSECTION&&(n.add(t.getEdge()),t.setVisitedEdge(!0))))},ji.prototype.interfaces_=function(){return[]},ji.prototype.getClass=function(){return ji};var Hi=function(){this._op=null,this._geometryFactory=null,this._resultPointList=new Nt;var t=arguments[0],e=arguments[1];this._op=t,this._geometryFactory=e};Hi.prototype.filterCoveredNodeToPoint=function(t){var e=t.getCoordinate();if(!this._op.isCoveredByLA(e)){var n=this._geometryFactory.createPoint(e);this._resultPointList.add(n)}},Hi.prototype.extractNonCoveredResultNodes=function(t){for(var e=this._op.getGraph().getNodes().iterator();e.hasNext();){var n=e.next();if(!n.isInResult()&&(!n.isIncidentEdgeInResult()&&(0===n.getEdges().getDegree()||t===Lr.INTERSECTION))){var i=n.getLabel();Lr.isResultOfOp(i,t)&&this.filterCoveredNodeToPoint(n)}}},Hi.prototype.build=function(t){return this.extractNonCoveredResultNodes(t),this._resultPointList},Hi.prototype.interfaces_=function(){return[]},Hi.prototype.getClass=function(){return Hi};var Wi=function(){this._inputGeom=null,this._factory=null,this._pruneEmptyGeometry=!0,this._preserveGeometryCollectionType=!0,this._preserveCollections=!1,this._preserveType=!1};Wi.prototype.transformPoint=function(t,e){return this._factory.createPoint(this.transformCoordinates(t.getCoordinateSequence(),t))},Wi.prototype.transformPolygon=function(t,e){var n=!0,i=this.transformLinearRing(t.getExteriorRing(),t);null!==i&&i instanceof ee&&!i.isEmpty()||(n=!1);for(var r=new Nt,o=0;o<t.getNumInteriorRing();o++){var s=this.transformLinearRing(t.getInteriorRingN(o),t);null===s||s.isEmpty()||(s instanceof ee||(n=!1),r.add(s))}if(n)return this._factory.createPolygon(i,r.toArray([]));var a=new Nt;return null!==i&&a.add(i),a.addAll(r),this._factory.buildGeometry(a)},Wi.prototype.createCoordinateSequence=function(t){return this._factory.getCoordinateSequenceFactory().create(t)},Wi.prototype.getInputGeometry=function(){return this._inputGeom},Wi.prototype.transformMultiLineString=function(t,e){for(var n=new Nt,i=0;i<t.getNumGeometries();i++){var r=this.transformLineString(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this._factory.buildGeometry(n)},Wi.prototype.transformCoordinates=function(t,e){return this.copy(t)},Wi.prototype.transformLineString=function(t,e){return this._factory.createLineString(this.transformCoordinates(t.getCoordinateSequence(),t))},Wi.prototype.transformMultiPoint=function(t,e){for(var n=new Nt,i=0;i<t.getNumGeometries();i++){var r=this.transformPoint(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this._factory.buildGeometry(n)},Wi.prototype.transformMultiPolygon=function(t,e){for(var n=new Nt,i=0;i<t.getNumGeometries();i++){var r=this.transformPolygon(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this._factory.buildGeometry(n)},Wi.prototype.copy=function(t){return t.copy()},Wi.prototype.transformGeometryCollection=function(t,e){for(var n=new Nt,i=0;i<t.getNumGeometries();i++){var r=this.transform(t.getGeometryN(i));null!==r&&(this._pruneEmptyGeometry&&r.isEmpty()||n.add(r))}return this._preserveGeometryCollectionType?this._factory.createGeometryCollection(_e.toGeometryArray(n)):this._factory.buildGeometry(n)},Wi.prototype.transform=function(t){if(this._inputGeom=t,this._factory=t.getFactory(),t instanceof Qt)return this.transformPoint(t,null);if(t instanceof te)return this.transformMultiPoint(t,null);if(t instanceof ee)return this.transformLinearRing(t,null);if(t instanceof Kt)return this.transformLineString(t,null);if(t instanceof Xt)return this.transformMultiLineString(t,null);if(t instanceof $t)return this.transformPolygon(t,null);if(t instanceof ne)return this.transformMultiPolygon(t,null);if(t instanceof zt)return this.transformGeometryCollection(t,null);throw new _(\"Unknown Geometry subtype: \"+t.getClass().getName())},Wi.prototype.transformLinearRing=function(t,e){var n=this.transformCoordinates(t.getCoordinateSequence(),t);if(null===n)return this._factory.createLinearRing(null);var i=n.size();return i>0&&i<4&&!this._preserveType?this._factory.createLineString(n):this._factory.createLinearRing(n)},Wi.prototype.interfaces_=function(){return[]},Wi.prototype.getClass=function(){return Wi};var Ki=function t(){if(this._snapTolerance=0,this._srcPts=null,this._seg=new dn,this._allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof Kt&&\"number\"==typeof arguments[1]){var e=arguments[0],n=arguments[1];t.call(this,e.getCoordinates(),n)}else if(arguments[0]instanceof Array&&\"number\"==typeof arguments[1]){var i=arguments[0],r=arguments[1];this._srcPts=i,this._isClosed=t.isClosed(i),this._snapTolerance=r}};Ki.prototype.snapVertices=function(t,e){for(var n=this._isClosed?t.size()-1:t.size(),i=0;i<n;i++){var r=t.get(i),o=this.findSnapForVertex(r,e);null!==o&&(t.set(i,new N(o)),0===i&&this._isClosed&&t.set(t.size()-1,new N(o)))}},Ki.prototype.findSnapForVertex=function(t,e){for(var n=0;n<e.length;n++){if(t.equals2D(e[n]))return null;if(t.distance(e[n])<this._snapTolerance)return e[n]}return null},Ki.prototype.snapTo=function(t){var e=new St(this._srcPts);this.snapVertices(e,t),this.snapSegments(e,t);return e.toCoordinateArray()},Ki.prototype.snapSegments=function(t,e){if(0===e.length)return null;var n=e.length;e[0].equals2D(e[e.length-1])&&(n=e.length-1);for(var i=0;i<n;i++){var r=e[i],o=this.findSegmentIndexToSnap(r,t);o>=0&&t.add(o+1,new N(r),!1)}},Ki.prototype.findSegmentIndexToSnap=function(t,e){for(var n=m.MAX_VALUE,i=-1,r=0;r<e.size()-1;r++){if(this._seg.p0=e.get(r),this._seg.p1=e.get(r+1),this._seg.p0.equals2D(t)||this._seg.p1.equals2D(t)){if(this._allowSnappingToSourceVertices)continue;return-1}var o=this._seg.distance(t);o<this._snapTolerance&&o<n&&(n=o,i=r)}return i},Ki.prototype.setAllowSnappingToSourceVertices=function(t){this._allowSnappingToSourceVertices=t},Ki.prototype.interfaces_=function(){return[]},Ki.prototype.getClass=function(){return Ki},Ki.isClosed=function(t){return!(t.length<=1)&&t[0].equals2D(t[t.length-1])};var Ji=function(t){this._srcGeom=t||null},Qi={SNAP_PRECISION_FACTOR:{configurable:!0}};Ji.prototype.snapTo=function(t,e){var n=this.extractTargetCoordinates(t);return new Zi(e,n).transform(this._srcGeom)},Ji.prototype.snapToSelf=function(t,e){var n=this.extractTargetCoordinates(this._srcGeom),i=new Zi(t,n,!0).transform(this._srcGeom),r=i;return e&&O(r,Zt)&&(r=i.buffer(0)),r},Ji.prototype.computeSnapTolerance=function(t){return this.computeMinimumSegmentLength(t)/10},Ji.prototype.extractTargetCoordinates=function(t){for(var e=new h,n=t.getCoordinates(),i=0;i<n.length;i++)e.add(n[i]);return e.toArray(new Array(0).fill(null))},Ji.prototype.computeMinimumSegmentLength=function(t){for(var e=m.MAX_VALUE,n=0;n<t.length-1;n++){var i=t[n].distance(t[n+1]);i<e&&(e=i)}return e},Ji.prototype.interfaces_=function(){return[]},Ji.prototype.getClass=function(){return Ji},Ji.snap=function(t,e,n){var i=new Array(2).fill(null),r=new Ji(t);i[0]=r.snapTo(e,n);var o=new Ji(e);return i[1]=o.snapTo(i[0],n),i},Ji.computeOverlaySnapTolerance=function(){if(1===arguments.length){var t=arguments[0],e=Ji.computeSizeBasedSnapTolerance(t),n=t.getPrecisionModel();if(n.getType()===fe.FIXED){var i=1/n.getScale()*2/1.415;i>e&&(e=i)}return e}if(2===arguments.length){var r=arguments[0],o=arguments[1];return Math.min(Ji.computeOverlaySnapTolerance(r),Ji.computeOverlaySnapTolerance(o))}},Ji.computeSizeBasedSnapTolerance=function(t){var e=t.getEnvelopeInternal();return Math.min(e.getHeight(),e.getWidth())*Ji.SNAP_PRECISION_FACTOR},Ji.snapToSelf=function(t,e,n){return new Ji(t).snapToSelf(e,n)},Qi.SNAP_PRECISION_FACTOR.get=function(){return 1e-9},Object.defineProperties(Ji,Qi);var Zi=function(t){function e(e,n,i){t.call(this),this._snapTolerance=e||null,this._snapPts=n||null,this._isSelfSnap=void 0!==i&&i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.snapLine=function(t,e){var n=new Ki(t,this._snapTolerance);return n.setAllowSnappingToSourceVertices(this._isSelfSnap),n.snapTo(e)},e.prototype.transformCoordinates=function(t,e){var n=t.toCoordinateArray(),i=this.snapLine(n,this._snapPts);return this._factory.getCoordinateSequenceFactory().create(i)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Wi),$i=function(){this._isFirst=!0,this._commonMantissaBitsCount=53,this._commonBits=0,this._commonSignExp=null};$i.prototype.getCommon=function(){return m.longBitsToDouble(this._commonBits)},$i.prototype.add=function(t){var e=m.doubleToLongBits(t);if(this._isFirst)return this._commonBits=e,this._commonSignExp=$i.signExpBits(this._commonBits),this._isFirst=!1,null;if($i.signExpBits(e)!==this._commonSignExp)return this._commonBits=0,null;this._commonMantissaBitsCount=$i.numCommonMostSigMantissaBits(this._commonBits,e),this._commonBits=$i.zeroLowerBits(this._commonBits,64-(12+this._commonMantissaBitsCount))},$i.prototype.toString=function(){if(1===arguments.length){var t=arguments[0],e=m.longBitsToDouble(t),n=\"0000000000000000000000000000000000000000000000000000000000000000\"+m.toBinaryString(t),i=n.substring(n.length-64);return i.substring(0,1)+\"  \"+i.substring(1,12)+\"(exp) \"+i.substring(12)+\" [ \"+e+\" ]\"}},$i.prototype.interfaces_=function(){return[]},$i.prototype.getClass=function(){return $i},$i.getBit=function(t,e){return 0!=(t&1<<e)?1:0},$i.signExpBits=function(t){return t>>52},$i.zeroLowerBits=function(t,e){return t&~((1<<e)-1)},$i.numCommonMostSigMantissaBits=function(t,e){for(var n=0,i=52;i>=0;i--){if($i.getBit(t,i)!==$i.getBit(e,i))return n;n++}return 52};var tr=function(){this._commonCoord=null,this._ccFilter=new nr},er={CommonCoordinateFilter:{configurable:!0},Translater:{configurable:!0}};tr.prototype.addCommonBits=function(t){var e=new ir(this._commonCoord);t.apply(e),t.geometryChanged()},tr.prototype.removeCommonBits=function(t){if(0===this._commonCoord.x&&0===this._commonCoord.y)return t;var e=new N(this._commonCoord);e.x=-e.x,e.y=-e.y;var n=new ir(e);return t.apply(n),t.geometryChanged(),t},tr.prototype.getCommonCoordinate=function(){return this._commonCoord},tr.prototype.add=function(t){t.apply(this._ccFilter),this._commonCoord=this._ccFilter.getCommonCoordinate()},tr.prototype.interfaces_=function(){return[]},tr.prototype.getClass=function(){return tr},er.CommonCoordinateFilter.get=function(){return nr},er.Translater.get=function(){return ir},Object.defineProperties(tr,er);var nr=function(){this._commonBitsX=new $i,this._commonBitsY=new $i};nr.prototype.filter=function(t){this._commonBitsX.add(t.x),this._commonBitsY.add(t.y)},nr.prototype.getCommonCoordinate=function(){return new N(this._commonBitsX.getCommon(),this._commonBitsY.getCommon())},nr.prototype.interfaces_=function(){return[ht]},nr.prototype.getClass=function(){return nr};var ir=function(){this.trans=null;var t=arguments[0];this.trans=t};ir.prototype.filter=function(t,e){var n=t.getOrdinate(e,0)+this.trans.x,i=t.getOrdinate(e,1)+this.trans.y;t.setOrdinate(e,0,n),t.setOrdinate(e,1,i)},ir.prototype.isDone=function(){return!1},ir.prototype.isGeometryChanged=function(){return!0},ir.prototype.interfaces_=function(){return[Ut]},ir.prototype.getClass=function(){return ir};var rr=function(t,e){this._geom=new Array(2).fill(null),this._snapTolerance=null,this._cbr=null,this._geom[0]=t,this._geom[1]=e,this.computeSnapTolerance()};rr.prototype.selfSnap=function(t){return new Ji(t).snapTo(t,this._snapTolerance)},rr.prototype.removeCommonBits=function(t){this._cbr=new tr,this._cbr.add(t[0]),this._cbr.add(t[1]);var e=new Array(2).fill(null);return e[0]=this._cbr.removeCommonBits(t[0].copy()),e[1]=this._cbr.removeCommonBits(t[1].copy()),e},rr.prototype.prepareResult=function(t){return this._cbr.addCommonBits(t),t},rr.prototype.getResultGeometry=function(t){var e=this.snap(this._geom),n=Lr.overlayOp(e[0],e[1],t);return this.prepareResult(n)},rr.prototype.checkValid=function(t){t.isValid()||X.out.println(\"Snapped geometry is invalid\")},rr.prototype.computeSnapTolerance=function(){this._snapTolerance=Ji.computeOverlaySnapTolerance(this._geom[0],this._geom[1])},rr.prototype.snap=function(t){var e=this.removeCommonBits(t);return Ji.snap(e[0],e[1],this._snapTolerance)},rr.prototype.interfaces_=function(){return[]},rr.prototype.getClass=function(){return rr},rr.overlayOp=function(t,e,n){return new rr(t,e).getResultGeometry(n)},rr.union=function(t,e){return rr.overlayOp(t,e,Lr.UNION)},rr.intersection=function(t,e){return rr.overlayOp(t,e,Lr.INTERSECTION)},rr.symDifference=function(t,e){return rr.overlayOp(t,e,Lr.SYMDIFFERENCE)},rr.difference=function(t,e){return rr.overlayOp(t,e,Lr.DIFFERENCE)};var or=function(t,e){this._geom=new Array(2).fill(null),this._geom[0]=t,this._geom[1]=e};or.prototype.getResultGeometry=function(t){var e=null,n=!1,i=null;try{e=Lr.overlayOp(this._geom[0],this._geom[1],t);n=!0}catch(t){if(!(t instanceof Z))throw t;i=t}if(!n)try{e=rr.overlayOp(this._geom[0],this._geom[1],t)}catch(t){throw t instanceof Z?i:t}return e},or.prototype.interfaces_=function(){return[]},or.prototype.getClass=function(){return or},or.overlayOp=function(t,e,n){return new or(t,e).getResultGeometry(n)},or.union=function(t,e){return or.overlayOp(t,e,Lr.UNION)},or.intersection=function(t,e){return or.overlayOp(t,e,Lr.INTERSECTION)},or.symDifference=function(t,e){return or.overlayOp(t,e,Lr.SYMDIFFERENCE)},or.difference=function(t,e){return or.overlayOp(t,e,Lr.DIFFERENCE)};var sr=function(){this.mce=null,this.chainIndex=null;var t=arguments[0],e=arguments[1];this.mce=t,this.chainIndex=e};sr.prototype.computeIntersections=function(t,e){this.mce.computeIntersectsForChain(this.chainIndex,t.mce,t.chainIndex,e)},sr.prototype.interfaces_=function(){return[]},sr.prototype.getClass=function(){return sr};var ar=function t(){if(this._label=null,this._xValue=null,this._eventType=null,this._insertEvent=null,this._deleteEventIndex=null,this._obj=null,2===arguments.length){var e=arguments[0],n=arguments[1];this._eventType=t.DELETE,this._xValue=e,this._insertEvent=n}else if(3===arguments.length){var i=arguments[0],r=arguments[1],o=arguments[2];this._eventType=t.INSERT,this._label=i,this._xValue=r,this._obj=o}},ur={INSERT:{configurable:!0},DELETE:{configurable:!0}};ar.prototype.isDelete=function(){return this._eventType===ar.DELETE},ar.prototype.setDeleteEventIndex=function(t){this._deleteEventIndex=t},ar.prototype.getObject=function(){return this._obj},ar.prototype.compareTo=function(t){var e=t;return this._xValue<e._xValue?-1:this._xValue>e._xValue?1:this._eventType<e._eventType?-1:this._eventType>e._eventType?1:0},ar.prototype.getInsertEvent=function(){return this._insertEvent},ar.prototype.isInsert=function(){return this._eventType===ar.INSERT},ar.prototype.isSameLabel=function(t){return null!==this._label&&this._label===t._label},ar.prototype.getDeleteEventIndex=function(){return this._deleteEventIndex},ar.prototype.interfaces_=function(){return[I]},ar.prototype.getClass=function(){return ar},ur.INSERT.get=function(){return 1},ur.DELETE.get=function(){return 2},Object.defineProperties(ar,ur);var lr=function(){};lr.prototype.interfaces_=function(){return[]},lr.prototype.getClass=function(){return lr};var cr=function(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._properIntersectionPoint=null,this._li=null,this._includeProper=null,this._recordIsolated=null,this._isSelfIntersection=null,this._numIntersections=0,this.numTests=0,this._bdyNodes=null,this._isDone=!1,this._isDoneWhenProperInt=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this._li=t,this._includeProper=e,this._recordIsolated=n};cr.prototype.isTrivialIntersection=function(t,e,n,i){if(t===n&&1===this._li.getIntersectionNum()){if(cr.isAdjacentSegments(e,i))return!0;if(t.isClosed()){var r=t.getNumPoints()-1;if(0===e&&i===r||0===i&&e===r)return!0}}return!1},cr.prototype.getProperIntersectionPoint=function(){return this._properIntersectionPoint},cr.prototype.setIsDoneIfProperInt=function(t){this._isDoneWhenProperInt=t},cr.prototype.hasProperInteriorIntersection=function(){return this._hasProperInterior},cr.prototype.isBoundaryPointInternal=function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next().getCoordinate();if(t.isIntersection(i))return!0}return!1},cr.prototype.hasProperIntersection=function(){return this._hasProper},cr.prototype.hasIntersection=function(){return this._hasIntersection},cr.prototype.isDone=function(){return this._isDone},cr.prototype.isBoundaryPoint=function(t,e){return null!==e&&(!!this.isBoundaryPointInternal(t,e[0])||!!this.isBoundaryPointInternal(t,e[1]))},cr.prototype.setBoundaryNodes=function(t,e){this._bdyNodes=new Array(2).fill(null),this._bdyNodes[0]=t,this._bdyNodes[1]=e},cr.prototype.addIntersections=function(t,e,n,i){if(t===n&&e===i)return null;this.numTests++;var r=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[i],a=n.getCoordinates()[i+1];this._li.computeIntersection(r,o,s,a),this._li.hasIntersection()&&(this._recordIsolated&&(t.setIsolated(!1),n.setIsolated(!1)),this._numIntersections++,this.isTrivialIntersection(t,e,n,i)||(this._hasIntersection=!0,!this._includeProper&&this._li.isProper()||(t.addIntersections(this._li,e,0),n.addIntersections(this._li,i,1)),this._li.isProper()&&(this._properIntersectionPoint=this._li.getIntersection(0).copy(),this._hasProper=!0,this._isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this._li,this._bdyNodes)||(this._hasProperInterior=!0))))},cr.prototype.interfaces_=function(){return[]},cr.prototype.getClass=function(){return cr},cr.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)};var pr=function(t){function e(){t.call(this),this.events=new Nt,this.nOverlaps=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.prepareEvents=function(){$e.sort(this.events);for(var t=0;t<this.events.size();t++){var e=this.events.get(t);e.isDelete()&&e.getInsertEvent().setDeleteEventIndex(t)}},e.prototype.computeIntersections=function(){if(1===arguments.length){var t=arguments[0];this.nOverlaps=0,this.prepareEvents();for(var e=0;e<this.events.size();e++){var n=this.events.get(e);if(n.isInsert()&&this.processOverlaps(e,n.getDeleteEventIndex(),n,t),t.isDone())break}}else if(3===arguments.length)if(arguments[2]instanceof cr&&O(arguments[0],xt)&&O(arguments[1],xt)){var i=arguments[0],r=arguments[1],o=arguments[2];this.addEdges(i,i),this.addEdges(r,r),this.computeIntersections(o)}else if(\"boolean\"==typeof arguments[2]&&O(arguments[0],xt)&&arguments[1]instanceof cr){var s=arguments[0],a=arguments[1];arguments[2]?this.addEdges(s,null):this.addEdges(s),this.computeIntersections(a)}},e.prototype.addEdge=function(t,e){for(var n=t.getMonotoneChainEdge(),i=n.getStartIndexes(),r=0;r<i.length-1;r++){var o=new sr(n,r),s=new ar(e,n.getMinX(r),o);this.events.add(s),this.events.add(new ar(n.getMaxX(r),s))}},e.prototype.processOverlaps=function(t,e,n,i){for(var r=n.getObject(),o=t;o<e;o++){var s=this.events.get(o);if(s.isInsert()){var a=s.getObject();n.isSameLabel(s)||(r.computeIntersections(a,i),this.nOverlaps++)}}},e.prototype.addEdges=function(){if(1===arguments.length)for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.addEdge(e,e)}else if(2===arguments.length)for(var n=arguments[0],i=arguments[1],r=n.iterator();r.hasNext();){var o=r.next();this.addEdge(o,i)}},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(lr),hr=function(){this._min=m.POSITIVE_INFINITY,this._max=m.NEGATIVE_INFINITY},fr={NodeComparator:{configurable:!0}};hr.prototype.getMin=function(){return this._min},hr.prototype.intersects=function(t,e){return!(this._min>e||this._max<t)},hr.prototype.getMax=function(){return this._max},hr.prototype.toString=function(){return Q.toLineString(new N(this._min,0),new N(this._max,0))},hr.prototype.interfaces_=function(){return[]},hr.prototype.getClass=function(){return hr},fr.NodeComparator.get=function(){return gr},Object.defineProperties(hr,fr);var gr=function(){};gr.prototype.compare=function(t,e){var n=t,i=e,r=(n._min+n._max)/2,o=(i._min+i._max)/2;return r<o?-1:r>o?1:0},gr.prototype.interfaces_=function(){return[x]},gr.prototype.getClass=function(){return gr};var dr=function(t){function e(){t.call(this),this._item=null;var e=arguments[0],n=arguments[1],i=arguments[2];this._min=e,this._max=n,this._item=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.query=function(t,e,n){if(!this.intersects(t,e))return null;n.visitItem(this._item)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(hr),yr=function(t){function e(){t.call(this),this._node1=null,this._node2=null;var e=arguments[0],n=arguments[1];this._node1=e,this._node2=n,this.buildExtent(this._node1,this._node2)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.buildExtent=function(t,e){this._min=Math.min(t._min,e._min),this._max=Math.max(t._max,e._max)},e.prototype.query=function(t,e,n){if(!this.intersects(t,e))return null;null!==this._node1&&this._node1.query(t,e,n),null!==this._node2&&this._node2.query(t,e,n)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(hr),_r=function(){this._leaves=new Nt,this._root=null,this._level=0};_r.prototype.buildTree=function(){$e.sort(this._leaves,new hr.NodeComparator);for(var t=this._leaves,e=null,n=new Nt;;){if(this.buildLevel(t,n),1===n.size())return n.get(0);e=t,t=n,n=e}},_r.prototype.insert=function(t,e,n){if(null!==this._root)throw new Error(\"Index cannot be added to once it has been queried\");this._leaves.add(new dr(t,e,n))},_r.prototype.query=function(t,e,n){this.init(),this._root.query(t,e,n)},_r.prototype.buildRoot=function(){if(null!==this._root)return null;this._root=this.buildTree()},_r.prototype.printNode=function(t){X.out.println(Q.toLineString(new N(t._min,this._level),new N(t._max,this._level)))},_r.prototype.init=function(){if(null!==this._root)return null;this.buildRoot()},_r.prototype.buildLevel=function(t,e){this._level++,e.clear();for(var n=0;n<t.size();n+=2){var i=t.get(n);if(null===(n+1<t.size()?t.get(n):null))e.add(i);else{var r=new yr(t.get(n),t.get(n+1));e.add(r)}}},_r.prototype.interfaces_=function(){return[]},_r.prototype.getClass=function(){return _r};var mr=function(){this._items=new Nt};mr.prototype.visitItem=function(t){this._items.add(t)},mr.prototype.getItems=function(){return this._items},mr.prototype.interfaces_=function(){return[Ke]},mr.prototype.getClass=function(){return mr};var vr=function(){this._index=null;var t=arguments[0];if(!O(t,Zt))throw new _(\"Argument must be Polygonal\");this._index=new xr(t)},Ir={SegmentVisitor:{configurable:!0},IntervalIndexedGeometry:{configurable:!0}};vr.prototype.locate=function(t){var e=new ot(t),n=new Er(e);return this._index.query(t.y,t.y,n),e.getLocation()},vr.prototype.interfaces_=function(){return[Vn]},vr.prototype.getClass=function(){return vr},Ir.SegmentVisitor.get=function(){return Er},Ir.IntervalIndexedGeometry.get=function(){return xr},Object.defineProperties(vr,Ir);var Er=function(){this._counter=null;var t=arguments[0];this._counter=t};Er.prototype.visitItem=function(t){var e=t;this._counter.countSegment(e.getCoordinate(0),e.getCoordinate(1))},Er.prototype.interfaces_=function(){return[Ke]},Er.prototype.getClass=function(){return Er};var xr=function(){this._index=new _r;var t=arguments[0];this.init(t)};xr.prototype.init=function(t){for(var e=Ci.getLines(t).iterator();e.hasNext();){var n=e.next().getCoordinates();this.addLine(n)}},xr.prototype.addLine=function(t){for(var e=1;e<t.length;e++){var n=new dn(t[e-1],t[e]),i=Math.min(n.p0.y,n.p1.y),r=Math.max(n.p0.y,n.p1.y);this._index.insert(i,r,n)}},xr.prototype.query=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new mr;return this._index.query(t,e,n),n.getItems()}if(3===arguments.length){var i=arguments[0],r=arguments[1],o=arguments[2];this._index.query(i,r,o)}},xr.prototype.interfaces_=function(){return[]},xr.prototype.getClass=function(){return xr};var Nr=function(t){function e(){if(t.call(this),this._parentGeom=null,this._lineEdgeMap=new he,this._boundaryNodeRule=null,this._useBoundaryDeterminationRule=!0,this._argIndex=null,this._boundaryNodes=null,this._hasTooFewPoints=!1,this._invalidPoint=null,this._areaPtLocator=null,this._ptLocator=new Si,2===arguments.length){var e=arguments[0],n=arguments[1],i=ft.OGC_SFS_BOUNDARY_RULE;this._argIndex=e,this._parentGeom=n,this._boundaryNodeRule=i,null!==n&&this.add(n)}else if(3===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2];this._argIndex=r,this._parentGeom=o,this._boundaryNodeRule=s,null!==o&&this.add(o)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.insertBoundaryPoint=function(t,n){var i=this._nodes.addNode(n).getLabel(),r=1;b.NONE;i.getLocation(t,Se.ON)===b.BOUNDARY&&r++;var o=e.determineBoundary(this._boundaryNodeRule,r);i.setLocation(t,o)},e.prototype.computeSelfNodes=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.computeSelfNodes(t,e,!1)}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],o=new cr(n,!0,!1);o.setIsDoneIfProperInt(r);var s=this.createEdgeSetIntersector(),a=this._parentGeom instanceof ee||this._parentGeom instanceof $t||this._parentGeom instanceof ne,u=i||!a;return s.computeIntersections(this._edges,o,u),this.addSelfIntersectionNodes(this._argIndex),o}},e.prototype.computeSplitEdges=function(t){for(var e=this._edges.iterator();e.hasNext();){e.next().eiList.addSplitEdges(t)}},e.prototype.computeEdgeIntersections=function(t,e,n){var i=new cr(e,n,!0);i.setBoundaryNodes(this.getBoundaryNodes(),t.getBoundaryNodes());return this.createEdgeSetIntersector().computeIntersections(this._edges,t._edges,i),i},e.prototype.getGeometry=function(){return this._parentGeom},e.prototype.getBoundaryNodeRule=function(){return this._boundaryNodeRule},e.prototype.hasTooFewPoints=function(){return this._hasTooFewPoints},e.prototype.addPoint=function(){if(arguments[0]instanceof Qt){var t=arguments[0].getCoordinate();this.insertPoint(this._argIndex,t,b.INTERIOR)}else if(arguments[0]instanceof N){var e=arguments[0];this.insertPoint(this._argIndex,e,b.INTERIOR)}},e.prototype.addPolygon=function(t){this.addPolygonRing(t.getExteriorRing(),b.EXTERIOR,b.INTERIOR);for(var e=0;e<t.getNumInteriorRing();e++){var n=t.getInteriorRingN(e);this.addPolygonRing(n,b.INTERIOR,b.EXTERIOR)}},e.prototype.addEdge=function(t){this.insertEdge(t);var e=t.getCoordinates();this.insertPoint(this._argIndex,e[0],b.BOUNDARY),this.insertPoint(this._argIndex,e[e.length-1],b.BOUNDARY)},e.prototype.addLineString=function(t){var e=Lt.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return this._hasTooFewPoints=!0,this._invalidPoint=e[0],null;var n=new ni(e,new Pe(this._argIndex,b.INTERIOR));this._lineEdgeMap.put(t,n),this.insertEdge(n),tt.isTrue(e.length>=2,\"found LineString with single point\"),this.insertBoundaryPoint(this._argIndex,e[0]),this.insertBoundaryPoint(this._argIndex,e[e.length-1])},e.prototype.getInvalidPoint=function(){return this._invalidPoint},e.prototype.getBoundaryPoints=function(){for(var t=this.getBoundaryNodes(),e=new Array(t.size()).fill(null),n=0,i=t.iterator();i.hasNext();){var r=i.next();e[n++]=r.getCoordinate().copy()}return e},e.prototype.getBoundaryNodes=function(){return null===this._boundaryNodes&&(this._boundaryNodes=this._nodes.getBoundaryNodes(this._argIndex)),this._boundaryNodes},e.prototype.addSelfIntersectionNode=function(t,e,n){if(this.isBoundaryNode(t,e))return null;n===b.BOUNDARY&&this._useBoundaryDeterminationRule?this.insertBoundaryPoint(t,e):this.insertPoint(t,e,n)},e.prototype.addPolygonRing=function(t,e,n){if(t.isEmpty())return null;var i=Lt.removeRepeatedPoints(t.getCoordinates());if(i.length<4)return this._hasTooFewPoints=!0,this._invalidPoint=i[0],null;var r=e,o=n;st.isCCW(i)&&(r=n,o=e);var s=new ni(i,new Pe(this._argIndex,b.BOUNDARY,r,o));this._lineEdgeMap.put(t,s),this.insertEdge(s),this.insertPoint(this._argIndex,i[0],b.BOUNDARY)},e.prototype.insertPoint=function(t,e,n){var i=this._nodes.addNode(e),r=i.getLabel();null===r?i._label=new Pe(t,n):r.setLocation(t,n)},e.prototype.createEdgeSetIntersector=function(){return new pr},e.prototype.addSelfIntersectionNodes=function(t){for(var e=this._edges.iterator();e.hasNext();)for(var n=e.next(),i=n.getLabel().getLocation(t),r=n.eiList.iterator();r.hasNext();){var o=r.next();this.addSelfIntersectionNode(t,o.coord,i)}},e.prototype.add=function(){if(1!==arguments.length)return t.prototype.add.apply(this,arguments);var e=arguments[0];if(e.isEmpty())return null;if(e instanceof ne&&(this._useBoundaryDeterminationRule=!1),e instanceof $t)this.addPolygon(e);else if(e instanceof Kt)this.addLineString(e);else if(e instanceof Qt)this.addPoint(e);else if(e instanceof te)this.addCollection(e);else if(e instanceof Xt)this.addCollection(e);else if(e instanceof ne)this.addCollection(e);else{if(!(e instanceof zt))throw new Error(e.getClass().getName());this.addCollection(e)}},e.prototype.addCollection=function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},e.prototype.locate=function(t){return O(this._parentGeom,Zt)&&this._parentGeom.getNumGeometries()>50?(null===this._areaPtLocator&&(this._areaPtLocator=new vr(this._parentGeom)),this._areaPtLocator.locate(t)):this._ptLocator.locate(t,this._parentGeom)},e.prototype.findEdge=function(){if(1===arguments.length){var e=arguments[0];return this._lineEdgeMap.get(e)}return t.prototype.findEdge.apply(this,arguments)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.determineBoundary=function(t,e){return t.isInBoundary(e)?b.BOUNDARY:b.INTERIOR},e}(Ye),Cr=function(){if(this._li=new it,this._resultPrecisionModel=null,this._arg=null,1===arguments.length){var t=arguments[0];this.setComputationPrecision(t.getPrecisionModel()),this._arg=new Array(1).fill(null),this._arg[0]=new Nr(0,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=ft.OGC_SFS_BOUNDARY_RULE;e.getPrecisionModel().compareTo(n.getPrecisionModel())>=0?this.setComputationPrecision(e.getPrecisionModel()):this.setComputationPrecision(n.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new Nr(0,e,i),this._arg[1]=new Nr(1,n,i)}else if(3===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2];r.getPrecisionModel().compareTo(o.getPrecisionModel())>=0?this.setComputationPrecision(r.getPrecisionModel()):this.setComputationPrecision(o.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new Nr(0,r,s),this._arg[1]=new Nr(1,o,s)}};Cr.prototype.getArgGeometry=function(t){return this._arg[t].getGeometry()},Cr.prototype.setComputationPrecision=function(t){this._resultPrecisionModel=t,this._li.setPrecisionModel(this._resultPrecisionModel)},Cr.prototype.interfaces_=function(){return[]},Cr.prototype.getClass=function(){return Cr};var Sr=function(){};Sr.prototype.interfaces_=function(){return[]},Sr.prototype.getClass=function(){return Sr},Sr.map=function(){if(arguments[0]instanceof lt&&O(arguments[1],Sr.MapOp)){for(var t=arguments[0],e=arguments[1],n=new Nt,i=0;i<t.getNumGeometries();i++){var r=e.map(t.getGeometryN(i));null!==r&&n.add(r)}return t.getFactory().buildGeometry(n)}if(O(arguments[0],vt)&&O(arguments[1],Sr.MapOp)){for(var o=arguments[0],s=arguments[1],a=new Nt,u=o.iterator();u.hasNext();){var l=u.next(),c=s.map(l);null!==c&&a.add(c)}return a}},Sr.MapOp=function(){};var Lr=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n),this._ptLocator=new Si,this._geomFact=null,this._resultGeom=null,this._graph=null,this._edgeList=new Hn,this._resultPolyList=new Nt,this._resultLineList=new Nt,this._resultPointList=new Nt,this._graph=new Ye(new kn),this._geomFact=e.getFactory()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.insertUniqueEdge=function(t){var e=this._edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),i=t.getLabel();e.isPointwiseEqual(t)||(i=new Pe(t.getLabel())).flip();var r=e.getDepth();r.isNull()&&r.add(n),r.add(i),n.merge(i)}else this._edgeList.add(t)},e.prototype.getGraph=function(){return this._graph},e.prototype.cancelDuplicateResultEdges=function(){for(var t=this._graph.getEdgeEnds().iterator();t.hasNext();){var e=t.next(),n=e.getSym();e.isInResult()&&n.isInResult()&&(e.setInResult(!1),n.setInResult(!1))}},e.prototype.isCoveredByLA=function(t){return!!this.isCovered(t,this._resultLineList)||!!this.isCovered(t,this._resultPolyList)},e.prototype.computeGeometry=function(t,n,i,r){var o=new Nt;return o.addAll(t),o.addAll(n),o.addAll(i),o.isEmpty()?e.createEmptyResult(r,this._arg[0].getGeometry(),this._arg[1].getGeometry(),this._geomFact):this._geomFact.buildGeometry(o)},e.prototype.mergeSymLabels=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){t.next().getEdges().mergeSymLabels()}},e.prototype.isCovered=function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();if(this._ptLocator.locate(t,i)!==b.EXTERIOR)return!0}return!1},e.prototype.replaceCollapsedEdges=function(){for(var t=new Nt,e=this._edgeList.iterator();e.hasNext();){var n=e.next();n.isCollapsed()&&(e.remove(),t.add(n.getCollapsedEdge()))}this._edgeList.addAll(t)},e.prototype.updateNodeLabelling=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getEdges().getLabel();e.getLabel().merge(n)}},e.prototype.getResultGeometry=function(t){return this.computeOverlay(t),this._resultGeom},e.prototype.insertUniqueEdges=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertUniqueEdge(n)}},e.prototype.computeOverlay=function(t){this.copyPoints(0),this.copyPoints(1),this._arg[0].computeSelfNodes(this._li,!1),this._arg[1].computeSelfNodes(this._li,!1),this._arg[0].computeEdgeIntersections(this._arg[1],this._li,!0);var e=new Nt;this._arg[0].computeSplitEdges(e),this._arg[1].computeSplitEdges(e),this.insertUniqueEdges(e),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),Yi.checkValid(this._edgeList.getEdges()),this._graph.addEdges(this._edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(t),this.cancelDuplicateResultEdges();var n=new ke(this._geomFact);n.add(this._graph),this._resultPolyList=n.getPolygons();var i=new ji(this,this._geomFact,this._ptLocator);this._resultLineList=i.build(t);var r=new Hi(this,this._geomFact,this._ptLocator);this._resultPointList=r.build(t),this._resultGeom=this.computeGeometry(this._resultPointList,this._resultLineList,this._resultPolyList,t)},e.prototype.labelIncompleteNode=function(t,e){var n=this._ptLocator.locate(t.getCoordinate(),this._arg[e].getGeometry());t.getLabel().setLocation(e,n)},e.prototype.copyPoints=function(t){for(var e=this._arg[t].getNodeIterator();e.hasNext();){var n=e.next();this._graph.addNode(n.getCoordinate()).setLabel(t,n.getLabel().getLocation(t))}},e.prototype.findResultAreaEdges=function(t){for(var n=this._graph.getEdgeEnds().iterator();n.hasNext();){var i=n.next(),r=i.getLabel();r.isArea()&&!i.isInteriorAreaEdge()&&e.isResultOfOp(r.getLocation(0,Se.RIGHT),r.getLocation(1,Se.RIGHT),t)&&i.setInResult(!0)}},e.prototype.computeLabelsFromDepths=function(){for(var t=this._edgeList.iterator();t.hasNext();){var e=t.next(),n=e.getLabel(),i=e.getDepth();if(!i.isNull()){i.normalize();for(var r=0;r<2;r++)n.isNull(r)||!n.isArea()||i.isNull(r)||(0===i.getDelta(r)?n.toLine(r):(tt.isTrue(!i.isNull(r,Se.LEFT),\"depth of LEFT side has not been initialized\"),n.setLocation(r,Se.LEFT,i.getLocation(r,Se.LEFT)),tt.isTrue(!i.isNull(r,Se.RIGHT),\"depth of RIGHT side has not been initialized\"),n.setLocation(r,Se.RIGHT,i.getLocation(r,Se.RIGHT))))}}},e.prototype.computeLabelling=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){t.next().getEdges().computeLabelling(this._arg)}this.mergeSymLabels(),this.updateNodeLabelling()},e.prototype.labelIncompleteNodes=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getLabel();e.isIsolated()&&(n.isNull(0)?this.labelIncompleteNode(e,0):this.labelIncompleteNode(e,1)),e.getEdges().updateLabelling(n)}},e.prototype.isCoveredByA=function(t){return!!this.isCovered(t,this._resultPolyList)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Cr);Lr.overlayOp=function(t,e,n){return new Lr(t,e).getResultGeometry(n)},Lr.intersection=function(t,e){if(t.isEmpty()||e.isEmpty())return Lr.createEmptyResult(Lr.INTERSECTION,t,e,t.getFactory());if(t.isGeometryCollection()){var n=e;return ki.map(t,{interfaces_:function(){return[Sr.MapOp]},map:function(t){return t.intersection(n)}})}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),or.overlayOp(t,e,Lr.INTERSECTION)},Lr.symDifference=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return Lr.createEmptyResult(Lr.SYMDIFFERENCE,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),or.overlayOp(t,e,Lr.SYMDIFFERENCE)},Lr.resultDimension=function(t,e,n){var i=e.getDimension(),r=n.getDimension(),o=-1;switch(t){case Lr.INTERSECTION:o=Math.min(i,r);break;case Lr.UNION:o=Math.max(i,r);break;case Lr.DIFFERENCE:o=i;break;case Lr.SYMDIFFERENCE:o=Math.max(i,r)}return o},Lr.createEmptyResult=function(t,e,n,i){var r=null;switch(Lr.resultDimension(t,e,n)){case-1:r=i.createGeometryCollection(new Array(0).fill(null));break;case 0:r=i.createPoint();break;case 1:r=i.createLineString();break;case 2:r=i.createPolygon()}return r},Lr.difference=function(t,e){return t.isEmpty()?Lr.createEmptyResult(Lr.DIFFERENCE,t,e,t.getFactory()):e.isEmpty()?t.copy():(t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),or.overlayOp(t,e,Lr.DIFFERENCE))},Lr.isResultOfOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=t.getLocation(0),i=t.getLocation(1);return Lr.isResultOfOp(n,i,e)}if(3===arguments.length){var r=arguments[0],o=arguments[1],s=arguments[2];switch(r===b.BOUNDARY&&(r=b.INTERIOR),o===b.BOUNDARY&&(o=b.INTERIOR),s){case Lr.INTERSECTION:return r===b.INTERIOR&&o===b.INTERIOR;case Lr.UNION:return r===b.INTERIOR||o===b.INTERIOR;case Lr.DIFFERENCE:return r===b.INTERIOR&&o!==b.INTERIOR;case Lr.SYMDIFFERENCE:return r===b.INTERIOR&&o!==b.INTERIOR||r!==b.INTERIOR&&o===b.INTERIOR}return!1}},Lr.INTERSECTION=1,Lr.UNION=2,Lr.DIFFERENCE=3,Lr.SYMDIFFERENCE=4;var br=function(){this._g=null,this._boundaryDistanceTolerance=null,this._linework=null,this._ptLocator=new Si,this._seg=new dn;var t=arguments[0],e=arguments[1];this._g=t,this._boundaryDistanceTolerance=e,this._linework=this.extractLinework(t)};br.prototype.isWithinToleranceOfBoundary=function(t){for(var e=0;e<this._linework.getNumGeometries();e++)for(var n=this._linework.getGeometryN(e).getCoordinateSequence(),i=0;i<n.size()-1;i++){n.getCoordinate(i,this._seg.p0),n.getCoordinate(i+1,this._seg.p1);if(this._seg.distance(t)<=this._boundaryDistanceTolerance)return!0}return!1},br.prototype.getLocation=function(t){return this.isWithinToleranceOfBoundary(t)?b.BOUNDARY:this._ptLocator.locate(t,this._g)},br.prototype.extractLinework=function(t){var e=new wr;t.apply(e);var n=e.getLinework(),i=_e.toLineStringArray(n);return t.getFactory().createMultiLineString(i)},br.prototype.interfaces_=function(){return[]},br.prototype.getClass=function(){return br};var wr=function(){this._linework=null,this._linework=new Nt};wr.prototype.getLinework=function(){return this._linework},wr.prototype.filter=function(t){if(t instanceof $t){var e=t;this._linework.add(e.getExteriorRing());for(var n=0;n<e.getNumInteriorRing();n++)this._linework.add(e.getInteriorRingN(n))}},wr.prototype.interfaces_=function(){return[Vt]},wr.prototype.getClass=function(){return wr};var Or=function(){this._g=null,this._doLeft=!0,this._doRight=!0;var t=arguments[0];this._g=t};Or.prototype.extractPoints=function(t,e,n){for(var i=t.getCoordinates(),r=0;r<i.length-1;r++)this.computeOffsetPoints(i[r],i[r+1],e,n)},Or.prototype.setSidesToGenerate=function(t,e){this._doLeft=t,this._doRight=e},Or.prototype.getPoints=function(t){for(var e=new Nt,n=Ci.getLines(this._g).iterator();n.hasNext();){var i=n.next();this.extractPoints(i,t,e)}return e},Or.prototype.computeOffsetPoints=function(t,e,n,i){var r=e.x-t.x,o=e.y-t.y,s=Math.sqrt(r*r+o*o),a=n*r/s,u=n*o/s,l=(e.x+t.x)/2,c=(e.y+t.y)/2;if(this._doLeft){var p=new N(l-u,c+a);i.add(p)}if(this._doRight){var h=new N(l+u,c-a);i.add(h)}},Or.prototype.interfaces_=function(){return[]},Or.prototype.getClass=function(){return Or};var Tr=function t(){this._geom=null,this._locFinder=null,this._location=new Array(3).fill(null),this._invalidLocation=null,this._boundaryDistanceTolerance=t.TOLERANCE,this._testCoords=new Nt;var e=arguments[0],n=arguments[1],i=arguments[2];this._boundaryDistanceTolerance=t.computeBoundaryDistanceTolerance(e,n),this._geom=[e,n,i],this._locFinder=[new br(this._geom[0],this._boundaryDistanceTolerance),new br(this._geom[1],this._boundaryDistanceTolerance),new br(this._geom[2],this._boundaryDistanceTolerance)]},Rr={TOLERANCE:{configurable:!0}};Tr.prototype.reportResult=function(t,e,n){X.out.println(\"Overlay result invalid - A:\"+b.toLocationSymbol(e[0])+\" B:\"+b.toLocationSymbol(e[1])+\" expected:\"+(n?\"i\":\"e\")+\" actual:\"+b.toLocationSymbol(e[2]))},Tr.prototype.isValid=function(t){this.addTestPts(this._geom[0]),this.addTestPts(this._geom[1]);var e=this.checkValid(t);return e},Tr.prototype.checkValid=function(){if(1===arguments.length){for(var t=arguments[0],e=0;e<this._testCoords.size();e++){var n=this._testCoords.get(e);if(!this.checkValid(t,n))return this._invalidLocation=n,!1}return!0}if(2===arguments.length){var i=arguments[0],r=arguments[1];return this._location[0]=this._locFinder[0].getLocation(r),this._location[1]=this._locFinder[1].getLocation(r),this._location[2]=this._locFinder[2].getLocation(r),!!Tr.hasLocation(this._location,b.BOUNDARY)||this.isValidResult(i,this._location)}},Tr.prototype.addTestPts=function(t){var e=new Or(t);this._testCoords.addAll(e.getPoints(5*this._boundaryDistanceTolerance))},Tr.prototype.isValidResult=function(t,e){var n=Lr.isResultOfOp(e[0],e[1],t),i=!(n^e[2]===b.INTERIOR);return i||this.reportResult(t,e,n),i},Tr.prototype.getInvalidLocation=function(){return this._invalidLocation},Tr.prototype.interfaces_=function(){return[]},Tr.prototype.getClass=function(){return Tr},Tr.hasLocation=function(t,e){for(var n=0;n<3;n++)if(t[n]===e)return!0;return!1},Tr.computeBoundaryDistanceTolerance=function(t,e){return Math.min(Ji.computeSizeBasedSnapTolerance(t),Ji.computeSizeBasedSnapTolerance(e))},Tr.isValid=function(t,e,n,i){return new Tr(t,e,i).isValid(n)},Rr.TOLERANCE.get=function(){return 1e-6},Object.defineProperties(Tr,Rr);var Pr=function t(e){this._geomFactory=null,this._skipEmpty=!1,this._inputGeoms=null,this._geomFactory=t.extractFactory(e),this._inputGeoms=e};Pr.prototype.extractElements=function(t,e){if(null===t)return null;for(var n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n);this._skipEmpty&&i.isEmpty()||e.add(i)}},Pr.prototype.combine=function(){for(var t=new Nt,e=this._inputGeoms.iterator();e.hasNext();){var n=e.next();this.extractElements(n,t)}return 0===t.size()?null!==this._geomFactory?this._geomFactory.createGeometryCollection(null):null:this._geomFactory.buildGeometry(t)},Pr.prototype.interfaces_=function(){return[]},Pr.prototype.getClass=function(){return Pr},Pr.combine=function(){if(1===arguments.length){var t=arguments[0];return new Pr(t).combine()}if(2===arguments.length){var e=arguments[0],n=arguments[1];return new Pr(Pr.createList(e,n)).combine()}if(3===arguments.length){var i=arguments[0],r=arguments[1],o=arguments[2];return new Pr(Pr.createList(i,r,o)).combine()}},Pr.extractFactory=function(t){return t.isEmpty()?null:t.iterator().next().getFactory()},Pr.createList=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new Nt;return n.add(t),n.add(e),n}if(3===arguments.length){var i=arguments[0],r=arguments[1],o=arguments[2],s=new Nt;return s.add(i),s.add(r),s.add(o),s}};var Dr=function(){this._inputPolys=null,this._geomFactory=null;var t=arguments[0];this._inputPolys=t,null===this._inputPolys&&(this._inputPolys=new Nt)},Mr={STRTREE_NODE_CAPACITY:{configurable:!0}};Dr.prototype.reduceToGeometries=function(t){for(var e=new Nt,n=t.iterator();n.hasNext();){var i=n.next(),r=null;O(i,xt)?r=this.unionTree(i):i instanceof lt&&(r=i),e.add(r)}return e},Dr.prototype.extractByEnvelope=function(t,e,n){for(var i=new Nt,r=0;r<e.getNumGeometries();r++){var o=e.getGeometryN(r);o.getEnvelopeInternal().intersects(t)?i.add(o):n.add(o)}return this._geomFactory.buildGeometry(i)},Dr.prototype.unionOptimized=function(t,e){var n=t.getEnvelopeInternal(),i=e.getEnvelopeInternal();if(!n.intersects(i)){return Pr.combine(t,e)}if(t.getNumGeometries()<=1&&e.getNumGeometries()<=1)return this.unionActual(t,e);var r=n.intersection(i);return this.unionUsingEnvelopeIntersection(t,e,r)},Dr.prototype.union=function(){if(null===this._inputPolys)throw new Error(\"union() method cannot be called twice\");if(this._inputPolys.isEmpty())return null;this._geomFactory=this._inputPolys.iterator().next().getFactory();for(var t=new sn(Dr.STRTREE_NODE_CAPACITY),e=this._inputPolys.iterator();e.hasNext();){var n=e.next();t.insert(n.getEnvelopeInternal(),n)}this._inputPolys=null;var i=t.itemsTree();return this.unionTree(i)},Dr.prototype.binaryUnion=function(){if(1===arguments.length){var t=arguments[0];return this.binaryUnion(t,0,t.size())}if(3===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2];if(i-n<=1){var r=Dr.getGeometry(e,n);return this.unionSafe(r,null)}if(i-n==2)return this.unionSafe(Dr.getGeometry(e,n),Dr.getGeometry(e,n+1));var o=Math.trunc((i+n)/2),s=this.binaryUnion(e,n,o),a=this.binaryUnion(e,o,i);return this.unionSafe(s,a)}},Dr.prototype.repeatedUnion=function(t){for(var e=null,n=t.iterator();n.hasNext();){var i=n.next();e=null===e?i.copy():e.union(i)}return e},Dr.prototype.unionSafe=function(t,e){return null===t&&null===e?null:null===t?e.copy():null===e?t.copy():this.unionOptimized(t,e)},Dr.prototype.unionActual=function(t,e){return Dr.restrictToPolygons(t.union(e))},Dr.prototype.unionTree=function(t){var e=this.reduceToGeometries(t);return this.binaryUnion(e)},Dr.prototype.unionUsingEnvelopeIntersection=function(t,e,n){var i=new Nt,r=this.extractByEnvelope(n,t,i),o=this.extractByEnvelope(n,e,i),s=this.unionActual(r,o);i.add(s);return Pr.combine(i)},Dr.prototype.bufferUnion=function(){if(1===arguments.length){var t=arguments[0];return t.get(0).getFactory().buildGeometry(t).buffer(0)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e.getFactory().createGeometryCollection([e,n]).buffer(0)}},Dr.prototype.interfaces_=function(){return[]},Dr.prototype.getClass=function(){return Dr},Dr.restrictToPolygons=function(t){if(O(t,Zt))return t;var e=Ni.getPolygons(t);return 1===e.size()?e.get(0):t.getFactory().createMultiPolygon(_e.toPolygonArray(e))},Dr.getGeometry=function(t,e){return e>=t.size()?null:t.get(e)},Dr.union=function(t){return new Dr(t).union()},Mr.STRTREE_NODE_CAPACITY.get=function(){return 4},Object.defineProperties(Dr,Mr);var Ar=function(){};Ar.prototype.interfaces_=function(){return[]},Ar.prototype.getClass=function(){return Ar},Ar.union=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return Lr.createEmptyResult(Lr.UNION,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),or.overlayOp(t,e,Lr.UNION)},t.GeoJSONReader=Ne,t.GeoJSONWriter=Ce,t.OverlayOp=Lr,t.UnionOp=Ar,t.BufferOp=di,Object.defineProperty(t,\"__esModule\",{value:!0})});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90dXJmLWpzdHMvanN0cy5taW4uanM/ZTlmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9lKGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSxlKTplKHQuanN0cz17fSl9KHRoaXMsZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZSgpe31mdW5jdGlvbiBuKHQpe3RoaXMubWVzc2FnZT10fHxcIlwifWZ1bmN0aW9uIGkodCl7dGhpcy5tZXNzYWdlPXR8fFwiXCJ9ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBvKHQpe3JldHVybiBudWxsPT09dD9NdDp0LmNvbG9yfWZ1bmN0aW9uIHModCl7cmV0dXJuIG51bGw9PT10P251bGw6dC5wYXJlbnR9ZnVuY3Rpb24gYSh0LGUpe251bGwhPT10JiYodC5jb2xvcj1lKX1mdW5jdGlvbiB1KHQpe3JldHVybiBudWxsPT09dD9udWxsOnQubGVmdH1mdW5jdGlvbiBsKHQpe3JldHVybiBudWxsPT09dD9udWxsOnQucmlnaHR9ZnVuY3Rpb24gYygpe3RoaXMucm9vdF89bnVsbCx0aGlzLnNpemVfPTB9ZnVuY3Rpb24gcCgpe31mdW5jdGlvbiBoKCl7dGhpcy5hcnJheV89W10sYXJndW1lbnRzWzBdaW5zdGFuY2VvZiB2dCYmdGhpcy5hZGRBbGwoYXJndW1lbnRzWzBdKX1mdW5jdGlvbiBmKCl7fWZ1bmN0aW9uIGcodCl7dGhpcy5tZXNzYWdlPXR8fFwiXCJ9ZnVuY3Rpb24gZCgpe3RoaXMuYXJyYXlfPVtdfVwiZmlsbFwiaW4gQXJyYXkucHJvdG90eXBlfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLFwiZmlsbFwiLHtjb25maWd1cmFibGU6ITAsdmFsdWU6ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dGhpc3x8bnVsbD09PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzK1wiIGlzIG5vdCBhbiBvYmplY3RcIik7dmFyIGU9T2JqZWN0KHRoaXMpLG49TWF0aC5tYXgoTWF0aC5taW4oZS5sZW5ndGgsOTAwNzE5OTI1NDc0MDk5MSksMCl8fDAsaT0xIGluIGFyZ3VtZW50cz9wYXJzZUludChOdW1iZXIoYXJndW1lbnRzWzFdKSwxMCl8fDA6MDtpPWk8MD9NYXRoLm1heChuK2ksMCk6TWF0aC5taW4oaSxuKTt2YXIgcj0yIGluIGFyZ3VtZW50cyYmdm9pZCAwIT09YXJndW1lbnRzWzJdP3BhcnNlSW50KE51bWJlcihhcmd1bWVudHNbMl0pLDEwKXx8MDpuO2ZvcihyPXI8MD9NYXRoLm1heChuK2FyZ3VtZW50c1syXSwwKTpNYXRoLm1pbihyLG4pO2k8cjspZVtpXT10LCsraTtyZXR1cm4gZX0sd3JpdGFibGU6ITB9KSxOdW1iZXIuaXNGaW5pdGU9TnVtYmVyLmlzRmluaXRlfHxmdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmaXNGaW5pdGUodCl9LE51bWJlci5pc0ludGVnZXI9TnVtYmVyLmlzSW50ZWdlcnx8ZnVuY3Rpb24odCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQmJmlzRmluaXRlKHQpJiZNYXRoLmZsb29yKHQpPT09dH0sTnVtYmVyLnBhcnNlRmxvYXQ9TnVtYmVyLnBhcnNlRmxvYXR8fHBhcnNlRmxvYXQsTnVtYmVyLmlzTmFOPU51bWJlci5pc05hTnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQhPXR9LE1hdGgudHJ1bmM9TWF0aC50cnVuY3x8ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCk6TWF0aC5mbG9vcih0KX07dmFyIHk9ZnVuY3Rpb24oKXt9O3kucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHkucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHl9LHkucHJvdG90eXBlLmVxdWFsc1dpdGhUb2xlcmFuY2U9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBNYXRoLmFicyh0LWUpPD1ufTt2YXIgXz1mdW5jdGlvbigpe30sbT1mdW5jdGlvbigpe30sdj17TUFYX1ZBTFVFOntjb25maWd1cmFibGU6ITB9fTttLmlzTmFOPWZ1bmN0aW9uKHQpe3JldHVybiBOdW1iZXIuaXNOYU4odCl9LG0uZG91YmxlVG9Mb25nQml0cz1mdW5jdGlvbih0KXtyZXR1cm4gdH0sbS5sb25nQml0c1RvRG91YmxlPWZ1bmN0aW9uKHQpe3JldHVybiB0fSxtLmlzSW5maW5pdGU9ZnVuY3Rpb24odCl7cmV0dXJuIU51bWJlci5pc0Zpbml0ZSh0KX0sdi5NQVhfVkFMVUUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIE51bWJlci5NQVhfVkFMVUV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG0sdik7dmFyIEk9ZnVuY3Rpb24oKXt9LEU9ZnVuY3Rpb24oKXt9LHg9ZnVuY3Rpb24oKXt9LE49ZnVuY3Rpb24gdCgpe2lmKHRoaXMueD1udWxsLHRoaXMueT1udWxsLHRoaXMuej1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKXRoaXMueD0wLHRoaXMueT0wLHRoaXMuej10Lk5VTExfT1JESU5BVEU7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMueD1lLngsdGhpcy55PWUueSx0aGlzLno9ZS56fWVsc2UgMj09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMueD1hcmd1bWVudHNbMF0sdGhpcy55PWFyZ3VtZW50c1sxXSx0aGlzLno9dC5OVUxMX09SRElOQVRFKTozPT09YXJndW1lbnRzLmxlbmd0aCYmKHRoaXMueD1hcmd1bWVudHNbMF0sdGhpcy55PWFyZ3VtZW50c1sxXSx0aGlzLno9YXJndW1lbnRzWzJdKX0sQz17RGltZW5zaW9uYWxDb21wYXJhdG9yOntjb25maWd1cmFibGU6ITB9LHNlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH0sTlVMTF9PUkRJTkFURTp7Y29uZmlndXJhYmxlOiEwfSxYOntjb25maWd1cmFibGU6ITB9LFk6e2NvbmZpZ3VyYWJsZTohMH0sWjp7Y29uZmlndXJhYmxlOiEwfX07Ti5wcm90b3R5cGUuc2V0T3JkaW5hdGU9ZnVuY3Rpb24odCxlKXtzd2l0Y2godCl7Y2FzZSBOLlg6dGhpcy54PWU7YnJlYWs7Y2FzZSBOLlk6dGhpcy55PWU7YnJlYWs7Y2FzZSBOLlo6dGhpcy56PWU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgXyhcIkludmFsaWQgb3JkaW5hdGUgaW5kZXg6IFwiK3QpfX0sTi5wcm90b3R5cGUuZXF1YWxzMkQ9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLng9PT10LngmJnRoaXMueT09PXQueX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3JldHVybiEheS5lcXVhbHNXaXRoVG9sZXJhbmNlKHRoaXMueCxlLngsbikmJiEheS5lcXVhbHNXaXRoVG9sZXJhbmNlKHRoaXMueSxlLnksbil9fSxOLnByb3RvdHlwZS5nZXRPcmRpbmF0ZT1mdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZSBOLlg6cmV0dXJuIHRoaXMueDtjYXNlIE4uWTpyZXR1cm4gdGhpcy55O2Nhc2UgTi5aOnJldHVybiB0aGlzLnp9dGhyb3cgbmV3IF8oXCJJbnZhbGlkIG9yZGluYXRlIGluZGV4OiBcIit0KX0sTi5wcm90b3R5cGUuZXF1YWxzM0Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMueD09PXQueCYmdGhpcy55PT09dC55JiYodGhpcy56PT09dC56fHxtLmlzTmFOKHRoaXMueikpJiZtLmlzTmFOKHQueil9LE4ucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIE4mJnRoaXMuZXF1YWxzMkQodCl9LE4ucHJvdG90eXBlLmVxdWFsSW5aPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHkuZXF1YWxzV2l0aFRvbGVyYW5jZSh0aGlzLnosdC56LGUpfSxOLnByb3RvdHlwZS5jb21wYXJlVG89ZnVuY3Rpb24odCl7dmFyIGU9dDtyZXR1cm4gdGhpcy54PGUueD8tMTp0aGlzLng+ZS54PzE6dGhpcy55PGUueT8tMTp0aGlzLnk+ZS55PzE6MH0sTi5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt9LE4ucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IE4odGhpcyl9LE4ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIoXCIrdGhpcy54K1wiLCBcIit0aGlzLnkrXCIsIFwiK3RoaXMueitcIilcIn0sTi5wcm90b3R5cGUuZGlzdGFuY2UzRD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLngtdC54LG49dGhpcy55LXQueSxpPXRoaXMuei10Lno7cmV0dXJuIE1hdGguc3FydChlKmUrbipuK2kqaSl9LE4ucHJvdG90eXBlLmRpc3RhbmNlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMueC10Lngsbj10aGlzLnktdC55O3JldHVybiBNYXRoLnNxcnQoZSplK24qbil9LE4ucHJvdG90eXBlLmhhc2hDb2RlPWZ1bmN0aW9uKCl7dmFyIHQ9MTc7cmV0dXJuIHQ9MzcqdCtOLmhhc2hDb2RlKHRoaXMueCksdD0zNyp0K04uaGFzaENvZGUodGhpcy55KX0sTi5wcm90b3R5cGUuc2V0Q29vcmRpbmF0ZT1mdW5jdGlvbih0KXt0aGlzLng9dC54LHRoaXMueT10LnksdGhpcy56PXQuen0sTi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bSSxFLGVdfSxOLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBOfSxOLmhhc2hDb2RlPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPW0uZG91YmxlVG9Mb25nQml0cyh0KTtyZXR1cm4gTWF0aC50cnVuYygoZV5lKT4+PjMyKX19LEMuRGltZW5zaW9uYWxDb21wYXJhdG9yLmdldD1mdW5jdGlvbigpe3JldHVybiBTfSxDLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB4NWNiZjJjMjM1YzdlNTgwMH0sQy5OVUxMX09SRElOQVRFLmdldD1mdW5jdGlvbigpe3JldHVybiBtLk5hTn0sQy5YLmdldD1mdW5jdGlvbigpe3JldHVybiAwfSxDLlkuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDF9LEMuWi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTixDKTt2YXIgUz1mdW5jdGlvbih0KXtpZih0aGlzLl9kaW1lbnNpb25zVG9UZXN0PTIsMD09PWFyZ3VtZW50cy5sZW5ndGgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXTtpZigyIT09ZSYmMyE9PWUpdGhyb3cgbmV3IF8oXCJvbmx5IDIgb3IgMyBkaW1lbnNpb25zIG1heSBiZSBzcGVjaWZpZWRcIik7dGhpcy5fZGltZW5zaW9uc1RvVGVzdD1lfX07Uy5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbih0LGUpe3ZhciBuPXQsaT1lLHI9Uy5jb21wYXJlKG4ueCxpLngpO2lmKDAhPT1yKXJldHVybiByO3ZhciBvPVMuY29tcGFyZShuLnksaS55KTtpZigwIT09bylyZXR1cm4gbztpZih0aGlzLl9kaW1lbnNpb25zVG9UZXN0PD0yKXJldHVybiAwO3JldHVybiBTLmNvbXBhcmUobi56LGkueil9LFMucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW3hdfSxTLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBTfSxTLmNvbXBhcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdDxlPy0xOnQ+ZT8xOm0uaXNOYU4odCk/bS5pc05hTihlKT8wOi0xOm0uaXNOYU4oZSk/MTowfTt2YXIgTD1mdW5jdGlvbigpe307TC5wcm90b3R5cGUuY3JlYXRlPWZ1bmN0aW9uKCl7fSxMLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxMLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBMfTt2YXIgYj1mdW5jdGlvbigpe30sdz17SU5URVJJT1I6e2NvbmZpZ3VyYWJsZTohMH0sQk9VTkRBUlk6e2NvbmZpZ3VyYWJsZTohMH0sRVhURVJJT1I6e2NvbmZpZ3VyYWJsZTohMH0sTk9ORTp7Y29uZmlndXJhYmxlOiEwfX07Yi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sYi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gYn0sYi50b0xvY2F0aW9uU3ltYm9sPWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlIGIuRVhURVJJT1I6cmV0dXJuXCJlXCI7Y2FzZSBiLkJPVU5EQVJZOnJldHVyblwiYlwiO2Nhc2UgYi5JTlRFUklPUjpyZXR1cm5cImlcIjtjYXNlIGIuTk9ORTpyZXR1cm5cIi1cIn10aHJvdyBuZXcgXyhcIlVua25vd24gbG9jYXRpb24gdmFsdWU6IFwiK3QpfSx3LklOVEVSSU9SLmdldD1mdW5jdGlvbigpe3JldHVybiAwfSx3LkJPVU5EQVJZLmdldD1mdW5jdGlvbigpe3JldHVybiAxfSx3LkVYVEVSSU9SLmdldD1mdW5jdGlvbigpe3JldHVybiAyfSx3Lk5PTkUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLTF9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGIsdyk7dmFyIE89ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5pbnRlcmZhY2VzXyYmdC5pbnRlcmZhY2VzXygpLmluZGV4T2YoZSk+LTF9LFQ9ZnVuY3Rpb24oKXt9LFI9e0xPR18xMDp7Y29uZmlndXJhYmxlOiEwfX07VC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sVC5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gVH0sVC5sb2cxMD1mdW5jdGlvbih0KXt2YXIgZT1NYXRoLmxvZyh0KTtyZXR1cm4gbS5pc0luZmluaXRlKGUpP2U6bS5pc05hTihlKT9lOmUvVC5MT0dfMTB9LFQubWluPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXQ7cmV0dXJuIGU8ciYmKHI9ZSksbjxyJiYocj1uKSxpPHImJihyPWkpLHJ9LFQuY2xhbXA9ZnVuY3Rpb24oKXtpZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzJdJiZcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdJiZcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07cmV0dXJuIHQ8ZT9lOnQ+bj9uOnR9aWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMl0pJiZOdW1iZXIuaXNJbnRlZ2VyKGFyZ3VtZW50c1swXSkmJk51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzFdKSl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdLG89YXJndW1lbnRzWzJdO3JldHVybiBpPHI/cjppPm8/bzppfX0sVC53cmFwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ8MD9lLSAtdCVlOnQlZX0sVC5tYXg9ZnVuY3Rpb24oKXtpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdLGk9dDtyZXR1cm4gZT5pJiYoaT1lKSxuPmkmJihpPW4pLGl9aWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXSxhPWFyZ3VtZW50c1szXSx1PXI7cmV0dXJuIG8+dSYmKHU9bykscz51JiYodT1zKSxhPnUmJih1PWEpLHV9fSxULmF2ZXJhZ2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4odCtlKS8yfSxSLkxPR18xMC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5sb2coMTApfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhULFIpO3ZhciBQPWZ1bmN0aW9uKHQpe3RoaXMuc3RyPXR9O1AucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbih0KXt0aGlzLnN0cis9dH0sUC5wcm90b3R5cGUuc2V0Q2hhckF0PWZ1bmN0aW9uKHQsZSl7dGhpcy5zdHI9dGhpcy5zdHIuc3Vic3RyKDAsdCkrZSt0aGlzLnN0ci5zdWJzdHIodCsxKX0sUC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RyfTt2YXIgRD1mdW5jdGlvbih0KXt0aGlzLnZhbHVlPXR9O0QucHJvdG90eXBlLmludFZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWV9LEQucHJvdG90eXBlLmNvbXBhcmVUbz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy52YWx1ZTx0Py0xOnRoaXMudmFsdWU+dD8xOjB9LEQuaXNOYU49ZnVuY3Rpb24odCl7cmV0dXJuIE51bWJlci5pc05hTih0KX07dmFyIE09ZnVuY3Rpb24oKXt9O00uaXNXaGl0ZXNwYWNlPWZ1bmN0aW9uKHQpe3JldHVybiB0PD0zMiYmdD49MHx8MTI3PT09dH0sTS50b1VwcGVyQ2FzZT1mdW5jdGlvbih0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfTt2YXIgQT1mdW5jdGlvbiB0KCl7aWYodGhpcy5faGk9MCx0aGlzLl9sbz0wLDA9PT1hcmd1bWVudHMubGVuZ3RoKXRoaXMuaW5pdCgwKTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5pbml0KGUpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiB0KXt2YXIgbj1hcmd1bWVudHNbMF07dGhpcy5pbml0KG4pfWVsc2UgaWYoXCJzdHJpbmdcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGk9YXJndW1lbnRzWzBdO3QuY2FsbCh0aGlzLHQucGFyc2UoaSkpfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0sbz1hcmd1bWVudHNbMV07dGhpcy5pbml0KHIsbyl9fSxGPXtQSTp7Y29uZmlndXJhYmxlOiEwfSxUV09fUEk6e2NvbmZpZ3VyYWJsZTohMH0sUElfMjp7Y29uZmlndXJhYmxlOiEwfSxFOntjb25maWd1cmFibGU6ITB9LE5hTjp7Y29uZmlndXJhYmxlOiEwfSxFUFM6e2NvbmZpZ3VyYWJsZTohMH0sU1BMSVQ6e2NvbmZpZ3VyYWJsZTohMH0sTUFYX1BSSU5UX0RJR0lUUzp7Y29uZmlndXJhYmxlOiEwfSxURU46e2NvbmZpZ3VyYWJsZTohMH0sT05FOntjb25maWd1cmFibGU6ITB9LFNDSV9OT1RfRVhQT05FTlRfQ0hBUjp7Y29uZmlndXJhYmxlOiEwfSxTQ0lfTk9UX1pFUk86e2NvbmZpZ3VyYWJsZTohMH19O0EucHJvdG90eXBlLmxlPWZ1bmN0aW9uKHQpe3JldHVybih0aGlzLl9oaTx0Ll9oaXx8dGhpcy5faGk9PT10Ll9oaSkmJnRoaXMuX2xvPD10Ll9sb30sQS5wcm90b3R5cGUuZXh0cmFjdFNpZ25pZmljYW50RGlnaXRzPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5hYnMoKSxpPUEubWFnbml0dWRlKG4uX2hpKSxyPUEuVEVOLnBvdyhpKTsobj1uLmRpdmlkZShyKSkuZ3QoQS5URU4pPyhuPW4uZGl2aWRlKEEuVEVOKSxpKz0xKTpuLmx0KEEuT05FKSYmKG49bi5tdWx0aXBseShBLlRFTiksaS09MSk7Zm9yKHZhciBvPWkrMSxzPW5ldyBQLGE9QS5NQVhfUFJJTlRfRElHSVRTLTEsdT0wO3U8PWE7dSsrKXt0JiZ1PT09byYmcy5hcHBlbmQoXCIuXCIpO3ZhciBsPU1hdGgudHJ1bmMobi5faGkpO2lmKGw8MClicmVhazt2YXIgYz0hMSxwPTA7bD45PyhjPSEwLHA9XCI5XCIpOnA9XCIwXCIrbCxzLmFwcGVuZChwKSxuPW4uc3VidHJhY3QoQS52YWx1ZU9mKGwpKS5tdWx0aXBseShBLlRFTiksYyYmbi5zZWxmQWRkKEEuVEVOKTt2YXIgaD0hMCxmPUEubWFnbml0dWRlKG4uX2hpKTtpZihmPDAmJk1hdGguYWJzKGYpPj1hLXUmJihoPSExKSwhaClicmVha31yZXR1cm4gZVswXT1pLHMudG9TdHJpbmcoKX0sQS5wcm90b3R5cGUuc3FyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubXVsdGlwbHkodGhpcyl9LEEucHJvdG90eXBlLmRvdWJsZVZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hpK3RoaXMuX2xvfSxBLnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQSl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmFkZCh0Lm5lZ2F0ZSgpKX1pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuYWRkKC1lKX19LEEucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuX2hpPT09dC5faGkmJnRoaXMuX2xvPT09dC5fbG99fSxBLnByb3RvdHlwZS5pc1plcm89ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX2hpJiYwPT09dGhpcy5fbG99LEEucHJvdG90eXBlLnNlbGZTdWJ0cmFjdD1mdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQSl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmlzTmFOKCk/dGhpczp0aGlzLnNlbGZBZGQoLXQuX2hpLC10Ll9sbyl9aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmlzTmFOKCk/dGhpczp0aGlzLnNlbGZBZGQoLWUsMCl9fSxBLnByb3RvdHlwZS5nZXRTcGVjaWFsTnVtYmVyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNaZXJvKCk/XCIwLjBcIjp0aGlzLmlzTmFOKCk/XCJOYU4gXCI6bnVsbH0sQS5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmxlKHQpP3RoaXM6dH0sQS5wcm90b3R5cGUuc2VsZkRpdmlkZT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEEpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5zZWxmRGl2aWRlKHQuX2hpLHQuX2xvKX1pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc2VsZkRpdmlkZShlLDApfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1udWxsLG89bnVsbCxzPW51bGwsYT1udWxsLHU9bnVsbCxsPW51bGwsYz1udWxsLHA9bnVsbDtyZXR1cm4gdT10aGlzLl9oaS9uLGw9QS5TUExJVCp1LHI9bC11LHA9QS5TUExJVCpuLHI9bC1yLG89dS1yLHM9cC1uLGM9dSpuLHM9cC1zLGE9bi1zLHA9cipzLWMrciphK28qcytvKmEsbD0odGhpcy5faGktYy1wK3RoaXMuX2xvLXUqaSkvbixwPXUrbCx0aGlzLl9oaT1wLHRoaXMuX2xvPXUtcCtsLHRoaXN9fSxBLnByb3RvdHlwZS5kdW1wPWZ1bmN0aW9uKCl7cmV0dXJuXCJERDxcIit0aGlzLl9oaStcIiwgXCIrdGhpcy5fbG8rXCI+XCJ9LEEucHJvdG90eXBlLmRpdmlkZT1mdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQSl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9bnVsbCxuPW51bGwsaT1udWxsLHI9bnVsbCxvPW51bGwscz1udWxsLGE9bnVsbCx1PW51bGw7bj0obz10aGlzLl9oaS90Ll9oaSktKGU9KHM9QS5TUExJVCpvKS0oZT1zLW8pKSx1PWUqKGk9KHU9QS5TUExJVCp0Ll9oaSktKGk9dS10Ll9oaSkpLShhPW8qdC5faGkpK2UqKHI9dC5faGktaSkrbippK24qcixzPSh0aGlzLl9oaS1hLXUrdGhpcy5fbG8tbyp0Ll9sbykvdC5faGk7cmV0dXJuIG5ldyBBKHU9bytzLG8tdStzKX1pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgbD1hcmd1bWVudHNbMF07cmV0dXJuIG0uaXNOYU4obCk/QS5jcmVhdGVOYU4oKTpBLmNvcHkodGhpcykuc2VsZkRpdmlkZShsLDApfX0sQS5wcm90b3R5cGUuZ2U9ZnVuY3Rpb24odCl7cmV0dXJuKHRoaXMuX2hpPnQuX2hpfHx0aGlzLl9oaT09PXQuX2hpKSYmdGhpcy5fbG8+PXQuX2xvfSxBLnByb3RvdHlwZS5wb3c9ZnVuY3Rpb24odCl7aWYoMD09PXQpcmV0dXJuIEEudmFsdWVPZigxKTt2YXIgZT1uZXcgQSh0aGlzKSxuPUEudmFsdWVPZigxKSxpPU1hdGguYWJzKHQpO2lmKGk+MSlmb3IoO2k+MDspaSUyPT0xJiZuLnNlbGZNdWx0aXBseShlKSwoaS89Mik+MCYmKGU9ZS5zcXIoKSk7ZWxzZSBuPWU7cmV0dXJuIHQ8MD9uLnJlY2lwcm9jYWwoKTpufSxBLnByb3RvdHlwZS5jZWlsPWZ1bmN0aW9uKCl7aWYodGhpcy5pc05hTigpKXJldHVybiBBLk5hTjt2YXIgdD1NYXRoLmNlaWwodGhpcy5faGkpLGU9MDtyZXR1cm4gdD09PXRoaXMuX2hpJiYoZT1NYXRoLmNlaWwodGhpcy5fbG8pKSxuZXcgQSh0LGUpfSxBLnByb3RvdHlwZS5jb21wYXJlVG89ZnVuY3Rpb24odCl7dmFyIGU9dDtyZXR1cm4gdGhpcy5faGk8ZS5faGk/LTE6dGhpcy5faGk+ZS5faGk/MTp0aGlzLl9sbzxlLl9sbz8tMTp0aGlzLl9sbz5lLl9sbz8xOjB9LEEucHJvdG90eXBlLnJpbnQ9ZnVuY3Rpb24oKXtpZih0aGlzLmlzTmFOKCkpcmV0dXJuIHRoaXM7cmV0dXJuIHRoaXMuYWRkKC41KS5mbG9vcigpfSxBLnByb3RvdHlwZS5zZXRWYWx1ZT1mdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQSl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmluaXQodCksdGhpc31pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuaW5pdChlKSx0aGlzfX0sQS5wcm90b3R5cGUubWF4PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdlKHQpP3RoaXM6dH0sQS5wcm90b3R5cGUuc3FydD1mdW5jdGlvbigpe2lmKHRoaXMuaXNaZXJvKCkpcmV0dXJuIEEudmFsdWVPZigwKTtpZih0aGlzLmlzTmVnYXRpdmUoKSlyZXR1cm4gQS5OYU47dmFyIHQ9MS9NYXRoLnNxcnQodGhpcy5faGkpLGU9dGhpcy5faGkqdCxuPUEudmFsdWVPZihlKSxpPXRoaXMuc3VidHJhY3Qobi5zcXIoKSkuX2hpKiguNSp0KTtyZXR1cm4gbi5hZGQoaSl9LEEucHJvdG90eXBlLnNlbGZBZGQ9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc2VsZkFkZCh0Ll9oaSx0Ll9sbyl9aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGU9YXJndW1lbnRzWzBdLG49bnVsbCxpPW51bGwscj1udWxsLG89bnVsbCxzPW51bGwsYT1udWxsO3JldHVybiByPXRoaXMuX2hpK2Uscz1yLXRoaXMuX2hpLG89ci1zLG89ZS1zKyh0aGlzLl9oaS1vKSxhPW8rdGhpcy5fbG8sbj1yK2EsaT1hKyhyLW4pLHRoaXMuX2hpPW4raSx0aGlzLl9sbz1pKyhuLXRoaXMuX2hpKSx0aGlzfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdT1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0sYz1udWxsLHA9bnVsbCxoPW51bGwsZj1udWxsLGc9bnVsbCxkPW51bGwseT1udWxsO2Y9dGhpcy5faGkrdSxwPXRoaXMuX2xvK2wsZz1mLShkPWYtdGhpcy5faGkpLGg9cC0oeT1wLXRoaXMuX2xvKTt2YXIgXz0oYz1mKyhkPShnPXUtZCsodGhpcy5faGktZykpK3ApKSsoZD0oaD1sLXkrKHRoaXMuX2xvLWgpKSsoZCsoZi1jKSkpLG09ZCsoYy1fKTtyZXR1cm4gdGhpcy5faGk9Xyx0aGlzLl9sbz1tLHRoaXN9fSxBLnByb3RvdHlwZS5zZWxmTXVsdGlwbHk9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc2VsZk11bHRpcGx5KHQuX2hpLHQuX2xvKX1pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc2VsZk11bHRpcGx5KGUsMCl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPW51bGwsbz1udWxsLHM9bnVsbCxhPW51bGwsdT1udWxsLGw9bnVsbDtyPSh1PUEuU1BMSVQqdGhpcy5faGkpLXRoaXMuX2hpLGw9QS5TUExJVCpuLHI9dS1yLG89dGhpcy5faGktcixzPWwtbjt2YXIgYz0odT10aGlzLl9oaSpuKSsobD1yKihzPWwtcyktdStyKihhPW4tcykrbypzK28qYSsodGhpcy5faGkqaSt0aGlzLl9sbypuKSkscD1sKyhyPXUtYyk7cmV0dXJuIHRoaXMuX2hpPWMsdGhpcy5fbG89cCx0aGlzfX0sQS5wcm90b3R5cGUuc2VsZlNxcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGZNdWx0aXBseSh0aGlzKX0sQS5wcm90b3R5cGUuZmxvb3I9ZnVuY3Rpb24oKXtpZih0aGlzLmlzTmFOKCkpcmV0dXJuIEEuTmFOO3ZhciB0PU1hdGguZmxvb3IodGhpcy5faGkpLGU9MDtyZXR1cm4gdD09PXRoaXMuX2hpJiYoZT1NYXRoLmZsb29yKHRoaXMuX2xvKSksbmV3IEEodCxlKX0sQS5wcm90b3R5cGUubmVnYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNOYU4oKT90aGlzOm5ldyBBKC10aGlzLl9oaSwtdGhpcy5fbG8pfSxBLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe30sQS5wcm90b3R5cGUubXVsdGlwbHk9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEEpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdC5pc05hTigpP0EuY3JlYXRlTmFOKCk6QS5jb3B5KHRoaXMpLnNlbGZNdWx0aXBseSh0KX1pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIG0uaXNOYU4oZSk/QS5jcmVhdGVOYU4oKTpBLmNvcHkodGhpcykuc2VsZk11bHRpcGx5KGUsMCl9fSxBLnByb3RvdHlwZS5pc05hTj1mdW5jdGlvbigpe3JldHVybiBtLmlzTmFOKHRoaXMuX2hpKX0sQS5wcm90b3R5cGUuaW50VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC50cnVuYyh0aGlzLl9oaSl9LEEucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHQ9QS5tYWduaXR1ZGUodGhpcy5faGkpO3JldHVybiB0Pj0tMyYmdDw9MjA/dGhpcy50b1N0YW5kYXJkTm90YXRpb24oKTp0aGlzLnRvU2NpTm90YXRpb24oKX0sQS5wcm90b3R5cGUudG9TdGFuZGFyZE5vdGF0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRTcGVjaWFsTnVtYmVyU3RyaW5nKCk7aWYobnVsbCE9PXQpcmV0dXJuIHQ7dmFyIGU9bmV3IEFycmF5KDEpLmZpbGwobnVsbCksbj10aGlzLmV4dHJhY3RTaWduaWZpY2FudERpZ2l0cyghMCxlKSxpPWVbMF0rMSxyPW47aWYoXCIuXCI9PT1uLmNoYXJBdCgwKSlyPVwiMFwiK247ZWxzZSBpZihpPDApcj1cIjAuXCIrQS5zdHJpbmdPZkNoYXIoXCIwXCIsLWkpK247ZWxzZSBpZigtMT09PW4uaW5kZXhPZihcIi5cIikpe3ZhciBvPWktbi5sZW5ndGg7cj1uK0Euc3RyaW5nT2ZDaGFyKFwiMFwiLG8pK1wiLjBcIn1yZXR1cm4gdGhpcy5pc05lZ2F0aXZlKCk/XCItXCIrcjpyfSxBLnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKCl7dmFyIHQ9bnVsbCxlPW51bGwsbj1udWxsLGk9bnVsbCxyPW51bGwsbz1udWxsLHM9bnVsbCxhPW51bGw7ZT0ocj0xL3RoaXMuX2hpKS0odD0obz1BLlNQTElUKnIpLSh0PW8tcikpLG49KGE9QS5TUExJVCp0aGlzLl9oaSktdGhpcy5faGk7dmFyIHU9cisobz0oMS0ocz1yKnRoaXMuX2hpKS0oYT10KihuPWEtbiktcyt0KihpPXRoaXMuX2hpLW4pK2UqbitlKmkpLXIqdGhpcy5fbG8pL3RoaXMuX2hpKTtyZXR1cm4gbmV3IEEodSxyLXUrbyl9LEEucHJvdG90eXBlLnRvU2NpTm90YXRpb249ZnVuY3Rpb24oKXtpZih0aGlzLmlzWmVybygpKXJldHVybiBBLlNDSV9OT1RfWkVSTzt2YXIgdD10aGlzLmdldFNwZWNpYWxOdW1iZXJTdHJpbmcoKTtpZihudWxsIT09dClyZXR1cm4gdDt2YXIgZT1uZXcgQXJyYXkoMSkuZmlsbChudWxsKSxuPXRoaXMuZXh0cmFjdFNpZ25pZmljYW50RGlnaXRzKCExLGUpLGk9QS5TQ0lfTk9UX0VYUE9ORU5UX0NIQVIrZVswXTtpZihcIjBcIj09PW4uY2hhckF0KDApKXRocm93IG5ldyBFcnJvcihcIkZvdW5kIGxlYWRpbmcgemVybzogXCIrbik7dmFyIHI9XCJcIjtuLmxlbmd0aD4xJiYocj1uLnN1YnN0cmluZygxKSk7dmFyIG89bi5jaGFyQXQoMCkrXCIuXCIrcjtyZXR1cm4gdGhpcy5pc05lZ2F0aXZlKCk/XCItXCIrbytpOm8raX0sQS5wcm90b3R5cGUuYWJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNOYU4oKT9BLk5hTjp0aGlzLmlzTmVnYXRpdmUoKT90aGlzLm5lZ2F0ZSgpOm5ldyBBKHRoaXMpfSxBLnByb3RvdHlwZS5pc1Bvc2l0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuX2hpPjB8fDA9PT10aGlzLl9oaSkmJnRoaXMuX2xvPjB9LEEucHJvdG90eXBlLmx0PWZ1bmN0aW9uKHQpe3JldHVybih0aGlzLl9oaTx0Ll9oaXx8dGhpcy5faGk9PT10Ll9oaSkmJnRoaXMuX2xvPHQuX2xvfSxBLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEEpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gQS5jb3B5KHRoaXMpLnNlbGZBZGQodCl9aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiBBLmNvcHkodGhpcykuc2VsZkFkZChlKX19LEEucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX2hpPXQsdGhpcy5fbG89MH1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQSl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuX2hpPWUuX2hpLHRoaXMuX2xvPWUuX2xvfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV07dGhpcy5faGk9bix0aGlzLl9sbz1pfX0sQS5wcm90b3R5cGUuZ3Q9ZnVuY3Rpb24odCl7cmV0dXJuKHRoaXMuX2hpPnQuX2hpfHx0aGlzLl9oaT09PXQuX2hpKSYmdGhpcy5fbG8+dC5fbG99LEEucHJvdG90eXBlLmlzTmVnYXRpdmU9ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5faGk8MHx8MD09PXRoaXMuX2hpKSYmdGhpcy5fbG88MH0sQS5wcm90b3R5cGUudHJ1bmM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc05hTigpP0EuTmFOOnRoaXMuaXNQb3NpdGl2ZSgpP3RoaXMuZmxvb3IoKTp0aGlzLmNlaWwoKX0sQS5wcm90b3R5cGUuc2lnbnVtPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hpPjA/MTp0aGlzLl9oaTwwPy0xOnRoaXMuX2xvPjA/MTp0aGlzLl9sbzwwPy0xOjB9LEEucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW2UsSSxFXX0sQS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gQX0sQS5zcXI9ZnVuY3Rpb24odCl7cmV0dXJuIEEudmFsdWVPZih0KS5zZWxmTXVsdGlwbHkodCl9LEEudmFsdWVPZj1mdW5jdGlvbigpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gQS5wYXJzZSh0KX1pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIG5ldyBBKGUpfX0sQS5zcXJ0PWZ1bmN0aW9uKHQpe3JldHVybiBBLnZhbHVlT2YodCkuc3FydCgpfSxBLnBhcnNlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dC5sZW5ndGg7TS5pc1doaXRlc3BhY2UodC5jaGFyQXQoZSkpOyllKys7dmFyIGk9ITE7aWYoZTxuKXt2YXIgcj10LmNoYXJBdChlKTtcIi1cIiE9PXImJlwiK1wiIT09cnx8KGUrKyxcIi1cIj09PXImJihpPSEwKSl9Zm9yKHZhciBvPW5ldyBBLHM9MCxhPTAsdT0wOyEoZT49bik7KXt2YXIgbD10LmNoYXJBdChlKTtpZihlKyssTS5pc0RpZ2l0KGwpKXt2YXIgYz1sLVwiMFwiO28uc2VsZk11bHRpcGx5KEEuVEVOKSxvLnNlbGZBZGQoYykscysrfWVsc2V7aWYoXCIuXCIhPT1sKXtpZihcImVcIj09PWx8fFwiRVwiPT09bCl7dmFyIHA9dC5zdWJzdHJpbmcoZSk7dHJ5e3U9RC5wYXJzZUludChwKX1jYXRjaChlKXt0aHJvdyBlIGluc3RhbmNlb2YgRXJyb3I/bmV3IEVycm9yKFwiSW52YWxpZCBleHBvbmVudCBcIitwK1wiIGluIHN0cmluZyBcIit0KTplfWJyZWFrfXRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgY2hhcmFjdGVyICdcIitsK1wiJyBhdCBwb3NpdGlvbiBcIitlK1wiIGluIHN0cmluZyBcIit0KX1hPXN9fXZhciBoPW8sZj1zLWEtdTtpZigwPT09ZiloPW87ZWxzZSBpZihmPjApe3ZhciBnPUEuVEVOLnBvdyhmKTtoPW8uZGl2aWRlKGcpfWVsc2UgaWYoZjwwKXt2YXIgZD1BLlRFTi5wb3coLWYpO2g9by5tdWx0aXBseShkKX1yZXR1cm4gaT9oLm5lZ2F0ZSgpOmh9LEEuY3JlYXRlTmFOPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBKG0uTmFOLG0uTmFOKX0sQS5jb3B5PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgQSh0KX0sQS5tYWduaXR1ZGU9ZnVuY3Rpb24odCl7dmFyIGU9TWF0aC5hYnModCksbj1NYXRoLmxvZyhlKS9NYXRoLmxvZygxMCksaT1NYXRoLnRydW5jKE1hdGguZmxvb3IobikpO3JldHVybiAxMCpNYXRoLnBvdygxMCxpKTw9ZSYmKGkrPTEpLGl9LEEuc3RyaW5nT2ZDaGFyPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPW5ldyBQLGk9MDtpPGU7aSsrKW4uYXBwZW5kKHQpO3JldHVybiBuLnRvU3RyaW5nKCl9LEYuUEkuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBKDMuMTQxNTkyNjUzNTg5NzkzLDEuMjI0NjQ2Nzk5MTQ3MzUzMmUtMTYpfSxGLlRXT19QSS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEEoNi4yODMxODUzMDcxNzk1ODYsMi40NDkyOTM1OTgyOTQ3MDY0ZS0xNil9LEYuUElfMi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEEoMS41NzA3OTYzMjY3OTQ4OTY2LDYuMTIzMjMzOTk1NzM2NzY2ZS0xNyl9LEYuRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEEoMi43MTgyODE4Mjg0NTkwNDUsMS40NDU2NDY4OTE3MjkyNTAyZS0xNil9LEYuTmFOLmdldD1mdW5jdGlvbigpe3JldHVybiBuZXcgQShtLk5hTixtLk5hTil9LEYuRVBTLmdldD1mdW5jdGlvbigpe3JldHVybiAxLjIzMjU5NTE2NDQwNzgzZS0zMn0sRi5TUExJVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMTM0MjE3NzI5fSxGLk1BWF9QUklOVF9ESUdJVFMuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDMyfSxGLlRFTi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gQS52YWx1ZU9mKDEwKX0sRi5PTkUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIEEudmFsdWVPZigxKX0sRi5TQ0lfTk9UX0VYUE9ORU5UX0NIQVIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuXCJFXCJ9LEYuU0NJX05PVF9aRVJPLmdldD1mdW5jdGlvbigpe3JldHVyblwiMC4wRTBcIn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQSxGKTt2YXIgRz1mdW5jdGlvbigpe30scT17RFBfU0FGRV9FUFNJTE9OOntjb25maWd1cmFibGU6ITB9fTtHLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxHLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBHfSxHLm9yaWVudGF0aW9uSW5kZXg9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPUcub3JpZW50YXRpb25JbmRleEZpbHRlcih0LGUsbik7aWYoaTw9MSlyZXR1cm4gaTt2YXIgcj1BLnZhbHVlT2YoZS54KS5zZWxmQWRkKC10LngpLG89QS52YWx1ZU9mKGUueSkuc2VsZkFkZCgtdC55KSxzPUEudmFsdWVPZihuLngpLnNlbGZBZGQoLWUueCksYT1BLnZhbHVlT2Yobi55KS5zZWxmQWRkKC1lLnkpO3JldHVybiByLnNlbGZNdWx0aXBseShhKS5zZWxmU3VidHJhY3Qoby5zZWxmTXVsdGlwbHkocykpLnNpZ251bSgpfSxHLnNpZ25PZkRldDJ4Mj1mdW5jdGlvbih0LGUsbixpKXtyZXR1cm4gdC5tdWx0aXBseShpKS5zZWxmU3VidHJhY3QoZS5tdWx0aXBseShuKSkuc2lnbnVtKCl9LEcuaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPUEudmFsdWVPZihpLnkpLnNlbGZTdWJ0cmFjdChuLnkpLnNlbGZNdWx0aXBseShBLnZhbHVlT2YoZS54KS5zZWxmU3VidHJhY3QodC54KSksbz1BLnZhbHVlT2YoaS54KS5zZWxmU3VidHJhY3Qobi54KS5zZWxmTXVsdGlwbHkoQS52YWx1ZU9mKGUueSkuc2VsZlN1YnRyYWN0KHQueSkpLHM9ci5zdWJ0cmFjdChvKSxhPUEudmFsdWVPZihpLngpLnNlbGZTdWJ0cmFjdChuLngpLnNlbGZNdWx0aXBseShBLnZhbHVlT2YodC55KS5zZWxmU3VidHJhY3Qobi55KSksdT1BLnZhbHVlT2YoaS55KS5zZWxmU3VidHJhY3Qobi55KS5zZWxmTXVsdGlwbHkoQS52YWx1ZU9mKHQueCkuc2VsZlN1YnRyYWN0KG4ueCkpLGw9YS5zdWJ0cmFjdCh1KS5zZWxmRGl2aWRlKHMpLmRvdWJsZVZhbHVlKCksYz1BLnZhbHVlT2YodC54KS5zZWxmQWRkKEEudmFsdWVPZihlLngpLnNlbGZTdWJ0cmFjdCh0LngpLnNlbGZNdWx0aXBseShsKSkuZG91YmxlVmFsdWUoKSxwPUEudmFsdWVPZihlLngpLnNlbGZTdWJ0cmFjdCh0LngpLnNlbGZNdWx0aXBseShBLnZhbHVlT2YodC55KS5zZWxmU3VidHJhY3Qobi55KSksaD1BLnZhbHVlT2YoZS55KS5zZWxmU3VidHJhY3QodC55KS5zZWxmTXVsdGlwbHkoQS52YWx1ZU9mKHQueCkuc2VsZlN1YnRyYWN0KG4ueCkpLGY9cC5zdWJ0cmFjdChoKS5zZWxmRGl2aWRlKHMpLmRvdWJsZVZhbHVlKCksZz1BLnZhbHVlT2Yobi55KS5zZWxmQWRkKEEudmFsdWVPZihpLnkpLnNlbGZTdWJ0cmFjdChuLnkpLnNlbGZNdWx0aXBseShmKSkuZG91YmxlVmFsdWUoKTtyZXR1cm4gbmV3IE4oYyxnKX0sRy5vcmllbnRhdGlvbkluZGV4RmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1udWxsLHI9KHQueC1uLngpKihlLnktbi55KSxvPSh0Lnktbi55KSooZS54LW4ueCkscz1yLW87aWYocj4wKXtpZihvPD0wKXJldHVybiBHLnNpZ251bShzKTtpPXIrb31lbHNle2lmKCEocjwwKSlyZXR1cm4gRy5zaWdudW0ocyk7aWYobz49MClyZXR1cm4gRy5zaWdudW0ocyk7aT0tci1vfXZhciBhPUcuRFBfU0FGRV9FUFNJTE9OKmk7cmV0dXJuIHM+PWF8fC1zPj1hP0cuc2lnbnVtKHMpOjJ9LEcuc2lnbnVtPWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/MTp0PDA/LTE6MH0scS5EUF9TQUZFX0VQU0lMT04uZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDFlLTE1fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhHLHEpO3ZhciBCPWZ1bmN0aW9uKCl7fSxWPXtYOntjb25maWd1cmFibGU6ITB9LFk6e2NvbmZpZ3VyYWJsZTohMH0sWjp7Y29uZmlndXJhYmxlOiEwfSxNOntjb25maWd1cmFibGU6ITB9fTtWLlguZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB9LFYuWS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMX0sVi5aLmdldD1mdW5jdGlvbigpe3JldHVybiAyfSxWLk0uZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDN9LEIucHJvdG90eXBlLnNldE9yZGluYXRlPWZ1bmN0aW9uKHQsZSxuKXt9LEIucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXt9LEIucHJvdG90eXBlLmdldE9yZGluYXRlPWZ1bmN0aW9uKHQsZSl7fSxCLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7fSxCLnByb3RvdHlwZS5nZXRDb29yZGluYXRlQ29weT1mdW5jdGlvbih0KXt9LEIucHJvdG90eXBlLmdldERpbWVuc2lvbj1mdW5jdGlvbigpe30sQi5wcm90b3R5cGUuZ2V0WD1mdW5jdGlvbih0KXt9LEIucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7fSxCLnByb3RvdHlwZS5leHBhbmRFbnZlbG9wZT1mdW5jdGlvbih0KXt9LEIucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oKXt9LEIucHJvdG90eXBlLmdldFk9ZnVuY3Rpb24odCl7fSxCLnByb3RvdHlwZS50b0Nvb3JkaW5hdGVBcnJheT1mdW5jdGlvbigpe30sQi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bRV19LEIucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEIsVik7dmFyIFU9ZnVuY3Rpb24oKXt9LHo9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuY2FsbCh0aGlzLFwiUHJvamVjdGl2ZSBwb2ludCBub3QgcmVwcmVzZW50YWJsZSBvbiB0aGUgQ2FydGVzaWFuIHBsYW5lLlwiKX1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX0oVSksWD1mdW5jdGlvbigpe307WC5hcnJheWNvcHk9ZnVuY3Rpb24odCxlLG4saSxyKXtmb3IodmFyIG89MCxzPWU7czxlK3I7cysrKW5baStvXT10W3NdLG8rK30sWC5nZXRQcm9wZXJ0eT1mdW5jdGlvbih0KXtyZXR1cm57XCJsaW5lLnNlcGFyYXRvclwiOlwiXFxuXCJ9W3RdfTt2YXIgWT1mdW5jdGlvbiB0KCl7aWYodGhpcy54PW51bGwsdGhpcy55PW51bGwsdGhpcy53PW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpdGhpcy54PTAsdGhpcy55PTAsdGhpcy53PTE7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMueD1lLngsdGhpcy55PWUueSx0aGlzLnc9MX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdJiZcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV07dGhpcy54PW4sdGhpcy55PWksdGhpcy53PTF9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIHQmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgdCl7dmFyIHI9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdO3RoaXMueD1yLnkqby53LW8ueSpyLncsdGhpcy55PW8ueCpyLnctci54Km8udyx0aGlzLnc9ci54Km8ueS1vLngqci55fWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIE4pe3ZhciBzPWFyZ3VtZW50c1swXSxhPWFyZ3VtZW50c1sxXTt0aGlzLng9cy55LWEueSx0aGlzLnk9YS54LXMueCx0aGlzLnc9cy54KmEueS1hLngqcy55fX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdT1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0sYz1hcmd1bWVudHNbMl07dGhpcy54PXUsdGhpcy55PWwsdGhpcy53PWN9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHA9YXJndW1lbnRzWzBdLGg9YXJndW1lbnRzWzFdLGY9YXJndW1lbnRzWzJdLGc9YXJndW1lbnRzWzNdLGQ9cC55LWgueSx5PWgueC1wLngsXz1wLngqaC55LWgueCpwLnksbT1mLnktZy55LHY9Zy54LWYueCxJPWYueCpnLnktZy54KmYueTt0aGlzLng9eSpJLXYqXyx0aGlzLnk9bSpfLWQqSSx0aGlzLnc9ZCp2LW0qeX19O1kucHJvdG90eXBlLmdldFk9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnkvdGhpcy53O2lmKG0uaXNOYU4odCl8fG0uaXNJbmZpbml0ZSh0KSl0aHJvdyBuZXcgejtyZXR1cm4gdH0sWS5wcm90b3R5cGUuZ2V0WD1mdW5jdGlvbigpe3ZhciB0PXRoaXMueC90aGlzLnc7aWYobS5pc05hTih0KXx8bS5pc0luZmluaXRlKHQpKXRocm93IG5ldyB6O3JldHVybiB0fSxZLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IE47cmV0dXJuIHQueD10aGlzLmdldFgoKSx0Lnk9dGhpcy5nZXRZKCksdH0sWS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sWS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gWX0sWS5pbnRlcnNlY3Rpb249ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC55LWUueSxvPWUueC10Lngscz10LngqZS55LWUueCp0LnksYT1uLnktaS55LHU9aS54LW4ueCxsPW4ueCppLnktaS54Km4ueSxjPXIqdS1hKm8scD0obypsLXUqcykvYyxoPShhKnMtcipsKS9jO2lmKG0uaXNOYU4ocCl8fG0uaXNJbmZpbml0ZShwKXx8bS5pc05hTihoKXx8bS5pc0luZmluaXRlKGgpKXRocm93IG5ldyB6O3JldHVybiBuZXcgTihwLGgpfTt2YXIgaz1mdW5jdGlvbiB0KCl7aWYodGhpcy5fbWlueD1udWxsLHRoaXMuX21heHg9bnVsbCx0aGlzLl9taW55PW51bGwsdGhpcy5fbWF4eT1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKXRoaXMuaW5pdCgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTil7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuaW5pdChlLngsZS54LGUueSxlLnkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiB0KXt2YXIgbj1hcmd1bWVudHNbMF07dGhpcy5pbml0KG4pfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV07dGhpcy5pbml0KGkueCxyLngsaS55LHIueSl9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG89YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGE9YXJndW1lbnRzWzJdLHU9YXJndW1lbnRzWzNdO3RoaXMuaW5pdChvLHMsYSx1KX19LGo9e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH19O2sucHJvdG90eXBlLmdldEFyZWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRXaWR0aCgpKnRoaXMuZ2V0SGVpZ2h0KCl9LGsucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbih0KXtpZighKHQgaW5zdGFuY2VvZiBrKSlyZXR1cm4hMTt2YXIgZT10O3JldHVybiB0aGlzLmlzTnVsbCgpP2UuaXNOdWxsKCk6dGhpcy5fbWF4eD09PWUuZ2V0TWF4WCgpJiZ0aGlzLl9tYXh5PT09ZS5nZXRNYXhZKCkmJnRoaXMuX21pbng9PT1lLmdldE1pblgoKSYmdGhpcy5fbWlueT09PWUuZ2V0TWluWSgpfSxrLnByb3RvdHlwZS5pbnRlcnNlY3Rpb249ZnVuY3Rpb24odCl7aWYodGhpcy5pc051bGwoKXx8dC5pc051bGwoKXx8IXRoaXMuaW50ZXJzZWN0cyh0KSlyZXR1cm4gbmV3IGs7dmFyIGU9dGhpcy5fbWlueD50Ll9taW54P3RoaXMuX21pbng6dC5fbWlueCxuPXRoaXMuX21pbnk+dC5fbWlueT90aGlzLl9taW55OnQuX21pbnksaT10aGlzLl9tYXh4PHQuX21heHg/dGhpcy5fbWF4eDp0Ll9tYXh4LHI9dGhpcy5fbWF4eTx0Ll9tYXh5P3RoaXMuX21heHk6dC5fbWF4eTtyZXR1cm4gbmV3IGsoZSxpLG4scil9LGsucHJvdG90eXBlLmlzTnVsbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9tYXh4PHRoaXMuX21pbnh9LGsucHJvdG90eXBlLmdldE1heFg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF4eH0say5wcm90b3R5cGUuY292ZXJzPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTil7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNvdmVycyh0LngsdC55KX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGspe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4hdGhpcy5pc051bGwoKSYmIWUuaXNOdWxsKCkmJihlLmdldE1pblgoKT49dGhpcy5fbWlueCYmZS5nZXRNYXhYKCk8PXRoaXMuX21heHgmJmUuZ2V0TWluWSgpPj10aGlzLl9taW55JiZlLmdldE1heFkoKTw9dGhpcy5fbWF4eSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtyZXR1cm4hdGhpcy5pc051bGwoKSYmKG4+PXRoaXMuX21pbngmJm48PXRoaXMuX21heHgmJmk+PXRoaXMuX21pbnkmJmk8PXRoaXMuX21heHkpfX0say5wcm90b3R5cGUuaW50ZXJzZWN0cz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGspe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4hdGhpcy5pc051bGwoKSYmIXQuaXNOdWxsKCkmJiEodC5fbWlueD50aGlzLl9tYXh4fHx0Ll9tYXh4PHRoaXMuX21pbnh8fHQuX21pbnk+dGhpcy5fbWF4eXx8dC5fbWF4eTx0aGlzLl9taW55KX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5pbnRlcnNlY3RzKGUueCxlLnkpfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV07cmV0dXJuIXRoaXMuaXNOdWxsKCkmJiEobj50aGlzLl9tYXh4fHxuPHRoaXMuX21pbnh8fGk+dGhpcy5fbWF4eXx8aTx0aGlzLl9taW55KX19LGsucHJvdG90eXBlLmdldE1pblk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWlueX0say5wcm90b3R5cGUuZ2V0TWluWD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9taW54fSxrLnByb3RvdHlwZS5leHBhbmRUb0luY2x1ZGU9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5leHBhbmRUb0luY2x1ZGUodC54LHQueSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGspe3ZhciBlPWFyZ3VtZW50c1swXTtpZihlLmlzTnVsbCgpKXJldHVybiBudWxsO3RoaXMuaXNOdWxsKCk/KHRoaXMuX21pbng9ZS5nZXRNaW5YKCksdGhpcy5fbWF4eD1lLmdldE1heFgoKSx0aGlzLl9taW55PWUuZ2V0TWluWSgpLHRoaXMuX21heHk9ZS5nZXRNYXhZKCkpOihlLl9taW54PHRoaXMuX21pbngmJih0aGlzLl9taW54PWUuX21pbngpLGUuX21heHg+dGhpcy5fbWF4eCYmKHRoaXMuX21heHg9ZS5fbWF4eCksZS5fbWlueTx0aGlzLl9taW55JiYodGhpcy5fbWlueT1lLl9taW55KSxlLl9tYXh5PnRoaXMuX21heHkmJih0aGlzLl9tYXh5PWUuX21heHkpKX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3RoaXMuaXNOdWxsKCk/KHRoaXMuX21pbng9bix0aGlzLl9tYXh4PW4sdGhpcy5fbWlueT1pLHRoaXMuX21heHk9aSk6KG48dGhpcy5fbWlueCYmKHRoaXMuX21pbng9biksbj50aGlzLl9tYXh4JiYodGhpcy5fbWF4eD1uKSxpPHRoaXMuX21pbnkmJih0aGlzLl9taW55PWkpLGk+dGhpcy5fbWF4eSYmKHRoaXMuX21heHk9aSkpfX0say5wcm90b3R5cGUubWluRXh0ZW50PWZ1bmN0aW9uKCl7aWYodGhpcy5pc051bGwoKSlyZXR1cm4gMDt2YXIgdD10aGlzLmdldFdpZHRoKCksZT10aGlzLmdldEhlaWdodCgpO3JldHVybiB0PGU/dDplfSxrLnByb3RvdHlwZS5nZXRXaWR0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzTnVsbCgpPzA6dGhpcy5fbWF4eC10aGlzLl9taW54fSxrLnByb3RvdHlwZS5jb21wYXJlVG89ZnVuY3Rpb24odCl7dmFyIGU9dDtyZXR1cm4gdGhpcy5pc051bGwoKT9lLmlzTnVsbCgpPzA6LTE6ZS5pc051bGwoKT8xOnRoaXMuX21pbng8ZS5fbWlueD8tMTp0aGlzLl9taW54PmUuX21pbng/MTp0aGlzLl9taW55PGUuX21pbnk/LTE6dGhpcy5fbWlueT5lLl9taW55PzE6dGhpcy5fbWF4eDxlLl9tYXh4Py0xOnRoaXMuX21heHg+ZS5fbWF4eD8xOnRoaXMuX21heHk8ZS5fbWF4eT8tMTp0aGlzLl9tYXh5PmUuX21heHk/MTowfSxrLnByb3RvdHlwZS50cmFuc2xhdGU9ZnVuY3Rpb24odCxlKXtpZih0aGlzLmlzTnVsbCgpKXJldHVybiBudWxsO3RoaXMuaW5pdCh0aGlzLmdldE1pblgoKSt0LHRoaXMuZ2V0TWF4WCgpK3QsdGhpcy5nZXRNaW5ZKCkrZSx0aGlzLmdldE1heFkoKStlKX0say5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIkVudltcIit0aGlzLl9taW54K1wiIDogXCIrdGhpcy5fbWF4eCtcIiwgXCIrdGhpcy5fbWlueStcIiA6IFwiK3RoaXMuX21heHkrXCJdXCJ9LGsucHJvdG90eXBlLnNldFRvTnVsbD1mdW5jdGlvbigpe3RoaXMuX21pbng9MCx0aGlzLl9tYXh4PS0xLHRoaXMuX21pbnk9MCx0aGlzLl9tYXh5PS0xfSxrLnByb3RvdHlwZS5nZXRIZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc051bGwoKT8wOnRoaXMuX21heHktdGhpcy5fbWlueX0say5wcm90b3R5cGUubWF4RXh0ZW50PWZ1bmN0aW9uKCl7aWYodGhpcy5pc051bGwoKSlyZXR1cm4gMDt2YXIgdD10aGlzLmdldFdpZHRoKCksZT10aGlzLmdldEhlaWdodCgpO3JldHVybiB0PmU/dDplfSxrLnByb3RvdHlwZS5leHBhbmRCeT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5leHBhbmRCeSh0LHQpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtpZih0aGlzLmlzTnVsbCgpKXJldHVybiBudWxsO3RoaXMuX21pbngtPWUsdGhpcy5fbWF4eCs9ZSx0aGlzLl9taW55LT1uLHRoaXMuX21heHkrPW4sKHRoaXMuX21pbng+dGhpcy5fbWF4eHx8dGhpcy5fbWlueT50aGlzLl9tYXh5KSYmdGhpcy5zZXRUb051bGwoKX19LGsucHJvdG90eXBlLmNvbnRhaW5zPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2Ygayl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNvdmVycyh0KX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jb3ZlcnMoZSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5jb3ZlcnMobixpKX19LGsucHJvdG90eXBlLmNlbnRyZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzTnVsbCgpP251bGw6bmV3IE4oKHRoaXMuZ2V0TWluWCgpK3RoaXMuZ2V0TWF4WCgpKS8yLCh0aGlzLmdldE1pblkoKSt0aGlzLmdldE1heFkoKSkvMil9LGsucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl0aGlzLnNldFRvTnVsbCgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTil7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuaW5pdCh0LngsdC54LHQueSx0LnkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBrKXt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5fbWlueD1lLl9taW54LHRoaXMuX21heHg9ZS5fbWF4eCx0aGlzLl9taW55PWUuX21pbnksdGhpcy5fbWF4eT1lLl9tYXh5fX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV07dGhpcy5pbml0KG4ueCxpLngsbi55LGkueSl9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHI9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdLHM9YXJndW1lbnRzWzJdLGE9YXJndW1lbnRzWzNdO3I8bz8odGhpcy5fbWlueD1yLHRoaXMuX21heHg9byk6KHRoaXMuX21pbng9byx0aGlzLl9tYXh4PXIpLHM8YT8odGhpcy5fbWlueT1zLHRoaXMuX21heHk9YSk6KHRoaXMuX21pbnk9YSx0aGlzLl9tYXh5PXMpfX0say5wcm90b3R5cGUuZ2V0TWF4WT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9tYXh5fSxrLnByb3RvdHlwZS5kaXN0YW5jZT1mdW5jdGlvbih0KXtpZih0aGlzLmludGVyc2VjdHModCkpcmV0dXJuIDA7dmFyIGU9MDt0aGlzLl9tYXh4PHQuX21pbng/ZT10Ll9taW54LXRoaXMuX21heHg6dGhpcy5fbWlueD50Ll9tYXh4JiYoZT10aGlzLl9taW54LXQuX21heHgpO3ZhciBuPTA7cmV0dXJuIHRoaXMuX21heHk8dC5fbWlueT9uPXQuX21pbnktdGhpcy5fbWF4eTp0aGlzLl9taW55PnQuX21heHkmJihuPXRoaXMuX21pbnktdC5fbWF4eSksMD09PWU/bjowPT09bj9lOk1hdGguc3FydChlKmUrbipuKX0say5wcm90b3R5cGUuaGFzaENvZGU9ZnVuY3Rpb24oKXt2YXIgdD0xNztyZXR1cm4gdD0zNyp0K04uaGFzaENvZGUodGhpcy5fbWlueCksdD0zNyp0K04uaGFzaENvZGUodGhpcy5fbWF4eCksdD0zNyp0K04uaGFzaENvZGUodGhpcy5fbWlueSksdD0zNyp0K04uaGFzaENvZGUodGhpcy5fbWF4eSl9LGsucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW0ksZV19LGsucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGt9LGsuaW50ZXJzZWN0cz1mdW5jdGlvbigpe2lmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07cmV0dXJuIG4ueD49KHQueDxlLng/dC54OmUueCkmJm4ueDw9KHQueD5lLng/dC54OmUueCkmJm4ueT49KHQueTxlLnk/dC55OmUueSkmJm4ueTw9KHQueT5lLnk/dC55OmUueSl9aWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXSxzPWFyZ3VtZW50c1szXSxhPU1hdGgubWluKG8ueCxzLngpLHU9TWF0aC5tYXgoby54LHMueCksbD1NYXRoLm1pbihpLngsci54KSxjPU1hdGgubWF4KGkueCxyLngpO3JldHVybiEobD51KSYmKCEoYzxhKSYmKGE9TWF0aC5taW4oby55LHMueSksdT1NYXRoLm1heChvLnkscy55KSxsPU1hdGgubWluKGkueSxyLnkpLGM9TWF0aC5tYXgoaS55LHIueSksIShsPnUpJiYhKGM8YSkpKX19LGouc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMHg1MTg0NWNkNTUyMTg5ODAwfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhrLGopO3ZhciBIPXt0eXBlU3RyOi9eXFxzKihcXHcrKVxccypcXChcXHMqKC4qKVxccypcXClcXHMqJC8sZW1wdHlUeXBlU3RyOi9eXFxzKihcXHcrKVxccypFTVBUWVxccyokLyxzcGFjZXM6L1xccysvLHBhcmVuQ29tbWE6L1xcKVxccyosXFxzKlxcKC8sZG91YmxlUGFyZW5Db21tYTovXFwpXFxzKlxcKVxccyosXFxzKlxcKFxccypcXCgvLHRyaW1QYXJlbnM6L15cXHMqXFwoPyguKj8pXFwpP1xccyokL30sVz1mdW5jdGlvbih0KXt0aGlzLmdlb21ldHJ5RmFjdG9yeT10fHxuZXcgX2V9O1cucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7dmFyIGUsbixpO3Q9dC5yZXBsYWNlKC9bXFxuXFxyXS9nLFwiIFwiKTt2YXIgcj1ILnR5cGVTdHIuZXhlYyh0KTtpZigtMSE9PXQuc2VhcmNoKFwiRU1QVFlcIikmJigocj1ILmVtcHR5VHlwZVN0ci5leGVjKHQpKVsyXT12b2lkIDApLHImJihuPXJbMV0udG9Mb3dlckNhc2UoKSxpPXJbMl0sSltuXSYmKGU9SltuXS5hcHBseSh0aGlzLFtpXSkpKSx2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBwYXJzZSBXS1QgXCIrdCk7cmV0dXJuIGV9LFcucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmV4dHJhY3RHZW9tZXRyeSh0KX0sVy5wcm90b3R5cGUuZXh0cmFjdEdlb21ldHJ5PWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0R2VvbWV0cnlUeXBlKCkudG9Mb3dlckNhc2UoKTtpZighS1tlXSlyZXR1cm4gbnVsbDt2YXIgbj1lLnRvVXBwZXJDYXNlKCk7cmV0dXJuIHQuaXNFbXB0eSgpP24rXCIgRU1QVFlcIjpuK1wiKFwiK0tbZV0uYXBwbHkodGhpcyxbdF0pK1wiKVwifTt2YXIgSz17Y29vcmRpbmF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdC54K1wiIFwiK3QueX0scG9pbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIEsuY29vcmRpbmF0ZS5jYWxsKHRoaXMsdC5fY29vcmRpbmF0ZXMuX2Nvb3JkaW5hdGVzWzBdKX0sbXVsdGlwb2ludDpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wLGk9dC5fZ2VvbWV0cmllcy5sZW5ndGg7bjxpOysrbillLnB1c2goXCIoXCIrSy5wb2ludC5hcHBseSh0aGlzLFt0Ll9nZW9tZXRyaWVzW25dXSkrXCIpXCIpO3JldHVybiBlLmpvaW4oXCIsXCIpfSxsaW5lc3RyaW5nOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTAsaT10Ll9wb2ludHMuX2Nvb3JkaW5hdGVzLmxlbmd0aDtuPGk7KytuKWUucHVzaChLLmNvb3JkaW5hdGUuYXBwbHkodGhpcyxbdC5fcG9pbnRzLl9jb29yZGluYXRlc1tuXV0pKTtyZXR1cm4gZS5qb2luKFwiLFwiKX0sbGluZWFycmluZzpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wLGk9dC5fcG9pbnRzLl9jb29yZGluYXRlcy5sZW5ndGg7bjxpOysrbillLnB1c2goSy5jb29yZGluYXRlLmFwcGx5KHRoaXMsW3QuX3BvaW50cy5fY29vcmRpbmF0ZXNbbl1dKSk7cmV0dXJuIGUuam9pbihcIixcIil9LG11bHRpbGluZXN0cmluZzpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wLGk9dC5fZ2VvbWV0cmllcy5sZW5ndGg7bjxpOysrbillLnB1c2goXCIoXCIrSy5saW5lc3RyaW5nLmFwcGx5KHRoaXMsW3QuX2dlb21ldHJpZXNbbl1dKStcIilcIik7cmV0dXJuIGUuam9pbihcIixcIil9LHBvbHlnb246ZnVuY3Rpb24odCl7dmFyIGU9W107ZS5wdXNoKFwiKFwiK0subGluZXN0cmluZy5hcHBseSh0aGlzLFt0Ll9zaGVsbF0pK1wiKVwiKTtmb3IodmFyIG49MCxpPXQuX2hvbGVzLmxlbmd0aDtuPGk7KytuKWUucHVzaChcIihcIitLLmxpbmVzdHJpbmcuYXBwbHkodGhpcyxbdC5faG9sZXNbbl1dKStcIilcIik7cmV0dXJuIGUuam9pbihcIixcIil9LG11bHRpcG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wLGk9dC5fZ2VvbWV0cmllcy5sZW5ndGg7bjxpOysrbillLnB1c2goXCIoXCIrSy5wb2x5Z29uLmFwcGx5KHRoaXMsW3QuX2dlb21ldHJpZXNbbl1dKStcIilcIik7cmV0dXJuIGUuam9pbihcIixcIil9LGdlb21ldHJ5Y29sbGVjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wLGk9dC5fZ2VvbWV0cmllcy5sZW5ndGg7bjxpOysrbillLnB1c2godGhpcy5leHRyYWN0R2VvbWV0cnkodC5fZ2VvbWV0cmllc1tuXSkpO3JldHVybiBlLmpvaW4oXCIsXCIpfX0sSj17cG9pbnQ6ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dClyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlUG9pbnQoKTt2YXIgZT10LnRyaW0oKS5zcGxpdChILnNwYWNlcyk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZVBvaW50KG5ldyBOKE51bWJlci5wYXJzZUZsb2F0KGVbMF0pLE51bWJlci5wYXJzZUZsb2F0KGVbMV0pKSl9LG11bHRpcG9pbnQ6ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dClyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlQb2ludCgpO2Zvcih2YXIgZSxuPXQudHJpbSgpLnNwbGl0KFwiLFwiKSxpPVtdLHI9MCxvPW4ubGVuZ3RoO3I8bzsrK3IpZT1uW3JdLnJlcGxhY2UoSC50cmltUGFyZW5zLFwiJDFcIiksaS5wdXNoKEoucG9pbnQuYXBwbHkodGhpcyxbZV0pKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlQb2ludChpKX0sbGluZXN0cmluZzpmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXJldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lU3RyaW5nKCk7Zm9yKHZhciBlLG49dC50cmltKCkuc3BsaXQoXCIsXCIpLGk9W10scj0wLG89bi5sZW5ndGg7cjxvOysrcillPW5bcl0udHJpbSgpLnNwbGl0KEguc3BhY2VzKSxpLnB1c2gobmV3IE4oTnVtYmVyLnBhcnNlRmxvYXQoZVswXSksTnVtYmVyLnBhcnNlRmxvYXQoZVsxXSkpKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZVN0cmluZyhpKX0sbGluZWFycmluZzpmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXJldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKCk7Zm9yKHZhciBlLG49dC50cmltKCkuc3BsaXQoXCIsXCIpLGk9W10scj0wLG89bi5sZW5ndGg7cjxvOysrcillPW5bcl0udHJpbSgpLnNwbGl0KEguc3BhY2VzKSxpLnB1c2gobmV3IE4oTnVtYmVyLnBhcnNlRmxvYXQoZVswXSksTnVtYmVyLnBhcnNlRmxvYXQoZVsxXSkpKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZWFyUmluZyhpKX0sbXVsdGlsaW5lc3RyaW5nOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpTGluZVN0cmluZygpO2Zvcih2YXIgZSxuPXQudHJpbSgpLnNwbGl0KEgucGFyZW5Db21tYSksaT1bXSxyPTAsbz1uLmxlbmd0aDtyPG87KytyKWU9bltyXS5yZXBsYWNlKEgudHJpbVBhcmVucyxcIiQxXCIpLGkucHVzaChKLmxpbmVzdHJpbmcuYXBwbHkodGhpcyxbZV0pKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlMaW5lU3RyaW5nKGkpfSxwb2x5Z29uOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZVBvbHlnb24oKTtmb3IodmFyIGUsbixpLHIsbz10LnRyaW0oKS5zcGxpdChILnBhcmVuQ29tbWEpLHM9W10sYT0wLHU9by5sZW5ndGg7YTx1OysrYSllPW9bYV0ucmVwbGFjZShILnRyaW1QYXJlbnMsXCIkMVwiKSxuPUoubGluZXN0cmluZy5hcHBseSh0aGlzLFtlXSksaT10aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKG4uX3BvaW50cyksMD09PWE/cj1pOnMucHVzaChpKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlUG9seWdvbihyLHMpfSxtdWx0aXBvbHlnb246ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dClyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlQb2x5Z29uKCk7Zm9yKHZhciBlLG49dC50cmltKCkuc3BsaXQoSC5kb3VibGVQYXJlbkNvbW1hKSxpPVtdLHI9MCxvPW4ubGVuZ3RoO3I8bzsrK3IpZT1uW3JdLnJlcGxhY2UoSC50cmltUGFyZW5zLFwiJDFcIiksaS5wdXNoKEoucG9seWdvbi5hcHBseSh0aGlzLFtlXSkpO3JldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVNdWx0aVBvbHlnb24oaSl9LGdlb21ldHJ5Y29sbGVjdGlvbjpmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXJldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24oKTtmb3IodmFyIGU9KHQ9dC5yZXBsYWNlKC8sXFxzKihbQS1aYS16XSkvZyxcInwkMVwiKSkudHJpbSgpLnNwbGl0KFwifFwiKSxuPVtdLGk9MCxyPWUubGVuZ3RoO2k8cjsrK2kpbi5wdXNoKHRoaXMucmVhZChlW2ldKSk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihuKX19LFE9ZnVuY3Rpb24odCl7dGhpcy5wYXJzZXI9bmV3IFcodCl9O1EucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBhcnNlci53cml0ZSh0KX0sUS50b0xpbmVTdHJpbmc9ZnVuY3Rpb24odCxlKXtpZigyIT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7cmV0dXJuXCJMSU5FU1RSSU5HICggXCIrdC54K1wiIFwiK3QueStcIiwgXCIrZS54K1wiIFwiK2UueStcIiApXCJ9O3ZhciBaPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dC5jYWxsKHRoaXMsZSksdGhpcy5uYW1lPVwiUnVudGltZUV4Y2VwdGlvblwiLHRoaXMubWVzc2FnZT1lLHRoaXMuc3RhY2s9KG5ldyB0KS5zdGFja31yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZX0oRXJyb3IpLCQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe2lmKHQuY2FsbCh0aGlzKSwwPT09YXJndW1lbnRzLmxlbmd0aCl0LmNhbGwodGhpcyk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdO3QuY2FsbCh0aGlzLGUpfX1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX0oWiksdHQ9ZnVuY3Rpb24oKXt9O3R0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSx0dC5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gdHR9LHR0LnNob3VsZE5ldmVyUmVhY2hIZXJlPWZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpdHQuc2hvdWxkTmV2ZXJSZWFjaEhlcmUobnVsbCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3Rocm93IG5ldyAkKFwiU2hvdWxkIG5ldmVyIHJlYWNoIGhlcmVcIisobnVsbCE9PXQ/XCI6IFwiK3Q6XCJcIikpfX0sdHQuaXNUcnVlPWZ1bmN0aW9uKCl7dmFyIHQsZTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl0PWFyZ3VtZW50c1swXSx0dC5pc1RydWUodCxudWxsKTtlbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoJiYodD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sIXQpKXRocm93IG51bGw9PT1lP25ldyAkOm5ldyAkKGUpfSx0dC5lcXVhbHM9ZnVuY3Rpb24oKXt2YXIgdCxlLG47aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sdHQuZXF1YWxzKHQsZSxudWxsKTtlbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoJiYodD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl0sIWUuZXF1YWxzKHQpKSl0aHJvdyBuZXcgJChcIkV4cGVjdGVkIFwiK3QrXCIgYnV0IGVuY291bnRlcmVkIFwiK2UrKG51bGwhPT1uP1wiOiBcIituOlwiXCIpKX07dmFyIGV0PWZ1bmN0aW9uKCl7dGhpcy5fcmVzdWx0PW51bGwsdGhpcy5faW5wdXRMaW5lcz1BcnJheSgyKS5maWxsKCkubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIEFycmF5KDIpfSksdGhpcy5faW50UHQ9bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5faW50TGluZUluZGV4PW51bGwsdGhpcy5faXNQcm9wZXI9bnVsbCx0aGlzLl9wYT1udWxsLHRoaXMuX3BiPW51bGwsdGhpcy5fcHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLl9pbnRQdFswXT1uZXcgTix0aGlzLl9pbnRQdFsxXT1uZXcgTix0aGlzLl9wYT10aGlzLl9pbnRQdFswXSx0aGlzLl9wYj10aGlzLl9pbnRQdFsxXSx0aGlzLl9yZXN1bHQ9MH0sbnQ9e0RPTlRfSU5URVJTRUNUOntjb25maWd1cmFibGU6ITB9LERPX0lOVEVSU0VDVDp7Y29uZmlndXJhYmxlOiEwfSxDT0xMSU5FQVI6e2NvbmZpZ3VyYWJsZTohMH0sTk9fSU5URVJTRUNUSU9OOntjb25maWd1cmFibGU6ITB9LFBPSU5UX0lOVEVSU0VDVElPTjp7Y29uZmlndXJhYmxlOiEwfSxDT0xMSU5FQVJfSU5URVJTRUNUSU9OOntjb25maWd1cmFibGU6ITB9fTtldC5wcm90b3R5cGUuZ2V0SW5kZXhBbG9uZ1NlZ21lbnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jb21wdXRlSW50TGluZUluZGV4KCksdGhpcy5faW50TGluZUluZGV4W3RdW2VdfSxldC5wcm90b3R5cGUuZ2V0VG9wb2xvZ3lTdW1tYXJ5PWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFA7cmV0dXJuIHRoaXMuaXNFbmRQb2ludCgpJiZ0LmFwcGVuZChcIiBlbmRwb2ludFwiKSx0aGlzLl9pc1Byb3BlciYmdC5hcHBlbmQoXCIgcHJvcGVyXCIpLHRoaXMuaXNDb2xsaW5lYXIoKSYmdC5hcHBlbmQoXCIgY29sbGluZWFyXCIpLHQudG9TdHJpbmcoKX0sZXQucHJvdG90eXBlLmNvbXB1dGVJbnRlcnNlY3Rpb249ZnVuY3Rpb24odCxlLG4saSl7dGhpcy5faW5wdXRMaW5lc1swXVswXT10LHRoaXMuX2lucHV0TGluZXNbMF1bMV09ZSx0aGlzLl9pbnB1dExpbmVzWzFdWzBdPW4sdGhpcy5faW5wdXRMaW5lc1sxXVsxXT1pLHRoaXMuX3Jlc3VsdD10aGlzLmNvbXB1dGVJbnRlcnNlY3QodCxlLG4saSl9LGV0LnByb3RvdHlwZS5nZXRJbnRlcnNlY3Rpb25OdW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVzdWx0fSxldC5wcm90b3R5cGUuY29tcHV0ZUludExpbmVJbmRleD1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKW51bGw9PT10aGlzLl9pbnRMaW5lSW5kZXgmJih0aGlzLl9pbnRMaW5lSW5kZXg9QXJyYXkoMikuZmlsbCgpLm1hcChmdW5jdGlvbigpe3JldHVybiBBcnJheSgyKX0pLHRoaXMuY29tcHV0ZUludExpbmVJbmRleCgwKSx0aGlzLmNvbXB1dGVJbnRMaW5lSW5kZXgoMSkpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmdldEVkZ2VEaXN0YW5jZSh0LDApPnRoaXMuZ2V0RWRnZURpc3RhbmNlKHQsMSk/KHRoaXMuX2ludExpbmVJbmRleFt0XVswXT0wLHRoaXMuX2ludExpbmVJbmRleFt0XVsxXT0xKToodGhpcy5faW50TGluZUluZGV4W3RdWzBdPTEsdGhpcy5faW50TGluZUluZGV4W3RdWzFdPTApfX0sZXQucHJvdG90eXBlLmlzUHJvcGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzSW50ZXJzZWN0aW9uKCkmJnRoaXMuX2lzUHJvcGVyfSxldC5wcm90b3R5cGUuc2V0UHJlY2lzaW9uTW9kZWw9ZnVuY3Rpb24odCl7dGhpcy5fcHJlY2lzaW9uTW9kZWw9dH0sZXQucHJvdG90eXBlLmlzSW50ZXJpb3JJbnRlcnNlY3Rpb249ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4hIXRoaXMuaXNJbnRlcmlvckludGVyc2VjdGlvbigwKXx8ISF0aGlzLmlzSW50ZXJpb3JJbnRlcnNlY3Rpb24oMSk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0wO2U8dGhpcy5fcmVzdWx0O2UrKylpZighdGhpcy5faW50UHRbZV0uZXF1YWxzMkQodGhpcy5faW5wdXRMaW5lc1t0XVswXSkmJiF0aGlzLl9pbnRQdFtlXS5lcXVhbHMyRCh0aGlzLl9pbnB1dExpbmVzW3RdWzFdKSlyZXR1cm4hMDtyZXR1cm4hMX19LGV0LnByb3RvdHlwZS5nZXRJbnRlcnNlY3Rpb249ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2ludFB0W3RdfSxldC5wcm90b3R5cGUuaXNFbmRQb2ludD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc0ludGVyc2VjdGlvbigpJiYhdGhpcy5faXNQcm9wZXJ9LGV0LnByb3RvdHlwZS5oYXNJbnRlcnNlY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVzdWx0IT09ZXQuTk9fSU5URVJTRUNUSU9OfSxldC5wcm90b3R5cGUuZ2V0RWRnZURpc3RhbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV0LmNvbXB1dGVFZGdlRGlzdGFuY2UodGhpcy5faW50UHRbZV0sdGhpcy5faW5wdXRMaW5lc1t0XVswXSx0aGlzLl9pbnB1dExpbmVzW3RdWzFdKX0sZXQucHJvdG90eXBlLmlzQ29sbGluZWFyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Jlc3VsdD09PWV0LkNPTExJTkVBUl9JTlRFUlNFQ1RJT059LGV0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBRLnRvTGluZVN0cmluZyh0aGlzLl9pbnB1dExpbmVzWzBdWzBdLHRoaXMuX2lucHV0TGluZXNbMF1bMV0pK1wiIC0gXCIrUS50b0xpbmVTdHJpbmcodGhpcy5faW5wdXRMaW5lc1sxXVswXSx0aGlzLl9pbnB1dExpbmVzWzFdWzFdKSt0aGlzLmdldFRvcG9sb2d5U3VtbWFyeSgpfSxldC5wcm90b3R5cGUuZ2V0RW5kcG9pbnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5faW5wdXRMaW5lc1t0XVtlXX0sZXQucHJvdG90eXBlLmlzSW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5fcmVzdWx0O2UrKylpZih0aGlzLl9pbnRQdFtlXS5lcXVhbHMyRCh0KSlyZXR1cm4hMDtyZXR1cm4hMX0sZXQucHJvdG90eXBlLmdldEludGVyc2VjdGlvbkFsb25nU2VnbWVudD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmNvbXB1dGVJbnRMaW5lSW5kZXgoKSx0aGlzLl9pbnRQdFt0aGlzLl9pbnRMaW5lSW5kZXhbdF1bZV1dfSxldC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZXQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV0fSxldC5jb21wdXRlRWRnZURpc3RhbmNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1NYXRoLmFicyhuLngtZS54KSxyPU1hdGguYWJzKG4ueS1lLnkpLG89LTE7aWYodC5lcXVhbHMoZSkpbz0wO2Vsc2UgaWYodC5lcXVhbHMobikpbz1pPnI/aTpyO2Vsc2V7dmFyIHM9TWF0aC5hYnModC54LWUueCksYT1NYXRoLmFicyh0LnktZS55KTswIT09KG89aT5yP3M6YSl8fHQuZXF1YWxzKGUpfHwobz1NYXRoLm1heChzLGEpKX1yZXR1cm4gdHQuaXNUcnVlKCEoMD09PW8mJiF0LmVxdWFscyhlKSksXCJCYWQgZGlzdGFuY2UgY2FsY3VsYXRpb25cIiksb30sZXQubm9uUm9idXN0Q29tcHV0ZUVkZ2VEaXN0YW5jZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC54LWUueCxyPXQueS1lLnksbz1NYXRoLnNxcnQoaSppK3Iqcik7cmV0dXJuIHR0LmlzVHJ1ZSghKDA9PT1vJiYhdC5lcXVhbHMoZSkpLFwiSW52YWxpZCBkaXN0YW5jZSBjYWxjdWxhdGlvblwiKSxvfSxudC5ET05UX0lOVEVSU0VDVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMH0sbnQuRE9fSU5URVJTRUNULmdldD1mdW5jdGlvbigpe3JldHVybiAxfSxudC5DT0xMSU5FQVIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDJ9LG50Lk5PX0lOVEVSU0VDVElPTi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMH0sbnQuUE9JTlRfSU5URVJTRUNUSU9OLmdldD1mdW5jdGlvbigpe3JldHVybiAxfSxudC5DT0xMSU5FQVJfSU5URVJTRUNUSU9OLmdldD1mdW5jdGlvbigpe3JldHVybiAyfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhldCxudCk7dmFyIGl0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXt0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuaXNJblNlZ21lbnRFbnZlbG9wZXM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGsodGhpcy5faW5wdXRMaW5lc1swXVswXSx0aGlzLl9pbnB1dExpbmVzWzBdWzFdKSxuPW5ldyBrKHRoaXMuX2lucHV0TGluZXNbMV1bMF0sdGhpcy5faW5wdXRMaW5lc1sxXVsxXSk7cmV0dXJuIGUuY29udGFpbnModCkmJm4uY29udGFpbnModCl9LGUucHJvdG90eXBlLmNvbXB1dGVJbnRlcnNlY3Rpb249ZnVuY3Rpb24oKXtpZigzIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdC5wcm90b3R5cGUuY29tcHV0ZUludGVyc2VjdGlvbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9YXJndW1lbnRzWzJdO2lmKHRoaXMuX2lzUHJvcGVyPSExLGsuaW50ZXJzZWN0cyhuLGksZSkmJjA9PT1zdC5vcmllbnRhdGlvbkluZGV4KG4saSxlKSYmMD09PXN0Lm9yaWVudGF0aW9uSW5kZXgoaSxuLGUpKXJldHVybiB0aGlzLl9pc1Byb3Blcj0hMCwoZS5lcXVhbHMobil8fGUuZXF1YWxzKGkpKSYmKHRoaXMuX2lzUHJvcGVyPSExKSx0aGlzLl9yZXN1bHQ9dC5QT0lOVF9JTlRFUlNFQ1RJT04sbnVsbDt0aGlzLl9yZXN1bHQ9dC5OT19JTlRFUlNFQ1RJT059LGUucHJvdG90eXBlLm5vcm1hbGl6ZVRvTWluaW11bT1mdW5jdGlvbih0LGUsbixpLHIpe3IueD10aGlzLnNtYWxsZXN0SW5BYnNWYWx1ZSh0LngsZS54LG4ueCxpLngpLHIueT10aGlzLnNtYWxsZXN0SW5BYnNWYWx1ZSh0LnksZS55LG4ueSxpLnkpLHQueC09ci54LHQueS09ci55LGUueC09ci54LGUueS09ci55LG4ueC09ci54LG4ueS09ci55LGkueC09ci54LGkueS09ci55fSxlLnByb3RvdHlwZS5zYWZlSENvb3JkaW5hdGVJbnRlcnNlY3Rpb249ZnVuY3Rpb24odCxuLGkscil7dmFyIG89bnVsbDt0cnl7bz1ZLmludGVyc2VjdGlvbih0LG4saSxyKX1jYXRjaChzKXtpZighKHMgaW5zdGFuY2VvZiB6KSl0aHJvdyBzO289ZS5uZWFyZXN0RW5kcG9pbnQodCxuLGkscil9cmV0dXJuIG99LGUucHJvdG90eXBlLmludGVyc2VjdGlvbj1mdW5jdGlvbih0LG4saSxyKXt2YXIgbz10aGlzLmludGVyc2VjdGlvbldpdGhOb3JtYWxpemF0aW9uKHQsbixpLHIpO3JldHVybiB0aGlzLmlzSW5TZWdtZW50RW52ZWxvcGVzKG8pfHwobz1uZXcgTihlLm5lYXJlc3RFbmRwb2ludCh0LG4saSxyKSkpLG51bGwhPT10aGlzLl9wcmVjaXNpb25Nb2RlbCYmdGhpcy5fcHJlY2lzaW9uTW9kZWwubWFrZVByZWNpc2Uobyksb30sZS5wcm90b3R5cGUuc21hbGxlc3RJbkFic1ZhbHVlPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXQsbz1NYXRoLmFicyhyKTtyZXR1cm4gTWF0aC5hYnMoZSk8byYmKHI9ZSxvPU1hdGguYWJzKGUpKSxNYXRoLmFicyhuKTxvJiYocj1uLG89TWF0aC5hYnMobikpLE1hdGguYWJzKGkpPG8mJihyPWkpLHJ9LGUucHJvdG90eXBlLmNoZWNrREQ9ZnVuY3Rpb24odCxlLG4saSxyKXt2YXIgbz1HLmludGVyc2VjdGlvbih0LGUsbixpKSxzPXRoaXMuaXNJblNlZ21lbnRFbnZlbG9wZXMobyk7WC5vdXQucHJpbnRsbihcIkREIGluIGVudiA9IFwiK3MrXCIgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLSBcIitvKSxyLmRpc3RhbmNlKG8pPjFlLTQmJlgub3V0LnByaW50bG4oXCJEaXN0YW5jZSA9IFwiK3IuZGlzdGFuY2UobykpfSxlLnByb3RvdHlwZS5pbnRlcnNlY3Rpb25XaXRoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1uZXcgTih0KSxvPW5ldyBOKGUpLHM9bmV3IE4obiksYT1uZXcgTihpKSx1PW5ldyBOO3RoaXMubm9ybWFsaXplVG9FbnZDZW50cmUocixvLHMsYSx1KTt2YXIgbD10aGlzLnNhZmVIQ29vcmRpbmF0ZUludGVyc2VjdGlvbihyLG8scyxhKTtyZXR1cm4gbC54Kz11LngsbC55Kz11LnksbH0sZS5wcm90b3R5cGUuY29tcHV0ZUNvbGxpbmVhckludGVyc2VjdGlvbj1mdW5jdGlvbihlLG4saSxyKXt2YXIgbz1rLmludGVyc2VjdHMoZSxuLGkpLHM9ay5pbnRlcnNlY3RzKGUsbixyKSxhPWsuaW50ZXJzZWN0cyhpLHIsZSksdT1rLmludGVyc2VjdHMoaSxyLG4pO3JldHVybiBvJiZzPyh0aGlzLl9pbnRQdFswXT1pLHRoaXMuX2ludFB0WzFdPXIsdC5DT0xMSU5FQVJfSU5URVJTRUNUSU9OKTphJiZ1Pyh0aGlzLl9pbnRQdFswXT1lLHRoaXMuX2ludFB0WzFdPW4sdC5DT0xMSU5FQVJfSU5URVJTRUNUSU9OKTpvJiZhPyh0aGlzLl9pbnRQdFswXT1pLHRoaXMuX2ludFB0WzFdPWUsIWkuZXF1YWxzKGUpfHxzfHx1P3QuQ09MTElORUFSX0lOVEVSU0VDVElPTjp0LlBPSU5UX0lOVEVSU0VDVElPTik6byYmdT8odGhpcy5faW50UHRbMF09aSx0aGlzLl9pbnRQdFsxXT1uLCFpLmVxdWFscyhuKXx8c3x8YT90LkNPTExJTkVBUl9JTlRFUlNFQ1RJT046dC5QT0lOVF9JTlRFUlNFQ1RJT04pOnMmJmE/KHRoaXMuX2ludFB0WzBdPXIsdGhpcy5faW50UHRbMV09ZSwhci5lcXVhbHMoZSl8fG98fHU/dC5DT0xMSU5FQVJfSU5URVJTRUNUSU9OOnQuUE9JTlRfSU5URVJTRUNUSU9OKTpzJiZ1Pyh0aGlzLl9pbnRQdFswXT1yLHRoaXMuX2ludFB0WzFdPW4sIXIuZXF1YWxzKG4pfHxvfHxhP3QuQ09MTElORUFSX0lOVEVSU0VDVElPTjp0LlBPSU5UX0lOVEVSU0VDVElPTik6dC5OT19JTlRFUlNFQ1RJT059LGUucHJvdG90eXBlLm5vcm1hbGl6ZVRvRW52Q2VudHJlPWZ1bmN0aW9uKHQsZSxuLGkscil7dmFyIG89dC54PGUueD90Lng6ZS54LHM9dC55PGUueT90Lnk6ZS55LGE9dC54PmUueD90Lng6ZS54LHU9dC55PmUueT90Lnk6ZS55LGw9bi54PGkueD9uLng6aS54LGM9bi55PGkueT9uLnk6aS55LHA9bi54PmkueD9uLng6aS54LGg9bi55PmkueT9uLnk6aS55LGY9KChvPmw/bzpsKSsoYTxwP2E6cCkpLzIsZz0oKHM+Yz9zOmMpKyh1PGg/dTpoKSkvMjtyLng9ZixyLnk9Zyx0LngtPXIueCx0LnktPXIueSxlLngtPXIueCxlLnktPXIueSxuLngtPXIueCxuLnktPXIueSxpLngtPXIueCxpLnktPXIueX0sZS5wcm90b3R5cGUuY29tcHV0ZUludGVyc2VjdD1mdW5jdGlvbihlLG4saSxyKXtpZih0aGlzLl9pc1Byb3Blcj0hMSwhay5pbnRlcnNlY3RzKGUsbixpLHIpKXJldHVybiB0Lk5PX0lOVEVSU0VDVElPTjt2YXIgbz1zdC5vcmllbnRhdGlvbkluZGV4KGUsbixpKSxzPXN0Lm9yaWVudGF0aW9uSW5kZXgoZSxuLHIpO2lmKG8+MCYmcz4wfHxvPDAmJnM8MClyZXR1cm4gdC5OT19JTlRFUlNFQ1RJT047dmFyIGE9c3Qub3JpZW50YXRpb25JbmRleChpLHIsZSksdT1zdC5vcmllbnRhdGlvbkluZGV4KGkscixuKTtpZihhPjAmJnU+MHx8YTwwJiZ1PDApcmV0dXJuIHQuTk9fSU5URVJTRUNUSU9OO3JldHVybiAwPT09byYmMD09PXMmJjA9PT1hJiYwPT09dT90aGlzLmNvbXB1dGVDb2xsaW5lYXJJbnRlcnNlY3Rpb24oZSxuLGkscik6KDA9PT1vfHwwPT09c3x8MD09PWF8fDA9PT11Pyh0aGlzLl9pc1Byb3Blcj0hMSxlLmVxdWFsczJEKGkpfHxlLmVxdWFsczJEKHIpP3RoaXMuX2ludFB0WzBdPWU6bi5lcXVhbHMyRChpKXx8bi5lcXVhbHMyRChyKT90aGlzLl9pbnRQdFswXT1uOjA9PT1vP3RoaXMuX2ludFB0WzBdPW5ldyBOKGkpOjA9PT1zP3RoaXMuX2ludFB0WzBdPW5ldyBOKHIpOjA9PT1hP3RoaXMuX2ludFB0WzBdPW5ldyBOKGUpOjA9PT11JiYodGhpcy5faW50UHRbMF09bmV3IE4obikpKToodGhpcy5faXNQcm9wZXI9ITAsdGhpcy5faW50UHRbMF09dGhpcy5pbnRlcnNlY3Rpb24oZSxuLGkscikpLHQuUE9JTlRfSU5URVJTRUNUSU9OKX0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZS5uZWFyZXN0RW5kcG9pbnQ9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dCxvPXN0LmRpc3RhbmNlUG9pbnRMaW5lKHQsbixpKSxzPXN0LmRpc3RhbmNlUG9pbnRMaW5lKGUsbixpKTtyZXR1cm4gczxvJiYobz1zLHI9ZSksKHM9c3QuZGlzdGFuY2VQb2ludExpbmUobix0LGUpKTxvJiYobz1zLHI9biksKHM9c3QuZGlzdGFuY2VQb2ludExpbmUoaSx0LGUpKTxvJiYobz1zLHI9aSkscn0sZX0oZXQpLHJ0PWZ1bmN0aW9uKCl7fTtydC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0scnQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHJ0fSxydC5vcmllbnRhdGlvbkluZGV4PWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1lLngtdC54LHI9ZS55LXQueSxvPW4ueC1lLngscz1uLnktZS55O3JldHVybiBydC5zaWduT2ZEZXQyeDIoaSxyLG8scyl9LHJ0LnNpZ25PZkRldDJ4Mj1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1udWxsLG89bnVsbCxzPW51bGw7aWYocj0xLDA9PT10fHwwPT09aSlyZXR1cm4gMD09PWV8fDA9PT1uPzA6ZT4wP24+MD8tcjpyOm4+MD9yOi1yO2lmKDA9PT1lfHwwPT09bilyZXR1cm4gaT4wP3Q+MD9yOi1yOnQ+MD8tcjpyO2lmKGU+MD9pPjA/ZTw9aXx8KHI9LXIsbz10LHQ9bixuPW8sbz1lLGU9aSxpPW8pOmU8PS1pPyhyPS1yLG49LW4saT0taSk6KG89dCx0PS1uLG49byxvPWUsZT0taSxpPW8pOmk+MD8tZTw9aT8ocj0tcix0PS10LGU9LWUpOihvPS10LHQ9bixuPW8sbz0tZSxlPWksaT1vKTplPj1pPyh0PS10LGU9LWUsbj0tbixpPS1pKToocj0tcixvPS10LHQ9LW4sbj1vLG89LWUsZT0taSxpPW8pLHQ+MCl7aWYoIShuPjApKXJldHVybiByO2lmKCEodDw9bikpcmV0dXJuIHJ9ZWxzZXtpZihuPjApcmV0dXJuLXI7aWYoISh0Pj1uKSlyZXR1cm4tcjtyPS1yLHQ9LXQsbj0tbn1mb3IoOzspe2lmKHM9TWF0aC5mbG9vcihuL3QpLG4tPXMqdCwoaS09cyplKTwwKXJldHVybi1yO2lmKGk+ZSlyZXR1cm4gcjtpZih0Pm4rbil7aWYoZTxpK2kpcmV0dXJuIHJ9ZWxzZXtpZihlPmkraSlyZXR1cm4tcjtuPXQtbixpPWUtaSxyPS1yfWlmKDA9PT1pKXJldHVybiAwPT09bj8wOi1yO2lmKDA9PT1uKXJldHVybiByO2lmKHM9TWF0aC5mbG9vcih0L24pLHQtPXMqbiwoZS09cyppKTwwKXJldHVybiByO2lmKGU+aSlyZXR1cm4tcjtpZihuPnQrdCl7aWYoaTxlK2UpcmV0dXJuLXJ9ZWxzZXtpZihpPmUrZSlyZXR1cm4gcjt0PW4tdCxlPWktZSxyPS1yfWlmKDA9PT1lKXJldHVybiAwPT09dD8wOnI7aWYoMD09PXQpcmV0dXJuLXJ9fTt2YXIgb3Q9ZnVuY3Rpb24oKXt0aGlzLl9wPW51bGwsdGhpcy5fY3Jvc3NpbmdDb3VudD0wLHRoaXMuX2lzUG9pbnRPblNlZ21lbnQ9ITE7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX3A9dH07b3QucHJvdG90eXBlLmNvdW50U2VnbWVudD1mdW5jdGlvbih0LGUpe2lmKHQueDx0aGlzLl9wLngmJmUueDx0aGlzLl9wLngpcmV0dXJuIG51bGw7aWYodGhpcy5fcC54PT09ZS54JiZ0aGlzLl9wLnk9PT1lLnkpcmV0dXJuIHRoaXMuX2lzUG9pbnRPblNlZ21lbnQ9ITAsbnVsbDtpZih0Lnk9PT10aGlzLl9wLnkmJmUueT09PXRoaXMuX3AueSl7dmFyIG49dC54LGk9ZS54O3JldHVybiBuPmkmJihuPWUueCxpPXQueCksdGhpcy5fcC54Pj1uJiZ0aGlzLl9wLng8PWkmJih0aGlzLl9pc1BvaW50T25TZWdtZW50PSEwKSxudWxsfWlmKHQueT50aGlzLl9wLnkmJmUueTw9dGhpcy5fcC55fHxlLnk+dGhpcy5fcC55JiZ0Lnk8PXRoaXMuX3AueSl7dmFyIHI9dC54LXRoaXMuX3AueCxvPXQueS10aGlzLl9wLnkscz1lLngtdGhpcy5fcC54LGE9ZS55LXRoaXMuX3AueSx1PXJ0LnNpZ25PZkRldDJ4MihyLG8scyxhKTtpZigwPT09dSlyZXR1cm4gdGhpcy5faXNQb2ludE9uU2VnbWVudD0hMCxudWxsO2E8byYmKHU9LXUpLHU+MCYmdGhpcy5fY3Jvc3NpbmdDb3VudCsrfX0sb3QucHJvdG90eXBlLmlzUG9pbnRJblBvbHlnb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRMb2NhdGlvbigpIT09Yi5FWFRFUklPUn0sb3QucHJvdG90eXBlLmdldExvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzUG9pbnRPblNlZ21lbnQ/Yi5CT1VOREFSWTp0aGlzLl9jcm9zc2luZ0NvdW50JTI9PTE/Yi5JTlRFUklPUjpiLkVYVEVSSU9SfSxvdC5wcm90b3R5cGUuaXNPblNlZ21lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNQb2ludE9uU2VnbWVudH0sb3QucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LG90LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBvdH0sb3QubG9jYXRlUG9pbnRJblJpbmc9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4mJk8oYXJndW1lbnRzWzFdLEIpKXtmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49bmV3IG90KHQpLGk9bmV3IE4scj1uZXcgTixvPTE7bzxlLnNpemUoKTtvKyspaWYoZS5nZXRDb29yZGluYXRlKG8saSksZS5nZXRDb29yZGluYXRlKG8tMSxyKSxuLmNvdW50U2VnbWVudChpLHIpLG4uaXNPblNlZ21lbnQoKSlyZXR1cm4gbi5nZXRMb2NhdGlvbigpO3JldHVybiBuLmdldExvY2F0aW9uKCl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIEFycmF5KXtmb3IodmFyIHM9YXJndW1lbnRzWzBdLGE9YXJndW1lbnRzWzFdLHU9bmV3IG90KHMpLGw9MTtsPGEubGVuZ3RoO2wrKyl7dmFyIGM9YVtsXSxwPWFbbC0xXTtpZih1LmNvdW50U2VnbWVudChjLHApLHUuaXNPblNlZ21lbnQoKSlyZXR1cm4gdS5nZXRMb2NhdGlvbigpfXJldHVybiB1LmdldExvY2F0aW9uKCl9fTt2YXIgc3Q9ZnVuY3Rpb24oKXt9LGF0PXtDTE9DS1dJU0U6e2NvbmZpZ3VyYWJsZTohMH0sUklHSFQ6e2NvbmZpZ3VyYWJsZTohMH0sQ09VTlRFUkNMT0NLV0lTRTp7Y29uZmlndXJhYmxlOiEwfSxMRUZUOntjb25maWd1cmFibGU6ITB9LENPTExJTkVBUjp7Y29uZmlndXJhYmxlOiEwfSxTVFJBSUdIVDp7Y29uZmlndXJhYmxlOiEwfX07c3QucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHN0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBzdH0sc3Qub3JpZW50YXRpb25JbmRleD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIEcub3JpZW50YXRpb25JbmRleCh0LGUsbil9LHN0LnNpZ25lZEFyZWE9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5KXt2YXIgdD1hcmd1bWVudHNbMF07aWYodC5sZW5ndGg8MylyZXR1cm4gMDtmb3IodmFyIGU9MCxuPXRbMF0ueCxpPTE7aTx0Lmxlbmd0aC0xO2krKyl7dmFyIHI9dFtpXS54LW4sbz10W2krMV0ueTtlKz1yKih0W2ktMV0ueS1vKX1yZXR1cm4gZS8yfWlmKE8oYXJndW1lbnRzWzBdLEIpKXt2YXIgcz1hcmd1bWVudHNbMF0sYT1zLnNpemUoKTtpZihhPDMpcmV0dXJuIDA7dmFyIHU9bmV3IE4sbD1uZXcgTixjPW5ldyBOO3MuZ2V0Q29vcmRpbmF0ZSgwLGwpLHMuZ2V0Q29vcmRpbmF0ZSgxLGMpO3ZhciBwPWwueDtjLngtPXA7Zm9yKHZhciBoPTAsZj0xO2Y8YS0xO2YrKyl1Lnk9bC55LGwueD1jLngsbC55PWMueSxzLmdldENvb3JkaW5hdGUoZisxLGMpLGMueC09cCxoKz1sLngqKHUueS1jLnkpO3JldHVybiBoLzJ9fSxzdC5kaXN0YW5jZUxpbmVMaW5lPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKHQuZXF1YWxzKGUpKXJldHVybiBzdC5kaXN0YW5jZVBvaW50TGluZSh0LG4saSk7aWYobi5lcXVhbHMoaSkpcmV0dXJuIHN0LmRpc3RhbmNlUG9pbnRMaW5lKGksdCxlKTt2YXIgcj0hMTtpZihrLmludGVyc2VjdHModCxlLG4saSkpe3ZhciBvPShlLngtdC54KSooaS55LW4ueSktKGUueS10LnkpKihpLngtbi54KTtpZigwPT09bylyPSEwO2Vsc2V7dmFyIHM9KHQueS1uLnkpKihpLngtbi54KS0odC54LW4ueCkqKGkueS1uLnkpLGE9KCh0Lnktbi55KSooZS54LXQueCktKHQueC1uLngpKihlLnktdC55KSkvbyx1PXMvbzsodTwwfHx1PjF8fGE8MHx8YT4xKSYmKHI9ITApfX1lbHNlIHI9ITA7cmV0dXJuIHI/VC5taW4oc3QuZGlzdGFuY2VQb2ludExpbmUodCxuLGkpLHN0LmRpc3RhbmNlUG9pbnRMaW5lKGUsbixpKSxzdC5kaXN0YW5jZVBvaW50TGluZShuLHQsZSksc3QuZGlzdGFuY2VQb2ludExpbmUoaSx0LGUpKTowfSxzdC5pc1BvaW50SW5SaW5nPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHN0LmxvY2F0ZVBvaW50SW5SaW5nKHQsZSkhPT1iLkVYVEVSSU9SfSxzdC5jb21wdXRlTGVuZ3RoPWZ1bmN0aW9uKHQpe3ZhciBlPXQuc2l6ZSgpO2lmKGU8PTEpcmV0dXJuIDA7dmFyIG49MCxpPW5ldyBOO3QuZ2V0Q29vcmRpbmF0ZSgwLGkpO2Zvcih2YXIgcj1pLngsbz1pLnkscz0xO3M8ZTtzKyspe3QuZ2V0Q29vcmRpbmF0ZShzLGkpO3ZhciBhPWkueCx1PWkueSxsPWEtcixjPXUtbztuKz1NYXRoLnNxcnQobCpsK2MqYykscj1hLG89dX1yZXR1cm4gbn0sc3QuaXNDQ1c9ZnVuY3Rpb24odCl7dmFyIGU9dC5sZW5ndGgtMTtpZihlPDMpdGhyb3cgbmV3IF8oXCJSaW5nIGhhcyBmZXdlciB0aGFuIDQgcG9pbnRzLCBzbyBvcmllbnRhdGlvbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFwiKTtmb3IodmFyIG49dFswXSxpPTAscj0xO3I8PWU7cisrKXt2YXIgbz10W3JdO28ueT5uLnkmJihuPW8saT1yKX12YXIgcz1pO2RveyhzLT0xKTwwJiYocz1lKX13aGlsZSh0W3NdLmVxdWFsczJEKG4pJiZzIT09aSk7dmFyIGE9aTtkb3thPShhKzEpJWV9d2hpbGUodFthXS5lcXVhbHMyRChuKSYmYSE9PWkpO3ZhciB1PXRbc10sbD10W2FdO2lmKHUuZXF1YWxzMkQobil8fGwuZXF1YWxzMkQobil8fHUuZXF1YWxzMkQobCkpcmV0dXJuITE7dmFyIGM9c3QuY29tcHV0ZU9yaWVudGF0aW9uKHUsbixsKSxwPSExO3JldHVybiBwPTA9PT1jP3UueD5sLng6Yz4wLHB9LHN0LmxvY2F0ZVBvaW50SW5SaW5nPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG90LmxvY2F0ZVBvaW50SW5SaW5nKHQsZSl9LHN0LmRpc3RhbmNlUG9pbnRMaW5lUGVycGVuZGljdWxhcj1mdW5jdGlvbih0LGUsbil7dmFyIGk9KG4ueC1lLngpKihuLngtZS54KSsobi55LWUueSkqKG4ueS1lLnkpLHI9KChlLnktdC55KSoobi54LWUueCktKGUueC10LngpKihuLnktZS55KSkvaTtyZXR1cm4gTWF0aC5hYnMocikqTWF0aC5zcXJ0KGkpfSxzdC5jb21wdXRlT3JpZW50YXRpb249ZnVuY3Rpb24odCxlLG4pe3JldHVybiBzdC5vcmllbnRhdGlvbkluZGV4KHQsZSxuKX0sc3QuZGlzdGFuY2VQb2ludExpbmU9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO2lmKDA9PT1lLmxlbmd0aCl0aHJvdyBuZXcgXyhcIkxpbmUgYXJyYXkgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB2ZXJ0ZXhcIik7Zm9yKHZhciBuPXQuZGlzdGFuY2UoZVswXSksaT0wO2k8ZS5sZW5ndGgtMTtpKyspe3ZhciByPXN0LmRpc3RhbmNlUG9pbnRMaW5lKHQsZVtpXSxlW2krMV0pO3I8biYmKG49cil9cmV0dXJuIG59aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBvPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxhPWFyZ3VtZW50c1syXTtpZihzLng9PT1hLngmJnMueT09PWEueSlyZXR1cm4gby5kaXN0YW5jZShzKTt2YXIgdT0oYS54LXMueCkqKGEueC1zLngpKyhhLnktcy55KSooYS55LXMueSksbD0oKG8ueC1zLngpKihhLngtcy54KSsoby55LXMueSkqKGEueS1zLnkpKS91O2lmKGw8PTApcmV0dXJuIG8uZGlzdGFuY2Uocyk7aWYobD49MSlyZXR1cm4gby5kaXN0YW5jZShhKTt2YXIgYz0oKHMueS1vLnkpKihhLngtcy54KS0ocy54LW8ueCkqKGEueS1zLnkpKS91O3JldHVybiBNYXRoLmFicyhjKSpNYXRoLnNxcnQodSl9fSxzdC5pc09uTGluZT1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgaXQsaT0xO2k8ZS5sZW5ndGg7aSsrKXt2YXIgcj1lW2ktMV0sbz1lW2ldO2lmKG4uY29tcHV0ZUludGVyc2VjdGlvbih0LHIsbyksbi5oYXNJbnRlcnNlY3Rpb24oKSlyZXR1cm4hMH1yZXR1cm4hMX0sYXQuQ0xPQ0tXSVNFLmdldD1mdW5jdGlvbigpe3JldHVybi0xfSxhdC5SSUdIVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gc3QuQ0xPQ0tXSVNFfSxhdC5DT1VOVEVSQ0xPQ0tXSVNFLmdldD1mdW5jdGlvbigpe3JldHVybiAxfSxhdC5MRUZULmdldD1mdW5jdGlvbigpe3JldHVybiBzdC5DT1VOVEVSQ0xPQ0tXSVNFfSxhdC5DT0xMSU5FQVIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB9LGF0LlNUUkFJR0hULmdldD1mdW5jdGlvbigpe3JldHVybiBzdC5DT0xMSU5FQVJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0LGF0KTt2YXIgdXQ9ZnVuY3Rpb24oKXt9O3V0LnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCl7fSx1dC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sdXQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHV0fTt2YXIgbHQ9ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fZW52ZWxvcGU9bnVsbCx0aGlzLl9mYWN0b3J5PW51bGwsdGhpcy5fU1JJRD1udWxsLHRoaXMuX3VzZXJEYXRhPW51bGwsdGhpcy5fZmFjdG9yeT10LHRoaXMuX1NSSUQ9dC5nZXRTUklEKCl9LGN0PXtzZXJpYWxWZXJzaW9uVUlEOntjb25maWd1cmFibGU6ITB9LFNPUlRJTkRFWF9QT0lOVDp7Y29uZmlndXJhYmxlOiEwfSxTT1JUSU5ERVhfTVVMVElQT0lOVDp7Y29uZmlndXJhYmxlOiEwfSxTT1JUSU5ERVhfTElORVNUUklORzp7Y29uZmlndXJhYmxlOiEwfSxTT1JUSU5ERVhfTElORUFSUklORzp7Y29uZmlndXJhYmxlOiEwfSxTT1JUSU5ERVhfTVVMVElMSU5FU1RSSU5HOntjb25maWd1cmFibGU6ITB9LFNPUlRJTkRFWF9QT0xZR09OOntjb25maWd1cmFibGU6ITB9LFNPUlRJTkRFWF9NVUxUSVBPTFlHT046e2NvbmZpZ3VyYWJsZTohMH0sU09SVElOREVYX0dFT01FVFJZQ09MTEVDVElPTjp7Y29uZmlndXJhYmxlOiEwfSxnZW9tZXRyeUNoYW5nZWRGaWx0ZXI6e2NvbmZpZ3VyYWJsZTohMH19O2x0LnByb3RvdHlwZS5pc0dlb21ldHJ5Q29sbGVjdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFNvcnRJbmRleCgpPT09bHQuU09SVElOREVYX0dFT01FVFJZQ09MTEVDVElPTn0sbHQucHJvdG90eXBlLmdldEZhY3Rvcnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZmFjdG9yeX0sbHQucHJvdG90eXBlLmdldEdlb21ldHJ5Tj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpc30sbHQucHJvdG90eXBlLmdldEFyZWE9ZnVuY3Rpb24oKXtyZXR1cm4gMH0sbHQucHJvdG90eXBlLmlzUmVjdGFuZ2xlPWZ1bmN0aW9uKCl7cmV0dXJuITF9LGx0LnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGx0KXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIG51bGwhPT10JiZ0aGlzLmVxdWFsc1RvcG8odCl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBPYmplY3Qpe3ZhciBlPWFyZ3VtZW50c1swXTtpZighKGUgaW5zdGFuY2VvZiBsdCkpcmV0dXJuITE7dmFyIG49ZTtyZXR1cm4gdGhpcy5lcXVhbHNFeGFjdChuKX19LGx0LnByb3RvdHlwZS5lcXVhbHNFeGFjdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcz09PXR8fHRoaXMuZXF1YWxzRXhhY3QodCwwKX0sbHQucHJvdG90eXBlLmdlb21ldHJ5Q2hhbmdlZD1mdW5jdGlvbigpe3RoaXMuYXBwbHkobHQuZ2VvbWV0cnlDaGFuZ2VkRmlsdGVyKX0sbHQucHJvdG90eXBlLmdlb21ldHJ5Q2hhbmdlZEFjdGlvbj1mdW5jdGlvbigpe3RoaXMuX2VudmVsb3BlPW51bGx9LGx0LnByb3RvdHlwZS5lcXVhbHNOb3JtPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmdGhpcy5ub3JtKCkuZXF1YWxzRXhhY3QodC5ub3JtKCkpfSxsdC5wcm90b3R5cGUuZ2V0TGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIDB9LGx0LnByb3RvdHlwZS5nZXROdW1HZW9tZXRyaWVzPWZ1bmN0aW9uKCl7cmV0dXJuIDF9LGx0LnByb3RvdHlwZS5jb21wYXJlVG89ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dDtyZXR1cm4gdGhpcy5nZXRTb3J0SW5kZXgoKSE9PWUuZ2V0U29ydEluZGV4KCk/dGhpcy5nZXRTb3J0SW5kZXgoKS1lLmdldFNvcnRJbmRleCgpOnRoaXMuaXNFbXB0eSgpJiZlLmlzRW1wdHkoKT8wOnRoaXMuaXNFbXB0eSgpPy0xOmUuaXNFbXB0eSgpPzE6dGhpcy5jb21wYXJlVG9TYW1lQ2xhc3ModCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5nZXRTb3J0SW5kZXgoKSE9PW4uZ2V0U29ydEluZGV4KCk/dGhpcy5nZXRTb3J0SW5kZXgoKS1uLmdldFNvcnRJbmRleCgpOnRoaXMuaXNFbXB0eSgpJiZuLmlzRW1wdHkoKT8wOnRoaXMuaXNFbXB0eSgpPy0xOm4uaXNFbXB0eSgpPzE6dGhpcy5jb21wYXJlVG9TYW1lQ2xhc3MobixpKX19LGx0LnByb3RvdHlwZS5nZXRVc2VyRGF0YT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl91c2VyRGF0YX0sbHQucHJvdG90eXBlLmdldFNSSUQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fU1JJRH0sbHQucHJvdG90eXBlLmdldEVudmVsb3BlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0RmFjdG9yeSgpLnRvR2VvbWV0cnkodGhpcy5nZXRFbnZlbG9wZUludGVybmFsKCkpfSxsdC5wcm90b3R5cGUuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb249ZnVuY3Rpb24odCl7aWYodC5nZXRTb3J0SW5kZXgoKT09PWx0LlNPUlRJTkRFWF9HRU9NRVRSWUNPTExFQ1RJT04pdGhyb3cgbmV3IF8oXCJUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IEdlb21ldHJ5Q29sbGVjdGlvbiBhcmd1bWVudHNcIil9LGx0LnByb3RvdHlwZS5lcXVhbD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIDA9PT1uP3QuZXF1YWxzKGUpOnQuZGlzdGFuY2UoZSk8PW59LGx0LnByb3RvdHlwZS5ub3JtPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jb3B5KCk7cmV0dXJuIHQubm9ybWFsaXplKCksdH0sbHQucHJvdG90eXBlLmdldFByZWNpc2lvbk1vZGVsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZhY3RvcnkuZ2V0UHJlY2lzaW9uTW9kZWwoKX0sbHQucHJvdG90eXBlLmdldEVudmVsb3BlSW50ZXJuYWw9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuX2VudmVsb3BlJiYodGhpcy5fZW52ZWxvcGU9dGhpcy5jb21wdXRlRW52ZWxvcGVJbnRlcm5hbCgpKSxuZXcgayh0aGlzLl9lbnZlbG9wZSl9LGx0LnByb3RvdHlwZS5zZXRTUklEPWZ1bmN0aW9uKHQpe3RoaXMuX1NSSUQ9dH0sbHQucHJvdG90eXBlLnNldFVzZXJEYXRhPWZ1bmN0aW9uKHQpe3RoaXMuX3VzZXJEYXRhPXR9LGx0LnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuaXRlcmF0b3IoKSxpPWUuaXRlcmF0b3IoKTtuLmhhc05leHQoKSYmaS5oYXNOZXh0KCk7KXt2YXIgcj1uLm5leHQoKSxvPWkubmV4dCgpLHM9ci5jb21wYXJlVG8obyk7aWYoMCE9PXMpcmV0dXJuIHN9cmV0dXJuIG4uaGFzTmV4dCgpPzE6aS5oYXNOZXh0KCk/LTE6MH0sbHQucHJvdG90eXBlLmhhc2hDb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLmhhc2hDb2RlKCl9LGx0LnByb3RvdHlwZS5pc0dlb21ldHJ5Q29sbGVjdGlvbk9yRGVyaXZlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFNvcnRJbmRleCgpPT09bHQuU09SVElOREVYX0dFT01FVFJZQ09MTEVDVElPTnx8dGhpcy5nZXRTb3J0SW5kZXgoKT09PWx0LlNPUlRJTkRFWF9NVUxUSVBPSU5UfHx0aGlzLmdldFNvcnRJbmRleCgpPT09bHQuU09SVElOREVYX01VTFRJTElORVNUUklOR3x8dGhpcy5nZXRTb3J0SW5kZXgoKT09PWx0LlNPUlRJTkRFWF9NVUxUSVBPTFlHT059LGx0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltFLEksZV19LGx0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBsdH0sbHQuaGFzTm9uRW1wdHlFbGVtZW50cz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZighdFtlXS5pc0VtcHR5KCkpcmV0dXJuITA7cmV0dXJuITF9LGx0Lmhhc051bGxFbGVtZW50cz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZihudWxsPT09dFtlXSlyZXR1cm4hMDtyZXR1cm4hMX0sY3Quc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMHg3OTllYTQ2NTIyODU0YzAwfSxjdC5TT1JUSU5ERVhfUE9JTlQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB9LGN0LlNPUlRJTkRFWF9NVUxUSVBPSU5ULmdldD1mdW5jdGlvbigpe3JldHVybiAxfSxjdC5TT1JUSU5ERVhfTElORVNUUklORy5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMn0sY3QuU09SVElOREVYX0xJTkVBUlJJTkcuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDN9LGN0LlNPUlRJTkRFWF9NVUxUSUxJTkVTVFJJTkcuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDR9LGN0LlNPUlRJTkRFWF9QT0xZR09OLmdldD1mdW5jdGlvbigpe3JldHVybiA1fSxjdC5TT1JUSU5ERVhfTVVMVElQT0xZR09OLmdldD1mdW5jdGlvbigpe3JldHVybiA2fSxjdC5TT1JUSU5ERVhfR0VPTUVUUllDT0xMRUNUSU9OLmdldD1mdW5jdGlvbigpe3JldHVybiA3fSxjdC5nZW9tZXRyeUNoYW5nZWRGaWx0ZXIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHB0fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsdCxjdCk7dmFyIHB0PWZ1bmN0aW9uKCl7fTtwdC5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVyblt1dF19LHB0LmZpbHRlcj1mdW5jdGlvbih0KXt0Lmdlb21ldHJ5Q2hhbmdlZEFjdGlvbigpfTt2YXIgaHQ9ZnVuY3Rpb24oKXt9O2h0LnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCl7fSxodC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0saHQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGh0fTt2YXIgZnQ9ZnVuY3Rpb24oKXt9LGd0PXtNb2QyQm91bmRhcnlOb2RlUnVsZTp7Y29uZmlndXJhYmxlOiEwfSxFbmRQb2ludEJvdW5kYXJ5Tm9kZVJ1bGU6e2NvbmZpZ3VyYWJsZTohMH0sTXVsdGlWYWxlbnRFbmRQb2ludEJvdW5kYXJ5Tm9kZVJ1bGU6e2NvbmZpZ3VyYWJsZTohMH0sTW9ub1ZhbGVudEVuZFBvaW50Qm91bmRhcnlOb2RlUnVsZTp7Y29uZmlndXJhYmxlOiEwfSxNT0QyX0JPVU5EQVJZX1JVTEU6e2NvbmZpZ3VyYWJsZTohMH0sRU5EUE9JTlRfQk9VTkRBUllfUlVMRTp7Y29uZmlndXJhYmxlOiEwfSxNVUxUSVZBTEVOVF9FTkRQT0lOVF9CT1VOREFSWV9SVUxFOntjb25maWd1cmFibGU6ITB9LE1PTk9WQUxFTlRfRU5EUE9JTlRfQk9VTkRBUllfUlVMRTp7Y29uZmlndXJhYmxlOiEwfSxPR0NfU0ZTX0JPVU5EQVJZX1JVTEU6e2NvbmZpZ3VyYWJsZTohMH19O2Z0LnByb3RvdHlwZS5pc0luQm91bmRhcnk9ZnVuY3Rpb24odCl7fSxmdC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZnQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGZ0fSxndC5Nb2QyQm91bmRhcnlOb2RlUnVsZS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gZHR9LGd0LkVuZFBvaW50Qm91bmRhcnlOb2RlUnVsZS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4geXR9LGd0Lk11bHRpVmFsZW50RW5kUG9pbnRCb3VuZGFyeU5vZGVSdWxlLmdldD1mdW5jdGlvbigpe3JldHVybiBfdH0sZ3QuTW9ub1ZhbGVudEVuZFBvaW50Qm91bmRhcnlOb2RlUnVsZS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbXR9LGd0Lk1PRDJfQk9VTkRBUllfUlVMRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGR0fSxndC5FTkRQT0lOVF9CT1VOREFSWV9SVUxFLmdldD1mdW5jdGlvbigpe3JldHVybiBuZXcgeXR9LGd0Lk1VTFRJVkFMRU5UX0VORFBPSU5UX0JPVU5EQVJZX1JVTEUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBfdH0sZ3QuTU9OT1ZBTEVOVF9FTkRQT0lOVF9CT1VOREFSWV9SVUxFLmdldD1mdW5jdGlvbigpe3JldHVybiBuZXcgbXR9LGd0Lk9HQ19TRlNfQk9VTkRBUllfUlVMRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gZnQuTU9EMl9CT1VOREFSWV9SVUxFfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhmdCxndCk7dmFyIGR0PWZ1bmN0aW9uKCl7fTtkdC5wcm90b3R5cGUuaXNJbkJvdW5kYXJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0JTI9PTF9LGR0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltmdF19LGR0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBkdH07dmFyIHl0PWZ1bmN0aW9uKCl7fTt5dC5wcm90b3R5cGUuaXNJbkJvdW5kYXJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0PjB9LHl0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltmdF19LHl0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB5dH07dmFyIF90PWZ1bmN0aW9uKCl7fTtfdC5wcm90b3R5cGUuaXNJbkJvdW5kYXJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0PjF9LF90LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltmdF19LF90LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBfdH07dmFyIG10PWZ1bmN0aW9uKCl7fTttdC5wcm90b3R5cGUuaXNJbkJvdW5kYXJ5PWZ1bmN0aW9uKHQpe3JldHVybiAxPT09dH0sbXQucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW2Z0XX0sbXQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIG10fTt2YXIgdnQ9ZnVuY3Rpb24oKXt9O3Z0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oKXt9LHZ0LnByb3RvdHlwZS5hZGRBbGw9ZnVuY3Rpb24oKXt9LHZ0LnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7fSx2dC5wcm90b3R5cGUuaXRlcmF0b3I9ZnVuY3Rpb24oKXt9LHZ0LnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7fSx2dC5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe30sdnQucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe307dmFyIEl0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dC5jYWxsKHRoaXMpLHRoaXMubWVzc2FnZT1lfHxcIlwifXQmJihlLl9fcHJvdG9fXz10KSwoZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWU7dmFyIG49e25hbWU6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybiBuLm5hbWUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuXCJJbmRleE91dE9mQm91bmRzRXhjZXB0aW9uXCJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsbiksZX0oRXJyb3IpLEV0PWZ1bmN0aW9uKCl7fTtFdC5wcm90b3R5cGUuaGFzTmV4dD1mdW5jdGlvbigpe30sRXQucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXt9LEV0LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt9O3ZhciB4dD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe30sZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7fSxlfSh2dCk7KG4ucHJvdG90eXBlPW5ldyBFcnJvcikubmFtZT1cIk5vU3VjaEVsZW1lbnRFeGNlcHRpb25cIjt2YXIgTnQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuY2FsbCh0aGlzKSx0aGlzLmFycmF5Xz1bXSxhcmd1bWVudHNbMF1pbnN0YW5jZW9mIHZ0JiZ0aGlzLmFkZEFsbChhcmd1bWVudHNbMF0pfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5lbnN1cmVDYXBhY2l0eT1mdW5jdGlvbigpe30sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bdCx2dF19LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5hcnJheV8ucHVzaCh0KTp0aGlzLmFycmF5Xy5zcGxpY2UoYXJndW1lbnRzWzBdLGFyZ3VtZW50c1sxXSksITB9LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5hcnJheV89W119LGUucHJvdG90eXBlLmFkZEFsbD1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl0aGlzLmFkZChlLm5leHQoKSk7cmV0dXJuITB9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuYXJyYXlfW3RdO3JldHVybiB0aGlzLmFycmF5X1t0XT1lLG59LGUucHJvdG90eXBlLml0ZXJhdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBDdCh0aGlzKX0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe2lmKHQ8MHx8dD49dGhpcy5zaXplKCkpdGhyb3cgbmV3IEl0O3JldHVybiB0aGlzLmFycmF5X1t0XX0sZS5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5hcnJheV8ubGVuZ3RofSxlLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJyYXlfLmxlbmd0aH0sZS5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe2Zvcih2YXIgdD1bXSxlPTAsbj10aGlzLmFycmF5Xy5sZW5ndGg7ZTxuO2UrKyl0LnB1c2godGhpcy5hcnJheV9bZV0pO3JldHVybiB0fSxlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPSExLG49MCxpPXRoaXMuYXJyYXlfLmxlbmd0aDtuPGk7bisrKWlmKHRoaXMuYXJyYXlfW25dPT09dCl7dGhpcy5hcnJheV8uc3BsaWNlKG4sMSksZT0hMDticmVha31yZXR1cm4gZX0sZX0oeHQpLEN0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dC5jYWxsKHRoaXMpLHRoaXMuYXJyYXlMaXN0Xz1lLHRoaXMucG9zaXRpb25fPTB9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXtpZih0aGlzLnBvc2l0aW9uXz09PXRoaXMuYXJyYXlMaXN0Xy5zaXplKCkpdGhyb3cgbmV3IG47cmV0dXJuIHRoaXMuYXJyYXlMaXN0Xy5nZXQodGhpcy5wb3NpdGlvbl8rKyl9LGUucHJvdG90eXBlLmhhc05leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wb3NpdGlvbl88dGhpcy5hcnJheUxpc3RfLnNpemUoKX0sZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFycmF5TGlzdF8uc2V0KHRoaXMucG9zaXRpb25fLTEsdCl9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3RoaXMuYXJyYXlMaXN0Xy5yZW1vdmUodGhpcy5hcnJheUxpc3RfLmdldCh0aGlzLnBvc2l0aW9uXykpfSxlfShFdCksU3Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe2lmKHQuY2FsbCh0aGlzKSwwPT09YXJndW1lbnRzLmxlbmd0aCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuZW5zdXJlQ2FwYWNpdHkoZS5sZW5ndGgpLHRoaXMuYWRkKGUsITApfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTt0aGlzLmVuc3VyZUNhcGFjaXR5KG4ubGVuZ3RoKSx0aGlzLmFkZChuLGkpfX10JiYoZS5fX3Byb3RvX189dCksKGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1lO3ZhciBuPXtjb29yZEFycmF5VHlwZTp7Y29uZmlndXJhYmxlOiEwfX07cmV0dXJuIG4uY29vcmRBcnJheVR5cGUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBcnJheSgwKS5maWxsKG51bGwpfSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldCh0KX0sZS5wcm90b3R5cGUuYWRkQWxsPWZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT0hMSxyPWUuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspdGhpcy5hZGQoci5uZXh0KCksbiksaT0hMDtyZXR1cm4gaX1yZXR1cm4gdC5wcm90b3R5cGUuYWRkQWxsLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzKSxuPTA7bjx0aGlzLnNpemUoKTtuKyspZS5hZGQobix0aGlzLmdldChuKS5jb3B5KCkpO3JldHVybiBlfSxlLnByb3RvdHlwZS50b0Nvb3JkaW5hdGVBcnJheT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRvQXJyYXkoZS5jb29yZEFycmF5VHlwZSl9LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF07dC5wcm90b3R5cGUuYWRkLmNhbGwodGhpcyxlKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5JiZcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3JldHVybiB0aGlzLmFkZChuLGksITApLCEwfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTiYmXCJib29sZWFuXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciByPWFyZ3VtZW50c1swXTtpZighYXJndW1lbnRzWzFdJiZ0aGlzLnNpemUoKT49MSl7aWYodGhpcy5nZXQodGhpcy5zaXplKCktMSkuZXF1YWxzMkQocikpcmV0dXJuIG51bGx9dC5wcm90b3R5cGUuYWRkLmNhbGwodGhpcyxyKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgT2JqZWN0JiZcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIG89YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdO3JldHVybiB0aGlzLmFkZChvLHMpLCEwfX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSYmXCJib29sZWFuXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciBhPWFyZ3VtZW50c1swXSx1PWFyZ3VtZW50c1sxXTtpZihhcmd1bWVudHNbMl0pZm9yKHZhciBsPTA7bDxhLmxlbmd0aDtsKyspdGhpcy5hZGQoYVtsXSx1KTtlbHNlIGZvcih2YXIgYz1hLmxlbmd0aC0xO2M+PTA7Yy0tKXRoaXMuYWRkKGFbY10sdSk7cmV0dXJuITB9aWYoXCJib29sZWFuXCI9PXR5cGVvZiBhcmd1bWVudHNbMl0mJk51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzBdKSYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBOKXt2YXIgcD1hcmd1bWVudHNbMF0saD1hcmd1bWVudHNbMV07aWYoIWFyZ3VtZW50c1syXSl7dmFyIGY9dGhpcy5zaXplKCk7aWYoZj4wKXtpZihwPjApe2lmKHRoaXMuZ2V0KHAtMSkuZXF1YWxzMkQoaCkpcmV0dXJuIG51bGx9aWYocDxmKXtpZih0aGlzLmdldChwKS5lcXVhbHMyRChoKSlyZXR1cm4gbnVsbH19fXQucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMscCxoKX19ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGc9YXJndW1lbnRzWzBdLGQ9YXJndW1lbnRzWzFdLHk9YXJndW1lbnRzWzJdLF89YXJndW1lbnRzWzNdLG09MTt5Pl8mJihtPS0xKTtmb3IodmFyIHY9eTt2IT09Xzt2Kz1tKXRoaXMuYWRkKGdbdl0sZCk7cmV0dXJuITB9fSxlLnByb3RvdHlwZS5jbG9zZVJpbmc9ZnVuY3Rpb24oKXt0aGlzLnNpemUoKT4wJiZ0aGlzLmFkZChuZXcgTih0aGlzLmdldCgwKSksITEpfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLG4pLGV9KE50KSxMdD1mdW5jdGlvbigpe30sYnQ9e0ZvcndhcmRDb21wYXJhdG9yOntjb25maWd1cmFibGU6ITB9LEJpZGlyZWN0aW9uYWxDb21wYXJhdG9yOntjb25maWd1cmFibGU6ITB9LGNvb3JkQXJyYXlUeXBlOntjb25maWd1cmFibGU6ITB9fTtidC5Gb3J3YXJkQ29tcGFyYXRvci5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gd3R9LGJ0LkJpZGlyZWN0aW9uYWxDb21wYXJhdG9yLmdldD1mdW5jdGlvbigpe3JldHVybiBPdH0sYnQuY29vcmRBcnJheVR5cGUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBcnJheSgwKS5maWxsKG51bGwpfSxMdC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sTHQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEx0fSxMdC5pc1Jpbmc9ZnVuY3Rpb24odCl7cmV0dXJuISh0Lmxlbmd0aDw0KSYmISF0WzBdLmVxdWFsczJEKHRbdC5sZW5ndGgtMV0pfSxMdC5wdE5vdEluTGlzdD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO2lmKEx0LmluZGV4T2YoaSxlKTwwKXJldHVybiBpfXJldHVybiBudWxsfSxMdC5zY3JvbGw9ZnVuY3Rpb24odCxlKXt2YXIgbj1MdC5pbmRleE9mKGUsdCk7aWYobjwwKXJldHVybiBudWxsO3ZhciBpPW5ldyBBcnJheSh0Lmxlbmd0aCkuZmlsbChudWxsKTtYLmFycmF5Y29weSh0LG4saSwwLHQubGVuZ3RoLW4pLFguYXJyYXljb3B5KHQsMCxpLHQubGVuZ3RoLW4sbiksWC5hcnJheWNvcHkoaSwwLHQsMCx0Lmxlbmd0aCl9LEx0LmVxdWFscz1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07aWYodD09PWUpcmV0dXJuITA7aWYobnVsbD09PXR8fG51bGw9PT1lKXJldHVybiExO2lmKHQubGVuZ3RoIT09ZS5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYoIXRbbl0uZXF1YWxzKGVbbl0pKXJldHVybiExO3JldHVybiEwfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl07aWYoaT09PXIpcmV0dXJuITA7aWYobnVsbD09PWl8fG51bGw9PT1yKXJldHVybiExO2lmKGkubGVuZ3RoIT09ci5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBzPTA7czxpLmxlbmd0aDtzKyspaWYoMCE9PW8uY29tcGFyZShpW3NdLHJbc10pKXJldHVybiExO3JldHVybiEwfX0sTHQuaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPW5ldyBTdCxpPTA7aTx0Lmxlbmd0aDtpKyspZS5pbnRlcnNlY3RzKHRbaV0pJiZuLmFkZCh0W2ldLCEwKTtyZXR1cm4gbi50b0Nvb3JkaW5hdGVBcnJheSgpfSxMdC5oYXNSZXBlYXRlZFBvaW50cz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPHQubGVuZ3RoO2UrKylpZih0W2UtMV0uZXF1YWxzKHRbZV0pKXJldHVybiEwO3JldHVybiExfSxMdC5yZW1vdmVSZXBlYXRlZFBvaW50cz1mdW5jdGlvbih0KXtpZighTHQuaGFzUmVwZWF0ZWRQb2ludHModCkpcmV0dXJuIHQ7cmV0dXJuIG5ldyBTdCh0LCExKS50b0Nvb3JkaW5hdGVBcnJheSgpfSxMdC5yZXZlcnNlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lmxlbmd0aC0xLG49TWF0aC50cnVuYyhlLzIpLGk9MDtpPD1uO2krKyl7dmFyIHI9dFtpXTt0W2ldPXRbZS1pXSx0W2UtaV09cn19LEx0LnJlbW92ZU51bGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj0wO248dC5sZW5ndGg7bisrKW51bGwhPT10W25dJiZlKys7dmFyIGk9bmV3IEFycmF5KGUpLmZpbGwobnVsbCk7aWYoMD09PWUpcmV0dXJuIGk7Zm9yKHZhciByPTAsbz0wO288dC5sZW5ndGg7bysrKW51bGwhPT10W29dJiYoaVtyKytdPXRbb10pO3JldHVybiBpfSxMdC5jb3B5RGVlcD1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9bmV3IEFycmF5KHQubGVuZ3RoKS5maWxsKG51bGwpLG49MDtuPHQubGVuZ3RoO24rKyllW25dPW5ldyBOKHRbbl0pO3JldHVybiBlfWlmKDU9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl0scz1hcmd1bWVudHNbM10sYT1hcmd1bWVudHNbNF0sdT0wO3U8YTt1Kyspb1tzK3VdPW5ldyBOKGlbcit1XSl9LEx0LmlzRXF1YWxSZXZlcnNlZD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dLHI9ZVt0Lmxlbmd0aC1uLTFdO2lmKDAhPT1pLmNvbXBhcmVUbyhyKSlyZXR1cm4hMX1yZXR1cm4hMH0sTHQuZW52ZWxvcGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBrLG49MDtuPHQubGVuZ3RoO24rKyllLmV4cGFuZFRvSW5jbHVkZSh0W25dKTtyZXR1cm4gZX0sTHQudG9Db29yZGluYXRlQXJyYXk9ZnVuY3Rpb24odCl7cmV0dXJuIHQudG9BcnJheShMdC5jb29yZEFycmF5VHlwZSl9LEx0LmF0TGVhc3ROQ29vcmRpbmF0ZXNPck5vdGhpbmc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5sZW5ndGg+PXQ/ZTpbXX0sTHQuaW5kZXhPZj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKWlmKHQuZXF1YWxzKGVbbl0pKXJldHVybiBuO3JldHVybi0xfSxMdC5pbmNyZWFzaW5nRGlyZWN0aW9uPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8TWF0aC50cnVuYyh0Lmxlbmd0aC8yKTtlKyspe3ZhciBuPXQubGVuZ3RoLTEtZSxpPXRbZV0uY29tcGFyZVRvKHRbbl0pO2lmKDAhPT1pKXJldHVybiBpfXJldHVybiAxfSxMdC5jb21wYXJlPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aCYmbjxlLmxlbmd0aDspe3ZhciBpPXRbbl0uY29tcGFyZVRvKGVbbl0pO2lmKDAhPT1pKXJldHVybiBpO24rK31yZXR1cm4gbjxlLmxlbmd0aD8tMTpuPHQubGVuZ3RoPzE6MH0sTHQubWluQ29vcmRpbmF0ZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPTA7bjx0Lmxlbmd0aDtuKyspKG51bGw9PT1lfHxlLmNvbXBhcmVUbyh0W25dKT4wKSYmKGU9dFtuXSk7cmV0dXJuIGV9LEx0LmV4dHJhY3Q9ZnVuY3Rpb24odCxlLG4pe2U9VC5jbGFtcChlLDAsdC5sZW5ndGgpO3ZhciBpPShuPVQuY2xhbXAobiwtMSx0Lmxlbmd0aCkpLWUrMTtuPDAmJihpPTApLGU+PXQubGVuZ3RoJiYoaT0wKSxuPGUmJihpPTApO3ZhciByPW5ldyBBcnJheShpKS5maWxsKG51bGwpO2lmKDA9PT1pKXJldHVybiByO2Zvcih2YXIgbz0wLHM9ZTtzPD1uO3MrKylyW28rK109dFtzXTtyZXR1cm4gcn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTHQsYnQpO3ZhciB3dD1mdW5jdGlvbigpe307d3QucHJvdG90eXBlLmNvbXBhcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTHQuY29tcGFyZSh0LGUpfSx3dC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5beF19LHd0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB3dH07dmFyIE90PWZ1bmN0aW9uKCl7fTtPdC5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbih0LGUpe3ZhciBuPXQsaT1lO2lmKG4ubGVuZ3RoPGkubGVuZ3RoKXJldHVybi0xO2lmKG4ubGVuZ3RoPmkubGVuZ3RoKXJldHVybiAxO2lmKDA9PT1uLmxlbmd0aClyZXR1cm4gMDt2YXIgcj1MdC5jb21wYXJlKG4saSk7cmV0dXJuIEx0LmlzRXF1YWxSZXZlcnNlZChuLGkpPzA6cn0sT3QucHJvdG90eXBlLk9MRGNvbXBhcmU9ZnVuY3Rpb24odCxlKXt2YXIgbj10LGk9ZTtpZihuLmxlbmd0aDxpLmxlbmd0aClyZXR1cm4tMTtpZihuLmxlbmd0aD5pLmxlbmd0aClyZXR1cm4gMTtpZigwPT09bi5sZW5ndGgpcmV0dXJuIDA7Zm9yKHZhciByPUx0LmluY3JlYXNpbmdEaXJlY3Rpb24obiksbz1MdC5pbmNyZWFzaW5nRGlyZWN0aW9uKGkpLHM9cj4wPzA6bi5sZW5ndGgtMSxhPW8+MD8wOm4ubGVuZ3RoLTEsdT0wO3U8bi5sZW5ndGg7dSsrKXt2YXIgbD1uW3NdLmNvbXBhcmVUbyhpW2FdKTtpZigwIT09bClyZXR1cm4gbDtzKz1yLGErPW99cmV0dXJuIDB9LE90LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVyblt4XX0sT3QucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIE90fTt2YXIgVHQ9ZnVuY3Rpb24oKXt9O1R0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt9LFR0LnByb3RvdHlwZS5wdXQ9ZnVuY3Rpb24oKXt9LFR0LnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7fSxUdC5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7fSxUdC5wcm90b3R5cGUuZW50cnlTZXQ9ZnVuY3Rpb24oKXt9O3ZhciBSdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGV9KFR0KTsoaS5wcm90b3R5cGU9bmV3IEVycm9yKS5uYW1lPVwiT3BlcmF0aW9uTm90U3VwcG9ydGVkXCIsKHIucHJvdG90eXBlPW5ldyB2dCkuY29udGFpbnM9ZnVuY3Rpb24oKXt9O3ZhciBQdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5jYWxsKHRoaXMpLHRoaXMuYXJyYXlfPVtdLGFyZ3VtZW50c1swXWluc3RhbmNlb2YgdnQmJnRoaXMuYWRkQWxsKGFyZ3VtZW50c1swXSl9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUucHJvdG90eXBlLmNvbnRhaW5zPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dGhpcy5hcnJheV8ubGVuZ3RoO2U8bjtlKyspe2lmKHRoaXMuYXJyYXlfW2VdPT09dClyZXR1cm4hMH1yZXR1cm4hMX0sZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3JldHVybiF0aGlzLmNvbnRhaW5zKHQpJiYodGhpcy5hcnJheV8ucHVzaCh0KSwhMCl9LGUucHJvdG90eXBlLmFkZEFsbD1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl0aGlzLmFkZChlLm5leHQoKSk7cmV0dXJuITB9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3J9LGUucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcnJheV8ubGVuZ3RofSxlLnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmFycmF5Xy5sZW5ndGh9LGUucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wLG49dGhpcy5hcnJheV8ubGVuZ3RoO2U8bjtlKyspdC5wdXNoKHRoaXMuYXJyYXlfW2VdKTtyZXR1cm4gdH0sZS5wcm90b3R5cGUuaXRlcmF0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IER0KHRoaXMpfSxlfShyKSxEdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3QuY2FsbCh0aGlzKSx0aGlzLmhhc2hTZXRfPWUsdGhpcy5wb3NpdGlvbl89MH1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe2lmKHRoaXMucG9zaXRpb25fPT09dGhpcy5oYXNoU2V0Xy5zaXplKCkpdGhyb3cgbmV3IG47cmV0dXJuIHRoaXMuaGFzaFNldF8uYXJyYXlfW3RoaXMucG9zaXRpb25fKytdfSxlLnByb3RvdHlwZS5oYXNOZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9zaXRpb25fPHRoaXMuaGFzaFNldF8uc2l6ZSgpfSxlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgaX0sZX0oRXQpLE10PTA7KGMucHJvdG90eXBlPW5ldyBSdCkuZ2V0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnJvb3RfO251bGwhPT1lOyl7dmFyIG49dC5jb21wYXJlVG8oZS5rZXkpO2lmKG48MCllPWUubGVmdDtlbHNle2lmKCEobj4wKSlyZXR1cm4gZS52YWx1ZTtlPWUucmlnaHR9fXJldHVybiBudWxsfSxjLnByb3RvdHlwZS5wdXQ9ZnVuY3Rpb24odCxlKXtpZihudWxsPT09dGhpcy5yb290XylyZXR1cm4gdGhpcy5yb290Xz17a2V5OnQsdmFsdWU6ZSxsZWZ0Om51bGwscmlnaHQ6bnVsbCxwYXJlbnQ6bnVsbCxjb2xvcjpNdCxnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfSxnZXRLZXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5rZXl9fSx0aGlzLnNpemVfPTEsbnVsbDt2YXIgbixpLHI9dGhpcy5yb290Xztkb3tpZihuPXIsKGk9dC5jb21wYXJlVG8oci5rZXkpKTwwKXI9ci5sZWZ0O2Vsc2V7aWYoIShpPjApKXt2YXIgbz1yLnZhbHVlO3JldHVybiByLnZhbHVlPWUsb31yPXIucmlnaHR9fXdoaWxlKG51bGwhPT1yKTt2YXIgcz17a2V5OnQsbGVmdDpudWxsLHJpZ2h0Om51bGwsdmFsdWU6ZSxwYXJlbnQ6bixjb2xvcjpNdCxnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfSxnZXRLZXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5rZXl9fTtyZXR1cm4gaTwwP24ubGVmdD1zOm4ucmlnaHQ9cyx0aGlzLmZpeEFmdGVySW5zZXJ0aW9uKHMpLHRoaXMuc2l6ZV8rKyxudWxsfSxjLnByb3RvdHlwZS5maXhBZnRlckluc2VydGlvbj1mdW5jdGlvbih0KXtmb3IodC5jb2xvcj0xO251bGwhPXQmJnQhPT10aGlzLnJvb3RfJiYxPT09dC5wYXJlbnQuY29sb3I7KWlmKHModCk9PT11KHMocyh0KSkpKXt2YXIgZT1sKHMocyh0KSkpOzE9PT1vKGUpPyhhKHModCksTXQpLGEoZSxNdCksYShzKHModCkpLDEpLHQ9cyhzKHQpKSk6KHQ9PT1sKHModCkpJiYodD1zKHQpLHRoaXMucm90YXRlTGVmdCh0KSksYShzKHQpLE10KSxhKHMocyh0KSksMSksdGhpcy5yb3RhdGVSaWdodChzKHModCkpKSl9ZWxzZXt2YXIgbj11KHMocyh0KSkpOzE9PT1vKG4pPyhhKHModCksTXQpLGEobixNdCksYShzKHModCkpLDEpLHQ9cyhzKHQpKSk6KHQ9PT11KHModCkpJiYodD1zKHQpLHRoaXMucm90YXRlUmlnaHQodCkpLGEocyh0KSxNdCksYShzKHModCkpLDEpLHRoaXMucm90YXRlTGVmdChzKHModCkpKSl9dGhpcy5yb290Xy5jb2xvcj1NdH0sYy5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IE50LGU9dGhpcy5nZXRGaXJzdEVudHJ5KCk7aWYobnVsbCE9PWUpZm9yKHQuYWRkKGUudmFsdWUpO251bGwhPT0oZT1jLnN1Y2Nlc3NvcihlKSk7KXQuYWRkKGUudmFsdWUpO3JldHVybiB0fSxjLnByb3RvdHlwZS5lbnRyeVNldD1mdW5jdGlvbigpe3ZhciB0PW5ldyBQdCxlPXRoaXMuZ2V0Rmlyc3RFbnRyeSgpO2lmKG51bGwhPT1lKWZvcih0LmFkZChlKTtudWxsIT09KGU9Yy5zdWNjZXNzb3IoZSkpOyl0LmFkZChlKTtyZXR1cm4gdH0sYy5wcm90b3R5cGUucm90YXRlTGVmdD1mdW5jdGlvbih0KXtpZihudWxsIT10KXt2YXIgZT10LnJpZ2h0O3QucmlnaHQ9ZS5sZWZ0LG51bGwhPWUubGVmdCYmKGUubGVmdC5wYXJlbnQ9dCksZS5wYXJlbnQ9dC5wYXJlbnQsbnVsbD09PXQucGFyZW50P3RoaXMucm9vdF89ZTp0LnBhcmVudC5sZWZ0PT09dD90LnBhcmVudC5sZWZ0PWU6dC5wYXJlbnQucmlnaHQ9ZSxlLmxlZnQ9dCx0LnBhcmVudD1lfX0sYy5wcm90b3R5cGUucm90YXRlUmlnaHQ9ZnVuY3Rpb24odCl7aWYobnVsbCE9dCl7dmFyIGU9dC5sZWZ0O3QubGVmdD1lLnJpZ2h0LG51bGwhPWUucmlnaHQmJihlLnJpZ2h0LnBhcmVudD10KSxlLnBhcmVudD10LnBhcmVudCxudWxsPT09dC5wYXJlbnQ/dGhpcy5yb290Xz1lOnQucGFyZW50LnJpZ2h0PT09dD90LnBhcmVudC5yaWdodD1lOnQucGFyZW50LmxlZnQ9ZSxlLnJpZ2h0PXQsdC5wYXJlbnQ9ZX19LGMucHJvdG90eXBlLmdldEZpcnN0RW50cnk9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnJvb3RfO2lmKG51bGwhPXQpZm9yKDtudWxsIT10LmxlZnQ7KXQ9dC5sZWZ0O3JldHVybiB0fSxjLnN1Y2Nlc3Nvcj1mdW5jdGlvbih0KXtpZihudWxsPT09dClyZXR1cm4gbnVsbDtpZihudWxsIT09dC5yaWdodCl7Zm9yKHZhciBlPXQucmlnaHQ7bnVsbCE9PWUubGVmdDspZT1lLmxlZnQ7cmV0dXJuIGV9Zm9yKHZhciBuPXQucGFyZW50LGk9dDtudWxsIT09biYmaT09PW4ucmlnaHQ7KWk9bixuPW4ucGFyZW50O3JldHVybiBufSxjLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZV99O3ZhciBBdD1mdW5jdGlvbigpe307QXQucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LEF0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBBdH0scC5wcm90b3R5cGU9bmV3IHIsKGgucHJvdG90eXBlPW5ldyBwKS5jb250YWlucz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPXRoaXMuYXJyYXlfLmxlbmd0aDtlPG47ZSsrKXtpZigwPT09dGhpcy5hcnJheV9bZV0uY29tcGFyZVRvKHQpKXJldHVybiEwfXJldHVybiExfSxoLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7aWYodGhpcy5jb250YWlucyh0KSlyZXR1cm4hMTtmb3IodmFyIGU9MCxuPXRoaXMuYXJyYXlfLmxlbmd0aDtlPG47ZSsrKXtpZigxPT09dGhpcy5hcnJheV9bZV0uY29tcGFyZVRvKHQpKXJldHVybiB0aGlzLmFycmF5Xy5zcGxpY2UoZSwwLHQpLCEwfXJldHVybiB0aGlzLmFycmF5Xy5wdXNoKHQpLCEwfSxoLnByb3RvdHlwZS5hZGRBbGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspdGhpcy5hZGQoZS5uZXh0KCkpO3JldHVybiEwfSxoLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IGl9LGgucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcnJheV8ubGVuZ3RofSxoLnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmFycmF5Xy5sZW5ndGh9LGgucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wLG49dGhpcy5hcnJheV8ubGVuZ3RoO2U8bjtlKyspdC5wdXNoKHRoaXMuYXJyYXlfW2VdKTtyZXR1cm4gdH0saC5wcm90b3R5cGUuaXRlcmF0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEZ0KHRoaXMpfTt2YXIgRnQ9ZnVuY3Rpb24odCl7dGhpcy50cmVlU2V0Xz10LHRoaXMucG9zaXRpb25fPTB9O0Z0LnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7aWYodGhpcy5wb3NpdGlvbl89PT10aGlzLnRyZWVTZXRfLnNpemUoKSl0aHJvdyBuZXcgbjtyZXR1cm4gdGhpcy50cmVlU2V0Xy5hcnJheV9bdGhpcy5wb3NpdGlvbl8rK119LEZ0LnByb3RvdHlwZS5oYXNOZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9zaXRpb25fPHRoaXMudHJlZVNldF8uc2l6ZSgpfSxGdC5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IGl9O3ZhciBHdD1mdW5jdGlvbigpe307R3Quc29ydD1mdW5jdGlvbigpe3ZhciB0LGUsbixpLHI9YXJndW1lbnRzWzBdO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKWk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jb21wYXJlVG8oZSl9LHIuc29ydChpKTtlbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKW49YXJndW1lbnRzWzFdLGk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbi5jb21wYXJlKHQsZSl9LHIuc29ydChpKTtlbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXsoZT1yLnNsaWNlKGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0pKS5zb3J0KCk7dmFyIG89ci5zbGljZSgwLGFyZ3VtZW50c1sxXSkuY29uY2F0KGUsci5zbGljZShhcmd1bWVudHNbMl0sci5sZW5ndGgpKTtmb3Ioci5zcGxpY2UoMCxyLmxlbmd0aCksdD0wO3Q8by5sZW5ndGg7dCsrKXIucHVzaChvW3RdKX1lbHNlIGlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKWZvcihlPXIuc2xpY2UoYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSksbj1hcmd1bWVudHNbM10saT1mdW5jdGlvbih0LGUpe3JldHVybiBuLmNvbXBhcmUodCxlKX0sZS5zb3J0KGkpLG89ci5zbGljZSgwLGFyZ3VtZW50c1sxXSkuY29uY2F0KGUsci5zbGljZShhcmd1bWVudHNbMl0sci5sZW5ndGgpKSxyLnNwbGljZSgwLHIubGVuZ3RoKSx0PTA7dDxvLmxlbmd0aDt0Kyspci5wdXNoKG9bdF0pfSxHdC5hc0xpc3Q9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBOdCxuPTAsaT10Lmxlbmd0aDtuPGk7bisrKWUuYWRkKHRbbl0pO3JldHVybiBlfTt2YXIgcXQ9ZnVuY3Rpb24oKXt9LEJ0PXtQOntjb25maWd1cmFibGU6ITB9LEw6e2NvbmZpZ3VyYWJsZTohMH0sQTp7Y29uZmlndXJhYmxlOiEwfSxGQUxTRTp7Y29uZmlndXJhYmxlOiEwfSxUUlVFOntjb25maWd1cmFibGU6ITB9LERPTlRDQVJFOntjb25maWd1cmFibGU6ITB9LFNZTV9GQUxTRTp7Y29uZmlndXJhYmxlOiEwfSxTWU1fVFJVRTp7Y29uZmlndXJhYmxlOiEwfSxTWU1fRE9OVENBUkU6e2NvbmZpZ3VyYWJsZTohMH0sU1lNX1A6e2NvbmZpZ3VyYWJsZTohMH0sU1lNX0w6e2NvbmZpZ3VyYWJsZTohMH0sU1lNX0E6e2NvbmZpZ3VyYWJsZTohMH19O0J0LlAuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB9LEJ0LkwuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDF9LEJ0LkEuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDJ9LEJ0LkZBTFNFLmdldD1mdW5jdGlvbigpe3JldHVybi0xfSxCdC5UUlVFLmdldD1mdW5jdGlvbigpe3JldHVybi0yfSxCdC5ET05UQ0FSRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4tM30sQnQuU1lNX0ZBTFNFLmdldD1mdW5jdGlvbigpe3JldHVyblwiRlwifSxCdC5TWU1fVFJVRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm5cIlRcIn0sQnQuU1lNX0RPTlRDQVJFLmdldD1mdW5jdGlvbigpe3JldHVyblwiKlwifSxCdC5TWU1fUC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm5cIjBcIn0sQnQuU1lNX0wuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuXCIxXCJ9LEJ0LlNZTV9BLmdldD1mdW5jdGlvbigpe3JldHVyblwiMlwifSxxdC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0scXQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHF0fSxxdC50b0RpbWVuc2lvblN5bWJvbD1mdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZSBxdC5GQUxTRTpyZXR1cm4gcXQuU1lNX0ZBTFNFO2Nhc2UgcXQuVFJVRTpyZXR1cm4gcXQuU1lNX1RSVUU7Y2FzZSBxdC5ET05UQ0FSRTpyZXR1cm4gcXQuU1lNX0RPTlRDQVJFO2Nhc2UgcXQuUDpyZXR1cm4gcXQuU1lNX1A7Y2FzZSBxdC5MOnJldHVybiBxdC5TWU1fTDtjYXNlIHF0LkE6cmV0dXJuIHF0LlNZTV9BfXRocm93IG5ldyBfKFwiVW5rbm93biBkaW1lbnNpb24gdmFsdWU6IFwiK3QpfSxxdC50b0RpbWVuc2lvblZhbHVlPWZ1bmN0aW9uKHQpe3N3aXRjaChNLnRvVXBwZXJDYXNlKHQpKXtjYXNlIHF0LlNZTV9GQUxTRTpyZXR1cm4gcXQuRkFMU0U7Y2FzZSBxdC5TWU1fVFJVRTpyZXR1cm4gcXQuVFJVRTtjYXNlIHF0LlNZTV9ET05UQ0FSRTpyZXR1cm4gcXQuRE9OVENBUkU7Y2FzZSBxdC5TWU1fUDpyZXR1cm4gcXQuUDtjYXNlIHF0LlNZTV9MOnJldHVybiBxdC5MO2Nhc2UgcXQuU1lNX0E6cmV0dXJuIHF0LkF9dGhyb3cgbmV3IF8oXCJVbmtub3duIGRpbWVuc2lvbiBzeW1ib2w6IFwiK3QpfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhxdCxCdCk7dmFyIFZ0PWZ1bmN0aW9uKCl7fTtWdC5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKHQpe30sVnQucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFZ0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBWdH07dmFyIFV0PWZ1bmN0aW9uKCl7fTtVdC5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKHQsZSl7fSxVdC5wcm90b3R5cGUuaXNEb25lPWZ1bmN0aW9uKCl7fSxVdC5wcm90b3R5cGUuaXNHZW9tZXRyeUNoYW5nZWQ9ZnVuY3Rpb24oKXt9LFV0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxVdC5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gVXR9O3ZhciB6dD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsbil7aWYodC5jYWxsKHRoaXMsbiksdGhpcy5fZ2VvbWV0cmllcz1lfHxbXSx0Lmhhc051bGxFbGVtZW50cyh0aGlzLl9nZW9tZXRyaWVzKSl0aHJvdyBuZXcgXyhcImdlb21ldHJpZXMgbXVzdCBub3QgY29udGFpbiBudWxsIGVsZW1lbnRzXCIpfXQmJihlLl9fcHJvdG9fXz10KSwoZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWU7dmFyIG49e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybiBlLnByb3RvdHlwZS5jb21wdXRlRW52ZWxvcGVJbnRlcm5hbD1mdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgayxlPTA7ZTx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDtlKyspdC5leHBhbmRUb0luY2x1ZGUodGhpcy5fZ2VvbWV0cmllc1tlXS5nZXRFbnZlbG9wZUludGVybmFsKCkpO3JldHVybiB0fSxlLnByb3RvdHlwZS5nZXRHZW9tZXRyeU49ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2dlb21ldHJpZXNbdF19LGUucHJvdG90eXBlLmdldFNvcnRJbmRleD1mdW5jdGlvbigpe3JldHVybiB0LlNPUlRJTkRFWF9HRU9NRVRSWUNPTExFQ1RJT059LGUucHJvdG90eXBlLmdldENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLmdldE51bVBvaW50cygpKS5maWxsKG51bGwpLGU9LTEsbj0wO248dGhpcy5fZ2VvbWV0cmllcy5sZW5ndGg7bisrKWZvcih2YXIgaT10aGlzLl9nZW9tZXRyaWVzW25dLmdldENvb3JkaW5hdGVzKCkscj0wO3I8aS5sZW5ndGg7cisrKXRbKytlXT1pW3JdO3JldHVybiB0fSxlLnByb3RvdHlwZS5nZXRBcmVhPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT0wO2U8dGhpcy5fZ2VvbWV0cmllcy5sZW5ndGg7ZSsrKXQrPXRoaXMuX2dlb21ldHJpZXNbZV0uZ2V0QXJlYSgpO3JldHVybiB0fSxlLnByb3RvdHlwZS5lcXVhbHNFeGFjdD1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07aWYoIXRoaXMuaXNFcXVpdmFsZW50Q2xhc3MoZSkpcmV0dXJuITE7dmFyIGk9ZTtpZih0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aCE9PWkuX2dlb21ldHJpZXMubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wO3I8dGhpcy5fZ2VvbWV0cmllcy5sZW5ndGg7cisrKWlmKCF0aGlzLl9nZW9tZXRyaWVzW3JdLmVxdWFsc0V4YWN0KGkuX2dlb21ldHJpZXNbcl0sbikpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuIHQucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDt0KyspdGhpcy5fZ2VvbWV0cmllc1t0XS5ub3JtYWxpemUoKTtHdC5zb3J0KHRoaXMuX2dlb21ldHJpZXMpfSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP251bGw6dGhpcy5fZ2VvbWV0cmllc1swXS5nZXRDb29yZGluYXRlKCl9LGUucHJvdG90eXBlLmdldEJvdW5kYXJ5RGltZW5zaW9uPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXF0LkZBTFNFLGU9MDtlPHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoO2UrKyl0PU1hdGgubWF4KHQsdGhpcy5fZ2VvbWV0cmllc1tlXS5nZXRCb3VuZGFyeURpbWVuc2lvbigpKTtyZXR1cm4gdH0sZS5wcm90b3R5cGUuZ2V0RGltZW5zaW9uPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXF0LkZBTFNFLGU9MDtlPHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoO2UrKyl0PU1hdGgubWF4KHQsdGhpcy5fZ2VvbWV0cmllc1tlXS5nZXREaW1lbnNpb24oKSk7cmV0dXJuIHR9LGUucHJvdG90eXBlLmdldExlbmd0aD1mdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9MDtlPHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoO2UrKyl0Kz10aGlzLl9nZW9tZXRyaWVzW2VdLmdldExlbmd0aCgpO3JldHVybiB0fSxlLnByb3RvdHlwZS5nZXROdW1Qb2ludHM9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MCxlPTA7ZTx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDtlKyspdCs9dGhpcy5fZ2VvbWV0cmllc1tlXS5nZXROdW1Qb2ludHMoKTtyZXR1cm4gdH0sZS5wcm90b3R5cGUuZ2V0TnVtR2VvbWV0cmllcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aH0sZS5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLl9nZW9tZXRyaWVzLmxlbmd0aCxlPW5ldyBBcnJheSh0KS5maWxsKG51bGwpLG49MDtuPHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoO24rKyllW25dPXRoaXMuX2dlb21ldHJpZXNbbl0ucmV2ZXJzZSgpO3JldHVybiB0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24oZSl9LGUucHJvdG90eXBlLmNvbXBhcmVUb1NhbWVDbGFzcz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgaChHdC5hc0xpc3QodGhpcy5fZ2VvbWV0cmllcykpLG49bmV3IGgoR3QuYXNMaXN0KHQuX2dlb21ldHJpZXMpKTtyZXR1cm4gdGhpcy5jb21wYXJlKGUsbil9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0sbz1pLHM9dGhpcy5nZXROdW1HZW9tZXRyaWVzKCksYT1vLmdldE51bUdlb21ldHJpZXMoKSx1PTA7dTxzJiZ1PGE7KXt2YXIgbD10aGlzLmdldEdlb21ldHJ5Tih1KSxjPW8uZ2V0R2VvbWV0cnlOKHUpLHA9bC5jb21wYXJlVG9TYW1lQ2xhc3MoYyxyKTtpZigwIT09cClyZXR1cm4gcDt1Kyt9cmV0dXJuIHU8cz8xOnU8YT8tMTowfX0sZS5wcm90b3R5cGUuYXBwbHk9ZnVuY3Rpb24oKXtpZihPKGFyZ3VtZW50c1swXSxodCkpZm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPTA7ZTx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDtlKyspdGhpcy5fZ2VvbWV0cmllc1tlXS5hcHBseSh0KTtlbHNlIGlmKE8oYXJndW1lbnRzWzBdLFV0KSl7dmFyIG49YXJndW1lbnRzWzBdO2lmKDA9PT10aGlzLl9nZW9tZXRyaWVzLmxlbmd0aClyZXR1cm4gbnVsbDtmb3IodmFyIGk9MDtpPHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoJiYodGhpcy5fZ2VvbWV0cmllc1tpXS5hcHBseShuKSwhbi5pc0RvbmUoKSk7aSsrKTtuLmlzR2VvbWV0cnlDaGFuZ2VkKCkmJnRoaXMuZ2VvbWV0cnlDaGFuZ2VkKCl9ZWxzZSBpZihPKGFyZ3VtZW50c1swXSxWdCkpe3ZhciByPWFyZ3VtZW50c1swXTtyLmZpbHRlcih0aGlzKTtmb3IodmFyIG89MDtvPHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoO28rKyl0aGlzLl9nZW9tZXRyaWVzW29dLmFwcGx5KHIpfWVsc2UgaWYoTyhhcmd1bWVudHNbMF0sdXQpKXt2YXIgcz1hcmd1bWVudHNbMF07cy5maWx0ZXIodGhpcyk7Zm9yKHZhciBhPTA7YTx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDthKyspdGhpcy5fZ2VvbWV0cmllc1thXS5hcHBseShzKX19LGUucHJvdG90eXBlLmdldEJvdW5kYXJ5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24odGhpcyksdHQuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoKSxudWxsfSxlLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBlPXQucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyk7ZS5fZ2VvbWV0cmllcz1uZXcgQXJyYXkodGhpcy5fZ2VvbWV0cmllcy5sZW5ndGgpLmZpbGwobnVsbCk7Zm9yKHZhciBuPTA7bjx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDtuKyspZS5fZ2VvbWV0cmllc1tuXT10aGlzLl9nZW9tZXRyaWVzW25dLmNsb25lKCk7cmV0dXJuIGV9LGUucHJvdG90eXBlLmdldEdlb21ldHJ5VHlwZT1mdW5jdGlvbigpe3JldHVyblwiR2VvbWV0cnlDb2xsZWN0aW9uXCJ9LGUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IEFycmF5KHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoKS5maWxsKG51bGwpLG49MDtuPHQubGVuZ3RoO24rKyl0W25dPXRoaXMuX2dlb21ldHJpZXNbbl0uY29weSgpO3JldHVybiBuZXcgZSh0LHRoaXMuX2ZhY3RvcnkpfSxlLnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDt0KyspaWYoIXRoaXMuX2dlb21ldHJpZXNbdF0uaXNFbXB0eSgpKXJldHVybiExO3JldHVybiEwfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxuLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLTB4NGYwN2JjYjFmODU3ZDgwMH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxuKSxlfShsdCksWHQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuYXBwbHkodGhpcyxhcmd1bWVudHMpfXQmJihlLl9fcHJvdG9fXz10KSwoZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWU7dmFyIG49e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybiBlLnByb3RvdHlwZS5nZXRTb3J0SW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gbHQuU09SVElOREVYX01VTFRJTElORVNUUklOR30sZS5wcm90b3R5cGUuZXF1YWxzRXhhY3Q9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3JldHVybiEhdGhpcy5pc0VxdWl2YWxlbnRDbGFzcyhlKSYmdC5wcm90b3R5cGUuZXF1YWxzRXhhY3QuY2FsbCh0aGlzLGUsbil9cmV0dXJuIHQucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5wcm90b3R5cGUuZ2V0Qm91bmRhcnlEaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0Nsb3NlZCgpP3F0LkZBTFNFOjB9LGUucHJvdG90eXBlLmlzQ2xvc2VkPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuITE7Zm9yKHZhciB0PTA7dDx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDt0KyspaWYoIXRoaXMuX2dlb21ldHJpZXNbdF0uaXNDbG9zZWQoKSlyZXR1cm4hMTtyZXR1cm4hMH0sZS5wcm90b3R5cGUuZ2V0RGltZW5zaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIDF9LGUucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5fZ2VvbWV0cmllcy5sZW5ndGgsZT1uZXcgQXJyYXkodCkuZmlsbChudWxsKSxuPTA7bjx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDtuKyspZVt0LTEtbl09dGhpcy5fZ2VvbWV0cmllc1tuXS5yZXZlcnNlKCk7cmV0dXJuIHRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZU11bHRpTGluZVN0cmluZyhlKX0sZS5wcm90b3R5cGUuZ2V0Qm91bmRhcnk9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFl0KHRoaXMpLmdldEJvdW5kYXJ5KCl9LGUucHJvdG90eXBlLmdldEdlb21ldHJ5VHlwZT1mdW5jdGlvbigpe3JldHVyblwiTXVsdGlMaW5lU3RyaW5nXCJ9LGUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IEFycmF5KHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoKS5maWxsKG51bGwpLG49MDtuPHQubGVuZ3RoO24rKyl0W25dPXRoaXMuX2dlb21ldHJpZXNbbl0uY29weSgpO3JldHVybiBuZXcgZSh0LHRoaXMuX2ZhY3RvcnkpfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltBdF19LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LG4uc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMHg3MTU1ZDJhYjRhZmE4MDAwfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLG4pLGV9KHp0KSxZdD1mdW5jdGlvbigpe2lmKHRoaXMuX2dlb209bnVsbCx0aGlzLl9nZW9tRmFjdD1udWxsLHRoaXMuX2JuUnVsZT1udWxsLHRoaXMuX2VuZHBvaW50TWFwPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWZ0Lk1PRDJfQk9VTkRBUllfUlVMRTt0aGlzLl9nZW9tPXQsdGhpcy5fZ2VvbUZhY3Q9dC5nZXRGYWN0b3J5KCksdGhpcy5fYm5SdWxlPWV9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3RoaXMuX2dlb209bix0aGlzLl9nZW9tRmFjdD1uLmdldEZhY3RvcnkoKSx0aGlzLl9iblJ1bGU9aX19O1l0LnByb3RvdHlwZS5ib3VuZGFyeU11bHRpTGluZVN0cmluZz1mdW5jdGlvbih0KXtpZih0aGlzLl9nZW9tLmlzRW1wdHkoKSlyZXR1cm4gdGhpcy5nZXRFbXB0eU11bHRpUG9pbnQoKTt2YXIgZT10aGlzLmNvbXB1dGVCb3VuZGFyeUNvb3JkaW5hdGVzKHQpO3JldHVybiAxPT09ZS5sZW5ndGg/dGhpcy5fZ2VvbUZhY3QuY3JlYXRlUG9pbnQoZVswXSk6dGhpcy5fZ2VvbUZhY3QuY3JlYXRlTXVsdGlQb2ludEZyb21Db29yZHMoZSl9LFl0LnByb3RvdHlwZS5nZXRCb3VuZGFyeT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9nZW9tIGluc3RhbmNlb2YgS3Q/dGhpcy5ib3VuZGFyeUxpbmVTdHJpbmcodGhpcy5fZ2VvbSk6dGhpcy5fZ2VvbSBpbnN0YW5jZW9mIFh0P3RoaXMuYm91bmRhcnlNdWx0aUxpbmVTdHJpbmcodGhpcy5fZ2VvbSk6dGhpcy5fZ2VvbS5nZXRCb3VuZGFyeSgpfSxZdC5wcm90b3R5cGUuYm91bmRhcnlMaW5lU3RyaW5nPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2dlb20uaXNFbXB0eSgpKXJldHVybiB0aGlzLmdldEVtcHR5TXVsdGlQb2ludCgpO2lmKHQuaXNDbG9zZWQoKSl7cmV0dXJuIHRoaXMuX2JuUnVsZS5pc0luQm91bmRhcnkoMik/dC5nZXRTdGFydFBvaW50KCk6dGhpcy5fZ2VvbUZhY3QuY3JlYXRlTXVsdGlQb2ludCgpfXJldHVybiB0aGlzLl9nZW9tRmFjdC5jcmVhdGVNdWx0aVBvaW50KFt0LmdldFN0YXJ0UG9pbnQoKSx0LmdldEVuZFBvaW50KCldKX0sWXQucHJvdG90eXBlLmdldEVtcHR5TXVsdGlQb2ludD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9nZW9tRmFjdC5jcmVhdGVNdWx0aVBvaW50KCl9LFl0LnByb3RvdHlwZS5jb21wdXRlQm91bmRhcnlDb29yZGluYXRlcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgTnQ7dGhpcy5fZW5kcG9pbnRNYXA9bmV3IGM7Zm9yKHZhciBuPTA7bjx0LmdldE51bUdlb21ldHJpZXMoKTtuKyspe3ZhciBpPXQuZ2V0R2VvbWV0cnlOKG4pOzAhPT1pLmdldE51bVBvaW50cygpJiYodGhpcy5hZGRFbmRwb2ludChpLmdldENvb3JkaW5hdGVOKDApKSx0aGlzLmFkZEVuZHBvaW50KGkuZ2V0Q29vcmRpbmF0ZU4oaS5nZXROdW1Qb2ludHMoKS0xKSkpfWZvcih2YXIgcj10aGlzLl9lbmRwb2ludE1hcC5lbnRyeVNldCgpLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgbz1yLm5leHQoKSxzPW8uZ2V0VmFsdWUoKS5jb3VudDt0aGlzLl9iblJ1bGUuaXNJbkJvdW5kYXJ5KHMpJiZlLmFkZChvLmdldEtleSgpKX1yZXR1cm4gTHQudG9Db29yZGluYXRlQXJyYXkoZSl9LFl0LnByb3RvdHlwZS5hZGRFbmRwb2ludD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9lbmRwb2ludE1hcC5nZXQodCk7bnVsbD09PWUmJihlPW5ldyBrdCx0aGlzLl9lbmRwb2ludE1hcC5wdXQodCxlKSksZS5jb3VudCsrfSxZdC5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sWXQucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFl0fSxZdC5nZXRCb3VuZGFyeT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIG5ldyBZdCh0KS5nZXRCb3VuZGFyeSgpfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07cmV0dXJuIG5ldyBZdChlLG4pLmdldEJvdW5kYXJ5KCl9fTt2YXIga3Q9ZnVuY3Rpb24oKXt0aGlzLmNvdW50PW51bGx9O2t0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxrdC5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4ga3R9O3ZhciBqdD1mdW5jdGlvbigpe30sSHQ9e05FV0xJTkU6e2NvbmZpZ3VyYWJsZTohMH0sU0lNUExFX09SRElOQVRFX0ZPUk1BVDp7Y29uZmlndXJhYmxlOiEwfX07anQucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGp0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBqdH0sanQuY2hhcnM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEFycmF5KGUpLmZpbGwobnVsbCksaT0wO2k8ZTtpKyspbltpXT10O3JldHVybiBTdHJpbmcobil9LGp0LmdldFN0YWNrVHJhY2U9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9bmV3IGZ1bmN0aW9uKCl7fSxuPW5ldyBmdW5jdGlvbigpe30oZSk7cmV0dXJuIHQucHJpbnRTdGFja1RyYWNlKG4pLGUudG9TdHJpbmcoKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxvPVwiXCIscz1uZXcgZnVuY3Rpb24oKXt9KG5ldyBmdW5jdGlvbigpe30oanQuZ2V0U3RhY2tUcmFjZShpKSkpLGE9MDthPHI7YSsrKXRyeXtvKz1zLnJlYWRMaW5lKCkranQuTkVXTElORX1jYXRjaCh0KXtpZighKHQgaW5zdGFuY2VvZiBmKSl0aHJvdyB0O3R0LnNob3VsZE5ldmVyUmVhY2hIZXJlKCl9cmV0dXJuIG99fSxqdC5zcGxpdD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1lLmxlbmd0aCxpPW5ldyBOdCxyPVwiXCIrdCxvPXIuaW5kZXhPZihlKTtvPj0wOyl7dmFyIHM9ci5zdWJzdHJpbmcoMCxvKTtpLmFkZChzKSxvPShyPXIuc3Vic3RyaW5nKG8rbikpLmluZGV4T2YoZSl9ci5sZW5ndGg+MCYmaS5hZGQocik7Zm9yKHZhciBhPW5ldyBBcnJheShpLnNpemUoKSkuZmlsbChudWxsKSx1PTA7dTxhLmxlbmd0aDt1KyspYVt1XT1pLmdldCh1KTtyZXR1cm4gYX0sanQudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiBqdC5TSU1QTEVfT1JESU5BVEVfRk9STUFULmZvcm1hdCh0KX19LGp0LnNwYWNlcz1mdW5jdGlvbih0KXtyZXR1cm4ganQuY2hhcnMoXCIgXCIsdCl9LEh0Lk5FV0xJTkUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIFguZ2V0UHJvcGVydHkoXCJsaW5lLnNlcGFyYXRvclwiKX0sSHQuU0lNUExFX09SRElOQVRFX0ZPUk1BVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGZ1bmN0aW9uKCl7fShcIjAuI1wiKX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoanQsSHQpO3ZhciBXdD1mdW5jdGlvbigpe307V3QucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFd0LnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBXdH0sV3QuY29weUNvb3JkPWZ1bmN0aW9uKHQsZSxuLGkpe2Zvcih2YXIgcj1NYXRoLm1pbih0LmdldERpbWVuc2lvbigpLG4uZ2V0RGltZW5zaW9uKCkpLG89MDtvPHI7bysrKW4uc2V0T3JkaW5hdGUoaSxvLHQuZ2V0T3JkaW5hdGUoZSxvKSl9LFd0LmlzUmluZz1mdW5jdGlvbih0KXt2YXIgZT10LnNpemUoKTtyZXR1cm4gMD09PWV8fCEoZTw9MykmJih0LmdldE9yZGluYXRlKDAsQi5YKT09PXQuZ2V0T3JkaW5hdGUoZS0xLEIuWCkmJnQuZ2V0T3JkaW5hdGUoMCxCLlkpPT09dC5nZXRPcmRpbmF0ZShlLTEsQi5ZKSl9LFd0LmlzRXF1YWw9ZnVuY3Rpb24odCxlKXt2YXIgbj10LnNpemUoKTtpZihuIT09ZS5zaXplKCkpcmV0dXJuITE7Zm9yKHZhciBpPU1hdGgubWluKHQuZ2V0RGltZW5zaW9uKCksZS5nZXREaW1lbnNpb24oKSkscj0wO3I8bjtyKyspZm9yKHZhciBvPTA7bzxpO28rKyl7dmFyIHM9dC5nZXRPcmRpbmF0ZShyLG8pLGE9ZS5nZXRPcmRpbmF0ZShyLG8pO2lmKHQuZ2V0T3JkaW5hdGUocixvKSE9PWUuZ2V0T3JkaW5hdGUocixvKSYmKCFtLmlzTmFOKHMpfHwhbS5pc05hTihhKSkpcmV0dXJuITF9cmV0dXJuITB9LFd0LmV4dGVuZD1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC5jcmVhdGUobixlLmdldERpbWVuc2lvbigpKSxyPWUuc2l6ZSgpO2lmKFd0LmNvcHkoZSwwLGksMCxyKSxyPjApZm9yKHZhciBvPXI7bzxuO28rKylXdC5jb3B5KGUsci0xLGksbywxKTtyZXR1cm4gaX0sV3QucmV2ZXJzZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5zaXplKCktMSxuPU1hdGgudHJ1bmMoZS8yKSxpPTA7aTw9bjtpKyspV3Quc3dhcCh0LGksZS1pKX0sV3Quc3dhcD1mdW5jdGlvbih0LGUsbil7aWYoZT09PW4pcmV0dXJuIG51bGw7Zm9yKHZhciBpPTA7aTx0LmdldERpbWVuc2lvbigpO2krKyl7dmFyIHI9dC5nZXRPcmRpbmF0ZShlLGkpO3Quc2V0T3JkaW5hdGUoZSxpLHQuZ2V0T3JkaW5hdGUobixpKSksdC5zZXRPcmRpbmF0ZShuLGkscil9fSxXdC5jb3B5PWZ1bmN0aW9uKHQsZSxuLGkscil7Zm9yKHZhciBvPTA7bzxyO28rKylXdC5jb3B5Q29vcmQodCxlK28sbixpK28pfSxXdC50b1N0cmluZz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT10LnNpemUoKTtpZigwPT09ZSlyZXR1cm5cIigpXCI7dmFyIG49dC5nZXREaW1lbnNpb24oKSxpPW5ldyBQO2kuYXBwZW5kKFwiKFwiKTtmb3IodmFyIHI9MDtyPGU7cisrKXtyPjAmJmkuYXBwZW5kKFwiIFwiKTtmb3IodmFyIG89MDtvPG47bysrKW8+MCYmaS5hcHBlbmQoXCIsXCIpLGkuYXBwZW5kKGp0LnRvU3RyaW5nKHQuZ2V0T3JkaW5hdGUocixvKSkpfXJldHVybiBpLmFwcGVuZChcIilcIiksaS50b1N0cmluZygpfX0sV3QuZW5zdXJlVmFsaWRSaW5nPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5zaXplKCk7aWYoMD09PW4pcmV0dXJuIGU7aWYobjw9MylyZXR1cm4gV3QuY3JlYXRlQ2xvc2VkUmluZyh0LGUsNCk7cmV0dXJuIGUuZ2V0T3JkaW5hdGUoMCxCLlgpPT09ZS5nZXRPcmRpbmF0ZShuLTEsQi5YKSYmZS5nZXRPcmRpbmF0ZSgwLEIuWSk9PT1lLmdldE9yZGluYXRlKG4tMSxCLlkpP2U6V3QuY3JlYXRlQ2xvc2VkUmluZyh0LGUsbisxKX0sV3QuY3JlYXRlQ2xvc2VkUmluZz1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC5jcmVhdGUobixlLmdldERpbWVuc2lvbigpKSxyPWUuc2l6ZSgpO1d0LmNvcHkoZSwwLGksMCxyKTtmb3IodmFyIG89cjtvPG47bysrKVd0LmNvcHkoZSwwLGksbywxKTtyZXR1cm4gaX07dmFyIEt0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSxuKXt0LmNhbGwodGhpcyxuKSx0aGlzLl9wb2ludHM9bnVsbCx0aGlzLmluaXQoZSl9dCYmKGUuX19wcm90b19fPXQpLChlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSkuY29uc3RydWN0b3I9ZTt2YXIgbj17c2VyaWFsVmVyc2lvblVJRDp7Y29uZmlndXJhYmxlOiEwfX07cmV0dXJuIGUucHJvdG90eXBlLmNvbXB1dGVFbnZlbG9wZUludGVybmFsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP25ldyBrOnRoaXMuX3BvaW50cy5leHBhbmRFbnZlbG9wZShuZXcgayl9LGUucHJvdG90eXBlLmlzUmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzQ2xvc2VkKCkmJnRoaXMuaXNTaW1wbGUoKX0sZS5wcm90b3R5cGUuZ2V0U29ydEluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHQuU09SVElOREVYX0xJTkVTVFJJTkd9LGUucHJvdG90eXBlLmdldENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BvaW50cy50b0Nvb3JkaW5hdGVBcnJheSgpfSxlLnByb3RvdHlwZS5lcXVhbHNFeGFjdD1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07aWYoIXRoaXMuaXNFcXVpdmFsZW50Q2xhc3MoZSkpcmV0dXJuITE7dmFyIGk9ZTtpZih0aGlzLl9wb2ludHMuc2l6ZSgpIT09aS5fcG9pbnRzLnNpemUoKSlyZXR1cm4hMTtmb3IodmFyIHI9MDtyPHRoaXMuX3BvaW50cy5zaXplKCk7cisrKWlmKCF0aGlzLmVxdWFsKHRoaXMuX3BvaW50cy5nZXRDb29yZGluYXRlKHIpLGkuX3BvaW50cy5nZXRDb29yZGluYXRlKHIpLG4pKXJldHVybiExO3JldHVybiEwfXJldHVybiB0LnByb3RvdHlwZS5lcXVhbHNFeGFjdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUucHJvdG90eXBlLm5vcm1hbGl6ZT1mdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8TWF0aC50cnVuYyh0aGlzLl9wb2ludHMuc2l6ZSgpLzIpO3QrKyl7dmFyIGU9dGhpcy5fcG9pbnRzLnNpemUoKS0xLXQ7aWYoIXRoaXMuX3BvaW50cy5nZXRDb29yZGluYXRlKHQpLmVxdWFscyh0aGlzLl9wb2ludHMuZ2V0Q29vcmRpbmF0ZShlKSkpcmV0dXJuIHRoaXMuX3BvaW50cy5nZXRDb29yZGluYXRlKHQpLmNvbXBhcmVUbyh0aGlzLl9wb2ludHMuZ2V0Q29vcmRpbmF0ZShlKSk+MCYmV3QucmV2ZXJzZSh0aGlzLl9wb2ludHMpLG51bGx9fSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP251bGw6dGhpcy5fcG9pbnRzLmdldENvb3JkaW5hdGUoMCl9LGUucHJvdG90eXBlLmdldEJvdW5kYXJ5RGltZW5zaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNDbG9zZWQoKT9xdC5GQUxTRTowfSxlLnByb3RvdHlwZS5pc0Nsb3NlZD1mdW5jdGlvbigpe3JldHVybiF0aGlzLmlzRW1wdHkoKSYmdGhpcy5nZXRDb29yZGluYXRlTigwKS5lcXVhbHMyRCh0aGlzLmdldENvb3JkaW5hdGVOKHRoaXMuZ2V0TnVtUG9pbnRzKCktMSkpfSxlLnByb3RvdHlwZS5nZXRFbmRQb2ludD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzRW1wdHkoKT9udWxsOnRoaXMuZ2V0UG9pbnROKHRoaXMuZ2V0TnVtUG9pbnRzKCktMSl9LGUucHJvdG90eXBlLmdldERpbWVuc2lvbj1mdW5jdGlvbigpe3JldHVybiAxfSxlLnByb3RvdHlwZS5nZXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gc3QuY29tcHV0ZUxlbmd0aCh0aGlzLl9wb2ludHMpfSxlLnByb3RvdHlwZS5nZXROdW1Qb2ludHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcG9pbnRzLnNpemUoKX0sZS5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX3BvaW50cy5jb3B5KCk7V3QucmV2ZXJzZSh0KTtyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlTGluZVN0cmluZyh0KX0sZS5wcm90b3R5cGUuY29tcGFyZVRvU2FtZUNsYXNzPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0wLG49MDtlPHRoaXMuX3BvaW50cy5zaXplKCkmJm48dC5fcG9pbnRzLnNpemUoKTspe3ZhciBpPXRoaXMuX3BvaW50cy5nZXRDb29yZGluYXRlKGUpLmNvbXBhcmVUbyh0Ll9wb2ludHMuZ2V0Q29vcmRpbmF0ZShuKSk7aWYoMCE9PWkpcmV0dXJuIGk7ZSsrLG4rK31yZXR1cm4gZTx0aGlzLl9wb2ludHMuc2l6ZSgpPzE6bjx0Ll9wb2ludHMuc2l6ZSgpPy0xOjB9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXTtyZXR1cm4gYXJndW1lbnRzWzFdLmNvbXBhcmUodGhpcy5fcG9pbnRzLHIuX3BvaW50cyl9fSxlLnByb3RvdHlwZS5hcHBseT1mdW5jdGlvbigpe2lmKE8oYXJndW1lbnRzWzBdLGh0KSlmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9MDtlPHRoaXMuX3BvaW50cy5zaXplKCk7ZSsrKXQuZmlsdGVyKHRoaXMuX3BvaW50cy5nZXRDb29yZGluYXRlKGUpKTtlbHNlIGlmKE8oYXJndW1lbnRzWzBdLFV0KSl7dmFyIG49YXJndW1lbnRzWzBdO2lmKDA9PT10aGlzLl9wb2ludHMuc2l6ZSgpKXJldHVybiBudWxsO2Zvcih2YXIgaT0wO2k8dGhpcy5fcG9pbnRzLnNpemUoKSYmKG4uZmlsdGVyKHRoaXMuX3BvaW50cyxpKSwhbi5pc0RvbmUoKSk7aSsrKTtuLmlzR2VvbWV0cnlDaGFuZ2VkKCkmJnRoaXMuZ2VvbWV0cnlDaGFuZ2VkKCl9ZWxzZSBpZihPKGFyZ3VtZW50c1swXSxWdCkpe2FyZ3VtZW50c1swXS5maWx0ZXIodGhpcyl9ZWxzZSBpZihPKGFyZ3VtZW50c1swXSx1dCkpe2FyZ3VtZW50c1swXS5maWx0ZXIodGhpcyl9fSxlLnByb3RvdHlwZS5nZXRCb3VuZGFyeT1mdW5jdGlvbigpe3JldHVybiBuZXcgWXQodGhpcykuZ2V0Qm91bmRhcnkoKX0sZS5wcm90b3R5cGUuaXNFcXVpdmFsZW50Q2xhc3M9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBlfSxlLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBlPXQucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyk7cmV0dXJuIGUuX3BvaW50cz10aGlzLl9wb2ludHMuY2xvbmUoKSxlfSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlTj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcG9pbnRzLmdldENvb3JkaW5hdGUodCl9LGUucHJvdG90eXBlLmdldEdlb21ldHJ5VHlwZT1mdW5jdGlvbigpe3JldHVyblwiTGluZVN0cmluZ1wifSxlLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBlKHRoaXMuX3BvaW50cy5jb3B5KCksdGhpcy5fZmFjdG9yeSl9LGUucHJvdG90eXBlLmdldENvb3JkaW5hdGVTZXF1ZW5jZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wb2ludHN9LGUucHJvdG90eXBlLmlzRW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX3BvaW50cy5zaXplKCl9LGUucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24odCl7aWYobnVsbD09PXQmJih0PXRoaXMuZ2V0RmFjdG9yeSgpLmdldENvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkoKS5jcmVhdGUoW10pKSwxPT09dC5zaXplKCkpdGhyb3cgbmV3IF8oXCJJbnZhbGlkIG51bWJlciBvZiBwb2ludHMgaW4gTGluZVN0cmluZyAoZm91bmQgXCIrdC5zaXplKCkrXCIgLSBtdXN0IGJlIDAgb3IgPj0gMilcIik7dGhpcy5fcG9pbnRzPXR9LGUucHJvdG90eXBlLmlzQ29vcmRpbmF0ZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMuX3BvaW50cy5zaXplKCk7ZSsrKWlmKHRoaXMuX3BvaW50cy5nZXRDb29yZGluYXRlKGUpLmVxdWFscyh0KSlyZXR1cm4hMDtyZXR1cm4hMX0sZS5wcm90b3R5cGUuZ2V0U3RhcnRQb2ludD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzRW1wdHkoKT9udWxsOnRoaXMuZ2V0UG9pbnROKDApfSxlLnByb3RvdHlwZS5nZXRQb2ludE49ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZVBvaW50KHRoaXMuX3BvaW50cy5nZXRDb29yZGluYXRlKHQpKX0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bQXRdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxuLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB4MmIyYjUxYmE0MzVjOGUwMH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxuKSxlfShsdCksSnQ9ZnVuY3Rpb24oKXt9O0p0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxKdC5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gSnR9O3ZhciBRdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsbil7dC5jYWxsKHRoaXMsbiksdGhpcy5fY29vcmRpbmF0ZXM9ZXx8bnVsbCx0aGlzLmluaXQodGhpcy5fY29vcmRpbmF0ZXMpfXQmJihlLl9fcHJvdG9fXz10KSwoZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWU7dmFyIG49e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybiBlLnByb3RvdHlwZS5jb21wdXRlRW52ZWxvcGVJbnRlcm5hbD1mdW5jdGlvbigpe2lmKHRoaXMuaXNFbXB0eSgpKXJldHVybiBuZXcgazt2YXIgdD1uZXcgaztyZXR1cm4gdC5leHBhbmRUb0luY2x1ZGUodGhpcy5fY29vcmRpbmF0ZXMuZ2V0WCgwKSx0aGlzLl9jb29yZGluYXRlcy5nZXRZKDApKSx0fSxlLnByb3RvdHlwZS5nZXRTb3J0SW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdC5TT1JUSU5ERVhfUE9JTlR9LGUucHJvdG90eXBlLmdldENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP1tdOlt0aGlzLmdldENvb3JkaW5hdGUoKV19LGUucHJvdG90eXBlLmVxdWFsc0V4YWN0PWZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4hIXRoaXMuaXNFcXVpdmFsZW50Q2xhc3MoZSkmJighKCF0aGlzLmlzRW1wdHkoKXx8IWUuaXNFbXB0eSgpKXx8dGhpcy5pc0VtcHR5KCk9PT1lLmlzRW1wdHkoKSYmdGhpcy5lcXVhbChlLmdldENvb3JkaW5hdGUoKSx0aGlzLmdldENvb3JkaW5hdGUoKSxuKSl9cmV0dXJuIHQucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIDAhPT10aGlzLl9jb29yZGluYXRlcy5zaXplKCk/dGhpcy5fY29vcmRpbmF0ZXMuZ2V0Q29vcmRpbmF0ZSgwKTpudWxsfSxlLnByb3RvdHlwZS5nZXRCb3VuZGFyeURpbWVuc2lvbj1mdW5jdGlvbigpe3JldHVybiBxdC5GQUxTRX0sZS5wcm90b3R5cGUuZ2V0RGltZW5zaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIDB9LGUucHJvdG90eXBlLmdldE51bVBvaW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzRW1wdHkoKT8wOjF9LGUucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb3B5KCl9LGUucHJvdG90eXBlLmdldFg9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5nZXRDb29yZGluYXRlKCkpdGhyb3cgbmV3IEVycm9yKFwiZ2V0WCBjYWxsZWQgb24gZW1wdHkgUG9pbnRcIik7cmV0dXJuIHRoaXMuZ2V0Q29vcmRpbmF0ZSgpLnh9LGUucHJvdG90eXBlLmNvbXBhcmVUb1NhbWVDbGFzcz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZ2V0Q29vcmRpbmF0ZSgpLmNvbXBhcmVUbyh0LmdldENvb3JkaW5hdGUoKSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gYXJndW1lbnRzWzFdLmNvbXBhcmUodGhpcy5fY29vcmRpbmF0ZXMsZS5fY29vcmRpbmF0ZXMpfX0sZS5wcm90b3R5cGUuYXBwbHk9ZnVuY3Rpb24oKXtpZihPKGFyZ3VtZW50c1swXSxodCkpe3ZhciB0PWFyZ3VtZW50c1swXTtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4gbnVsbDt0LmZpbHRlcih0aGlzLmdldENvb3JkaW5hdGUoKSl9ZWxzZSBpZihPKGFyZ3VtZW50c1swXSxVdCkpe3ZhciBlPWFyZ3VtZW50c1swXTtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4gbnVsbDtlLmZpbHRlcih0aGlzLl9jb29yZGluYXRlcywwKSxlLmlzR2VvbWV0cnlDaGFuZ2VkKCkmJnRoaXMuZ2VvbWV0cnlDaGFuZ2VkKCl9ZWxzZSBpZihPKGFyZ3VtZW50c1swXSxWdCkpe2FyZ3VtZW50c1swXS5maWx0ZXIodGhpcyl9ZWxzZSBpZihPKGFyZ3VtZW50c1swXSx1dCkpe2FyZ3VtZW50c1swXS5maWx0ZXIodGhpcyl9fSxlLnByb3RvdHlwZS5nZXRCb3VuZGFyeT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24obnVsbCl9LGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGU9dC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gZS5fY29vcmRpbmF0ZXM9dGhpcy5fY29vcmRpbmF0ZXMuY2xvbmUoKSxlfSxlLnByb3RvdHlwZS5nZXRHZW9tZXRyeVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm5cIlBvaW50XCJ9LGUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGUodGhpcy5fY29vcmRpbmF0ZXMuY29weSgpLHRoaXMuX2ZhY3RvcnkpfSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlU2VxdWVuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29vcmRpbmF0ZXN9LGUucHJvdG90eXBlLmdldFk9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5nZXRDb29yZGluYXRlKCkpdGhyb3cgbmV3IEVycm9yKFwiZ2V0WSBjYWxsZWQgb24gZW1wdHkgUG9pbnRcIik7cmV0dXJuIHRoaXMuZ2V0Q29vcmRpbmF0ZSgpLnl9LGUucHJvdG90eXBlLmlzRW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX2Nvb3JkaW5hdGVzLnNpemUoKX0sZS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbih0KXtudWxsPT09dCYmKHQ9dGhpcy5nZXRGYWN0b3J5KCkuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShbXSkpLHR0LmlzVHJ1ZSh0LnNpemUoKTw9MSksdGhpcy5fY29vcmRpbmF0ZXM9dH0sZS5wcm90b3R5cGUuaXNTaW1wbGU9ZnVuY3Rpb24oKXtyZXR1cm4hMH0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bSnRdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxuLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB4NDQwNzdiYWQxNjFjYmMwMH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxuKSxlfShsdCksWnQ9ZnVuY3Rpb24oKXt9O1p0LnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxadC5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gWnR9O3ZhciAkdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsbixpKXtpZih0LmNhbGwodGhpcyxpKSx0aGlzLl9zaGVsbD1udWxsLHRoaXMuX2hvbGVzPW51bGwsbnVsbD09PWUmJihlPXRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVhclJpbmcoKSksbnVsbD09PW4mJihuPVtdKSx0Lmhhc051bGxFbGVtZW50cyhuKSl0aHJvdyBuZXcgXyhcImhvbGVzIG11c3Qgbm90IGNvbnRhaW4gbnVsbCBlbGVtZW50c1wiKTtpZihlLmlzRW1wdHkoKSYmdC5oYXNOb25FbXB0eUVsZW1lbnRzKG4pKXRocm93IG5ldyBfKFwic2hlbGwgaXMgZW1wdHkgYnV0IGhvbGVzIGFyZSBub3RcIik7dGhpcy5fc2hlbGw9ZSx0aGlzLl9ob2xlcz1ufXQmJihlLl9fcHJvdG9fXz10KSwoZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWU7dmFyIG49e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybiBlLnByb3RvdHlwZS5jb21wdXRlRW52ZWxvcGVJbnRlcm5hbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zaGVsbC5nZXRFbnZlbG9wZUludGVybmFsKCl9LGUucHJvdG90eXBlLmdldFNvcnRJbmRleD1mdW5jdGlvbigpe3JldHVybiB0LlNPUlRJTkRFWF9QT0xZR09OfSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlcz1mdW5jdGlvbigpe2lmKHRoaXMuaXNFbXB0eSgpKXJldHVybltdO2Zvcih2YXIgdD1uZXcgQXJyYXkodGhpcy5nZXROdW1Qb2ludHMoKSkuZmlsbChudWxsKSxlPS0xLG49dGhpcy5fc2hlbGwuZ2V0Q29vcmRpbmF0ZXMoKSxpPTA7aTxuLmxlbmd0aDtpKyspdFsrK2VdPW5baV07Zm9yKHZhciByPTA7cjx0aGlzLl9ob2xlcy5sZW5ndGg7cisrKWZvcih2YXIgbz10aGlzLl9ob2xlc1tyXS5nZXRDb29yZGluYXRlcygpLHM9MDtzPG8ubGVuZ3RoO3MrKyl0WysrZV09b1tzXTtyZXR1cm4gdH0sZS5wcm90b3R5cGUuZ2V0QXJlYT1mdW5jdGlvbigpe3ZhciB0PTA7dCs9TWF0aC5hYnMoc3Quc2lnbmVkQXJlYSh0aGlzLl9zaGVsbC5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSkpO2Zvcih2YXIgZT0wO2U8dGhpcy5faG9sZXMubGVuZ3RoO2UrKyl0LT1NYXRoLmFicyhzdC5zaWduZWRBcmVhKHRoaXMuX2hvbGVzW2VdLmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpKSk7cmV0dXJuIHR9LGUucHJvdG90eXBlLmlzUmVjdGFuZ2xlPWZ1bmN0aW9uKCl7aWYoMCE9PXRoaXMuZ2V0TnVtSW50ZXJpb3JSaW5nKCkpcmV0dXJuITE7aWYobnVsbD09PXRoaXMuX3NoZWxsKXJldHVybiExO2lmKDUhPT10aGlzLl9zaGVsbC5nZXROdW1Qb2ludHMoKSlyZXR1cm4hMTtmb3IodmFyIHQ9dGhpcy5fc2hlbGwuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCksZT10aGlzLmdldEVudmVsb3BlSW50ZXJuYWwoKSxuPTA7bjw1O24rKyl7dmFyIGk9dC5nZXRYKG4pO2lmKGkhPT1lLmdldE1pblgoKSYmaSE9PWUuZ2V0TWF4WCgpKXJldHVybiExO3ZhciByPXQuZ2V0WShuKTtpZihyIT09ZS5nZXRNaW5ZKCkmJnIhPT1lLmdldE1heFkoKSlyZXR1cm4hMX1mb3IodmFyIG89dC5nZXRYKDApLHM9dC5nZXRZKDApLGE9MTthPD00O2ErKyl7dmFyIHU9dC5nZXRYKGEpLGw9dC5nZXRZKGEpO2lmKHUhPT1vPT09KGwhPT1zKSlyZXR1cm4hMTtvPXUscz1sfXJldHVybiEwfSxlLnByb3RvdHlwZS5lcXVhbHNFeGFjdD1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07aWYoIXRoaXMuaXNFcXVpdmFsZW50Q2xhc3MoZSkpcmV0dXJuITE7dmFyIGk9ZSxyPXRoaXMuX3NoZWxsLG89aS5fc2hlbGw7aWYoIXIuZXF1YWxzRXhhY3QobyxuKSlyZXR1cm4hMTtpZih0aGlzLl9ob2xlcy5sZW5ndGghPT1pLl9ob2xlcy5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBzPTA7czx0aGlzLl9ob2xlcy5sZW5ndGg7cysrKWlmKCF0aGlzLl9ob2xlc1tzXS5lcXVhbHNFeGFjdChpLl9ob2xlc1tzXSxuKSlyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4gdC5wcm90b3R5cGUuZXF1YWxzRXhhY3QuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlLnByb3RvdHlwZS5ub3JtYWxpemU9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dGhpcy5ub3JtYWxpemUodGhpcy5fc2hlbGwsITApO2Zvcih2YXIgdD0wO3Q8dGhpcy5faG9sZXMubGVuZ3RoO3QrKyl0aGlzLm5vcm1hbGl6ZSh0aGlzLl9ob2xlc1t0XSwhMSk7R3Quc29ydCh0aGlzLl9ob2xlcyl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO2lmKGUuaXNFbXB0eSgpKXJldHVybiBudWxsO3ZhciBpPW5ldyBBcnJheShlLmdldENvb3JkaW5hdGVzKCkubGVuZ3RoLTEpLmZpbGwobnVsbCk7WC5hcnJheWNvcHkoZS5nZXRDb29yZGluYXRlcygpLDAsaSwwLGkubGVuZ3RoKTt2YXIgcj1MdC5taW5Db29yZGluYXRlKGUuZ2V0Q29vcmRpbmF0ZXMoKSk7THQuc2Nyb2xsKGksciksWC5hcnJheWNvcHkoaSwwLGUuZ2V0Q29vcmRpbmF0ZXMoKSwwLGkubGVuZ3RoKSxlLmdldENvb3JkaW5hdGVzKClbaS5sZW5ndGhdPWlbMF0sc3QuaXNDQ1coZS5nZXRDb29yZGluYXRlcygpKT09PW4mJkx0LnJldmVyc2UoZS5nZXRDb29yZGluYXRlcygpKX19LGUucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2hlbGwuZ2V0Q29vcmRpbmF0ZSgpfSxlLnByb3RvdHlwZS5nZXROdW1JbnRlcmlvclJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faG9sZXMubGVuZ3RofSxlLnByb3RvdHlwZS5nZXRCb3VuZGFyeURpbWVuc2lvbj1mdW5jdGlvbigpe3JldHVybiAxfSxlLnByb3RvdHlwZS5nZXREaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gMn0sZS5wcm90b3R5cGUuZ2V0TGVuZ3RoPWZ1bmN0aW9uKCl7dmFyIHQ9MDt0Kz10aGlzLl9zaGVsbC5nZXRMZW5ndGgoKTtmb3IodmFyIGU9MDtlPHRoaXMuX2hvbGVzLmxlbmd0aDtlKyspdCs9dGhpcy5faG9sZXNbZV0uZ2V0TGVuZ3RoKCk7cmV0dXJuIHR9LGUucHJvdG90eXBlLmdldE51bVBvaW50cz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLl9zaGVsbC5nZXROdW1Qb2ludHMoKSxlPTA7ZTx0aGlzLl9ob2xlcy5sZW5ndGg7ZSsrKXQrPXRoaXMuX2hvbGVzW2VdLmdldE51bVBvaW50cygpO3JldHVybiB0fSxlLnByb3RvdHlwZS5yZXZlcnNlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jb3B5KCk7dC5fc2hlbGw9dGhpcy5fc2hlbGwuY29weSgpLnJldmVyc2UoKSx0Ll9ob2xlcz1uZXcgQXJyYXkodGhpcy5faG9sZXMubGVuZ3RoKS5maWxsKG51bGwpO2Zvcih2YXIgZT0wO2U8dGhpcy5faG9sZXMubGVuZ3RoO2UrKyl0Ll9ob2xlc1tlXT10aGlzLl9ob2xlc1tlXS5jb3B5KCkucmV2ZXJzZSgpO3JldHVybiB0fSxlLnByb3RvdHlwZS5jb252ZXhIdWxsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0RXh0ZXJpb3JSaW5nKCkuY29udmV4SHVsbCgpfSxlLnByb3RvdHlwZS5jb21wYXJlVG9TYW1lQ2xhc3M9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy5fc2hlbGwsbj10Ll9zaGVsbDtyZXR1cm4gZS5jb21wYXJlVG9TYW1lQ2xhc3Mobil9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxvPWkscz10aGlzLl9zaGVsbCxhPW8uX3NoZWxsLHU9cy5jb21wYXJlVG9TYW1lQ2xhc3MoYSxyKTtpZigwIT09dSlyZXR1cm4gdTtmb3IodmFyIGw9dGhpcy5nZXROdW1JbnRlcmlvclJpbmcoKSxjPW8uZ2V0TnVtSW50ZXJpb3JSaW5nKCkscD0wO3A8bCYmcDxjOyl7dmFyIGg9dGhpcy5nZXRJbnRlcmlvclJpbmdOKHApLGY9by5nZXRJbnRlcmlvclJpbmdOKHApLGc9aC5jb21wYXJlVG9TYW1lQ2xhc3MoZixyKTtpZigwIT09ZylyZXR1cm4gZztwKyt9cmV0dXJuIHA8bD8xOnA8Yz8tMTowfX0sZS5wcm90b3R5cGUuYXBwbHk9ZnVuY3Rpb24odCl7aWYoTyh0LGh0KSl7dGhpcy5fc2hlbGwuYXBwbHkodCk7Zm9yKHZhciBlPTA7ZTx0aGlzLl9ob2xlcy5sZW5ndGg7ZSsrKXRoaXMuX2hvbGVzW2VdLmFwcGx5KHQpfWVsc2UgaWYoTyh0LFV0KSl7aWYodGhpcy5fc2hlbGwuYXBwbHkodCksIXQuaXNEb25lKCkpZm9yKHZhciBuPTA7bjx0aGlzLl9ob2xlcy5sZW5ndGgmJih0aGlzLl9ob2xlc1tuXS5hcHBseSh0KSwhdC5pc0RvbmUoKSk7bisrKTt0LmlzR2VvbWV0cnlDaGFuZ2VkKCkmJnRoaXMuZ2VvbWV0cnlDaGFuZ2VkKCl9ZWxzZSBpZihPKHQsVnQpKXQuZmlsdGVyKHRoaXMpO2Vsc2UgaWYoTyh0LHV0KSl7dC5maWx0ZXIodGhpcyksdGhpcy5fc2hlbGwuYXBwbHkodCk7Zm9yKHZhciBpPTA7aTx0aGlzLl9ob2xlcy5sZW5ndGg7aSsrKXRoaXMuX2hvbGVzW2ldLmFwcGx5KHQpfX0sZS5wcm90b3R5cGUuZ2V0Qm91bmRhcnk9ZnVuY3Rpb24oKXtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlTXVsdGlMaW5lU3RyaW5nKCk7dmFyIHQ9bmV3IEFycmF5KHRoaXMuX2hvbGVzLmxlbmd0aCsxKS5maWxsKG51bGwpO3RbMF09dGhpcy5fc2hlbGw7Zm9yKHZhciBlPTA7ZTx0aGlzLl9ob2xlcy5sZW5ndGg7ZSsrKXRbZSsxXT10aGlzLl9ob2xlc1tlXTtyZXR1cm4gdC5sZW5ndGg8PTE/dGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlTGluZWFyUmluZyh0WzBdLmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpKTp0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVNdWx0aUxpbmVTdHJpbmcodCl9LGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGU9dC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzKTtlLl9zaGVsbD10aGlzLl9zaGVsbC5jbG9uZSgpLGUuX2hvbGVzPW5ldyBBcnJheSh0aGlzLl9ob2xlcy5sZW5ndGgpLmZpbGwobnVsbCk7Zm9yKHZhciBuPTA7bjx0aGlzLl9ob2xlcy5sZW5ndGg7bisrKWUuX2hvbGVzW25dPXRoaXMuX2hvbGVzW25dLmNsb25lKCk7cmV0dXJuIGV9LGUucHJvdG90eXBlLmdldEdlb21ldHJ5VHlwZT1mdW5jdGlvbigpe3JldHVyblwiUG9seWdvblwifSxlLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuX3NoZWxsLmNvcHkoKSxuPW5ldyBBcnJheSh0aGlzLl9ob2xlcy5sZW5ndGgpLmZpbGwobnVsbCksaT0wO2k8bi5sZW5ndGg7aSsrKW5baV09dGhpcy5faG9sZXNbaV0uY29weSgpO3JldHVybiBuZXcgZSh0LG4sdGhpcy5fZmFjdG9yeSl9LGUucHJvdG90eXBlLmdldEV4dGVyaW9yUmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zaGVsbH0sZS5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zaGVsbC5pc0VtcHR5KCl9LGUucHJvdG90eXBlLmdldEludGVyaW9yUmluZ049ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2hvbGVzW3RdfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltadF19LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LG4uc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4tMHgzMDdmZmVmZDhkYzk3MjAwfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLG4pLGV9KGx0KSx0ZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dCYmKGUuX19wcm90b19fPXQpLChlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSkuY29uc3RydWN0b3I9ZTt2YXIgbj17c2VyaWFsVmVyc2lvblVJRDp7Y29uZmlndXJhYmxlOiEwfX07cmV0dXJuIGUucHJvdG90eXBlLmdldFNvcnRJbmRleD1mdW5jdGlvbigpe3JldHVybiBsdC5TT1JUSU5ERVhfTVVMVElQT0lOVH0sZS5wcm90b3R5cGUuaXNWYWxpZD1mdW5jdGlvbigpe3JldHVybiEwfSxlLnByb3RvdHlwZS5lcXVhbHNFeGFjdD1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07cmV0dXJuISF0aGlzLmlzRXF1aXZhbGVudENsYXNzKGUpJiZ0LnByb3RvdHlwZS5lcXVhbHNFeGFjdC5jYWxsKHRoaXMsZSxuKX1yZXR1cm4gdC5wcm90b3R5cGUuZXF1YWxzRXhhY3QuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5fZ2VvbWV0cmllc1tlXS5nZXRDb29yZGluYXRlKCl9cmV0dXJuIHQucHJvdG90eXBlLmdldENvb3JkaW5hdGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlLnByb3RvdHlwZS5nZXRCb3VuZGFyeURpbWVuc2lvbj1mdW5jdGlvbigpe3JldHVybiBxdC5GQUxTRX0sZS5wcm90b3R5cGUuZ2V0RGltZW5zaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIDB9LGUucHJvdG90eXBlLmdldEJvdW5kYXJ5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihudWxsKX0sZS5wcm90b3R5cGUuZ2V0R2VvbWV0cnlUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuXCJNdWx0aVBvaW50XCJ9LGUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IEFycmF5KHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoKS5maWxsKG51bGwpLG49MDtuPHQubGVuZ3RoO24rKyl0W25dPXRoaXMuX2dlb21ldHJpZXNbbl0uY29weSgpO3JldHVybiBuZXcgZSh0LHRoaXMuX2ZhY3RvcnkpfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltKdF19LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LG4uc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4tMHg2ZmIxZWQ0MTYyZTBmYzAwfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLG4pLGV9KHp0KSxlZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsbil7ZSBpbnN0YW5jZW9mIE4mJm4gaW5zdGFuY2VvZiBfZSYmKGU9bi5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKGUpKSx0LmNhbGwodGhpcyxlLG4pLHRoaXMudmFsaWRhdGVDb25zdHJ1Y3Rpb24oKX10JiYoZS5fX3Byb3RvX189dCksKGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1lO3ZhciBuPXtNSU5JTVVNX1ZBTElEX1NJWkU6e2NvbmZpZ3VyYWJsZTohMH0sc2VyaWFsVmVyc2lvblVJRDp7Y29uZmlndXJhYmxlOiEwfX07cmV0dXJuIGUucHJvdG90eXBlLmdldFNvcnRJbmRleD1mdW5jdGlvbigpe3JldHVybiBsdC5TT1JUSU5ERVhfTElORUFSUklOR30sZS5wcm90b3R5cGUuZ2V0Qm91bmRhcnlEaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gcXQuRkFMU0V9LGUucHJvdG90eXBlLmlzQ2xvc2VkPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmlzRW1wdHkoKXx8dC5wcm90b3R5cGUuaXNDbG9zZWQuY2FsbCh0aGlzKX0sZS5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX3BvaW50cy5jb3B5KCk7V3QucmV2ZXJzZSh0KTtyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlTGluZWFyUmluZyh0KX0sZS5wcm90b3R5cGUudmFsaWRhdGVDb25zdHJ1Y3Rpb249ZnVuY3Rpb24oKXtpZighdGhpcy5pc0VtcHR5KCkmJiF0LnByb3RvdHlwZS5pc0Nsb3NlZC5jYWxsKHRoaXMpKXRocm93IG5ldyBfKFwiUG9pbnRzIG9mIExpbmVhclJpbmcgZG8gbm90IGZvcm0gYSBjbG9zZWQgbGluZXN0cmluZ1wiKTtpZih0aGlzLmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLnNpemUoKT49MSYmdGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2UoKS5zaXplKCk8ZS5NSU5JTVVNX1ZBTElEX1NJWkUpdGhyb3cgbmV3IF8oXCJJbnZhbGlkIG51bWJlciBvZiBwb2ludHMgaW4gTGluZWFyUmluZyAoZm91bmQgXCIrdGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2UoKS5zaXplKCkrXCIgLSBtdXN0IGJlIDAgb3IgPj0gNClcIil9LGUucHJvdG90eXBlLmdldEdlb21ldHJ5VHlwZT1mdW5jdGlvbigpe3JldHVyblwiTGluZWFyUmluZ1wifSxlLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBlKHRoaXMuX3BvaW50cy5jb3B5KCksdGhpcy5fZmFjdG9yeSl9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LG4uTUlOSU1VTV9WQUxJRF9TSVpFLmdldD1mdW5jdGlvbigpe3JldHVybiA0fSxuLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLTB4M2IyMjllMjYyMzY3YTYwMH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxuKSxlfShLdCksbmU9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuYXBwbHkodGhpcyxhcmd1bWVudHMpfXQmJihlLl9fcHJvdG9fXz10KSwoZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWU7dmFyIG49e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybiBlLnByb3RvdHlwZS5nZXRTb3J0SW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gbHQuU09SVElOREVYX01VTFRJUE9MWUdPTn0sZS5wcm90b3R5cGUuZXF1YWxzRXhhY3Q9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3JldHVybiEhdGhpcy5pc0VxdWl2YWxlbnRDbGFzcyhlKSYmdC5wcm90b3R5cGUuZXF1YWxzRXhhY3QuY2FsbCh0aGlzLGUsbil9cmV0dXJuIHQucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5wcm90b3R5cGUuZ2V0Qm91bmRhcnlEaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gMX0sZS5wcm90b3R5cGUuZ2V0RGltZW5zaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIDJ9LGUucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5fZ2VvbWV0cmllcy5sZW5ndGgsZT1uZXcgQXJyYXkodCkuZmlsbChudWxsKSxuPTA7bjx0aGlzLl9nZW9tZXRyaWVzLmxlbmd0aDtuKyspZVtuXT10aGlzLl9nZW9tZXRyaWVzW25dLnJldmVyc2UoKTtyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlTXVsdGlQb2x5Z29uKGUpfSxlLnByb3RvdHlwZS5nZXRCb3VuZGFyeT1mdW5jdGlvbigpe2lmKHRoaXMuaXNFbXB0eSgpKXJldHVybiB0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVNdWx0aUxpbmVTdHJpbmcoKTtmb3IodmFyIHQ9bmV3IE50LGU9MDtlPHRoaXMuX2dlb21ldHJpZXMubGVuZ3RoO2UrKylmb3IodmFyIG49dGhpcy5fZ2VvbWV0cmllc1tlXS5nZXRCb3VuZGFyeSgpLGk9MDtpPG4uZ2V0TnVtR2VvbWV0cmllcygpO2krKyl0LmFkZChuLmdldEdlb21ldHJ5TihpKSk7dmFyIHI9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpO3JldHVybiB0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVNdWx0aUxpbmVTdHJpbmcodC50b0FycmF5KHIpKX0sZS5wcm90b3R5cGUuZ2V0R2VvbWV0cnlUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuXCJNdWx0aVBvbHlnb25cIn0sZS5wcm90b3R5cGUuY29weT1mdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgQXJyYXkodGhpcy5fZ2VvbWV0cmllcy5sZW5ndGgpLmZpbGwobnVsbCksbj0wO248dC5sZW5ndGg7bisrKXRbbl09dGhpcy5fZ2VvbWV0cmllc1tuXS5jb3B5KCk7cmV0dXJuIG5ldyBlKHQsdGhpcy5fZmFjdG9yeSl9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW1p0XX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sbi5zZXJpYWxWZXJzaW9uVUlELmdldD1mdW5jdGlvbigpe3JldHVybi0weDdhNWFhMTM2OTE3MTk4MH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxuKSxlfSh6dCksaWU9ZnVuY3Rpb24odCl7dGhpcy5fZmFjdG9yeT10fHxudWxsLHRoaXMuX2lzVXNlckRhdGFDb3BpZWQ9ITF9LHJlPXtOb09wR2VvbWV0cnlPcGVyYXRpb246e2NvbmZpZ3VyYWJsZTohMH0sQ29vcmRpbmF0ZU9wZXJhdGlvbjp7Y29uZmlndXJhYmxlOiEwfSxDb29yZGluYXRlU2VxdWVuY2VPcGVyYXRpb246e2NvbmZpZ3VyYWJsZTohMH19O2llLnByb3RvdHlwZS5zZXRDb3B5VXNlckRhdGE9ZnVuY3Rpb24odCl7dGhpcy5faXNVc2VyRGF0YUNvcGllZD10fSxpZS5wcm90b3R5cGUuZWRpdD1mdW5jdGlvbih0LGUpe2lmKG51bGw9PT10KXJldHVybiBudWxsO3ZhciBuPXRoaXMuZWRpdEludGVybmFsKHQsZSk7cmV0dXJuIHRoaXMuX2lzVXNlckRhdGFDb3BpZWQmJm4uc2V0VXNlckRhdGEodC5nZXRVc2VyRGF0YSgpKSxufSxpZS5wcm90b3R5cGUuZWRpdEludGVybmFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGw9PT10aGlzLl9mYWN0b3J5JiYodGhpcy5fZmFjdG9yeT10LmdldEZhY3RvcnkoKSksdCBpbnN0YW5jZW9mIHp0P3RoaXMuZWRpdEdlb21ldHJ5Q29sbGVjdGlvbih0LGUpOnQgaW5zdGFuY2VvZiAkdD90aGlzLmVkaXRQb2x5Z29uKHQsZSk6dCBpbnN0YW5jZW9mIFF0P2UuZWRpdCh0LHRoaXMuX2ZhY3RvcnkpOnQgaW5zdGFuY2VvZiBLdD9lLmVkaXQodCx0aGlzLl9mYWN0b3J5KToodHQuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoXCJVbnN1cHBvcnRlZCBHZW9tZXRyeSBjbGFzczogXCIrdC5nZXRDbGFzcygpLmdldE5hbWUoKSksbnVsbCl9LGllLnByb3RvdHlwZS5lZGl0R2VvbWV0cnlDb2xsZWN0aW9uPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPWUuZWRpdCh0LHRoaXMuX2ZhY3RvcnkpLGk9bmV3IE50LHI9MDtyPG4uZ2V0TnVtR2VvbWV0cmllcygpO3IrKyl7dmFyIG89dGhpcy5lZGl0KG4uZ2V0R2VvbWV0cnlOKHIpLGUpO251bGw9PT1vfHxvLmlzRW1wdHkoKXx8aS5hZGQobyl9cmV0dXJuIG4uZ2V0Q2xhc3MoKT09PXRlP3RoaXMuX2ZhY3RvcnkuY3JlYXRlTXVsdGlQb2ludChpLnRvQXJyYXkoW10pKTpuLmdldENsYXNzKCk9PT1YdD90aGlzLl9mYWN0b3J5LmNyZWF0ZU11bHRpTGluZVN0cmluZyhpLnRvQXJyYXkoW10pKTpuLmdldENsYXNzKCk9PT1uZT90aGlzLl9mYWN0b3J5LmNyZWF0ZU11bHRpUG9seWdvbihpLnRvQXJyYXkoW10pKTp0aGlzLl9mYWN0b3J5LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihpLnRvQXJyYXkoW10pKX0saWUucHJvdG90eXBlLmVkaXRQb2x5Z29uPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5lZGl0KHQsdGhpcy5fZmFjdG9yeSk7aWYobnVsbD09PW4mJihuPXRoaXMuX2ZhY3RvcnkuY3JlYXRlUG9seWdvbihudWxsKSksbi5pc0VtcHR5KCkpcmV0dXJuIG47dmFyIGk9dGhpcy5lZGl0KG4uZ2V0RXh0ZXJpb3JSaW5nKCksZSk7aWYobnVsbD09PWl8fGkuaXNFbXB0eSgpKXJldHVybiB0aGlzLl9mYWN0b3J5LmNyZWF0ZVBvbHlnb24oKTtmb3IodmFyIHI9bmV3IE50LG89MDtvPG4uZ2V0TnVtSW50ZXJpb3JSaW5nKCk7bysrKXt2YXIgcz10aGlzLmVkaXQobi5nZXRJbnRlcmlvclJpbmdOKG8pLGUpO251bGw9PT1zfHxzLmlzRW1wdHkoKXx8ci5hZGQocyl9cmV0dXJuIHRoaXMuX2ZhY3RvcnkuY3JlYXRlUG9seWdvbihpLHIudG9BcnJheShbXSkpfSxpZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0saWUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGllfSxpZS5HZW9tZXRyeUVkaXRvck9wZXJhdGlvbj1mdW5jdGlvbigpe30scmUuTm9PcEdlb21ldHJ5T3BlcmF0aW9uLmdldD1mdW5jdGlvbigpe3JldHVybiBvZX0scmUuQ29vcmRpbmF0ZU9wZXJhdGlvbi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gc2V9LHJlLkNvb3JkaW5hdGVTZXF1ZW5jZU9wZXJhdGlvbi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gYWV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGllLHJlKTt2YXIgb2U9ZnVuY3Rpb24oKXt9O29lLnByb3RvdHlwZS5lZGl0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHR9LG9lLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltpZS5HZW9tZXRyeUVkaXRvck9wZXJhdGlvbl19LG9lLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBvZX07dmFyIHNlPWZ1bmN0aW9uKCl7fTtzZS5wcm90b3R5cGUuZWRpdD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZWRpdENvb3JkaW5hdGVzKHQuZ2V0Q29vcmRpbmF0ZXMoKSx0KTtyZXR1cm4gbnVsbD09PW4/dDp0IGluc3RhbmNlb2YgZWU/ZS5jcmVhdGVMaW5lYXJSaW5nKG4pOnQgaW5zdGFuY2VvZiBLdD9lLmNyZWF0ZUxpbmVTdHJpbmcobik6dCBpbnN0YW5jZW9mIFF0P24ubGVuZ3RoPjA/ZS5jcmVhdGVQb2ludChuWzBdKTplLmNyZWF0ZVBvaW50KCk6dH0sc2UucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW2llLkdlb21ldHJ5RWRpdG9yT3BlcmF0aW9uXX0sc2UucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHNlfTt2YXIgYWU9ZnVuY3Rpb24oKXt9O2FlLnByb3RvdHlwZS5lZGl0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQgaW5zdGFuY2VvZiBlZT9lLmNyZWF0ZUxpbmVhclJpbmcodGhpcy5lZGl0KHQuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCksdCkpOnQgaW5zdGFuY2VvZiBLdD9lLmNyZWF0ZUxpbmVTdHJpbmcodGhpcy5lZGl0KHQuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCksdCkpOnQgaW5zdGFuY2VvZiBRdD9lLmNyZWF0ZVBvaW50KHRoaXMuZWRpdCh0LmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLHQpKTp0fSxhZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5baWUuR2VvbWV0cnlFZGl0b3JPcGVyYXRpb25dfSxhZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gYWV9O3ZhciB1ZT1mdW5jdGlvbigpe2lmKHRoaXMuX2RpbWVuc2lvbj0zLHRoaXMuX2Nvb3JkaW5hdGVzPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpdGhpcy5fY29vcmRpbmF0ZXM9YXJndW1lbnRzWzBdLHRoaXMuX2RpbWVuc2lvbj0zO2Vsc2UgaWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fY29vcmRpbmF0ZXM9bmV3IEFycmF5KHQpLmZpbGwobnVsbCk7Zm9yKHZhciBlPTA7ZTx0O2UrKyl0aGlzLl9jb29yZGluYXRlc1tlXT1uZXcgTn1lbHNlIGlmKE8oYXJndW1lbnRzWzBdLEIpKXt2YXIgbj1hcmd1bWVudHNbMF07aWYobnVsbD09PW4pcmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVzPW5ldyBBcnJheSgwKS5maWxsKG51bGwpLG51bGw7dGhpcy5fZGltZW5zaW9uPW4uZ2V0RGltZW5zaW9uKCksdGhpcy5fY29vcmRpbmF0ZXM9bmV3IEFycmF5KG4uc2l6ZSgpKS5maWxsKG51bGwpO2Zvcih2YXIgaT0wO2k8dGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoO2krKyl0aGlzLl9jb29yZGluYXRlc1tpXT1uLmdldENvb3JkaW5hdGVDb3B5KGkpfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkmJk51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzFdKSl7dmFyIHI9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdO3RoaXMuX2Nvb3JkaW5hdGVzPXIsdGhpcy5fZGltZW5zaW9uPW8sbnVsbD09PXImJih0aGlzLl9jb29yZGluYXRlcz1uZXcgQXJyYXkoMCkuZmlsbChudWxsKSl9ZWxzZSBpZihOdW1iZXIuaXNJbnRlZ2VyKGFyZ3VtZW50c1swXSkmJk51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzFdKSl7dmFyIHM9YXJndW1lbnRzWzBdLGE9YXJndW1lbnRzWzFdO3RoaXMuX2Nvb3JkaW5hdGVzPW5ldyBBcnJheShzKS5maWxsKG51bGwpLHRoaXMuX2RpbWVuc2lvbj1hO2Zvcih2YXIgdT0wO3U8czt1KyspdGhpcy5fY29vcmRpbmF0ZXNbdV09bmV3IE59fSxsZT17c2VyaWFsVmVyc2lvblVJRDp7Y29uZmlndXJhYmxlOiEwfX07dWUucHJvdG90eXBlLnNldE9yZGluYXRlPWZ1bmN0aW9uKHQsZSxuKXtzd2l0Y2goZSl7Y2FzZSBCLlg6dGhpcy5fY29vcmRpbmF0ZXNbdF0ueD1uO2JyZWFrO2Nhc2UgQi5ZOnRoaXMuX2Nvb3JkaW5hdGVzW3RdLnk9bjticmVhaztjYXNlIEIuWjp0aGlzLl9jb29yZGluYXRlc1t0XS56PW47YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgXyhcImludmFsaWQgb3JkaW5hdGVJbmRleFwiKX19LHVlLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aH0sdWUucHJvdG90eXBlLmdldE9yZGluYXRlPWZ1bmN0aW9uKHQsZSl7c3dpdGNoKGUpe2Nhc2UgQi5YOnJldHVybiB0aGlzLl9jb29yZGluYXRlc1t0XS54O2Nhc2UgQi5ZOnJldHVybiB0aGlzLl9jb29yZGluYXRlc1t0XS55O2Nhc2UgQi5aOnJldHVybiB0aGlzLl9jb29yZGluYXRlc1t0XS56fXJldHVybiBtLk5hTn0sdWUucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLl9jb29yZGluYXRlc1t0XX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO24ueD10aGlzLl9jb29yZGluYXRlc1tlXS54LG4ueT10aGlzLl9jb29yZGluYXRlc1tlXS55LG4uej10aGlzLl9jb29yZGluYXRlc1tlXS56fX0sdWUucHJvdG90eXBlLmdldENvb3JkaW5hdGVDb3B5PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgTih0aGlzLl9jb29yZGluYXRlc1t0XSl9LHVlLnByb3RvdHlwZS5nZXREaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGltZW5zaW9ufSx1ZS5wcm90b3R5cGUuZ2V0WD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fY29vcmRpbmF0ZXNbdF0ueH0sdWUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLnNpemUoKSkuZmlsbChudWxsKSxlPTA7ZTx0aGlzLl9jb29yZGluYXRlcy5sZW5ndGg7ZSsrKXRbZV09dGhpcy5fY29vcmRpbmF0ZXNbZV0uY2xvbmUoKTtyZXR1cm4gbmV3IHVlKHQsdGhpcy5fZGltZW5zaW9uKX0sdWUucHJvdG90eXBlLmV4cGFuZEVudmVsb3BlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoO2UrKyl0LmV4cGFuZFRvSW5jbHVkZSh0aGlzLl9jb29yZGluYXRlc1tlXSk7cmV0dXJuIHR9LHVlLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLnNpemUoKSkuZmlsbChudWxsKSxlPTA7ZTx0aGlzLl9jb29yZGluYXRlcy5sZW5ndGg7ZSsrKXRbZV09dGhpcy5fY29vcmRpbmF0ZXNbZV0uY29weSgpO3JldHVybiBuZXcgdWUodCx0aGlzLl9kaW1lbnNpb24pfSx1ZS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLl9jb29yZGluYXRlcy5sZW5ndGg+MCl7dmFyIHQ9bmV3IFAoMTcqdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoKTt0LmFwcGVuZChcIihcIiksdC5hcHBlbmQodGhpcy5fY29vcmRpbmF0ZXNbMF0pO2Zvcih2YXIgZT0xO2U8dGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoO2UrKyl0LmFwcGVuZChcIiwgXCIpLHQuYXBwZW5kKHRoaXMuX2Nvb3JkaW5hdGVzW2VdKTtyZXR1cm4gdC5hcHBlbmQoXCIpXCIpLHQudG9TdHJpbmcoKX1yZXR1cm5cIigpXCJ9LHVlLnByb3RvdHlwZS5nZXRZPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9jb29yZGluYXRlc1t0XS55fSx1ZS5wcm90b3R5cGUudG9Db29yZGluYXRlQXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29vcmRpbmF0ZXN9LHVlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltCLGVdfSx1ZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gdWV9LGxlLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLTB4Y2I0NGE3NzhkYjE4ZTAwfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyh1ZSxsZSk7dmFyIGNlPWZ1bmN0aW9uKCl7fSxwZT17c2VyaWFsVmVyc2lvblVJRDp7Y29uZmlndXJhYmxlOiEwfSxpbnN0YW5jZU9iamVjdDp7Y29uZmlndXJhYmxlOiEwfX07Y2UucHJvdG90eXBlLnJlYWRSZXNvbHZlPWZ1bmN0aW9uKCl7cmV0dXJuIGNlLmluc3RhbmNlKCl9LGNlLnByb3RvdHlwZS5jcmVhdGU9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiBuZXcgdWUodCl9aWYoTyhhcmd1bWVudHNbMF0sQikpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gbmV3IHVlKGUpfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV07cmV0dXJuIGk+MyYmKGk9MyksaTwyP25ldyB1ZShuKTpuZXcgdWUobixpKX19LGNlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltMLGVdfSxjZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gY2V9LGNlLmluc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIGNlLmluc3RhbmNlT2JqZWN0fSxwZS5zZXJpYWxWZXJzaW9uVUlELmdldD1mdW5jdGlvbigpe3JldHVybi0weDM4ZTQ5ZmE2Y2Y2ZjJlMDB9LHBlLmluc3RhbmNlT2JqZWN0LmdldD1mdW5jdGlvbigpe3JldHVybiBuZXcgY2V9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNlLHBlKTt2YXIgaGU9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuY2FsbCh0aGlzKSx0aGlzLm1hcF89bmV3IE1hcH1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm1hcF8uZ2V0KHQpfHxudWxsfSxlLnByb3RvdHlwZS5wdXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5tYXBfLnNldCh0LGUpLGV9LGUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgTnQsZT10aGlzLm1hcF8udmFsdWVzKCksbj1lLm5leHQoKTshbi5kb25lOyl0LmFkZChuLnZhbHVlKSxuPWUubmV4dCgpO3JldHVybiB0fSxlLnByb3RvdHlwZS5lbnRyeVNldD1mdW5jdGlvbigpe3ZhciB0PW5ldyBQdDtyZXR1cm4gdGhpcy5tYXBfLmVudHJpZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmFkZChlKX0pLHR9LGUucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXBfLnNpemUoKX0sZX0oVHQpLGZlPWZ1bmN0aW9uIHQoKXtpZih0aGlzLl9tb2RlbFR5cGU9bnVsbCx0aGlzLl9zY2FsZT1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKXRoaXMuX21vZGVsVHlwZT10LkZMT0FUSU5HO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBkZSl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuX21vZGVsVHlwZT1lLGU9PT10LkZJWEVEJiZ0aGlzLnNldFNjYWxlKDEpfWVsc2UgaWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIG49YXJndW1lbnRzWzBdO3RoaXMuX21vZGVsVHlwZT10LkZJWEVELHRoaXMuc2V0U2NhbGUobil9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIHQpe3ZhciBpPWFyZ3VtZW50c1swXTt0aGlzLl9tb2RlbFR5cGU9aS5fbW9kZWxUeXBlLHRoaXMuX3NjYWxlPWkuX3NjYWxlfX0sZ2U9e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH0sbWF4aW11bVByZWNpc2VWYWx1ZTp7Y29uZmlndXJhYmxlOiEwfX07ZmUucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbih0KXtpZighKHQgaW5zdGFuY2VvZiBmZSkpcmV0dXJuITE7dmFyIGU9dDtyZXR1cm4gdGhpcy5fbW9kZWxUeXBlPT09ZS5fbW9kZWxUeXBlJiZ0aGlzLl9zY2FsZT09PWUuX3NjYWxlfSxmZS5wcm90b3R5cGUuY29tcGFyZVRvPWZ1bmN0aW9uKHQpe3ZhciBlPXQsbj10aGlzLmdldE1heGltdW1TaWduaWZpY2FudERpZ2l0cygpLGk9ZS5nZXRNYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMoKTtyZXR1cm4gbmV3IEQobikuY29tcGFyZVRvKG5ldyBEKGkpKX0sZmUucHJvdG90eXBlLmdldFNjYWxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NjYWxlfSxmZS5wcm90b3R5cGUuaXNGbG9hdGluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9tb2RlbFR5cGU9PT1mZS5GTE9BVElOR3x8dGhpcy5fbW9kZWxUeXBlPT09ZmUuRkxPQVRJTkdfU0lOR0xFfSxmZS5wcm90b3R5cGUuZ2V0VHlwZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9tb2RlbFR5cGV9LGZlLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciB0PVwiVU5LTk9XTlwiO3JldHVybiB0aGlzLl9tb2RlbFR5cGU9PT1mZS5GTE9BVElORz90PVwiRmxvYXRpbmdcIjp0aGlzLl9tb2RlbFR5cGU9PT1mZS5GTE9BVElOR19TSU5HTEU/dD1cIkZsb2F0aW5nLVNpbmdsZVwiOnRoaXMuX21vZGVsVHlwZT09PWZlLkZJWEVEJiYodD1cIkZpeGVkIChTY2FsZT1cIit0aGlzLmdldFNjYWxlKCkrXCIpXCIpLHR9LGZlLnByb3RvdHlwZS5tYWtlUHJlY2lzZT1mdW5jdGlvbigpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciB0PWFyZ3VtZW50c1swXTtpZihtLmlzTmFOKHQpKXJldHVybiB0O2lmKHRoaXMuX21vZGVsVHlwZT09PWZlLkZMT0FUSU5HX1NJTkdMRSl7cmV0dXJuIHR9cmV0dXJuIHRoaXMuX21vZGVsVHlwZT09PWZlLkZJWEVEP01hdGgucm91bmQodCp0aGlzLl9zY2FsZSkvdGhpcy5fc2NhbGU6dH1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4pe3ZhciBlPWFyZ3VtZW50c1swXTtpZih0aGlzLl9tb2RlbFR5cGU9PT1mZS5GTE9BVElORylyZXR1cm4gbnVsbDtlLng9dGhpcy5tYWtlUHJlY2lzZShlLngpLGUueT10aGlzLm1ha2VQcmVjaXNlKGUueSl9fSxmZS5wcm90b3R5cGUuZ2V0TWF4aW11bVNpZ25pZmljYW50RGlnaXRzPWZ1bmN0aW9uKCl7dmFyIHQ9MTY7cmV0dXJuIHRoaXMuX21vZGVsVHlwZT09PWZlLkZMT0FUSU5HP3Q9MTY6dGhpcy5fbW9kZWxUeXBlPT09ZmUuRkxPQVRJTkdfU0lOR0xFP3Q9Njp0aGlzLl9tb2RlbFR5cGU9PT1mZS5GSVhFRCYmKHQ9MStNYXRoLnRydW5jKE1hdGguY2VpbChNYXRoLmxvZyh0aGlzLmdldFNjYWxlKCkpL01hdGgubG9nKDEwKSkpKSx0fSxmZS5wcm90b3R5cGUuc2V0U2NhbGU9ZnVuY3Rpb24odCl7dGhpcy5fc2NhbGU9TWF0aC5hYnModCl9LGZlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltlLEldfSxmZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZmV9LGZlLm1vc3RQcmVjaXNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29tcGFyZVRvKGUpPj0wP3Q6ZX0sZ2Uuc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMHg2YmVlNjQwNGU5YTI1YzAwfSxnZS5tYXhpbXVtUHJlY2lzZVZhbHVlLmdldD1mdW5jdGlvbigpe3JldHVybiA5MDA3MTk5MjU0NzQwOTkyfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhmZSxnZSk7dmFyIGRlPWZ1bmN0aW9uIHQoZSl7dGhpcy5fbmFtZT1lfHxudWxsLHQubmFtZVRvVHlwZU1hcC5wdXQoZSx0aGlzKX0seWU9e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH0sbmFtZVRvVHlwZU1hcDp7Y29uZmlndXJhYmxlOiEwfX07ZGUucHJvdG90eXBlLnJlYWRSZXNvbHZlPWZ1bmN0aW9uKCl7cmV0dXJuIGRlLm5hbWVUb1R5cGVNYXAuZ2V0KHRoaXMuX25hbWUpfSxkZS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZX0sZGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW2VdfSxkZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZGV9LHllLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLTU1Mjg2MDI2MzE3MzE1OWU0fSx5ZS5uYW1lVG9UeXBlTWFwLmdldD1mdW5jdGlvbigpe3JldHVybiBuZXcgaGV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGRlLHllKSxmZS5UeXBlPWRlLGZlLkZJWEVEPW5ldyBkZShcIkZJWEVEXCIpLGZlLkZMT0FUSU5HPW5ldyBkZShcIkZMT0FUSU5HXCIpLGZlLkZMT0FUSU5HX1NJTkdMRT1uZXcgZGUoXCJGTE9BVElORyBTSU5HTEVcIik7dmFyIF9lPWZ1bmN0aW9uIHQoKXt0aGlzLl9wcmVjaXNpb25Nb2RlbD1uZXcgZmUsdGhpcy5fU1JJRD0wLHRoaXMuX2Nvb3JkaW5hdGVTZXF1ZW5jZUZhY3Rvcnk9dC5nZXREZWZhdWx0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLDA9PT1hcmd1bWVudHMubGVuZ3RofHwoMT09PWFyZ3VtZW50cy5sZW5ndGg/Tyhhcmd1bWVudHNbMF0sTCk/dGhpcy5fY29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeT1hcmd1bWVudHNbMF06YXJndW1lbnRzWzBdaW5zdGFuY2VvZiBmZSYmKHRoaXMuX3ByZWNpc2lvbk1vZGVsPWFyZ3VtZW50c1swXSk6Mj09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX3ByZWNpc2lvbk1vZGVsPWFyZ3VtZW50c1swXSx0aGlzLl9TUklEPWFyZ3VtZW50c1sxXSk6Mz09PWFyZ3VtZW50cy5sZW5ndGgmJih0aGlzLl9wcmVjaXNpb25Nb2RlbD1hcmd1bWVudHNbMF0sdGhpcy5fU1JJRD1hcmd1bWVudHNbMV0sdGhpcy5fY29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeT1hcmd1bWVudHNbMl0pKX0sbWU9e3NlcmlhbFZlcnNpb25VSUQ6e2NvbmZpZ3VyYWJsZTohMH19O19lLnByb3RvdHlwZS50b0dlb21ldHJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0LmlzTnVsbCgpP3RoaXMuY3JlYXRlUG9pbnQobnVsbCk6dC5nZXRNaW5YKCk9PT10LmdldE1heFgoKSYmdC5nZXRNaW5ZKCk9PT10LmdldE1heFkoKT90aGlzLmNyZWF0ZVBvaW50KG5ldyBOKHQuZ2V0TWluWCgpLHQuZ2V0TWluWSgpKSk6dC5nZXRNaW5YKCk9PT10LmdldE1heFgoKXx8dC5nZXRNaW5ZKCk9PT10LmdldE1heFkoKT90aGlzLmNyZWF0ZUxpbmVTdHJpbmcoW25ldyBOKHQuZ2V0TWluWCgpLHQuZ2V0TWluWSgpKSxuZXcgTih0LmdldE1heFgoKSx0LmdldE1heFkoKSldKTp0aGlzLmNyZWF0ZVBvbHlnb24odGhpcy5jcmVhdGVMaW5lYXJSaW5nKFtuZXcgTih0LmdldE1pblgoKSx0LmdldE1pblkoKSksbmV3IE4odC5nZXRNaW5YKCksdC5nZXRNYXhZKCkpLG5ldyBOKHQuZ2V0TWF4WCgpLHQuZ2V0TWF4WSgpKSxuZXcgTih0LmdldE1heFgoKSx0LmdldE1pblkoKSksbmV3IE4odC5nZXRNaW5YKCksdC5nZXRNaW5ZKCkpXSksbnVsbCl9LF9lLnByb3RvdHlwZS5jcmVhdGVMaW5lU3RyaW5nPWZ1bmN0aW9uKHQpe3JldHVybiB0P3QgaW5zdGFuY2VvZiBBcnJheT9uZXcgS3QodGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKHQpLHRoaXMpOk8odCxCKT9uZXcgS3QodCx0aGlzKTp2b2lkIDA6bmV3IEt0KHRoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShbXSksdGhpcyl9LF9lLnByb3RvdHlwZS5jcmVhdGVNdWx0aUxpbmVTdHJpbmc9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbmV3IFh0KG51bGwsdGhpcyk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gbmV3IFh0KHQsdGhpcyl9fSxfZS5wcm90b3R5cGUuYnVpbGRHZW9tZXRyeT1mdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPSExLGk9ITEscj10Lml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgbz1yLm5leHQoKSxzPW8uZ2V0Q2xhc3MoKTtudWxsPT09ZSYmKGU9cykscyE9PWUmJihuPSEwKSxvLmlzR2VvbWV0cnlDb2xsZWN0aW9uT3JEZXJpdmVkKCkmJihpPSEwKX1pZihudWxsPT09ZSlyZXR1cm4gdGhpcy5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24oKTtpZihufHxpKXJldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihfZS50b0dlb21ldHJ5QXJyYXkodCkpO3ZhciBhPXQuaXRlcmF0b3IoKS5uZXh0KCk7aWYodC5zaXplKCk+MSl7aWYoYSBpbnN0YW5jZW9mICR0KXJldHVybiB0aGlzLmNyZWF0ZU11bHRpUG9seWdvbihfZS50b1BvbHlnb25BcnJheSh0KSk7aWYoYSBpbnN0YW5jZW9mIEt0KXJldHVybiB0aGlzLmNyZWF0ZU11bHRpTGluZVN0cmluZyhfZS50b0xpbmVTdHJpbmdBcnJheSh0KSk7aWYoYSBpbnN0YW5jZW9mIFF0KXJldHVybiB0aGlzLmNyZWF0ZU11bHRpUG9pbnQoX2UudG9Qb2ludEFycmF5KHQpKTt0dC5zaG91bGROZXZlclJlYWNoSGVyZShcIlVuaGFuZGxlZCBjbGFzczogXCIrYS5nZXRDbGFzcygpLmdldE5hbWUoKSl9cmV0dXJuIGF9LF9lLnByb3RvdHlwZS5jcmVhdGVNdWx0aVBvaW50RnJvbUNvb3Jkcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jcmVhdGVNdWx0aVBvaW50KG51bGwhPT10P3RoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZSh0KTpudWxsKX0sX2UucHJvdG90eXBlLmNyZWF0ZVBvaW50PWZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuY3JlYXRlUG9pbnQodGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKFtdKSk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTil7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNyZWF0ZVBvaW50KG51bGwhPT10P3RoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShbdF0pOm51bGwpfWlmKE8oYXJndW1lbnRzWzBdLEIpKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIG5ldyBRdChlLHRoaXMpfX19LF9lLnByb3RvdHlwZS5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVTZXF1ZW5jZUZhY3Rvcnl9LF9lLnByb3RvdHlwZS5jcmVhdGVQb2x5Z29uPWZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIG5ldyAkdChudWxsLG51bGwsdGhpcyk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKE8oYXJndW1lbnRzWzBdLEIpKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuY3JlYXRlUG9seWdvbih0aGlzLmNyZWF0ZUxpbmVhclJpbmcodCkpfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jcmVhdGVQb2x5Z29uKHRoaXMuY3JlYXRlTGluZWFyUmluZyhlKSl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBlZSl7dmFyIG49YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNyZWF0ZVBvbHlnb24obixudWxsKX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdO3JldHVybiBuZXcgJHQoaSxyLHRoaXMpfX0sX2UucHJvdG90eXBlLmdldFNSSUQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fU1JJRH0sX2UucHJvdG90eXBlLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbj1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBuZXcgenQobnVsbCx0aGlzKTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiBuZXcgenQodCx0aGlzKX19LF9lLnByb3RvdHlwZS5jcmVhdGVHZW9tZXRyeT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGllKHRoaXMpLmVkaXQodCx7ZWRpdDpmdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkuY3JlYXRlKHQpfX19KX0sX2UucHJvdG90eXBlLmdldFByZWNpc2lvbk1vZGVsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ByZWNpc2lvbk1vZGVsfSxfZS5wcm90b3R5cGUuY3JlYXRlTGluZWFyUmluZz1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmNyZWF0ZUxpbmVhclJpbmcodGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKFtdKSk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jcmVhdGVMaW5lYXJSaW5nKG51bGwhPT10P3RoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZSh0KTpudWxsKX1pZihPKGFyZ3VtZW50c1swXSxCKSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiBuZXcgZWUoZSx0aGlzKX19fSxfZS5wcm90b3R5cGUuY3JlYXRlTXVsdGlQb2x5Z29uPWZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIG5ldyBuZShudWxsLHRoaXMpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIG5ldyBuZSh0LHRoaXMpfX0sX2UucHJvdG90eXBlLmNyZWF0ZU11bHRpUG9pbnQ9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbmV3IHRlKG51bGwsdGhpcyk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gbmV3IHRlKHQsdGhpcyl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNyZWF0ZU11bHRpUG9pbnQobnVsbCE9PWU/dGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKGUpOm51bGwpfWlmKE8oYXJndW1lbnRzWzBdLEIpKXt2YXIgbj1hcmd1bWVudHNbMF07aWYobnVsbD09PW4pcmV0dXJuIHRoaXMuY3JlYXRlTXVsdGlQb2ludChuZXcgQXJyYXkoMCkuZmlsbChudWxsKSk7Zm9yKHZhciBpPW5ldyBBcnJheShuLnNpemUoKSkuZmlsbChudWxsKSxyPTA7cjxuLnNpemUoKTtyKyspe3ZhciBvPXRoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZSgxLG4uZ2V0RGltZW5zaW9uKCkpO1d0LmNvcHkobixyLG8sMCwxKSxpW3JdPXRoaXMuY3JlYXRlUG9pbnQobyl9cmV0dXJuIHRoaXMuY3JlYXRlTXVsdGlQb2ludChpKX19fSxfZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bZV19LF9lLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBfZX0sX2UudG9NdWx0aVBvbHlnb25BcnJheT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQXJyYXkodC5zaXplKCkpLmZpbGwobnVsbCk7cmV0dXJuIHQudG9BcnJheShlKX0sX2UudG9HZW9tZXRyeUFycmF5PWZ1bmN0aW9uKHQpe2lmKG51bGw9PT10KXJldHVybiBudWxsO3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxfZS5nZXREZWZhdWx0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeT1mdW5jdGlvbigpe3JldHVybiBjZS5pbnN0YW5jZSgpfSxfZS50b011bHRpTGluZVN0cmluZ0FycmF5PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxfZS50b0xpbmVTdHJpbmdBcnJheT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQXJyYXkodC5zaXplKCkpLmZpbGwobnVsbCk7cmV0dXJuIHQudG9BcnJheShlKX0sX2UudG9NdWx0aVBvaW50QXJyYXk9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpO3JldHVybiB0LnRvQXJyYXkoZSl9LF9lLnRvTGluZWFyUmluZ0FycmF5PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxfZS50b1BvaW50QXJyYXk9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpO3JldHVybiB0LnRvQXJyYXkoZSl9LF9lLnRvUG9seWdvbkFycmF5PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxfZS5jcmVhdGVQb2ludEZyb21JbnRlcm5hbENvb3JkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuZ2V0UHJlY2lzaW9uTW9kZWwoKS5tYWtlUHJlY2lzZSh0KSxlLmdldEZhY3RvcnkoKS5jcmVhdGVQb2ludCh0KX0sbWUuc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4tMHg1ZWE3NWYyMDUxZWViNDAwfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfZSxtZSk7dmFyIHZlPVtcIlBvaW50XCIsXCJNdWx0aVBvaW50XCIsXCJMaW5lU3RyaW5nXCIsXCJNdWx0aUxpbmVTdHJpbmdcIixcIlBvbHlnb25cIixcIk11bHRpUG9seWdvblwiXSxJZT1mdW5jdGlvbih0KXt0aGlzLmdlb21ldHJ5RmFjdG9yeT10fHxuZXcgX2V9O0llLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3ZhciBlLG49KGU9XCJzdHJpbmdcIj09dHlwZW9mIHQ/SlNPTi5wYXJzZSh0KTp0KS50eXBlO2lmKCFFZVtuXSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIEdlb0pTT04gdHlwZTogXCIrZS50eXBlKTtyZXR1cm4tMSE9PXZlLmluZGV4T2Yobik/RWVbbl0uYXBwbHkodGhpcyxbZS5jb29yZGluYXRlc10pOlwiR2VvbWV0cnlDb2xsZWN0aW9uXCI9PT1uP0VlW25dLmFwcGx5KHRoaXMsW2UuZ2VvbWV0cmllc10pOkVlW25dLmFwcGx5KHRoaXMsW2VdKX0sSWUucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0R2VvbWV0cnlUeXBlKCk7aWYoIXhlW2VdKXRocm93IG5ldyBFcnJvcihcIkdlb21ldHJ5IGlzIG5vdCBzdXBwb3J0ZWRcIik7cmV0dXJuIHhlW2VdLmFwcGx5KHRoaXMsW3RdKX07dmFyIEVlPXtGZWF0dXJlOmZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Zvcih2YXIgbiBpbiB0KWVbbl09dFtuXTtpZih0Lmdlb21ldHJ5KXt2YXIgaT10Lmdlb21ldHJ5LnR5cGU7aWYoIUVlW2ldKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gR2VvSlNPTiB0eXBlOiBcIit0LnR5cGUpO2UuZ2VvbWV0cnk9dGhpcy5yZWFkKHQuZ2VvbWV0cnkpfXJldHVybiB0LmJib3gmJihlLmJib3g9RWUuYmJveC5hcHBseSh0aGlzLFt0LmJib3hdKSksZX0sRmVhdHVyZUNvbGxlY3Rpb246ZnVuY3Rpb24odCl7dmFyIGU9e307aWYodC5mZWF0dXJlcyl7ZS5mZWF0dXJlcz1bXTtmb3IodmFyIG49MDtuPHQuZmVhdHVyZXMubGVuZ3RoOysrbillLmZlYXR1cmVzLnB1c2godGhpcy5yZWFkKHQuZmVhdHVyZXNbbl0pKX1yZXR1cm4gdC5iYm94JiYoZS5iYm94PXRoaXMucGFyc2UuYmJveC5hcHBseSh0aGlzLFt0LmJib3hdKSksZX0sY29vcmRpbmF0ZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoOysrbil7dmFyIGk9dFtuXTtlLnB1c2gobmV3IE4oaVswXSxpWzFdKSl9cmV0dXJuIGV9LGJib3g6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUxpbmVhclJpbmcoW25ldyBOKHRbMF0sdFsxXSksbmV3IE4odFsyXSx0WzFdKSxuZXcgTih0WzJdLHRbM10pLG5ldyBOKHRbMF0sdFszXSksbmV3IE4odFswXSx0WzFdKV0pfSxQb2ludDpmdW5jdGlvbih0KXt2YXIgZT1uZXcgTih0WzBdLHRbMV0pO3JldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVQb2ludChlKX0sTXVsdGlQb2ludDpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5sZW5ndGg7KytuKWUucHVzaChFZS5Qb2ludC5hcHBseSh0aGlzLFt0W25dXSkpO3JldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVNdWx0aVBvaW50KGUpfSxMaW5lU3RyaW5nOmZ1bmN0aW9uKHQpe3ZhciBlPUVlLmNvb3JkaW5hdGVzLmFwcGx5KHRoaXMsW3RdKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZVN0cmluZyhlKX0sTXVsdGlMaW5lU3RyaW5nOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lmxlbmd0aDsrK24pZS5wdXNoKEVlLkxpbmVTdHJpbmcuYXBwbHkodGhpcyxbdFtuXV0pKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlMaW5lU3RyaW5nKGUpfSxQb2x5Z29uOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1FZS5jb29yZGluYXRlcy5hcHBseSh0aGlzLFt0WzBdXSksbj10aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKGUpLGk9W10scj0xO3I8dC5sZW5ndGg7KytyKXt2YXIgbz10W3JdLHM9RWUuY29vcmRpbmF0ZXMuYXBwbHkodGhpcyxbb10pLGE9dGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZWFyUmluZyhzKTtpLnB1c2goYSl9cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZVBvbHlnb24obixpKX0sTXVsdGlQb2x5Z29uOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lmxlbmd0aDsrK24pe3ZhciBpPXRbbl07ZS5wdXNoKEVlLlBvbHlnb24uYXBwbHkodGhpcyxbaV0pKX1yZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlQb2x5Z29uKGUpfSxHZW9tZXRyeUNvbGxlY3Rpb246ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoOysrbil7dmFyIGk9dFtuXTtlLnB1c2godGhpcy5yZWFkKGkpKX1yZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlR2VvbWV0cnlDb2xsZWN0aW9uKGUpfX0seGU9e2Nvb3JkaW5hdGU6ZnVuY3Rpb24odCl7cmV0dXJuW3QueCx0LnldfSxQb2ludDpmdW5jdGlvbih0KXtyZXR1cm57dHlwZTpcIlBvaW50XCIsY29vcmRpbmF0ZXM6eGUuY29vcmRpbmF0ZS5hcHBseSh0aGlzLFt0LmdldENvb3JkaW5hdGUoKV0pfX0sTXVsdGlQb2ludDpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5fZ2VvbWV0cmllcy5sZW5ndGg7KytuKXt2YXIgaT10Ll9nZW9tZXRyaWVzW25dLHI9eGUuUG9pbnQuYXBwbHkodGhpcyxbaV0pO2UucHVzaChyLmNvb3JkaW5hdGVzKX1yZXR1cm57dHlwZTpcIk11bHRpUG9pbnRcIixjb29yZGluYXRlczplfX0sTGluZVN0cmluZzpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj10LmdldENvb3JkaW5hdGVzKCksaT0wO2k8bi5sZW5ndGg7KytpKXt2YXIgcj1uW2ldO2UucHVzaCh4ZS5jb29yZGluYXRlLmFwcGx5KHRoaXMsW3JdKSl9cmV0dXJue3R5cGU6XCJMaW5lU3RyaW5nXCIsY29vcmRpbmF0ZXM6ZX19LE11bHRpTGluZVN0cmluZzpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5fZ2VvbWV0cmllcy5sZW5ndGg7KytuKXt2YXIgaT10Ll9nZW9tZXRyaWVzW25dLHI9eGUuTGluZVN0cmluZy5hcHBseSh0aGlzLFtpXSk7ZS5wdXNoKHIuY29vcmRpbmF0ZXMpfXJldHVybnt0eXBlOlwiTXVsdGlMaW5lU3RyaW5nXCIsY29vcmRpbmF0ZXM6ZX19LFBvbHlnb246ZnVuY3Rpb24odCl7dmFyIGU9W10sbj14ZS5MaW5lU3RyaW5nLmFwcGx5KHRoaXMsW3QuX3NoZWxsXSk7ZS5wdXNoKG4uY29vcmRpbmF0ZXMpO2Zvcih2YXIgaT0wO2k8dC5faG9sZXMubGVuZ3RoOysraSl7dmFyIHI9dC5faG9sZXNbaV0sbz14ZS5MaW5lU3RyaW5nLmFwcGx5KHRoaXMsW3JdKTtlLnB1c2goby5jb29yZGluYXRlcyl9cmV0dXJue3R5cGU6XCJQb2x5Z29uXCIsY29vcmRpbmF0ZXM6ZX19LE11bHRpUG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5fZ2VvbWV0cmllcy5sZW5ndGg7KytuKXt2YXIgaT10Ll9nZW9tZXRyaWVzW25dLHI9eGUuUG9seWdvbi5hcHBseSh0aGlzLFtpXSk7ZS5wdXNoKHIuY29vcmRpbmF0ZXMpfXJldHVybnt0eXBlOlwiTXVsdGlQb2x5Z29uXCIsY29vcmRpbmF0ZXM6ZX19LEdlb21ldHJ5Q29sbGVjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5fZ2VvbWV0cmllcy5sZW5ndGg7KytuKXt2YXIgaT10Ll9nZW9tZXRyaWVzW25dLHI9aS5nZXRHZW9tZXRyeVR5cGUoKTtlLnB1c2goeGVbcl0uYXBwbHkodGhpcyxbaV0pKX1yZXR1cm57dHlwZTpcIkdlb21ldHJ5Q29sbGVjdGlvblwiLGdlb21ldHJpZXM6ZX19fSxOZT1mdW5jdGlvbih0KXt0aGlzLmdlb21ldHJ5RmFjdG9yeT10fHxuZXcgX2UsdGhpcy5wcmVjaXNpb25Nb2RlbD10aGlzLmdlb21ldHJ5RmFjdG9yeS5nZXRQcmVjaXNpb25Nb2RlbCgpLHRoaXMucGFyc2VyPW5ldyBJZSh0aGlzLmdlb21ldHJ5RmFjdG9yeSl9O05lLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucGFyc2VyLnJlYWQodCk7cmV0dXJuIHRoaXMucHJlY2lzaW9uTW9kZWwuZ2V0VHlwZSgpPT09ZmUuRklYRUQmJnRoaXMucmVkdWNlUHJlY2lzaW9uKGUpLGV9LE5lLnByb3RvdHlwZS5yZWR1Y2VQcmVjaXNpb249ZnVuY3Rpb24odCl7dmFyIGUsbjtpZih0LmNvb3JkaW5hdGUpdGhpcy5wcmVjaXNpb25Nb2RlbC5tYWtlUHJlY2lzZSh0LmNvb3JkaW5hdGUpO2Vsc2UgaWYodC5wb2ludHMpZm9yKGU9MCxuPXQucG9pbnRzLmxlbmd0aDtlPG47ZSsrKXRoaXMucHJlY2lzaW9uTW9kZWwubWFrZVByZWNpc2UodC5wb2ludHNbZV0pO2Vsc2UgaWYodC5nZW9tZXRyaWVzKWZvcihlPTAsbj10Lmdlb21ldHJpZXMubGVuZ3RoO2U8bjtlKyspdGhpcy5yZWR1Y2VQcmVjaXNpb24odC5nZW9tZXRyaWVzW2VdKX07dmFyIENlPWZ1bmN0aW9uKCl7dGhpcy5wYXJzZXI9bmV3IEllKHRoaXMuZ2VvbWV0cnlGYWN0b3J5KX07Q2UucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBhcnNlci53cml0ZSh0KX07dmFyIFNlPWZ1bmN0aW9uKCl7fSxMZT17T046e2NvbmZpZ3VyYWJsZTohMH0sTEVGVDp7Y29uZmlndXJhYmxlOiEwfSxSSUdIVDp7Y29uZmlndXJhYmxlOiEwfX07U2UucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFNlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBTZX0sU2Uub3Bwb3NpdGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1TZS5MRUZUP1NlLlJJR0hUOnQ9PT1TZS5SSUdIVD9TZS5MRUZUOnR9LExlLk9OLmdldD1mdW5jdGlvbigpe3JldHVybiAwfSxMZS5MRUZULmdldD1mdW5jdGlvbigpe3JldHVybiAxfSxMZS5SSUdIVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoU2UsTGUpLChnLnByb3RvdHlwZT1uZXcgRXJyb3IpLm5hbWU9XCJFbXB0eVN0YWNrRXhjZXB0aW9uXCIsKGQucHJvdG90eXBlPW5ldyB4dCkuYWRkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFycmF5Xy5wdXNoKHQpLCEwfSxkLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7aWYodDwwfHx0Pj10aGlzLnNpemUoKSl0aHJvdyBuZXcgRXJyb3I7cmV0dXJuIHRoaXMuYXJyYXlfW3RdfSxkLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFycmF5Xy5wdXNoKHQpLHR9LGQucHJvdG90eXBlLnBvcD1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5hcnJheV8ubGVuZ3RoKXRocm93IG5ldyBnO3JldHVybiB0aGlzLmFycmF5Xy5wb3AoKX0sZC5wcm90b3R5cGUucGVlaz1mdW5jdGlvbigpe2lmKDA9PT10aGlzLmFycmF5Xy5sZW5ndGgpdGhyb3cgbmV3IGc7cmV0dXJuIHRoaXMuYXJyYXlfW3RoaXMuYXJyYXlfLmxlbmd0aC0xXX0sZC5wcm90b3R5cGUuZW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuYXJyYXlfLmxlbmd0aH0sZC5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVtcHR5KCl9LGQucHJvdG90eXBlLnNlYXJjaD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hcnJheV8uaW5kZXhPZih0KX0sZC5wcm90b3R5cGUuc2l6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFycmF5Xy5sZW5ndGh9LGQucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wLG49dGhpcy5hcnJheV8ubGVuZ3RoO2U8bjtlKyspdC5wdXNoKHRoaXMuYXJyYXlfW2VdKTtyZXR1cm4gdH07dmFyIGJlPWZ1bmN0aW9uKCl7dGhpcy5fbWluSW5kZXg9LTEsdGhpcy5fbWluQ29vcmQ9bnVsbCx0aGlzLl9taW5EZT1udWxsLHRoaXMuX29yaWVudGVkRGU9bnVsbH07YmUucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWluQ29vcmR9LGJlLnByb3RvdHlwZS5nZXRSaWdodG1vc3RTaWRlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5nZXRSaWdodG1vc3RTaWRlT2ZTZWdtZW50KHQsZSk7cmV0dXJuIG48MCYmKG49dGhpcy5nZXRSaWdodG1vc3RTaWRlT2ZTZWdtZW50KHQsZS0xKSksbjwwJiYodGhpcy5fbWluQ29vcmQ9bnVsbCx0aGlzLmNoZWNrRm9yUmlnaHRtb3N0Q29vcmRpbmF0ZSh0KSksbn0sYmUucHJvdG90eXBlLmZpbmRSaWdodG1vc3RFZGdlQXRWZXJ0ZXg9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9taW5EZS5nZXRFZGdlKCkuZ2V0Q29vcmRpbmF0ZXMoKTt0dC5pc1RydWUodGhpcy5fbWluSW5kZXg+MCYmdGhpcy5fbWluSW5kZXg8dC5sZW5ndGgsXCJyaWdodG1vc3QgcG9pbnQgZXhwZWN0ZWQgdG8gYmUgaW50ZXJpb3IgdmVydGV4IG9mIGVkZ2VcIik7dmFyIGU9dFt0aGlzLl9taW5JbmRleC0xXSxuPXRbdGhpcy5fbWluSW5kZXgrMV0saT1zdC5jb21wdXRlT3JpZW50YXRpb24odGhpcy5fbWluQ29vcmQsbixlKSxyPSExO2UueTx0aGlzLl9taW5Db29yZC55JiZuLnk8dGhpcy5fbWluQ29vcmQueSYmaT09PXN0LkNPVU5URVJDTE9DS1dJU0U/cj0hMDplLnk+dGhpcy5fbWluQ29vcmQueSYmbi55PnRoaXMuX21pbkNvb3JkLnkmJmk9PT1zdC5DTE9DS1dJU0UmJihyPSEwKSxyJiYodGhpcy5fbWluSW5kZXg9dGhpcy5fbWluSW5kZXgtMSl9LGJlLnByb3RvdHlwZS5nZXRSaWdodG1vc3RTaWRlT2ZTZWdtZW50PWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5nZXRFZGdlKCkuZ2V0Q29vcmRpbmF0ZXMoKTtpZihlPDB8fGUrMT49bi5sZW5ndGgpcmV0dXJuLTE7aWYobltlXS55PT09bltlKzFdLnkpcmV0dXJuLTE7dmFyIGk9U2UuTEVGVDtyZXR1cm4gbltlXS55PG5bZSsxXS55JiYoaT1TZS5SSUdIVCksaX0sYmUucHJvdG90eXBlLmdldEVkZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3JpZW50ZWREZX0sYmUucHJvdG90eXBlLmNoZWNrRm9yUmlnaHRtb3N0Q29vcmRpbmF0ZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5nZXRFZGdlKCkuZ2V0Q29vcmRpbmF0ZXMoKSxuPTA7bjxlLmxlbmd0aC0xO24rKykobnVsbD09PXRoaXMuX21pbkNvb3JkfHxlW25dLng+dGhpcy5fbWluQ29vcmQueCkmJih0aGlzLl9taW5EZT10LHRoaXMuX21pbkluZGV4PW4sdGhpcy5fbWluQ29vcmQ9ZVtuXSl9LGJlLnByb3RvdHlwZS5maW5kUmlnaHRtb3N0RWRnZUF0Tm9kZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX21pbkRlLmdldE5vZGUoKS5nZXRFZGdlcygpO3RoaXMuX21pbkRlPXQuZ2V0UmlnaHRtb3N0RWRnZSgpLHRoaXMuX21pbkRlLmlzRm9yd2FyZCgpfHwodGhpcy5fbWluRGU9dGhpcy5fbWluRGUuZ2V0U3ltKCksdGhpcy5fbWluSW5kZXg9dGhpcy5fbWluRGUuZ2V0RWRnZSgpLmdldENvb3JkaW5hdGVzKCkubGVuZ3RoLTEpfSxiZS5wcm90b3R5cGUuZmluZEVkZ2U9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO24uaXNGb3J3YXJkKCkmJnRoaXMuY2hlY2tGb3JSaWdodG1vc3RDb29yZGluYXRlKG4pfXR0LmlzVHJ1ZSgwIT09dGhpcy5fbWluSW5kZXh8fHRoaXMuX21pbkNvb3JkLmVxdWFscyh0aGlzLl9taW5EZS5nZXRDb29yZGluYXRlKCkpLFwiaW5jb25zaXN0ZW5jeSBpbiByaWdodG1vc3QgcHJvY2Vzc2luZ1wiKSwwPT09dGhpcy5fbWluSW5kZXg/dGhpcy5maW5kUmlnaHRtb3N0RWRnZUF0Tm9kZSgpOnRoaXMuZmluZFJpZ2h0bW9zdEVkZ2VBdFZlcnRleCgpLHRoaXMuX29yaWVudGVkRGU9dGhpcy5fbWluRGU7dGhpcy5nZXRSaWdodG1vc3RTaWRlKHRoaXMuX21pbkRlLHRoaXMuX21pbkluZGV4KT09PVNlLkxFRlQmJih0aGlzLl9vcmllbnRlZERlPXRoaXMuX21pbkRlLmdldFN5bSgpKX0sYmUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGJlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBiZX07dmFyIHdlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUobixpKXt0LmNhbGwodGhpcyxlLm1zZ1dpdGhDb29yZChuLGkpKSx0aGlzLnB0PWk/bmV3IE4oaSk6bnVsbCx0aGlzLm5hbWU9XCJUb3BvbG9neUV4Y2VwdGlvblwifXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHR9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGUubXNnV2l0aENvb3JkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU/dDp0K1wiIFsgXCIrZStcIiBdXCJ9LGV9KFopLE9lPWZ1bmN0aW9uKCl7dGhpcy5hcnJheV89W119O09lLnByb3RvdHlwZS5hZGRMYXN0PWZ1bmN0aW9uKHQpe3RoaXMuYXJyYXlfLnB1c2godCl9LE9lLnByb3RvdHlwZS5yZW1vdmVGaXJzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFycmF5Xy5zaGlmdCgpfSxPZS5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5hcnJheV8ubGVuZ3RofTt2YXIgVGU9ZnVuY3Rpb24oKXt0aGlzLl9maW5kZXI9bnVsbCx0aGlzLl9kaXJFZGdlTGlzdD1uZXcgTnQsdGhpcy5fbm9kZXM9bmV3IE50LHRoaXMuX3JpZ2h0TW9zdENvb3JkPW51bGwsdGhpcy5fZW52PW51bGwsdGhpcy5fZmluZGVyPW5ldyBiZX07VGUucHJvdG90eXBlLmNsZWFyVmlzaXRlZEVkZ2VzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuX2RpckVkZ2VMaXN0Lml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt0Lm5leHQoKS5zZXRWaXNpdGVkKCExKX19LFRlLnByb3RvdHlwZS5nZXRSaWdodG1vc3RDb29yZGluYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JpZ2h0TW9zdENvb3JkfSxUZS5wcm90b3R5cGUuY29tcHV0ZU5vZGVEZXB0aD1mdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPXQuZ2V0RWRnZXMoKS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7aWYoaS5pc1Zpc2l0ZWQoKXx8aS5nZXRTeW0oKS5pc1Zpc2l0ZWQoKSl7ZT1pO2JyZWFrfX1pZihudWxsPT09ZSl0aHJvdyBuZXcgd2UoXCJ1bmFibGUgdG8gZmluZCBlZGdlIHRvIGNvbXB1dGUgZGVwdGhzIGF0IFwiK3QuZ2V0Q29vcmRpbmF0ZSgpKTt0LmdldEVkZ2VzKCkuY29tcHV0ZURlcHRocyhlKTtmb3IodmFyIHI9dC5nZXRFZGdlcygpLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgbz1yLm5leHQoKTtvLnNldFZpc2l0ZWQoITApLHRoaXMuY29weVN5bURlcHRocyhvKX19LFRlLnByb3RvdHlwZS5jb21wdXRlRGVwdGg9ZnVuY3Rpb24odCl7dGhpcy5jbGVhclZpc2l0ZWRFZGdlcygpO3ZhciBlPXRoaXMuX2ZpbmRlci5nZXRFZGdlKCk7ZS5zZXRFZGdlRGVwdGhzKFNlLlJJR0hULHQpLHRoaXMuY29weVN5bURlcHRocyhlKSx0aGlzLmNvbXB1dGVEZXB0aHMoZSl9LFRlLnByb3RvdHlwZS5jcmVhdGU9ZnVuY3Rpb24odCl7dGhpcy5hZGRSZWFjaGFibGUodCksdGhpcy5fZmluZGVyLmZpbmRFZGdlKHRoaXMuX2RpckVkZ2VMaXN0KSx0aGlzLl9yaWdodE1vc3RDb29yZD10aGlzLl9maW5kZXIuZ2V0Q29vcmRpbmF0ZSgpfSxUZS5wcm90b3R5cGUuZmluZFJlc3VsdEVkZ2VzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuX2RpckVkZ2VMaXN0Lml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTtlLmdldERlcHRoKFNlLlJJR0hUKT49MSYmZS5nZXREZXB0aChTZS5MRUZUKTw9MCYmIWUuaXNJbnRlcmlvckFyZWFFZGdlKCkmJmUuc2V0SW5SZXN1bHQoITApfX0sVGUucHJvdG90eXBlLmNvbXB1dGVEZXB0aHM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFB0LG49bmV3IE9lLGk9dC5nZXROb2RlKCk7Zm9yKG4uYWRkTGFzdChpKSxlLmFkZChpKSx0LnNldFZpc2l0ZWQoITApOyFuLmlzRW1wdHkoKTspe3ZhciByPW4ucmVtb3ZlRmlyc3QoKTtlLmFkZChyKSx0aGlzLmNvbXB1dGVOb2RlRGVwdGgocik7Zm9yKHZhciBvPXIuZ2V0RWRnZXMoKS5pdGVyYXRvcigpO28uaGFzTmV4dCgpOyl7dmFyIHM9by5uZXh0KCkuZ2V0U3ltKCk7aWYoIXMuaXNWaXNpdGVkKCkpe3ZhciBhPXMuZ2V0Tm9kZSgpO2UuY29udGFpbnMoYSl8fChuLmFkZExhc3QoYSksZS5hZGQoYSkpfX19fSxUZS5wcm90b3R5cGUuY29tcGFyZVRvPWZ1bmN0aW9uKHQpe3ZhciBlPXQ7cmV0dXJuIHRoaXMuX3JpZ2h0TW9zdENvb3JkLng8ZS5fcmlnaHRNb3N0Q29vcmQueD8tMTp0aGlzLl9yaWdodE1vc3RDb29yZC54PmUuX3JpZ2h0TW9zdENvb3JkLng/MTowfSxUZS5wcm90b3R5cGUuZ2V0RW52ZWxvcGU9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5fZW52KXtmb3IodmFyIHQ9bmV3IGssZT10aGlzLl9kaXJFZGdlTGlzdC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOylmb3IodmFyIG49ZS5uZXh0KCkuZ2V0RWRnZSgpLmdldENvb3JkaW5hdGVzKCksaT0wO2k8bi5sZW5ndGgtMTtpKyspdC5leHBhbmRUb0luY2x1ZGUobltpXSk7dGhpcy5fZW52PXR9cmV0dXJuIHRoaXMuX2Vudn0sVGUucHJvdG90eXBlLmFkZFJlYWNoYWJsZT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgZDtmb3IoZS5hZGQodCk7IWUuZW1wdHkoKTspe3ZhciBuPWUucG9wKCk7dGhpcy5hZGQobixlKX19LFRlLnByb3RvdHlwZS5jb3B5U3ltRGVwdGhzPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0U3ltKCk7ZS5zZXREZXB0aChTZS5MRUZULHQuZ2V0RGVwdGgoU2UuUklHSFQpKSxlLnNldERlcHRoKFNlLlJJR0hULHQuZ2V0RGVwdGgoU2UuTEVGVCkpfSxUZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7dC5zZXRWaXNpdGVkKCEwKSx0aGlzLl9ub2Rlcy5hZGQodCk7Zm9yKHZhciBuPXQuZ2V0RWRnZXMoKS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7dGhpcy5fZGlyRWRnZUxpc3QuYWRkKGkpO3ZhciByPWkuZ2V0U3ltKCkuZ2V0Tm9kZSgpO3IuaXNWaXNpdGVkKCl8fGUucHVzaChyKX19LFRlLnByb3RvdHlwZS5nZXROb2Rlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ub2Rlc30sVGUucHJvdG90eXBlLmdldERpcmVjdGVkRWRnZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGlyRWRnZUxpc3R9LFRlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJXX0sVGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFRlfTt2YXIgUmU9ZnVuY3Rpb24gdCgpe2lmKHRoaXMubG9jYXRpb249bnVsbCwxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuaW5pdChlLmxlbmd0aCl9ZWxzZSBpZihOdW1iZXIuaXNJbnRlZ2VyKGFyZ3VtZW50c1swXSkpe3ZhciBuPWFyZ3VtZW50c1swXTt0aGlzLmluaXQoMSksdGhpcy5sb2NhdGlvbltTZS5PTl09bn1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgdCl7dmFyIGk9YXJndW1lbnRzWzBdO2lmKHRoaXMuaW5pdChpLmxvY2F0aW9uLmxlbmd0aCksbnVsbCE9PWkpZm9yKHZhciByPTA7cjx0aGlzLmxvY2F0aW9uLmxlbmd0aDtyKyspdGhpcy5sb2NhdGlvbltyXT1pLmxvY2F0aW9uW3JdfX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbz1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sYT1hcmd1bWVudHNbMl07dGhpcy5pbml0KDMpLHRoaXMubG9jYXRpb25bU2UuT05dPW8sdGhpcy5sb2NhdGlvbltTZS5MRUZUXT1zLHRoaXMubG9jYXRpb25bU2UuUklHSFRdPWF9fTtSZS5wcm90b3R5cGUuc2V0QWxsTG9jYXRpb25zPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5sb2NhdGlvbi5sZW5ndGg7ZSsrKXRoaXMubG9jYXRpb25bZV09dH0sUmUucHJvdG90eXBlLmlzTnVsbD1mdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8dGhpcy5sb2NhdGlvbi5sZW5ndGg7dCsrKWlmKHRoaXMubG9jYXRpb25bdF0hPT1iLk5PTkUpcmV0dXJuITE7cmV0dXJuITB9LFJlLnByb3RvdHlwZS5zZXRBbGxMb2NhdGlvbnNJZk51bGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLmxvY2F0aW9uLmxlbmd0aDtlKyspdGhpcy5sb2NhdGlvbltlXT09PWIuTk9ORSYmKHRoaXMubG9jYXRpb25bZV09dCl9LFJlLnByb3RvdHlwZS5pc0xpbmU9ZnVuY3Rpb24oKXtyZXR1cm4gMT09PXRoaXMubG9jYXRpb24ubGVuZ3RofSxSZS5wcm90b3R5cGUubWVyZ2U9ZnVuY3Rpb24odCl7aWYodC5sb2NhdGlvbi5sZW5ndGg+dGhpcy5sb2NhdGlvbi5sZW5ndGgpe3ZhciBlPW5ldyBBcnJheSgzKS5maWxsKG51bGwpO2VbU2UuT05dPXRoaXMubG9jYXRpb25bU2UuT05dLGVbU2UuTEVGVF09Yi5OT05FLGVbU2UuUklHSFRdPWIuTk9ORSx0aGlzLmxvY2F0aW9uPWV9Zm9yKHZhciBuPTA7bjx0aGlzLmxvY2F0aW9uLmxlbmd0aDtuKyspdGhpcy5sb2NhdGlvbltuXT09PWIuTk9ORSYmbjx0LmxvY2F0aW9uLmxlbmd0aCYmKHRoaXMubG9jYXRpb25bbl09dC5sb2NhdGlvbltuXSl9LFJlLnByb3RvdHlwZS5nZXRMb2NhdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2NhdGlvbn0sUmUucHJvdG90eXBlLmZsaXA9ZnVuY3Rpb24oKXtpZih0aGlzLmxvY2F0aW9uLmxlbmd0aDw9MSlyZXR1cm4gbnVsbDt2YXIgdD10aGlzLmxvY2F0aW9uW1NlLkxFRlRdO3RoaXMubG9jYXRpb25bU2UuTEVGVF09dGhpcy5sb2NhdGlvbltTZS5SSUdIVF0sdGhpcy5sb2NhdGlvbltTZS5SSUdIVF09dH0sUmUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFA7cmV0dXJuIHRoaXMubG9jYXRpb24ubGVuZ3RoPjEmJnQuYXBwZW5kKGIudG9Mb2NhdGlvblN5bWJvbCh0aGlzLmxvY2F0aW9uW1NlLkxFRlRdKSksdC5hcHBlbmQoYi50b0xvY2F0aW9uU3ltYm9sKHRoaXMubG9jYXRpb25bU2UuT05dKSksdGhpcy5sb2NhdGlvbi5sZW5ndGg+MSYmdC5hcHBlbmQoYi50b0xvY2F0aW9uU3ltYm9sKHRoaXMubG9jYXRpb25bU2UuUklHSFRdKSksdC50b1N0cmluZygpfSxSZS5wcm90b3R5cGUuc2V0TG9jYXRpb25zPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmxvY2F0aW9uW1NlLk9OXT10LHRoaXMubG9jYXRpb25bU2UuTEVGVF09ZSx0aGlzLmxvY2F0aW9uW1NlLlJJR0hUXT1ufSxSZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0PHRoaXMubG9jYXRpb24ubGVuZ3RoP3RoaXMubG9jYXRpb25bdF06Yi5OT05FfSxSZS5wcm90b3R5cGUuaXNBcmVhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9jYXRpb24ubGVuZ3RoPjF9LFJlLnByb3RvdHlwZS5pc0FueU51bGw9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MDt0PHRoaXMubG9jYXRpb24ubGVuZ3RoO3QrKylpZih0aGlzLmxvY2F0aW9uW3RdPT09Yi5OT05FKXJldHVybiEwO3JldHVybiExfSxSZS5wcm90b3R5cGUuc2V0TG9jYXRpb249ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2V0TG9jYXRpb24oU2UuT04sdCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMubG9jYXRpb25bZV09bn19LFJlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKHQpe3RoaXMubG9jYXRpb249bmV3IEFycmF5KHQpLmZpbGwobnVsbCksdGhpcy5zZXRBbGxMb2NhdGlvbnMoYi5OT05FKX0sUmUucHJvdG90eXBlLmlzRXF1YWxPblNpZGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5sb2NhdGlvbltlXT09PXQubG9jYXRpb25bZV19LFJlLnByb3RvdHlwZS5hbGxQb3NpdGlvbnNFcXVhbD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMubG9jYXRpb24ubGVuZ3RoO2UrKylpZih0aGlzLmxvY2F0aW9uW2VdIT09dClyZXR1cm4hMTtyZXR1cm4hMH0sUmUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFJlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBSZX07dmFyIFBlPWZ1bmN0aW9uIHQoKXtpZih0aGlzLmVsdD1uZXcgQXJyYXkoMikuZmlsbChudWxsKSwxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pKXt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5lbHRbMF09bmV3IFJlKGUpLHRoaXMuZWx0WzFdPW5ldyBSZShlKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgdCl7dmFyIG49YXJndW1lbnRzWzBdO3RoaXMuZWx0WzBdPW5ldyBSZShuLmVsdFswXSksdGhpcy5lbHRbMV09bmV3IFJlKG4uZWx0WzFdKX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdO3RoaXMuZWx0WzBdPW5ldyBSZShiLk5PTkUpLHRoaXMuZWx0WzFdPW5ldyBSZShiLk5PTkUpLHRoaXMuZWx0W2ldLnNldExvY2F0aW9uKHIpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBvPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxhPWFyZ3VtZW50c1syXTt0aGlzLmVsdFswXT1uZXcgUmUobyxzLGEpLHRoaXMuZWx0WzFdPW5ldyBSZShvLHMsYSl9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHU9YXJndW1lbnRzWzBdLGw9YXJndW1lbnRzWzFdLGM9YXJndW1lbnRzWzJdLHA9YXJndW1lbnRzWzNdO3RoaXMuZWx0WzBdPW5ldyBSZShiLk5PTkUsYi5OT05FLGIuTk9ORSksdGhpcy5lbHRbMV09bmV3IFJlKGIuTk9ORSxiLk5PTkUsYi5OT05FKSx0aGlzLmVsdFt1XS5zZXRMb2NhdGlvbnMobCxjLHApfX07UGUucHJvdG90eXBlLmdldEdlb21ldHJ5Q291bnQ9ZnVuY3Rpb24oKXt2YXIgdD0wO3JldHVybiB0aGlzLmVsdFswXS5pc051bGwoKXx8dCsrLHRoaXMuZWx0WzFdLmlzTnVsbCgpfHx0KyssdH0sUGUucHJvdG90eXBlLnNldEFsbExvY2F0aW9ucz1mdW5jdGlvbih0LGUpe3RoaXMuZWx0W3RdLnNldEFsbExvY2F0aW9ucyhlKX0sUGUucHJvdG90eXBlLmlzTnVsbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lbHRbdF0uaXNOdWxsKCl9LFBlLnByb3RvdHlwZS5zZXRBbGxMb2NhdGlvbnNJZk51bGw9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2V0QWxsTG9jYXRpb25zSWZOdWxsKDAsdCksdGhpcy5zZXRBbGxMb2NhdGlvbnNJZk51bGwoMSx0KX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5lbHRbZV0uc2V0QWxsTG9jYXRpb25zSWZOdWxsKG4pfX0sUGUucHJvdG90eXBlLmlzTGluZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lbHRbdF0uaXNMaW5lKCl9LFBlLnByb3RvdHlwZS5tZXJnZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPDI7ZSsrKW51bGw9PT10aGlzLmVsdFtlXSYmbnVsbCE9PXQuZWx0W2VdP3RoaXMuZWx0W2VdPW5ldyBSZSh0LmVsdFtlXSk6dGhpcy5lbHRbZV0ubWVyZ2UodC5lbHRbZV0pfSxQZS5wcm90b3R5cGUuZmxpcD1mdW5jdGlvbigpe3RoaXMuZWx0WzBdLmZsaXAoKSx0aGlzLmVsdFsxXS5mbGlwKCl9LFBlLnByb3RvdHlwZS5nZXRMb2NhdGlvbj1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZWx0W3RdLmdldChTZS5PTil9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5lbHRbZV0uZ2V0KG4pfX0sUGUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFA7cmV0dXJuIG51bGwhPT10aGlzLmVsdFswXSYmKHQuYXBwZW5kKFwiQTpcIiksdC5hcHBlbmQodGhpcy5lbHRbMF0udG9TdHJpbmcoKSkpLG51bGwhPT10aGlzLmVsdFsxXSYmKHQuYXBwZW5kKFwiIEI6XCIpLHQuYXBwZW5kKHRoaXMuZWx0WzFdLnRvU3RyaW5nKCkpKSx0LnRvU3RyaW5nKCl9LFBlLnByb3RvdHlwZS5pc0FyZWE9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5lbHRbMF0uaXNBcmVhKCl8fHRoaXMuZWx0WzFdLmlzQXJlYSgpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZWx0W3RdLmlzQXJlYSgpfX0sUGUucHJvdG90eXBlLmlzQW55TnVsbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lbHRbdF0uaXNBbnlOdWxsKCl9LFBlLnByb3RvdHlwZS5zZXRMb2NhdGlvbj1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5lbHRbdF0uc2V0TG9jYXRpb24oU2UuT04sZSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzJdO3RoaXMuZWx0W25dLnNldExvY2F0aW9uKGkscil9fSxQZS5wcm90b3R5cGUuaXNFcXVhbE9uU2lkZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVsdFswXS5pc0VxdWFsT25TaWRlKHQuZWx0WzBdLGUpJiZ0aGlzLmVsdFsxXS5pc0VxdWFsT25TaWRlKHQuZWx0WzFdLGUpfSxQZS5wcm90b3R5cGUuYWxsUG9zaXRpb25zRXF1YWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5lbHRbdF0uYWxsUG9zaXRpb25zRXF1YWwoZSl9LFBlLnByb3RvdHlwZS50b0xpbmU9ZnVuY3Rpb24odCl7dGhpcy5lbHRbdF0uaXNBcmVhKCkmJih0aGlzLmVsdFt0XT1uZXcgUmUodGhpcy5lbHRbdF0ubG9jYXRpb25bMF0pKX0sUGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFBlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBQZX0sUGUudG9MaW5lTGFiZWw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBQZShiLk5PTkUpLG49MDtuPDI7bisrKWUuc2V0TG9jYXRpb24obix0LmdldExvY2F0aW9uKG4pKTtyZXR1cm4gZX07dmFyIERlPWZ1bmN0aW9uKCl7dGhpcy5fc3RhcnREZT1udWxsLHRoaXMuX21heE5vZGVEZWdyZWU9LTEsdGhpcy5fZWRnZXM9bmV3IE50LHRoaXMuX3B0cz1uZXcgTnQsdGhpcy5fbGFiZWw9bmV3IFBlKGIuTk9ORSksdGhpcy5fcmluZz1udWxsLHRoaXMuX2lzSG9sZT1udWxsLHRoaXMuX3NoZWxsPW51bGwsdGhpcy5faG9sZXM9bmV3IE50LHRoaXMuX2dlb21ldHJ5RmFjdG9yeT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLl9nZW9tZXRyeUZhY3Rvcnk9ZSx0aGlzLmNvbXB1dGVQb2ludHModCksdGhpcy5jb21wdXRlUmluZygpfTtEZS5wcm90b3R5cGUuY29tcHV0ZVJpbmc9ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5fcmluZylyZXR1cm4gbnVsbDtmb3IodmFyIHQ9bmV3IEFycmF5KHRoaXMuX3B0cy5zaXplKCkpLmZpbGwobnVsbCksZT0wO2U8dGhpcy5fcHRzLnNpemUoKTtlKyspdFtlXT10aGlzLl9wdHMuZ2V0KGUpO3RoaXMuX3Jpbmc9dGhpcy5fZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUxpbmVhclJpbmcodCksdGhpcy5faXNIb2xlPXN0LmlzQ0NXKHRoaXMuX3JpbmcuZ2V0Q29vcmRpbmF0ZXMoKSl9LERlLnByb3RvdHlwZS5pc0lzb2xhdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIDE9PT10aGlzLl9sYWJlbC5nZXRHZW9tZXRyeUNvdW50KCl9LERlLnByb3RvdHlwZS5jb21wdXRlUG9pbnRzPWZ1bmN0aW9uKHQpe3RoaXMuX3N0YXJ0RGU9dDt2YXIgZT10LG49ITA7ZG97aWYobnVsbD09PWUpdGhyb3cgbmV3IHdlKFwiRm91bmQgbnVsbCBEaXJlY3RlZEVkZ2VcIik7aWYoZS5nZXRFZGdlUmluZygpPT09dGhpcyl0aHJvdyBuZXcgd2UoXCJEaXJlY3RlZCBFZGdlIHZpc2l0ZWQgdHdpY2UgZHVyaW5nIHJpbmctYnVpbGRpbmcgYXQgXCIrZS5nZXRDb29yZGluYXRlKCkpO3RoaXMuX2VkZ2VzLmFkZChlKTt2YXIgaT1lLmdldExhYmVsKCk7dHQuaXNUcnVlKGkuaXNBcmVhKCkpLHRoaXMubWVyZ2VMYWJlbChpKSx0aGlzLmFkZFBvaW50cyhlLmdldEVkZ2UoKSxlLmlzRm9yd2FyZCgpLG4pLG49ITEsdGhpcy5zZXRFZGdlUmluZyhlLHRoaXMpLGU9dGhpcy5nZXROZXh0KGUpfXdoaWxlKGUhPT10aGlzLl9zdGFydERlKX0sRGUucHJvdG90eXBlLmdldExpbmVhclJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmluZ30sRGUucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX3B0cy5nZXQodCl9LERlLnByb3RvdHlwZS5jb21wdXRlTWF4Tm9kZURlZ3JlZT1mdW5jdGlvbigpe3RoaXMuX21heE5vZGVEZWdyZWU9MDt2YXIgdD10aGlzLl9zdGFydERlO2Rve3ZhciBlPXQuZ2V0Tm9kZSgpLmdldEVkZ2VzKCkuZ2V0T3V0Z29pbmdEZWdyZWUodGhpcyk7ZT50aGlzLl9tYXhOb2RlRGVncmVlJiYodGhpcy5fbWF4Tm9kZURlZ3JlZT1lKSx0PXRoaXMuZ2V0TmV4dCh0KX13aGlsZSh0IT09dGhpcy5fc3RhcnREZSk7dGhpcy5fbWF4Tm9kZURlZ3JlZSo9Mn0sRGUucHJvdG90eXBlLmFkZFBvaW50cz1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC5nZXRDb29yZGluYXRlcygpO2lmKGUpe3ZhciByPTE7biYmKHI9MCk7Zm9yKHZhciBvPXI7bzxpLmxlbmd0aDtvKyspdGhpcy5fcHRzLmFkZChpW29dKX1lbHNle3ZhciBzPWkubGVuZ3RoLTI7biYmKHM9aS5sZW5ndGgtMSk7Zm9yKHZhciBhPXM7YT49MDthLS0pdGhpcy5fcHRzLmFkZChpW2FdKX19LERlLnByb3RvdHlwZS5pc0hvbGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNIb2xlfSxEZS5wcm90b3R5cGUuc2V0SW5SZXN1bHQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9zdGFydERlO2Rve3QuZ2V0RWRnZSgpLnNldEluUmVzdWx0KCEwKSx0PXQuZ2V0TmV4dCgpfXdoaWxlKHQhPT10aGlzLl9zdGFydERlKX0sRGUucHJvdG90eXBlLmNvbnRhaW5zUG9pbnQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRMaW5lYXJSaW5nKCk7aWYoIWUuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLmNvbnRhaW5zKHQpKXJldHVybiExO2lmKCFzdC5pc1BvaW50SW5SaW5nKHQsZS5nZXRDb29yZGluYXRlcygpKSlyZXR1cm4hMTtmb3IodmFyIG49dGhpcy5faG9sZXMuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe2lmKG4ubmV4dCgpLmNvbnRhaW5zUG9pbnQodCkpcmV0dXJuITF9cmV0dXJuITB9LERlLnByb3RvdHlwZS5hZGRIb2xlPWZ1bmN0aW9uKHQpe3RoaXMuX2hvbGVzLmFkZCh0KX0sRGUucHJvdG90eXBlLmlzU2hlbGw9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuX3NoZWxsfSxEZS5wcm90b3R5cGUuZ2V0TGFiZWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGFiZWx9LERlLnByb3RvdHlwZS5nZXRFZGdlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lZGdlc30sRGUucHJvdG90eXBlLmdldE1heE5vZGVEZWdyZWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF4Tm9kZURlZ3JlZTwwJiZ0aGlzLmNvbXB1dGVNYXhOb2RlRGVncmVlKCksdGhpcy5fbWF4Tm9kZURlZ3JlZX0sRGUucHJvdG90eXBlLmdldFNoZWxsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NoZWxsfSxEZS5wcm90b3R5cGUubWVyZ2VMYWJlbD1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5tZXJnZUxhYmVsKHQsMCksdGhpcy5tZXJnZUxhYmVsKHQsMSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9ZS5nZXRMb2NhdGlvbihuLFNlLlJJR0hUKTtpZihpPT09Yi5OT05FKXJldHVybiBudWxsO2lmKHRoaXMuX2xhYmVsLmdldExvY2F0aW9uKG4pPT09Yi5OT05FKXJldHVybiB0aGlzLl9sYWJlbC5zZXRMb2NhdGlvbihuLGkpLG51bGx9fSxEZS5wcm90b3R5cGUuc2V0U2hlbGw9ZnVuY3Rpb24odCl7dGhpcy5fc2hlbGw9dCxudWxsIT09dCYmdC5hZGRIb2xlKHRoaXMpfSxEZS5wcm90b3R5cGUudG9Qb2x5Z29uPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgQXJyYXkodGhpcy5faG9sZXMuc2l6ZSgpKS5maWxsKG51bGwpLG49MDtuPHRoaXMuX2hvbGVzLnNpemUoKTtuKyspZVtuXT10aGlzLl9ob2xlcy5nZXQobikuZ2V0TGluZWFyUmluZygpO3JldHVybiB0LmNyZWF0ZVBvbHlnb24odGhpcy5nZXRMaW5lYXJSaW5nKCksZSl9LERlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxEZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gRGV9O3ZhciBNZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3QuY2FsbCh0aGlzLGUsbil9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUucHJvdG90eXBlLnNldEVkZ2VSaW5nPWZ1bmN0aW9uKHQsZSl7dC5zZXRNaW5FZGdlUmluZyhlKX0sZS5wcm90b3R5cGUuZ2V0TmV4dD1mdW5jdGlvbih0KXtyZXR1cm4gdC5nZXROZXh0TWluKCl9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9KERlKSxBZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3QuY2FsbCh0aGlzLGUsbil9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUucHJvdG90eXBlLmJ1aWxkTWluaW1hbFJpbmdzPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IE50LGU9dGhpcy5fc3RhcnREZTtkb3tpZihudWxsPT09ZS5nZXRNaW5FZGdlUmluZygpKXt2YXIgbj1uZXcgTWUoZSx0aGlzLl9nZW9tZXRyeUZhY3RvcnkpO3QuYWRkKG4pfWU9ZS5nZXROZXh0KCl9d2hpbGUoZSE9PXRoaXMuX3N0YXJ0RGUpO3JldHVybiB0fSxlLnByb3RvdHlwZS5zZXRFZGdlUmluZz1mdW5jdGlvbih0LGUpe3Quc2V0RWRnZVJpbmcoZSl9LGUucHJvdG90eXBlLmxpbmtEaXJlY3RlZEVkZ2VzRm9yTWluaW1hbEVkZ2VSaW5ncz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX3N0YXJ0RGU7ZG97dC5nZXROb2RlKCkuZ2V0RWRnZXMoKS5saW5rTWluaW1hbERpcmVjdGVkRWRnZXModGhpcyksdD10LmdldE5leHQoKX13aGlsZSh0IT09dGhpcy5fc3RhcnREZSl9LGUucHJvdG90eXBlLmdldE5leHQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0TmV4dCgpfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxlfShEZSksRmU9ZnVuY3Rpb24oKXtpZih0aGlzLl9sYWJlbD1udWxsLHRoaXMuX2lzSW5SZXN1bHQ9ITEsdGhpcy5faXNDb3ZlcmVkPSExLHRoaXMuX2lzQ292ZXJlZFNldD0hMSx0aGlzLl9pc1Zpc2l0ZWQ9ITEsMD09PWFyZ3VtZW50cy5sZW5ndGgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9sYWJlbD10fX07RmUucHJvdG90eXBlLnNldFZpc2l0ZWQ9ZnVuY3Rpb24odCl7dGhpcy5faXNWaXNpdGVkPXR9LEZlLnByb3RvdHlwZS5zZXRJblJlc3VsdD1mdW5jdGlvbih0KXt0aGlzLl9pc0luUmVzdWx0PXR9LEZlLnByb3RvdHlwZS5pc0NvdmVyZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNDb3ZlcmVkfSxGZS5wcm90b3R5cGUuaXNDb3ZlcmVkU2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzQ292ZXJlZFNldH0sRmUucHJvdG90eXBlLnNldExhYmVsPWZ1bmN0aW9uKHQpe3RoaXMuX2xhYmVsPXR9LEZlLnByb3RvdHlwZS5nZXRMYWJlbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9sYWJlbH0sRmUucHJvdG90eXBlLnNldENvdmVyZWQ9ZnVuY3Rpb24odCl7dGhpcy5faXNDb3ZlcmVkPXQsdGhpcy5faXNDb3ZlcmVkU2V0PSEwfSxGZS5wcm90b3R5cGUudXBkYXRlSU09ZnVuY3Rpb24odCl7dHQuaXNUcnVlKHRoaXMuX2xhYmVsLmdldEdlb21ldHJ5Q291bnQoKT49MixcImZvdW5kIHBhcnRpYWwgbGFiZWxcIiksdGhpcy5jb21wdXRlSU0odCl9LEZlLnByb3RvdHlwZS5pc0luUmVzdWx0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzSW5SZXN1bHR9LEZlLnByb3RvdHlwZS5pc1Zpc2l0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNWaXNpdGVkfSxGZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sRmUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEZlfTt2YXIgR2U9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuY2FsbCh0aGlzKSx0aGlzLl9jb29yZD1udWxsLHRoaXMuX2VkZ2VzPW51bGw7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMuX2Nvb3JkPWUsdGhpcy5fZWRnZXM9bix0aGlzLl9sYWJlbD1uZXcgUGUoMCxiLk5PTkUpfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5pc0luY2lkZW50RWRnZUluUmVzdWx0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ2V0RWRnZXMoKS5nZXRFZGdlcygpLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXtpZih0Lm5leHQoKS5nZXRFZGdlKCkuaXNJblJlc3VsdCgpKXJldHVybiEwfXJldHVybiExfSxlLnByb3RvdHlwZS5pc0lzb2xhdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIDE9PT10aGlzLl9sYWJlbC5nZXRHZW9tZXRyeUNvdW50KCl9LGUucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29vcmR9LGUucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe3QucHJpbnRsbihcIm5vZGUgXCIrdGhpcy5fY29vcmQrXCIgbGJsOiBcIit0aGlzLl9sYWJlbCl9LGUucHJvdG90eXBlLmNvbXB1dGVJTT1mdW5jdGlvbih0KXt9LGUucHJvdG90eXBlLmNvbXB1dGVNZXJnZWRMb2NhdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPWIuTk9ORTtpZihuPXRoaXMuX2xhYmVsLmdldExvY2F0aW9uKGUpLCF0LmlzTnVsbChlKSl7dmFyIGk9dC5nZXRMb2NhdGlvbihlKTtuIT09Yi5CT1VOREFSWSYmKG49aSl9cmV0dXJuIG59LGUucHJvdG90eXBlLnNldExhYmVsPWZ1bmN0aW9uKCl7aWYoMiE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHQucHJvdG90eXBlLnNldExhYmVsLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07bnVsbD09PXRoaXMuX2xhYmVsP3RoaXMuX2xhYmVsPW5ldyBQZShlLG4pOnRoaXMuX2xhYmVsLnNldExvY2F0aW9uKGUsbil9LGUucHJvdG90eXBlLmdldEVkZ2VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VkZ2VzfSxlLnByb3RvdHlwZS5tZXJnZUxhYmVsPWZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBlKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5tZXJnZUxhYmVsKHQuX2xhYmVsKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgUGUpZm9yKHZhciBuPWFyZ3VtZW50c1swXSxpPTA7aTwyO2krKyl7dmFyIHI9dGhpcy5jb21wdXRlTWVyZ2VkTG9jYXRpb24obixpKTt0aGlzLl9sYWJlbC5nZXRMb2NhdGlvbihpKT09PWIuTk9ORSYmdGhpcy5fbGFiZWwuc2V0TG9jYXRpb24oaSxyKX19LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXt0aGlzLl9lZGdlcy5pbnNlcnQodCksdC5zZXROb2RlKHRoaXMpfSxlLnByb3RvdHlwZS5zZXRMYWJlbEJvdW5kYXJ5PWZ1bmN0aW9uKHQpe2lmKG51bGw9PT10aGlzLl9sYWJlbClyZXR1cm4gbnVsbDt2YXIgZT1iLk5PTkU7bnVsbCE9PXRoaXMuX2xhYmVsJiYoZT10aGlzLl9sYWJlbC5nZXRMb2NhdGlvbih0KSk7dmFyIG49bnVsbDtzd2l0Y2goZSl7Y2FzZSBiLkJPVU5EQVJZOm49Yi5JTlRFUklPUjticmVhaztjYXNlIGIuSU5URVJJT1I6ZGVmYXVsdDpuPWIuQk9VTkRBUll9dGhpcy5fbGFiZWwuc2V0TG9jYXRpb24odCxuKX0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX0oRmUpLHFlPWZ1bmN0aW9uKCl7dGhpcy5ub2RlTWFwPW5ldyBjLHRoaXMubm9kZUZhY3Q9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5ub2RlRmFjdD10fTtxZS5wcm90b3R5cGUuZmluZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlTWFwLmdldCh0KX0scWUucHJvdG90eXBlLmFkZE5vZGU9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4pe3ZhciB0PWFyZ3VtZW50c1swXSxlPXRoaXMubm9kZU1hcC5nZXQodCk7cmV0dXJuIG51bGw9PT1lJiYoZT10aGlzLm5vZGVGYWN0LmNyZWF0ZU5vZGUodCksdGhpcy5ub2RlTWFwLnB1dCh0LGUpKSxlfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgR2Upe3ZhciBuPWFyZ3VtZW50c1swXSxpPXRoaXMubm9kZU1hcC5nZXQobi5nZXRDb29yZGluYXRlKCkpO3JldHVybiBudWxsPT09aT8odGhpcy5ub2RlTWFwLnB1dChuLmdldENvb3JkaW5hdGUoKSxuKSxuKTooaS5tZXJnZUxhYmVsKG4pLGkpfX0scWUucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXtlLm5leHQoKS5wcmludCh0KX19LHFlLnByb3RvdHlwZS5pdGVyYXRvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVNYXAudmFsdWVzKCkuaXRlcmF0b3IoKX0scWUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVNYXAudmFsdWVzKCl9LHFlLnByb3RvdHlwZS5nZXRCb3VuZGFyeU5vZGVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgTnQsbj10aGlzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpLmdldExhYmVsKCkuZ2V0TG9jYXRpb24odCk9PT1iLkJPVU5EQVJZJiZlLmFkZChpKX1yZXR1cm4gZX0scWUucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXt2YXIgZT10LmdldENvb3JkaW5hdGUoKTt0aGlzLmFkZE5vZGUoZSkuYWRkKHQpfSxxZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0scWUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHFlfTt2YXIgQmU9ZnVuY3Rpb24oKXt9LFZlPXtORTp7Y29uZmlndXJhYmxlOiEwfSxOVzp7Y29uZmlndXJhYmxlOiEwfSxTVzp7Y29uZmlndXJhYmxlOiEwfSxTRTp7Y29uZmlndXJhYmxlOiEwfX07QmUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LEJlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBCZX0sQmUuaXNOb3J0aGVybj1mdW5jdGlvbih0KXtyZXR1cm4gdD09PUJlLk5FfHx0PT09QmUuTld9LEJlLmlzT3Bwb3NpdGU9ZnVuY3Rpb24odCxlKXtpZih0PT09ZSlyZXR1cm4hMTtyZXR1cm4gMj09PSh0LWUrNCklNH0sQmUuY29tbW9uSGFsZlBsYW5lPWZ1bmN0aW9uKHQsZSl7aWYodD09PWUpcmV0dXJuIHQ7aWYoMj09PSh0LWUrNCklNClyZXR1cm4tMTt2YXIgbj10PGU/dDplO3JldHVybiAwPT09biYmMz09PSh0PmU/dDplKT8zOm59LEJlLmlzSW5IYWxmUGxhbmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT09PUJlLlNFP3Q9PT1CZS5TRXx8dD09PUJlLlNXOnQ9PT1lfHx0PT09ZSsxfSxCZS5xdWFkcmFudD1mdW5jdGlvbigpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0mJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZigwPT09dCYmMD09PWUpdGhyb3cgbmV3IF8oXCJDYW5ub3QgY29tcHV0ZSB0aGUgcXVhZHJhbnQgZm9yIHBvaW50ICggXCIrdCtcIiwgXCIrZStcIiApXCIpO3JldHVybiB0Pj0wP2U+PTA/QmUuTkU6QmUuU0U6ZT49MD9CZS5OVzpCZS5TV31pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4mJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgTil7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO2lmKGkueD09PW4ueCYmaS55PT09bi55KXRocm93IG5ldyBfKFwiQ2Fubm90IGNvbXB1dGUgdGhlIHF1YWRyYW50IGZvciB0d28gaWRlbnRpY2FsIHBvaW50cyBcIituKTtyZXR1cm4gaS54Pj1uLng/aS55Pj1uLnk/QmUuTkU6QmUuU0U6aS55Pj1uLnk/QmUuTlc6QmUuU1d9fSxWZS5ORS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMH0sVmUuTlcuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDF9LFZlLlNXLmdldD1mdW5jdGlvbigpe3JldHVybiAyfSxWZS5TRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gM30sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQmUsVmUpO3ZhciBVZT1mdW5jdGlvbigpe2lmKHRoaXMuX2VkZ2U9bnVsbCx0aGlzLl9sYWJlbD1udWxsLHRoaXMuX25vZGU9bnVsbCx0aGlzLl9wMD1udWxsLHRoaXMuX3AxPW51bGwsdGhpcy5fZHg9bnVsbCx0aGlzLl9keT1udWxsLHRoaXMuX3F1YWRyYW50PW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9lZGdlPXR9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9YXJndW1lbnRzWzJdO3RoaXMuX2VkZ2U9ZSx0aGlzLmluaXQobixpKSx0aGlzLl9sYWJlbD1udWxsfWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXSxhPWFyZ3VtZW50c1szXTt0aGlzLl9lZGdlPXIsdGhpcy5pbml0KG8scyksdGhpcy5fbGFiZWw9YX19O1VlLnByb3RvdHlwZS5jb21wYXJlRGlyZWN0aW9uPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9keD09PXQuX2R4JiZ0aGlzLl9keT09PXQuX2R5PzA6dGhpcy5fcXVhZHJhbnQ+dC5fcXVhZHJhbnQ/MTp0aGlzLl9xdWFkcmFudDx0Ll9xdWFkcmFudD8tMTpzdC5jb21wdXRlT3JpZW50YXRpb24odC5fcDAsdC5fcDEsdGhpcy5fcDEpfSxVZS5wcm90b3R5cGUuZ2V0RHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZHl9LFVlLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3AwfSxVZS5wcm90b3R5cGUuc2V0Tm9kZT1mdW5jdGlvbih0KXt0aGlzLl9ub2RlPXR9LFVlLnByb3RvdHlwZS5wcmludD1mdW5jdGlvbih0KXt2YXIgZT1NYXRoLmF0YW4yKHRoaXMuX2R5LHRoaXMuX2R4KSxuPXRoaXMuZ2V0Q2xhc3MoKS5nZXROYW1lKCksaT1uLmxhc3RJbmRleE9mKFwiLlwiKSxyPW4uc3Vic3RyaW5nKGkrMSk7dC5wcmludChcIiAgXCIrcitcIjogXCIrdGhpcy5fcDArXCIgLSBcIit0aGlzLl9wMStcIiBcIit0aGlzLl9xdWFkcmFudCtcIjpcIitlK1wiICAgXCIrdGhpcy5fbGFiZWwpfSxVZS5wcm90b3R5cGUuY29tcGFyZVRvPWZ1bmN0aW9uKHQpe3ZhciBlPXQ7cmV0dXJuIHRoaXMuY29tcGFyZURpcmVjdGlvbihlKX0sVWUucHJvdG90eXBlLmdldERpcmVjdGVkQ29vcmRpbmF0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wMX0sVWUucHJvdG90eXBlLmdldER4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2R4fSxVZS5wcm90b3R5cGUuZ2V0TGFiZWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGFiZWx9LFVlLnByb3RvdHlwZS5nZXRFZGdlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VkZ2V9LFVlLnByb3RvdHlwZS5nZXRRdWFkcmFudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9xdWFkcmFudH0sVWUucHJvdG90eXBlLmdldE5vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbm9kZX0sVWUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHQ9TWF0aC5hdGFuMih0aGlzLl9keSx0aGlzLl9keCksZT10aGlzLmdldENsYXNzKCkuZ2V0TmFtZSgpLG49ZS5sYXN0SW5kZXhPZihcIi5cIik7cmV0dXJuXCIgIFwiK2Uuc3Vic3RyaW5nKG4rMSkrXCI6IFwiK3RoaXMuX3AwK1wiIC0gXCIrdGhpcy5fcDErXCIgXCIrdGhpcy5fcXVhZHJhbnQrXCI6XCIrdCtcIiAgIFwiK3RoaXMuX2xhYmVsfSxVZS5wcm90b3R5cGUuY29tcHV0ZUxhYmVsPWZ1bmN0aW9uKHQpe30sVWUucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24odCxlKXt0aGlzLl9wMD10LHRoaXMuX3AxPWUsdGhpcy5fZHg9ZS54LXQueCx0aGlzLl9keT1lLnktdC55LHRoaXMuX3F1YWRyYW50PUJlLnF1YWRyYW50KHRoaXMuX2R4LHRoaXMuX2R5KSx0dC5pc1RydWUoISgwPT09dGhpcy5fZHgmJjA9PT10aGlzLl9keSksXCJFZGdlRW5kIHdpdGggaWRlbnRpY2FsIGVuZHBvaW50cyBmb3VuZFwiKX0sVWUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW0ldfSxVZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gVWV9O3ZhciB6ZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO2lmKHQuY2FsbCh0aGlzLGUpLHRoaXMuX2lzRm9yd2FyZD1udWxsLHRoaXMuX2lzSW5SZXN1bHQ9ITEsdGhpcy5faXNWaXNpdGVkPSExLHRoaXMuX3N5bT1udWxsLHRoaXMuX25leHQ9bnVsbCx0aGlzLl9uZXh0TWluPW51bGwsdGhpcy5fZWRnZVJpbmc9bnVsbCx0aGlzLl9taW5FZGdlUmluZz1udWxsLHRoaXMuX2RlcHRoPVswLC05OTksLTk5OV0sdGhpcy5faXNGb3J3YXJkPW4sbil0aGlzLmluaXQoZS5nZXRDb29yZGluYXRlKDApLGUuZ2V0Q29vcmRpbmF0ZSgxKSk7ZWxzZXt2YXIgaT1lLmdldE51bVBvaW50cygpLTE7dGhpcy5pbml0KGUuZ2V0Q29vcmRpbmF0ZShpKSxlLmdldENvb3JkaW5hdGUoaS0xKSl9dGhpcy5jb21wdXRlRGlyZWN0ZWRMYWJlbCgpfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5nZXROZXh0TWluPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25leHRNaW59LGUucHJvdG90eXBlLmdldERlcHRoPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9kZXB0aFt0XX0sZS5wcm90b3R5cGUuc2V0VmlzaXRlZD1mdW5jdGlvbih0KXt0aGlzLl9pc1Zpc2l0ZWQ9dH0sZS5wcm90b3R5cGUuY29tcHV0ZURpcmVjdGVkTGFiZWw9ZnVuY3Rpb24oKXt0aGlzLl9sYWJlbD1uZXcgUGUodGhpcy5fZWRnZS5nZXRMYWJlbCgpKSx0aGlzLl9pc0ZvcndhcmR8fHRoaXMuX2xhYmVsLmZsaXAoKX0sZS5wcm90b3R5cGUuZ2V0TmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9uZXh0fSxlLnByb3RvdHlwZS5zZXREZXB0aD1mdW5jdGlvbih0LGUpe2lmKC05OTkhPT10aGlzLl9kZXB0aFt0XSYmdGhpcy5fZGVwdGhbdF0hPT1lKXRocm93IG5ldyB3ZShcImFzc2lnbmVkIGRlcHRocyBkbyBub3QgbWF0Y2hcIix0aGlzLmdldENvb3JkaW5hdGUoKSk7dGhpcy5fZGVwdGhbdF09ZX0sZS5wcm90b3R5cGUuaXNJbnRlcmlvckFyZWFFZGdlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PSEwLGU9MDtlPDI7ZSsrKXRoaXMuX2xhYmVsLmlzQXJlYShlKSYmdGhpcy5fbGFiZWwuZ2V0TG9jYXRpb24oZSxTZS5MRUZUKT09PWIuSU5URVJJT1ImJnRoaXMuX2xhYmVsLmdldExvY2F0aW9uKGUsU2UuUklHSFQpPT09Yi5JTlRFUklPUnx8KHQ9ITEpO3JldHVybiB0fSxlLnByb3RvdHlwZS5zZXROZXh0TWluPWZ1bmN0aW9uKHQpe3RoaXMuX25leHRNaW49dH0sZS5wcm90b3R5cGUucHJpbnQ9ZnVuY3Rpb24oZSl7dC5wcm90b3R5cGUucHJpbnQuY2FsbCh0aGlzLGUpLGUucHJpbnQoXCIgXCIrdGhpcy5fZGVwdGhbU2UuTEVGVF0rXCIvXCIrdGhpcy5fZGVwdGhbU2UuUklHSFRdKSxlLnByaW50KFwiIChcIit0aGlzLmdldERlcHRoRGVsdGEoKStcIilcIiksdGhpcy5faXNJblJlc3VsdCYmZS5wcmludChcIiBpblJlc3VsdFwiKX0sZS5wcm90b3R5cGUuc2V0TWluRWRnZVJpbmc9ZnVuY3Rpb24odCl7dGhpcy5fbWluRWRnZVJpbmc9dH0sZS5wcm90b3R5cGUuaXNMaW5lRWRnZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2xhYmVsLmlzTGluZSgwKXx8dGhpcy5fbGFiZWwuaXNMaW5lKDEpLGU9IXRoaXMuX2xhYmVsLmlzQXJlYSgwKXx8dGhpcy5fbGFiZWwuYWxsUG9zaXRpb25zRXF1YWwoMCxiLkVYVEVSSU9SKSxuPSF0aGlzLl9sYWJlbC5pc0FyZWEoMSl8fHRoaXMuX2xhYmVsLmFsbFBvc2l0aW9uc0VxdWFsKDEsYi5FWFRFUklPUik7cmV0dXJuIHQmJmUmJm59LGUucHJvdG90eXBlLnNldEVkZ2VSaW5nPWZ1bmN0aW9uKHQpe3RoaXMuX2VkZ2VSaW5nPXR9LGUucHJvdG90eXBlLmdldE1pbkVkZ2VSaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21pbkVkZ2VSaW5nfSxlLnByb3RvdHlwZS5nZXREZXB0aERlbHRhPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZWRnZS5nZXREZXB0aERlbHRhKCk7cmV0dXJuIHRoaXMuX2lzRm9yd2FyZHx8KHQ9LXQpLHR9LGUucHJvdG90eXBlLnNldEluUmVzdWx0PWZ1bmN0aW9uKHQpe3RoaXMuX2lzSW5SZXN1bHQ9dH0sZS5wcm90b3R5cGUuZ2V0U3ltPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N5bX0sZS5wcm90b3R5cGUuaXNGb3J3YXJkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzRm9yd2FyZH0sZS5wcm90b3R5cGUuZ2V0RWRnZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lZGdlfSxlLnByb3RvdHlwZS5wcmludEVkZ2U9ZnVuY3Rpb24odCl7dGhpcy5wcmludCh0KSx0LnByaW50KFwiIFwiKSx0aGlzLl9pc0ZvcndhcmQ/dGhpcy5fZWRnZS5wcmludCh0KTp0aGlzLl9lZGdlLnByaW50UmV2ZXJzZSh0KX0sZS5wcm90b3R5cGUuc2V0U3ltPWZ1bmN0aW9uKHQpe3RoaXMuX3N5bT10fSxlLnByb3RvdHlwZS5zZXRWaXNpdGVkRWRnZT1mdW5jdGlvbih0KXt0aGlzLnNldFZpc2l0ZWQodCksdGhpcy5fc3ltLnNldFZpc2l0ZWQodCl9LGUucHJvdG90eXBlLnNldEVkZ2VEZXB0aHM9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldEVkZ2UoKS5nZXREZXB0aERlbHRhKCk7dGhpcy5faXNGb3J3YXJkfHwobj0tbik7dmFyIGk9MTt0PT09U2UuTEVGVCYmKGk9LTEpO3ZhciByPVNlLm9wcG9zaXRlKHQpLG89ZStuKmk7dGhpcy5zZXREZXB0aCh0LGUpLHRoaXMuc2V0RGVwdGgocixvKX0sZS5wcm90b3R5cGUuZ2V0RWRnZVJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZWRnZVJpbmd9LGUucHJvdG90eXBlLmlzSW5SZXN1bHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNJblJlc3VsdH0sZS5wcm90b3R5cGUuc2V0TmV4dD1mdW5jdGlvbih0KXt0aGlzLl9uZXh0PXR9LGUucHJvdG90eXBlLmlzVmlzaXRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc1Zpc2l0ZWR9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGUuZGVwdGhGYWN0b3I9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWIuRVhURVJJT1ImJmU9PT1iLklOVEVSSU9SPzE6dD09PWIuSU5URVJJT1ImJmU9PT1iLkVYVEVSSU9SPy0xOjB9LGV9KFVlKSxYZT1mdW5jdGlvbigpe307WGUucHJvdG90eXBlLmNyZWF0ZU5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBHZSh0LG51bGwpfSxYZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sWGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFhlfTt2YXIgWWU9ZnVuY3Rpb24oKXtpZih0aGlzLl9lZGdlcz1uZXcgTnQsdGhpcy5fbm9kZXM9bnVsbCx0aGlzLl9lZGdlRW5kTGlzdD1uZXcgTnQsMD09PWFyZ3VtZW50cy5sZW5ndGgpdGhpcy5fbm9kZXM9bmV3IHFlKG5ldyBYZSk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX25vZGVzPW5ldyBxZSh0KX19O1llLnByb3RvdHlwZS5wcmludEVkZ2VzPWZ1bmN0aW9uKHQpe3QucHJpbnRsbihcIkVkZ2VzOlwiKTtmb3IodmFyIGU9MDtlPHRoaXMuX2VkZ2VzLnNpemUoKTtlKyspe3QucHJpbnRsbihcImVkZ2UgXCIrZStcIjpcIik7dmFyIG49dGhpcy5fZWRnZXMuZ2V0KGUpO24ucHJpbnQodCksbi5laUxpc3QucHJpbnQodCl9fSxZZS5wcm90b3R5cGUuZmluZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fbm9kZXMuZmluZCh0KX0sWWUucHJvdG90eXBlLmFkZE5vZGU9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEdlKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuX25vZGVzLmFkZE5vZGUodCl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuX25vZGVzLmFkZE5vZGUoZSl9fSxZZS5wcm90b3R5cGUuZ2V0Tm9kZUl0ZXJhdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25vZGVzLml0ZXJhdG9yKCl9LFllLnByb3RvdHlwZS5saW5rUmVzdWx0RGlyZWN0ZWRFZGdlcz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLl9ub2Rlcy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dC5uZXh0KCkuZ2V0RWRnZXMoKS5saW5rUmVzdWx0RGlyZWN0ZWRFZGdlcygpfX0sWWUucHJvdG90eXBlLmRlYnVnUHJpbnRsbj1mdW5jdGlvbih0KXtYLm91dC5wcmludGxuKHQpfSxZZS5wcm90b3R5cGUuaXNCb3VuZGFyeU5vZGU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9ub2Rlcy5maW5kKGUpO2lmKG51bGw9PT1uKXJldHVybiExO3ZhciBpPW4uZ2V0TGFiZWwoKTtyZXR1cm4gbnVsbCE9PWkmJmkuZ2V0TG9jYXRpb24odCk9PT1iLkJPVU5EQVJZfSxZZS5wcm90b3R5cGUubGlua0FsbERpcmVjdGVkRWRnZXM9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5fbm9kZXMuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3QubmV4dCgpLmdldEVkZ2VzKCkubGlua0FsbERpcmVjdGVkRWRnZXMoKX19LFllLnByb3RvdHlwZS5tYXRjaEluU2FtZURpcmVjdGlvbj1mdW5jdGlvbih0LGUsbixpKXtyZXR1cm4hIXQuZXF1YWxzKG4pJiYoc3QuY29tcHV0ZU9yaWVudGF0aW9uKHQsZSxpKT09PXN0LkNPTExJTkVBUiYmQmUucXVhZHJhbnQodCxlKT09PUJlLnF1YWRyYW50KG4saSkpfSxZZS5wcm90b3R5cGUuZ2V0RWRnZUVuZHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZWRnZUVuZExpc3R9LFllLnByb3RvdHlwZS5kZWJ1Z1ByaW50PWZ1bmN0aW9uKHQpe1gub3V0LnByaW50KHQpfSxZZS5wcm90b3R5cGUuZ2V0RWRnZUl0ZXJhdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VkZ2VzLml0ZXJhdG9yKCl9LFllLnByb3RvdHlwZS5maW5kRWRnZUluU2FtZURpcmVjdGlvbj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248dGhpcy5fZWRnZXMuc2l6ZSgpO24rKyl7dmFyIGk9dGhpcy5fZWRnZXMuZ2V0KG4pLHI9aS5nZXRDb29yZGluYXRlcygpO2lmKHRoaXMubWF0Y2hJblNhbWVEaXJlY3Rpb24odCxlLHJbMF0sclsxXSkpcmV0dXJuIGk7aWYodGhpcy5tYXRjaEluU2FtZURpcmVjdGlvbih0LGUscltyLmxlbmd0aC0xXSxyW3IubGVuZ3RoLTJdKSlyZXR1cm4gaX1yZXR1cm4gbnVsbH0sWWUucHJvdG90eXBlLmluc2VydEVkZ2U9ZnVuY3Rpb24odCl7dGhpcy5fZWRnZXMuYWRkKHQpfSxZZS5wcm90b3R5cGUuZmluZEVkZ2VFbmQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuZ2V0RWRnZUVuZHMoKS5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7aWYobi5nZXRFZGdlKCk9PT10KXJldHVybiBufXJldHVybiBudWxsfSxZZS5wcm90b3R5cGUuYWRkRWRnZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3RoaXMuX2VkZ2VzLmFkZChuKTt2YXIgaT1uZXcgemUobiwhMCkscj1uZXcgemUobiwhMSk7aS5zZXRTeW0ociksci5zZXRTeW0oaSksdGhpcy5hZGQoaSksdGhpcy5hZGQocil9fSxZZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3RoaXMuX25vZGVzLmFkZCh0KSx0aGlzLl9lZGdlRW5kTGlzdC5hZGQodCl9LFllLnByb3RvdHlwZS5nZXROb2Rlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ub2Rlcy52YWx1ZXMoKX0sWWUucHJvdG90eXBlLmZpbmRFZGdlPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0aGlzLl9lZGdlcy5zaXplKCk7bisrKXt2YXIgaT10aGlzLl9lZGdlcy5nZXQobikscj1pLmdldENvb3JkaW5hdGVzKCk7aWYodC5lcXVhbHMoclswXSkmJmUuZXF1YWxzKHJbMV0pKXJldHVybiBpfXJldHVybiBudWxsfSxZZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sWWUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFllfSxZZS5saW5rUmVzdWx0RGlyZWN0ZWRFZGdlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7ZS5uZXh0KCkuZ2V0RWRnZXMoKS5saW5rUmVzdWx0RGlyZWN0ZWRFZGdlcygpfX07dmFyIGtlPWZ1bmN0aW9uKCl7dGhpcy5fZ2VvbWV0cnlGYWN0b3J5PW51bGwsdGhpcy5fc2hlbGxMaXN0PW5ldyBOdDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fZ2VvbWV0cnlGYWN0b3J5PXR9O2tlLnByb3RvdHlwZS5zb3J0U2hlbGxzQW5kSG9sZXM9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtyLmlzSG9sZSgpP24uYWRkKHIpOmUuYWRkKHIpfX0sa2UucHJvdG90eXBlLmNvbXB1dGVQb2x5Z29ucz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IE50LG49dC5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCkudG9Qb2x5Z29uKHRoaXMuX2dlb21ldHJ5RmFjdG9yeSk7ZS5hZGQoaSl9cmV0dXJuIGV9LGtlLnByb3RvdHlwZS5wbGFjZUZyZWVIb2xlcz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZihudWxsPT09aS5nZXRTaGVsbCgpKXt2YXIgcj10aGlzLmZpbmRFZGdlUmluZ0NvbnRhaW5pbmcoaSx0KTtpZihudWxsPT09cil0aHJvdyBuZXcgd2UoXCJ1bmFibGUgdG8gYXNzaWduIGhvbGUgdG8gYSBzaGVsbFwiLGkuZ2V0Q29vcmRpbmF0ZSgwKSk7aS5zZXRTaGVsbChyKX19fSxrZS5wcm90b3R5cGUuYnVpbGRNaW5pbWFsRWRnZVJpbmdzPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9bmV3IE50LHI9dC5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7dmFyIG89ci5uZXh0KCk7aWYoby5nZXRNYXhOb2RlRGVncmVlKCk+Mil7by5saW5rRGlyZWN0ZWRFZGdlc0Zvck1pbmltYWxFZGdlUmluZ3MoKTt2YXIgcz1vLmJ1aWxkTWluaW1hbFJpbmdzKCksYT10aGlzLmZpbmRTaGVsbChzKTtudWxsIT09YT8odGhpcy5wbGFjZVBvbHlnb25Ib2xlcyhhLHMpLGUuYWRkKGEpKTpuLmFkZEFsbChzKX1lbHNlIGkuYWRkKG8pfXJldHVybiBpfSxrZS5wcm90b3R5cGUuY29udGFpbnNQb2ludD1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5fc2hlbGxMaXN0Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXtpZihlLm5leHQoKS5jb250YWluc1BvaW50KHQpKXJldHVybiEwfXJldHVybiExfSxrZS5wcm90b3R5cGUuYnVpbGRNYXhpbWFsRWRnZVJpbmdzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgTnQsbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZihpLmlzSW5SZXN1bHQoKSYmaS5nZXRMYWJlbCgpLmlzQXJlYSgpJiZudWxsPT09aS5nZXRFZGdlUmluZygpKXt2YXIgcj1uZXcgQWUoaSx0aGlzLl9nZW9tZXRyeUZhY3RvcnkpO2UuYWRkKHIpLHIuc2V0SW5SZXN1bHQoKX19cmV0dXJuIGV9LGtlLnByb3RvdHlwZS5wbGFjZVBvbHlnb25Ib2xlcz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpLmlzSG9sZSgpJiZpLnNldFNoZWxsKHQpfX0sa2UucHJvdG90eXBlLmdldFBvbHlnb25zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcHV0ZVBvbHlnb25zKHRoaXMuX3NoZWxsTGlzdCl9LGtlLnByb3RvdHlwZS5maW5kRWRnZVJpbmdDb250YWluaW5nPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuZ2V0TGluZWFyUmluZygpLGk9bi5nZXRFbnZlbG9wZUludGVybmFsKCkscj1uLmdldENvb3JkaW5hdGVOKDApLG89bnVsbCxzPW51bGwsYT1lLml0ZXJhdG9yKCk7YS5oYXNOZXh0KCk7KXt2YXIgdT1hLm5leHQoKSxsPXUuZ2V0TGluZWFyUmluZygpLGM9bC5nZXRFbnZlbG9wZUludGVybmFsKCk7bnVsbCE9PW8mJihzPW8uZ2V0TGluZWFyUmluZygpLmdldEVudmVsb3BlSW50ZXJuYWwoKSk7dmFyIHA9ITE7Yy5jb250YWlucyhpKSYmc3QuaXNQb2ludEluUmluZyhyLGwuZ2V0Q29vcmRpbmF0ZXMoKSkmJihwPSEwKSxwJiYobnVsbD09PW98fHMuY29udGFpbnMoYykpJiYobz11KX1yZXR1cm4gb30sa2UucHJvdG90eXBlLmZpbmRTaGVsbD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPW51bGwsaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtyLmlzSG9sZSgpfHwobj1yLGUrKyl9cmV0dXJuIHR0LmlzVHJ1ZShlPD0xLFwiZm91bmQgdHdvIHNoZWxscyBpbiBNaW5pbWFsRWRnZVJpbmcgbGlzdFwiKSxufSxrZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmFkZCh0LmdldEVkZ2VFbmRzKCksdC5nZXROb2RlcygpKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07WWUubGlua1Jlc3VsdERpcmVjdGVkRWRnZXMobik7dmFyIGk9dGhpcy5idWlsZE1heGltYWxFZGdlUmluZ3MoZSkscj1uZXcgTnQsbz10aGlzLmJ1aWxkTWluaW1hbEVkZ2VSaW5ncyhpLHRoaXMuX3NoZWxsTGlzdCxyKTt0aGlzLnNvcnRTaGVsbHNBbmRIb2xlcyhvLHRoaXMuX3NoZWxsTGlzdCxyKSx0aGlzLnBsYWNlRnJlZUhvbGVzKHRoaXMuX3NoZWxsTGlzdCxyKX19LGtlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxrZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4ga2V9O3ZhciBqZT1mdW5jdGlvbigpe307amUucHJvdG90eXBlLmdldEJvdW5kcz1mdW5jdGlvbigpe30samUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGplLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBqZX07dmFyIEhlPWZ1bmN0aW9uKCl7dGhpcy5fYm91bmRzPW51bGwsdGhpcy5faXRlbT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLl9ib3VuZHM9dCx0aGlzLl9pdGVtPWV9O0hlLnByb3RvdHlwZS5nZXRJdGVtPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2l0ZW19LEhlLnByb3RvdHlwZS5nZXRCb3VuZHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYm91bmRzfSxIZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bamUsZV19LEhlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBIZX07dmFyIFdlPWZ1bmN0aW9uKCl7dGhpcy5fc2l6ZT1udWxsLHRoaXMuX2l0ZW1zPW51bGwsdGhpcy5fc2l6ZT0wLHRoaXMuX2l0ZW1zPW5ldyBOdCx0aGlzLl9pdGVtcy5hZGQobnVsbCl9O1dlLnByb3RvdHlwZS5wb2xsPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuIG51bGw7dmFyIHQ9dGhpcy5faXRlbXMuZ2V0KDEpO3JldHVybiB0aGlzLl9pdGVtcy5zZXQoMSx0aGlzLl9pdGVtcy5nZXQodGhpcy5fc2l6ZSkpLHRoaXMuX3NpemUtPTEsdGhpcy5yZW9yZGVyKDEpLHR9LFdlLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NpemV9LFdlLnByb3RvdHlwZS5yZW9yZGVyPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1udWxsLG49dGhpcy5faXRlbXMuZ2V0KHQpOzIqdDw9dGhpcy5fc2l6ZSYmKChlPTIqdCkhPT10aGlzLl9zaXplJiZ0aGlzLl9pdGVtcy5nZXQoZSsxKS5jb21wYXJlVG8odGhpcy5faXRlbXMuZ2V0KGUpKTwwJiZlKyssdGhpcy5faXRlbXMuZ2V0KGUpLmNvbXBhcmVUbyhuKTwwKTt0PWUpdGhpcy5faXRlbXMuc2V0KHQsdGhpcy5faXRlbXMuZ2V0KGUpKTt0aGlzLl9pdGVtcy5zZXQodCxuKX0sV2UucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fc2l6ZT0wLHRoaXMuX2l0ZW1zLmNsZWFyKCl9LFdlLnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLl9zaXplfSxXZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3RoaXMuX2l0ZW1zLmFkZChudWxsKSx0aGlzLl9zaXplKz0xO3ZhciBlPXRoaXMuX3NpemU7Zm9yKHRoaXMuX2l0ZW1zLnNldCgwLHQpO3QuY29tcGFyZVRvKHRoaXMuX2l0ZW1zLmdldChNYXRoLnRydW5jKGUvMikpKTwwO2UvPTIpdGhpcy5faXRlbXMuc2V0KGUsdGhpcy5faXRlbXMuZ2V0KE1hdGgudHJ1bmMoZS8yKSkpO3RoaXMuX2l0ZW1zLnNldChlLHQpfSxXZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sV2UucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFdlfTt2YXIgS2U9ZnVuY3Rpb24oKXt9O0tlLnByb3RvdHlwZS52aXNpdEl0ZW09ZnVuY3Rpb24odCl7fSxLZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sS2UucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEtlfTt2YXIgSmU9ZnVuY3Rpb24oKXt9O0plLnByb3RvdHlwZS5pbnNlcnQ9ZnVuY3Rpb24odCxlKXt9LEplLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCxlKXt9LEplLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbigpe30sSmUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LEplLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBKZX07dmFyIFFlPWZ1bmN0aW9uKCl7aWYodGhpcy5fY2hpbGRCb3VuZGFibGVzPW5ldyBOdCx0aGlzLl9ib3VuZHM9bnVsbCx0aGlzLl9sZXZlbD1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fbGV2ZWw9dH19LFplPXtzZXJpYWxWZXJzaW9uVUlEOntjb25maWd1cmFibGU6ITB9fTtRZS5wcm90b3R5cGUuZ2V0TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGV2ZWx9LFFlLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoaWxkQm91bmRhYmxlcy5zaXplKCl9LFFlLnByb3RvdHlwZS5nZXRDaGlsZEJvdW5kYWJsZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hpbGRCb3VuZGFibGVzfSxRZS5wcm90b3R5cGUuYWRkQ2hpbGRCb3VuZGFibGU9ZnVuY3Rpb24odCl7dHQuaXNUcnVlKG51bGw9PT10aGlzLl9ib3VuZHMpLHRoaXMuX2NoaWxkQm91bmRhYmxlcy5hZGQodCl9LFFlLnByb3RvdHlwZS5pc0VtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoaWxkQm91bmRhYmxlcy5pc0VtcHR5KCl9LFFlLnByb3RvdHlwZS5nZXRCb3VuZHM9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuX2JvdW5kcyYmKHRoaXMuX2JvdW5kcz10aGlzLmNvbXB1dGVCb3VuZHMoKSksdGhpcy5fYm91bmRzfSxRZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bamUsZV19LFFlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBRZX0sWmUuc2VyaWFsVmVyc2lvblVJRC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMHg1YTFlNTVlYzQxMzY5ODAwfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhRZSxaZSk7dmFyICRlPWZ1bmN0aW9uKCl7fTskZS5yZXZlcnNlT3JkZXI9ZnVuY3Rpb24oKXtyZXR1cm57Y29tcGFyZTpmdW5jdGlvbih0LGUpe3JldHVybiBlLmNvbXBhcmVUbyh0KX19fSwkZS5taW49ZnVuY3Rpb24odCl7cmV0dXJuICRlLnNvcnQodCksdC5nZXQoMCl9LCRlLnNvcnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10LnRvQXJyYXkoKTtlP0d0LnNvcnQobixlKTpHdC5zb3J0KG4pO2Zvcih2YXIgaT10Lml0ZXJhdG9yKCkscj0wLG89bi5sZW5ndGg7cjxvO3IrKylpLm5leHQoKSxpLnNldChuW3JdKX0sJGUuc2luZ2xldG9uTGlzdD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgTnQ7cmV0dXJuIGUuYWRkKHQpLGV9O3ZhciB0bj1mdW5jdGlvbigpe3RoaXMuX2JvdW5kYWJsZTE9bnVsbCx0aGlzLl9ib3VuZGFibGUyPW51bGwsdGhpcy5fZGlzdGFuY2U9bnVsbCx0aGlzLl9pdGVtRGlzdGFuY2U9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07dGhpcy5fYm91bmRhYmxlMT10LHRoaXMuX2JvdW5kYWJsZTI9ZSx0aGlzLl9pdGVtRGlzdGFuY2U9bix0aGlzLl9kaXN0YW5jZT10aGlzLmRpc3RhbmNlKCl9O3RuLnByb3RvdHlwZS5leHBhbmRUb1F1ZXVlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dG4uaXNDb21wb3NpdGUodGhpcy5fYm91bmRhYmxlMSksaT10bi5pc0NvbXBvc2l0ZSh0aGlzLl9ib3VuZGFibGUyKTtpZihuJiZpKXJldHVybiB0bi5hcmVhKHRoaXMuX2JvdW5kYWJsZTEpPnRuLmFyZWEodGhpcy5fYm91bmRhYmxlMik/KHRoaXMuZXhwYW5kKHRoaXMuX2JvdW5kYWJsZTEsdGhpcy5fYm91bmRhYmxlMix0LGUpLG51bGwpOih0aGlzLmV4cGFuZCh0aGlzLl9ib3VuZGFibGUyLHRoaXMuX2JvdW5kYWJsZTEsdCxlKSxudWxsKTtpZihuKXJldHVybiB0aGlzLmV4cGFuZCh0aGlzLl9ib3VuZGFibGUxLHRoaXMuX2JvdW5kYWJsZTIsdCxlKSxudWxsO2lmKGkpcmV0dXJuIHRoaXMuZXhwYW5kKHRoaXMuX2JvdW5kYWJsZTIsdGhpcy5fYm91bmRhYmxlMSx0LGUpLG51bGw7dGhyb3cgbmV3IF8oXCJuZWl0aGVyIGJvdW5kYWJsZSBpcyBjb21wb3NpdGVcIil9LHRuLnByb3RvdHlwZS5pc0xlYXZlcz1mdW5jdGlvbigpe3JldHVybiEodG4uaXNDb21wb3NpdGUodGhpcy5fYm91bmRhYmxlMSl8fHRuLmlzQ29tcG9zaXRlKHRoaXMuX2JvdW5kYWJsZTIpKX0sdG4ucHJvdG90eXBlLmNvbXBhcmVUbz1mdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLl9kaXN0YW5jZTxlLl9kaXN0YW5jZT8tMTp0aGlzLl9kaXN0YW5jZT5lLl9kaXN0YW5jZT8xOjB9LHRuLnByb3RvdHlwZS5leHBhbmQ9ZnVuY3Rpb24odCxlLG4saSl7Zm9yKHZhciByPXQuZ2V0Q2hpbGRCb3VuZGFibGVzKCkuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3ZhciBvPXIubmV4dCgpLHM9bmV3IHRuKG8sZSx0aGlzLl9pdGVtRGlzdGFuY2UpO3MuZ2V0RGlzdGFuY2UoKTxpJiZuLmFkZChzKX19LHRuLnByb3RvdHlwZS5nZXRCb3VuZGFibGU9ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10P3RoaXMuX2JvdW5kYWJsZTE6dGhpcy5fYm91bmRhYmxlMn0sdG4ucHJvdG90eXBlLmdldERpc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Rpc3RhbmNlfSx0bi5wcm90b3R5cGUuZGlzdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0xlYXZlcygpP3RoaXMuX2l0ZW1EaXN0YW5jZS5kaXN0YW5jZSh0aGlzLl9ib3VuZGFibGUxLHRoaXMuX2JvdW5kYWJsZTIpOnRoaXMuX2JvdW5kYWJsZTEuZ2V0Qm91bmRzKCkuZGlzdGFuY2UodGhpcy5fYm91bmRhYmxlMi5nZXRCb3VuZHMoKSl9LHRuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJXX0sdG4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHRufSx0bi5hcmVhPWZ1bmN0aW9uKHQpe3JldHVybiB0LmdldEJvdW5kcygpLmdldEFyZWEoKX0sdG4uaXNDb21wb3NpdGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBRZX07dmFyIGVuPWZ1bmN0aW9uIHQoKXtpZih0aGlzLl9yb290PW51bGwsdGhpcy5fYnVpbHQ9ITEsdGhpcy5faXRlbUJvdW5kYWJsZXM9bmV3IE50LHRoaXMuX25vZGVDYXBhY2l0eT1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT10LkRFRkFVTFRfTk9ERV9DQVBBQ0lUWTt0aGlzLl9ub2RlQ2FwYWNpdHk9ZX1lbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF07dHQuaXNUcnVlKG4+MSxcIk5vZGUgY2FwYWNpdHkgbXVzdCBiZSBncmVhdGVyIHRoYW4gMVwiKSx0aGlzLl9ub2RlQ2FwYWNpdHk9bn19LG5uPXtJbnRlcnNlY3RzT3A6e2NvbmZpZ3VyYWJsZTohMH0sc2VyaWFsVmVyc2lvblVJRDp7Y29uZmlndXJhYmxlOiEwfSxERUZBVUxUX05PREVfQ0FQQUNJVFk6e2NvbmZpZ3VyYWJsZTohMH19O2VuLnByb3RvdHlwZS5nZXROb2RlQ2FwYWNpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbm9kZUNhcGFjaXR5fSxlbi5wcm90b3R5cGUubGFzdE5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0KHQuc2l6ZSgpLTEpfSxlbi5wcm90b3R5cGUuc2l6ZT1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmlzRW1wdHkoKT8wOih0aGlzLmJ1aWxkKCksdGhpcy5zaXplKHRoaXMuX3Jvb3QpKTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciB0PTAsZT1hcmd1bWVudHNbMF0uZ2V0Q2hpbGRCb3VuZGFibGVzKCkuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO24gaW5zdGFuY2VvZiBRZT90Kz10aGlzLnNpemUobik6biBpbnN0YW5jZW9mIEhlJiYodCs9MSl9cmV0dXJuIHR9fSxlbi5wcm90b3R5cGUucmVtb3ZlSXRlbT1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1udWxsLGk9dC5nZXRDaGlsZEJvdW5kYWJsZXMoKS5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7ciBpbnN0YW5jZW9mIEhlJiZyLmdldEl0ZW0oKT09PWUmJihuPXIpfXJldHVybiBudWxsIT09biYmKHQuZ2V0Q2hpbGRCb3VuZGFibGVzKCkucmVtb3ZlKG4pLCEwKX0sZW4ucHJvdG90eXBlLml0ZW1zVHJlZT1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXt0aGlzLmJ1aWxkKCk7dmFyIHQ9dGhpcy5pdGVtc1RyZWUodGhpcy5fcm9vdCk7cmV0dXJuIG51bGw9PT10P25ldyBOdDp0fWlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIGU9YXJndW1lbnRzWzBdLG49bmV3IE50LGk9ZS5nZXRDaGlsZEJvdW5kYWJsZXMoKS5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7aWYociBpbnN0YW5jZW9mIFFlKXt2YXIgbz10aGlzLml0ZW1zVHJlZShyKTtudWxsIT09byYmbi5hZGQobyl9ZWxzZSByIGluc3RhbmNlb2YgSGU/bi5hZGQoci5nZXRJdGVtKCkpOnR0LnNob3VsZE5ldmVyUmVhY2hIZXJlKCl9cmV0dXJuIG4uc2l6ZSgpPD0wP251bGw6bn19LGVuLnByb3RvdHlwZS5pbnNlcnQ9ZnVuY3Rpb24odCxlKXt0dC5pc1RydWUoIXRoaXMuX2J1aWx0LFwiQ2Fubm90IGluc2VydCBpdGVtcyBpbnRvIGFuIFNUUiBwYWNrZWQgUi10cmVlIGFmdGVyIGl0IGhhcyBiZWVuIGJ1aWx0LlwiKSx0aGlzLl9pdGVtQm91bmRhYmxlcy5hZGQobmV3IEhlKHQsZSkpfSxlbi5wcm90b3R5cGUuYm91bmRhYmxlc0F0TGV2ZWw9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9bmV3IE50O3JldHVybiB0aGlzLmJvdW5kYWJsZXNBdExldmVsKHQsdGhpcy5fcm9vdCxlKSxlfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl07aWYodHQuaXNUcnVlKG4+LTIpLGkuZ2V0TGV2ZWwoKT09PW4pcmV0dXJuIHIuYWRkKGkpLG51bGw7Zm9yKHZhciBvPWkuZ2V0Q2hpbGRCb3VuZGFibGVzKCkuaXRlcmF0b3IoKTtvLmhhc05leHQoKTspe3ZhciBzPW8ubmV4dCgpO3MgaW5zdGFuY2VvZiBRZT90aGlzLmJvdW5kYWJsZXNBdExldmVsKG4scyxyKToodHQuaXNUcnVlKHMgaW5zdGFuY2VvZiBIZSksLTE9PT1uJiZyLmFkZChzKSl9cmV0dXJuIG51bGx9fSxlbi5wcm90b3R5cGUucXVlcnk9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuYnVpbGQoKTt2YXIgZT1uZXcgTnQ7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP2U6KHRoaXMuZ2V0SW50ZXJzZWN0c09wKCkuaW50ZXJzZWN0cyh0aGlzLl9yb290LmdldEJvdW5kcygpLHQpJiZ0aGlzLnF1ZXJ5KHQsdGhpcy5fcm9vdCxlKSxlKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO2lmKHRoaXMuYnVpbGQoKSx0aGlzLmlzRW1wdHkoKSlyZXR1cm4gbnVsbDt0aGlzLmdldEludGVyc2VjdHNPcCgpLmludGVyc2VjdHModGhpcy5fcm9vdC5nZXRCb3VuZHMoKSxuKSYmdGhpcy5xdWVyeShuLHRoaXMuX3Jvb3QsaSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aClpZihPKGFyZ3VtZW50c1syXSxLZSkmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgT2JqZWN0JiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIFFlKWZvcih2YXIgcj1hcmd1bWVudHNbMF0sbz1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl0sYT1vLmdldENoaWxkQm91bmRhYmxlcygpLHU9MDt1PGEuc2l6ZSgpO3UrKyl7dmFyIGw9YS5nZXQodSk7dGhpcy5nZXRJbnRlcnNlY3RzT3AoKS5pbnRlcnNlY3RzKGwuZ2V0Qm91bmRzKCkscikmJihsIGluc3RhbmNlb2YgUWU/dGhpcy5xdWVyeShyLGwscyk6bCBpbnN0YW5jZW9mIEhlP3MudmlzaXRJdGVtKGwuZ2V0SXRlbSgpKTp0dC5zaG91bGROZXZlclJlYWNoSGVyZSgpKX1lbHNlIGlmKE8oYXJndW1lbnRzWzJdLHh0KSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBPYmplY3QmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgUWUpZm9yKHZhciBjPWFyZ3VtZW50c1swXSxwPWFyZ3VtZW50c1sxXSxoPWFyZ3VtZW50c1syXSxmPXAuZ2V0Q2hpbGRCb3VuZGFibGVzKCksZz0wO2c8Zi5zaXplKCk7ZysrKXt2YXIgZD1mLmdldChnKTt0aGlzLmdldEludGVyc2VjdHNPcCgpLmludGVyc2VjdHMoZC5nZXRCb3VuZHMoKSxjKSYmKGQgaW5zdGFuY2VvZiBRZT90aGlzLnF1ZXJ5KGMsZCxoKTpkIGluc3RhbmNlb2YgSGU/aC5hZGQoZC5nZXRJdGVtKCkpOnR0LnNob3VsZE5ldmVyUmVhY2hIZXJlKCkpfX0sZW4ucHJvdG90eXBlLmJ1aWxkPWZ1bmN0aW9uKCl7aWYodGhpcy5fYnVpbHQpcmV0dXJuIG51bGw7dGhpcy5fcm9vdD10aGlzLl9pdGVtQm91bmRhYmxlcy5pc0VtcHR5KCk/dGhpcy5jcmVhdGVOb2RlKDApOnRoaXMuY3JlYXRlSGlnaGVyTGV2ZWxzKHRoaXMuX2l0ZW1Cb3VuZGFibGVzLC0xKSx0aGlzLl9pdGVtQm91bmRhYmxlcz1udWxsLHRoaXMuX2J1aWx0PSEwfSxlbi5wcm90b3R5cGUuZ2V0Um9vdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmJ1aWxkKCksdGhpcy5fcm9vdH0sZW4ucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07cmV0dXJuIHRoaXMuYnVpbGQoKSwhIXRoaXMuZ2V0SW50ZXJzZWN0c09wKCkuaW50ZXJzZWN0cyh0aGlzLl9yb290LmdldEJvdW5kcygpLHQpJiZ0aGlzLnJlbW92ZSh0LHRoaXMuX3Jvb3QsZSl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXSxvPXRoaXMucmVtb3ZlSXRlbShpLHIpO2lmKG8pcmV0dXJuITA7Zm9yKHZhciBzPW51bGwsYT1pLmdldENoaWxkQm91bmRhYmxlcygpLml0ZXJhdG9yKCk7YS5oYXNOZXh0KCk7KXt2YXIgdT1hLm5leHQoKTtpZih0aGlzLmdldEludGVyc2VjdHNPcCgpLmludGVyc2VjdHModS5nZXRCb3VuZHMoKSxuKSYmKHUgaW5zdGFuY2VvZiBRZSYmKG89dGhpcy5yZW1vdmUobix1LHIpKSkpe3M9dTticmVha319cmV0dXJuIG51bGwhPT1zJiZzLmdldENoaWxkQm91bmRhYmxlcygpLmlzRW1wdHkoKSYmaS5nZXRDaGlsZEJvdW5kYWJsZXMoKS5yZW1vdmUocyksb319LGVuLnByb3RvdHlwZS5jcmVhdGVIaWdoZXJMZXZlbHM9ZnVuY3Rpb24odCxlKXt0dC5pc1RydWUoIXQuaXNFbXB0eSgpKTt2YXIgbj10aGlzLmNyZWF0ZVBhcmVudEJvdW5kYWJsZXModCxlKzEpO3JldHVybiAxPT09bi5zaXplKCk/bi5nZXQoMCk6dGhpcy5jcmVhdGVIaWdoZXJMZXZlbHMobixlKzEpfSxlbi5wcm90b3R5cGUuZGVwdGg9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5pc0VtcHR5KCk/MDoodGhpcy5idWlsZCgpLHRoaXMuZGVwdGgodGhpcy5fcm9vdCkpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIHQ9MCxlPWFyZ3VtZW50c1swXS5nZXRDaGlsZEJvdW5kYWJsZXMoKS5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7aWYobiBpbnN0YW5jZW9mIFFlKXt2YXIgaT10aGlzLmRlcHRoKG4pO2k+dCYmKHQ9aSl9fXJldHVybiB0KzF9fSxlbi5wcm90b3R5cGUuY3JlYXRlUGFyZW50Qm91bmRhYmxlcz1mdW5jdGlvbih0LGUpe3R0LmlzVHJ1ZSghdC5pc0VtcHR5KCkpO3ZhciBuPW5ldyBOdDtuLmFkZCh0aGlzLmNyZWF0ZU5vZGUoZSkpO3ZhciBpPW5ldyBOdCh0KTskZS5zb3J0KGksdGhpcy5nZXRDb21wYXJhdG9yKCkpO2Zvcih2YXIgcj1pLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgbz1yLm5leHQoKTt0aGlzLmxhc3ROb2RlKG4pLmdldENoaWxkQm91bmRhYmxlcygpLnNpemUoKT09PXRoaXMuZ2V0Tm9kZUNhcGFjaXR5KCkmJm4uYWRkKHRoaXMuY3JlYXRlTm9kZShlKSksdGhpcy5sYXN0Tm9kZShuKS5hZGRDaGlsZEJvdW5kYWJsZShvKX1yZXR1cm4gbn0sZW4ucHJvdG90eXBlLmlzRW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYnVpbHQ/dGhpcy5fcm9vdC5pc0VtcHR5KCk6dGhpcy5faXRlbUJvdW5kYWJsZXMuaXNFbXB0eSgpfSxlbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bZV19LGVuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlbn0sZW4uY29tcGFyZURvdWJsZXM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD5lPzE6dDxlPy0xOjB9LG5uLkludGVyc2VjdHNPcC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gcm59LG5uLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLTB4MzVlZjY0YzgyZDRjNTQwMH0sbm4uREVGQVVMVF9OT0RFX0NBUEFDSVRZLmdldD1mdW5jdGlvbigpe3JldHVybiAxMH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZW4sbm4pO3ZhciBybj1mdW5jdGlvbigpe30sb249ZnVuY3Rpb24oKXt9O29uLnByb3RvdHlwZS5kaXN0YW5jZT1mdW5jdGlvbih0LGUpe30sb24ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LG9uLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBvbn07dmFyIHNuPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSl7ZT1lfHxuLkRFRkFVTFRfTk9ERV9DQVBBQ0lUWSx0LmNhbGwodGhpcyxlKX10JiYobi5fX3Byb3RvX189dCksKG4ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1uO3ZhciBpPXtTVFJ0cmVlTm9kZTp7Y29uZmlndXJhYmxlOiEwfSxzZXJpYWxWZXJzaW9uVUlEOntjb25maWd1cmFibGU6ITB9LHhDb21wYXJhdG9yOntjb25maWd1cmFibGU6ITB9LHlDb21wYXJhdG9yOntjb25maWd1cmFibGU6ITB9LGludGVyc2VjdHNPcDp7Y29uZmlndXJhYmxlOiEwfSxERUZBVUxUX05PREVfQ0FQQUNJVFk6e2NvbmZpZ3VyYWJsZTohMH19O3JldHVybiBuLnByb3RvdHlwZS5jcmVhdGVQYXJlbnRCb3VuZGFibGVzRnJvbVZlcnRpY2FsU2xpY2VzPWZ1bmN0aW9uKHQsZSl7dHQuaXNUcnVlKHQubGVuZ3RoPjApO2Zvcih2YXIgbj1uZXcgTnQsaT0wO2k8dC5sZW5ndGg7aSsrKW4uYWRkQWxsKHRoaXMuY3JlYXRlUGFyZW50Qm91bmRhYmxlc0Zyb21WZXJ0aWNhbFNsaWNlKHRbaV0sZSkpO3JldHVybiBufSxuLnByb3RvdHlwZS5jcmVhdGVOb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgYW4odCl9LG4ucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/dC5wcm90b3R5cGUuc2l6ZS5jYWxsKHRoaXMpOnQucHJvdG90eXBlLnNpemUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxuLnByb3RvdHlwZS5pbnNlcnQ9ZnVuY3Rpb24oKXtpZigyIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdC5wcm90b3R5cGUuaW5zZXJ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07aWYoZS5pc051bGwoKSlyZXR1cm4gbnVsbDt0LnByb3RvdHlwZS5pbnNlcnQuY2FsbCh0aGlzLGUsbil9LG4ucHJvdG90eXBlLmdldEludGVyc2VjdHNPcD1mdW5jdGlvbigpe3JldHVybiBuLmludGVyc2VjdHNPcH0sbi5wcm90b3R5cGUudmVydGljYWxTbGljZXM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49TWF0aC50cnVuYyhNYXRoLmNlaWwodC5zaXplKCkvZSkpLGk9bmV3IEFycmF5KGUpLmZpbGwobnVsbCkscj10Lml0ZXJhdG9yKCksbz0wO288ZTtvKyspe2lbb109bmV3IE50O2Zvcih2YXIgcz0wO3IuaGFzTmV4dCgpJiZzPG47KXt2YXIgYT1yLm5leHQoKTtpW29dLmFkZChhKSxzKyt9fXJldHVybiBpfSxuLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHQucHJvdG90eXBlLnF1ZXJ5LmNhbGwodGhpcyxlKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3QucHJvdG90eXBlLnF1ZXJ5LmNhbGwodGhpcyxuLGkpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpaWYoTyhhcmd1bWVudHNbMl0sS2UpJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE9iamVjdCYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBRZSl7dmFyIHI9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdLHM9YXJndW1lbnRzWzJdO3QucHJvdG90eXBlLnF1ZXJ5LmNhbGwodGhpcyxyLG8scyl9ZWxzZSBpZihPKGFyZ3VtZW50c1syXSx4dCkmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgT2JqZWN0JiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIFFlKXt2YXIgYT1hcmd1bWVudHNbMF0sdT1hcmd1bWVudHNbMV0sbD1hcmd1bWVudHNbMl07dC5wcm90b3R5cGUucXVlcnkuY2FsbCh0aGlzLGEsdSxsKX19LG4ucHJvdG90eXBlLmdldENvbXBhcmF0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gbi55Q29tcGFyYXRvcn0sbi5wcm90b3R5cGUuY3JlYXRlUGFyZW50Qm91bmRhYmxlc0Zyb21WZXJ0aWNhbFNsaWNlPWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQucHJvdG90eXBlLmNyZWF0ZVBhcmVudEJvdW5kYWJsZXMuY2FsbCh0aGlzLGUsbil9LG4ucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07cmV0dXJuIHQucHJvdG90eXBlLnJlbW92ZS5jYWxsKHRoaXMsZSxuKX1yZXR1cm4gdC5wcm90b3R5cGUucmVtb3ZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbi5wcm90b3R5cGUuZGVwdGg9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/dC5wcm90b3R5cGUuZGVwdGguY2FsbCh0aGlzKTp0LnByb3RvdHlwZS5kZXB0aC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG4ucHJvdG90eXBlLmNyZWF0ZVBhcmVudEJvdW5kYWJsZXM9ZnVuY3Rpb24odCxlKXt0dC5pc1RydWUoIXQuaXNFbXB0eSgpKTt2YXIgaT1NYXRoLnRydW5jKE1hdGguY2VpbCh0LnNpemUoKS90aGlzLmdldE5vZGVDYXBhY2l0eSgpKSkscj1uZXcgTnQodCk7JGUuc29ydChyLG4ueENvbXBhcmF0b3IpO3ZhciBvPXRoaXMudmVydGljYWxTbGljZXMocixNYXRoLnRydW5jKE1hdGguY2VpbChNYXRoLnNxcnQoaSkpKSk7cmV0dXJuIHRoaXMuY3JlYXRlUGFyZW50Qm91bmRhYmxlc0Zyb21WZXJ0aWNhbFNsaWNlcyhvLGUpfSxuLnByb3RvdHlwZS5uZWFyZXN0TmVpZ2hib3VyPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKE8oYXJndW1lbnRzWzBdLG9uKSl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9bmV3IHRuKHRoaXMuZ2V0Um9vdCgpLHRoaXMuZ2V0Um9vdCgpLHQpO3JldHVybiB0aGlzLm5lYXJlc3ROZWlnaGJvdXIoZSl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiB0bil7dmFyIGk9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLm5lYXJlc3ROZWlnaGJvdXIoaSxtLlBPU0lUSVZFX0lORklOSVRZKX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBuJiZPKGFyZ3VtZW50c1sxXSxvbikpe3ZhciByPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxzPW5ldyB0bih0aGlzLmdldFJvb3QoKSxyLmdldFJvb3QoKSxvKTtyZXR1cm4gdGhpcy5uZWFyZXN0TmVpZ2hib3VyKHMpfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgdG4mJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciBhPWFyZ3VtZW50c1swXSx1PWFyZ3VtZW50c1sxXSxsPW51bGwsYz1uZXcgV2U7Zm9yKGMuYWRkKGEpOyFjLmlzRW1wdHkoKSYmdT4wOyl7dmFyIHA9Yy5wb2xsKCksaD1wLmdldERpc3RhbmNlKCk7aWYoaD49dSlicmVhaztwLmlzTGVhdmVzKCk/KHU9aCxsPXApOnAuZXhwYW5kVG9RdWV1ZShjLHUpfXJldHVybltsLmdldEJvdW5kYWJsZSgwKS5nZXRJdGVtKCksbC5nZXRCb3VuZGFibGUoMSkuZ2V0SXRlbSgpXX19ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGY9YXJndW1lbnRzWzBdLGc9YXJndW1lbnRzWzFdLGQ9YXJndW1lbnRzWzJdLHk9bmV3IEhlKGYsZyksXz1uZXcgdG4odGhpcy5nZXRSb290KCkseSxkKTtyZXR1cm4gdGhpcy5uZWFyZXN0TmVpZ2hib3VyKF8pWzBdfX0sbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bSmUsZV19LG4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIG59LG4uY2VudHJlWD1mdW5jdGlvbih0KXtyZXR1cm4gbi5hdmcodC5nZXRNaW5YKCksdC5nZXRNYXhYKCkpfSxuLmF2Zz1mdW5jdGlvbih0LGUpe3JldHVybih0K2UpLzJ9LG4uY2VudHJlWT1mdW5jdGlvbih0KXtyZXR1cm4gbi5hdmcodC5nZXRNaW5ZKCksdC5nZXRNYXhZKCkpfSxpLlNUUnRyZWVOb2RlLmdldD1mdW5jdGlvbigpe3JldHVybiBhbn0saS5zZXJpYWxWZXJzaW9uVUlELmdldD1mdW5jdGlvbigpe3JldHVybiAweDM5OTIwZjdkNWYyNjFlMH0saS54Q29tcGFyYXRvci5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm57aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5beF19LGNvbXBhcmU6ZnVuY3Rpb24oZSxpKXtyZXR1cm4gdC5jb21wYXJlRG91YmxlcyhuLmNlbnRyZVgoZS5nZXRCb3VuZHMoKSksbi5jZW50cmVYKGkuZ2V0Qm91bmRzKCkpKX19fSxpLnlDb21wYXJhdG9yLmdldD1mdW5jdGlvbigpe3JldHVybntpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblt4XX0sY29tcGFyZTpmdW5jdGlvbihlLGkpe3JldHVybiB0LmNvbXBhcmVEb3VibGVzKG4uY2VudHJlWShlLmdldEJvdW5kcygpKSxuLmNlbnRyZVkoaS5nZXRCb3VuZHMoKSkpfX19LGkuaW50ZXJzZWN0c09wLmdldD1mdW5jdGlvbigpe3JldHVybntpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblt0LkludGVyc2VjdHNPcF19LGludGVyc2VjdHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5pbnRlcnNlY3RzKGUpfX19LGkuREVGQVVMVF9OT0RFX0NBUEFDSVRZLmdldD1mdW5jdGlvbigpe3JldHVybiAxMH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobixpKSxufShlbiksYW49ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciBlPWFyZ3VtZW50c1swXTt0LmNhbGwodGhpcyxlKX1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuY29tcHV0ZUJvdW5kcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1udWxsLGU9dGhpcy5nZXRDaGlsZEJvdW5kYWJsZXMoKS5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bnVsbD09PXQ/dD1uZXcgayhuLmdldEJvdW5kcygpKTp0LmV4cGFuZFRvSW5jbHVkZShuLmdldEJvdW5kcygpKX1yZXR1cm4gdH0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX0oUWUpLHVuPWZ1bmN0aW9uKCl7fTt1bi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sdW4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHVufSx1bi5yZWxhdGl2ZVNpZ249ZnVuY3Rpb24odCxlKXtyZXR1cm4gdDxlPy0xOnQ+ZT8xOjB9LHVuLmNvbXBhcmU9ZnVuY3Rpb24odCxlLG4pe2lmKGUuZXF1YWxzMkQobikpcmV0dXJuIDA7dmFyIGk9dW4ucmVsYXRpdmVTaWduKGUueCxuLngpLHI9dW4ucmVsYXRpdmVTaWduKGUueSxuLnkpO3N3aXRjaCh0KXtjYXNlIDA6cmV0dXJuIHVuLmNvbXBhcmVWYWx1ZShpLHIpO2Nhc2UgMTpyZXR1cm4gdW4uY29tcGFyZVZhbHVlKHIsaSk7Y2FzZSAyOnJldHVybiB1bi5jb21wYXJlVmFsdWUociwtaSk7Y2FzZSAzOnJldHVybiB1bi5jb21wYXJlVmFsdWUoLWkscik7Y2FzZSA0OnJldHVybiB1bi5jb21wYXJlVmFsdWUoLWksLXIpO2Nhc2UgNTpyZXR1cm4gdW4uY29tcGFyZVZhbHVlKC1yLC1pKTtjYXNlIDY6cmV0dXJuIHVuLmNvbXBhcmVWYWx1ZSgtcixpKTtjYXNlIDc6cmV0dXJuIHVuLmNvbXBhcmVWYWx1ZShpLC1yKX1yZXR1cm4gdHQuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoXCJpbnZhbGlkIG9jdGFudCB2YWx1ZVwiKSwwfSx1bi5jb21wYXJlVmFsdWU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdDwwPy0xOnQ+MD8xOmU8MD8tMTplPjA/MTowfTt2YXIgbG49ZnVuY3Rpb24oKXt0aGlzLl9zZWdTdHJpbmc9bnVsbCx0aGlzLmNvb3JkPW51bGwsdGhpcy5zZWdtZW50SW5kZXg9bnVsbCx0aGlzLl9zZWdtZW50T2N0YW50PW51bGwsdGhpcy5faXNJbnRlcmlvcj1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXSxpPWFyZ3VtZW50c1szXTt0aGlzLl9zZWdTdHJpbmc9dCx0aGlzLmNvb3JkPW5ldyBOKGUpLHRoaXMuc2VnbWVudEluZGV4PW4sdGhpcy5fc2VnbWVudE9jdGFudD1pLHRoaXMuX2lzSW50ZXJpb3I9IWUuZXF1YWxzMkQodC5nZXRDb29yZGluYXRlKG4pKX07bG4ucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb29yZH0sbG4ucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe3QucHJpbnQodGhpcy5jb29yZCksdC5wcmludChcIiBzZWcgIyA9IFwiK3RoaXMuc2VnbWVudEluZGV4KX0sbG4ucHJvdG90eXBlLmNvbXBhcmVUbz1mdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLnNlZ21lbnRJbmRleDxlLnNlZ21lbnRJbmRleD8tMTp0aGlzLnNlZ21lbnRJbmRleD5lLnNlZ21lbnRJbmRleD8xOnRoaXMuY29vcmQuZXF1YWxzMkQoZS5jb29yZCk/MDp1bi5jb21wYXJlKHRoaXMuX3NlZ21lbnRPY3RhbnQsdGhpcy5jb29yZCxlLmNvb3JkKX0sbG4ucHJvdG90eXBlLmlzRW5kUG9pbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10aGlzLnNlZ21lbnRJbmRleCYmIXRoaXMuX2lzSW50ZXJpb3J8fHRoaXMuc2VnbWVudEluZGV4PT09dH0sbG4ucHJvdG90eXBlLmlzSW50ZXJpb3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNJbnRlcmlvcn0sbG4ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW0ldfSxsbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gbG59O3ZhciBjbj1mdW5jdGlvbigpe3RoaXMuX25vZGVNYXA9bmV3IGMsdGhpcy5fZWRnZT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9lZGdlPXR9O2NuLnByb3RvdHlwZS5nZXRTcGxpdENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFN0O3RoaXMuYWRkRW5kcG9pbnRzKCk7Zm9yKHZhciBlPXRoaXMuaXRlcmF0b3IoKSxuPWUubmV4dCgpO2UuaGFzTmV4dCgpOyl7dmFyIGk9ZS5uZXh0KCk7dGhpcy5hZGRFZGdlQ29vcmRpbmF0ZXMobixpLHQpLG49aX1yZXR1cm4gdC50b0Nvb3JkaW5hdGVBcnJheSgpfSxjbi5wcm90b3R5cGUuYWRkQ29sbGFwc2VkTm9kZXM9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgTnQ7dGhpcy5maW5kQ29sbGFwc2VzRnJvbUluc2VydGVkTm9kZXModCksdGhpcy5maW5kQ29sbGFwc2VzRnJvbUV4aXN0aW5nVmVydGljZXModCk7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLmludFZhbHVlKCk7dGhpcy5hZGQodGhpcy5fZWRnZS5nZXRDb29yZGluYXRlKG4pLG4pfX0sY24ucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe3QucHJpbnRsbihcIkludGVyc2VjdGlvbnM6XCIpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXtlLm5leHQoKS5wcmludCh0KX19LGNuLnByb3RvdHlwZS5maW5kQ29sbGFwc2VzRnJvbUV4aXN0aW5nVmVydGljZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLl9lZGdlLnNpemUoKS0yO2UrKyl7dmFyIG49dGhpcy5fZWRnZS5nZXRDb29yZGluYXRlKGUpLGk9dGhpcy5fZWRnZS5nZXRDb29yZGluYXRlKGUrMik7bi5lcXVhbHMyRChpKSYmdC5hZGQobmV3IEQoZSsxKSl9fSxjbi5wcm90b3R5cGUuYWRkRWRnZUNvb3JkaW5hdGVzPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLl9lZGdlLmdldENvb3JkaW5hdGUoZS5zZWdtZW50SW5kZXgpLHI9ZS5pc0ludGVyaW9yKCl8fCFlLmNvb3JkLmVxdWFsczJEKGkpO24uYWRkKG5ldyBOKHQuY29vcmQpLCExKTtmb3IodmFyIG89dC5zZWdtZW50SW5kZXgrMTtvPD1lLnNlZ21lbnRJbmRleDtvKyspbi5hZGQodGhpcy5fZWRnZS5nZXRDb29yZGluYXRlKG8pKTtyJiZuLmFkZChuZXcgTihlLmNvb3JkKSl9LGNuLnByb3RvdHlwZS5pdGVyYXRvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ub2RlTWFwLnZhbHVlcygpLml0ZXJhdG9yKCl9LGNuLnByb3RvdHlwZS5hZGRTcGxpdEVkZ2VzPWZ1bmN0aW9uKHQpe3RoaXMuYWRkRW5kcG9pbnRzKCksdGhpcy5hZGRDb2xsYXBzZWROb2RlcygpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCksbj1lLm5leHQoKTtlLmhhc05leHQoKTspe3ZhciBpPWUubmV4dCgpLHI9dGhpcy5jcmVhdGVTcGxpdEVkZ2UobixpKTt0LmFkZChyKSxuPWl9fSxjbi5wcm90b3R5cGUuZmluZENvbGxhcHNlSW5kZXg9ZnVuY3Rpb24odCxlLG4pe2lmKCF0LmNvb3JkLmVxdWFsczJEKGUuY29vcmQpKXJldHVybiExO3ZhciBpPWUuc2VnbWVudEluZGV4LXQuc2VnbWVudEluZGV4O3JldHVybiBlLmlzSW50ZXJpb3IoKXx8aS0tLDE9PT1pJiYoblswXT10LnNlZ21lbnRJbmRleCsxLCEwKX0sY24ucHJvdG90eXBlLmZpbmRDb2xsYXBzZXNGcm9tSW5zZXJ0ZWROb2Rlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KDEpLmZpbGwobnVsbCksbj10aGlzLml0ZXJhdG9yKCksaT1uLm5leHQoKTtuLmhhc05leHQoKTspe3ZhciByPW4ubmV4dCgpO3RoaXMuZmluZENvbGxhcHNlSW5kZXgoaSxyLGUpJiZ0LmFkZChuZXcgRChlWzBdKSksaT1yfX0sY24ucHJvdG90eXBlLmdldEVkZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZWRnZX0sY24ucHJvdG90eXBlLmFkZEVuZHBvaW50cz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2VkZ2Uuc2l6ZSgpLTE7dGhpcy5hZGQodGhpcy5fZWRnZS5nZXRDb29yZGluYXRlKDApLDApLHRoaXMuYWRkKHRoaXMuX2VkZ2UuZ2V0Q29vcmRpbmF0ZSh0KSx0KX0sY24ucHJvdG90eXBlLmNyZWF0ZVNwbGl0RWRnZT1mdW5jdGlvbih0LGUpe3ZhciBuPWUuc2VnbWVudEluZGV4LXQuc2VnbWVudEluZGV4KzIsaT10aGlzLl9lZGdlLmdldENvb3JkaW5hdGUoZS5zZWdtZW50SW5kZXgpLHI9ZS5pc0ludGVyaW9yKCl8fCFlLmNvb3JkLmVxdWFsczJEKGkpO3J8fG4tLTt2YXIgbz1uZXcgQXJyYXkobikuZmlsbChudWxsKSxzPTA7b1tzKytdPW5ldyBOKHQuY29vcmQpO2Zvcih2YXIgYT10LnNlZ21lbnRJbmRleCsxO2E8PWUuc2VnbWVudEluZGV4O2ErKylvW3MrK109dGhpcy5fZWRnZS5nZXRDb29yZGluYXRlKGEpO3JldHVybiByJiYob1tzXT1uZXcgTihlLmNvb3JkKSksbmV3IGduKG8sdGhpcy5fZWRnZS5nZXREYXRhKCkpfSxjbi5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IGxuKHRoaXMuX2VkZ2UsdCxlLHRoaXMuX2VkZ2UuZ2V0U2VnbWVudE9jdGFudChlKSksaT10aGlzLl9ub2RlTWFwLmdldChuKTtyZXR1cm4gbnVsbCE9PWk/KHR0LmlzVHJ1ZShpLmNvb3JkLmVxdWFsczJEKHQpLFwiRm91bmQgZXF1YWwgbm9kZXMgd2l0aCBkaWZmZXJlbnQgY29vcmRpbmF0ZXNcIiksaSk6KHRoaXMuX25vZGVNYXAucHV0KG4sbiksbil9LGNuLnByb3RvdHlwZS5jaGVja1NwbGl0RWRnZXNDb3JyZWN0bmVzcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9lZGdlLmdldENvb3JkaW5hdGVzKCksbj10LmdldCgwKS5nZXRDb29yZGluYXRlKDApO2lmKCFuLmVxdWFsczJEKGVbMF0pKXRocm93IG5ldyBaKFwiYmFkIHNwbGl0IGVkZ2Ugc3RhcnQgcG9pbnQgYXQgXCIrbik7dmFyIGk9dC5nZXQodC5zaXplKCktMSkuZ2V0Q29vcmRpbmF0ZXMoKSxyPWlbaS5sZW5ndGgtMV07aWYoIXIuZXF1YWxzMkQoZVtlLmxlbmd0aC0xXSkpdGhyb3cgbmV3IFooXCJiYWQgc3BsaXQgZWRnZSBlbmQgcG9pbnQgYXQgXCIrcil9LGNuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxjbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gY259O3ZhciBwbj1mdW5jdGlvbigpe307cG4ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHBuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBwbn0scG4ub2N0YW50PWZ1bmN0aW9uKCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSYmXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO2lmKDA9PT10JiYwPT09ZSl0aHJvdyBuZXcgXyhcIkNhbm5vdCBjb21wdXRlIHRoZSBvY3RhbnQgZm9yIHBvaW50ICggXCIrdCtcIiwgXCIrZStcIiApXCIpO3ZhciBuPU1hdGguYWJzKHQpLGk9TWF0aC5hYnMoZSk7cmV0dXJuIHQ+PTA/ZT49MD9uPj1pPzA6MTpuPj1pPzc6NjplPj0wP24+PWk/MzoyOm4+PWk/NDo1fWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTiYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBOKXt2YXIgcj1hcmd1bWVudHNbMF0sbz1hcmd1bWVudHNbMV0scz1vLngtci54LGE9by55LXIueTtpZigwPT09cyYmMD09PWEpdGhyb3cgbmV3IF8oXCJDYW5ub3QgY29tcHV0ZSB0aGUgb2N0YW50IGZvciB0d28gaWRlbnRpY2FsIHBvaW50cyBcIityKTtyZXR1cm4gcG4ub2N0YW50KHMsYSl9fTt2YXIgaG49ZnVuY3Rpb24oKXt9O2huLnByb3RvdHlwZS5nZXRDb29yZGluYXRlcz1mdW5jdGlvbigpe30saG4ucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXt9LGhuLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKHQpe30saG4ucHJvdG90eXBlLmlzQ2xvc2VkPWZ1bmN0aW9uKCl7fSxobi5wcm90b3R5cGUuc2V0RGF0YT1mdW5jdGlvbih0KXt9LGhuLnByb3RvdHlwZS5nZXREYXRhPWZ1bmN0aW9uKCl7fSxobi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0saG4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGhufTt2YXIgZm49ZnVuY3Rpb24oKXt9O2ZuLnByb3RvdHlwZS5hZGRJbnRlcnNlY3Rpb249ZnVuY3Rpb24odCxlKXt9LGZuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltobl19LGZuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBmbn07dmFyIGduPWZ1bmN0aW9uKCl7dGhpcy5fbm9kZUxpc3Q9bmV3IGNuKHRoaXMpLHRoaXMuX3B0cz1udWxsLHRoaXMuX2RhdGE9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5fcHRzPXQsdGhpcy5fZGF0YT1lfTtnbi5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHRzfSxnbi5wcm90b3R5cGUuc2l6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wdHMubGVuZ3RofSxnbi5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcHRzW3RdfSxnbi5wcm90b3R5cGUuaXNDbG9zZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHRzWzBdLmVxdWFscyh0aGlzLl9wdHNbdGhpcy5fcHRzLmxlbmd0aC0xXSl9LGduLnByb3RvdHlwZS5nZXRTZWdtZW50T2N0YW50PWZ1bmN0aW9uKHQpe3JldHVybiB0PT09dGhpcy5fcHRzLmxlbmd0aC0xPy0xOnRoaXMuc2FmZU9jdGFudCh0aGlzLmdldENvb3JkaW5hdGUodCksdGhpcy5nZXRDb29yZGluYXRlKHQrMSkpfSxnbi5wcm90b3R5cGUuc2V0RGF0YT1mdW5jdGlvbih0KXt0aGlzLl9kYXRhPXR9LGduLnByb3RvdHlwZS5zYWZlT2N0YW50PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuZXF1YWxzMkQoZSk/MDpwbi5vY3RhbnQodCxlKX0sZ24ucHJvdG90eXBlLmdldERhdGE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YX0sZ24ucHJvdG90eXBlLmFkZEludGVyc2VjdGlvbj1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5hZGRJbnRlcnNlY3Rpb25Ob2RlKHQsZSl9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzNdLG89bmV3IE4obi5nZXRJbnRlcnNlY3Rpb24ocikpO3RoaXMuYWRkSW50ZXJzZWN0aW9uKG8saSl9fSxnbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gUS50b0xpbmVTdHJpbmcobmV3IHVlKHRoaXMuX3B0cykpfSxnbi5wcm90b3R5cGUuZ2V0Tm9kZUxpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbm9kZUxpc3R9LGduLnByb3RvdHlwZS5hZGRJbnRlcnNlY3Rpb25Ob2RlPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZSxpPW4rMTtpZihpPHRoaXMuX3B0cy5sZW5ndGgpe3ZhciByPXRoaXMuX3B0c1tpXTt0LmVxdWFsczJEKHIpJiYobj1pKX1yZXR1cm4gdGhpcy5fbm9kZUxpc3QuYWRkKHQsbil9LGduLnByb3RvdHlwZS5hZGRJbnRlcnNlY3Rpb25zPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9MDtpPHQuZ2V0SW50ZXJzZWN0aW9uTnVtKCk7aSsrKXRoaXMuYWRkSW50ZXJzZWN0aW9uKHQsZSxuLGkpfSxnbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bZm5dfSxnbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZ259LGduLmdldE5vZGVkU3Vic3RyaW5ncz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgTnQ7cmV0dXJuIGduLmdldE5vZGVkU3Vic3RyaW5ncyh0LGUpLGV9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPW4uaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3IubmV4dCgpLmdldE5vZGVMaXN0KCkuYWRkU3BsaXRFZGdlcyhpKX19O3ZhciBkbj1mdW5jdGlvbigpe2lmKHRoaXMucDA9bnVsbCx0aGlzLnAxPW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpdGhpcy5wMD1uZXcgTix0aGlzLnAxPW5ldyBOO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnAwPW5ldyBOKHQucDApLHRoaXMucDE9bmV3IE4odC5wMSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl0aGlzLnAwPWFyZ3VtZW50c1swXSx0aGlzLnAxPWFyZ3VtZW50c1sxXTtlbHNlIGlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1hcmd1bWVudHNbMl0scj1hcmd1bWVudHNbM107dGhpcy5wMD1uZXcgTihlLG4pLHRoaXMucDE9bmV3IE4oaSxyKX19LHluPXtzZXJpYWxWZXJzaW9uVUlEOntjb25maWd1cmFibGU6ITB9fTtkbi5wcm90b3R5cGUubWluWD1mdW5jdGlvbigpe3JldHVybiBNYXRoLm1pbih0aGlzLnAwLngsdGhpcy5wMS54KX0sZG4ucHJvdG90eXBlLm9yaWVudGF0aW9uSW5kZXg9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGRuKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1zdC5vcmllbnRhdGlvbkluZGV4KHRoaXMucDAsdGhpcy5wMSx0LnAwKSxuPXN0Lm9yaWVudGF0aW9uSW5kZXgodGhpcy5wMCx0aGlzLnAxLHQucDEpO3JldHVybiBlPj0wJiZuPj0wP01hdGgubWF4KGUsbik6ZTw9MCYmbjw9MD9NYXRoLm1heChlLG4pOjB9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOKXt2YXIgaT1hcmd1bWVudHNbMF07cmV0dXJuIHN0Lm9yaWVudGF0aW9uSW5kZXgodGhpcy5wMCx0aGlzLnAxLGkpfX0sZG4ucHJvdG90eXBlLnRvR2VvbWV0cnk9ZnVuY3Rpb24odCl7cmV0dXJuIHQuY3JlYXRlTGluZVN0cmluZyhbdGhpcy5wMCx0aGlzLnAxXSl9LGRuLnByb3RvdHlwZS5pc1ZlcnRpY2FsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucDAueD09PXRoaXMucDEueH0sZG4ucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbih0KXtpZighKHQgaW5zdGFuY2VvZiBkbikpcmV0dXJuITE7dmFyIGU9dDtyZXR1cm4gdGhpcy5wMC5lcXVhbHMoZS5wMCkmJnRoaXMucDEuZXF1YWxzKGUucDEpfSxkbi5wcm90b3R5cGUuaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBpdDtyZXR1cm4gZS5jb21wdXRlSW50ZXJzZWN0aW9uKHRoaXMucDAsdGhpcy5wMSx0LnAwLHQucDEpLGUuaGFzSW50ZXJzZWN0aW9uKCk/ZS5nZXRJbnRlcnNlY3Rpb24oMCk6bnVsbH0sZG4ucHJvdG90eXBlLnByb2plY3Q9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4pe3ZhciB0PWFyZ3VtZW50c1swXTtpZih0LmVxdWFscyh0aGlzLnAwKXx8dC5lcXVhbHModGhpcy5wMSkpcmV0dXJuIG5ldyBOKHQpO3ZhciBlPXRoaXMucHJvamVjdGlvbkZhY3Rvcih0KSxuPW5ldyBOO3JldHVybiBuLng9dGhpcy5wMC54K2UqKHRoaXMucDEueC10aGlzLnAwLngpLG4ueT10aGlzLnAwLnkrZSoodGhpcy5wMS55LXRoaXMucDAueSksbn1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGRuKXt2YXIgaT1hcmd1bWVudHNbMF0scj10aGlzLnByb2plY3Rpb25GYWN0b3IoaS5wMCksbz10aGlzLnByb2plY3Rpb25GYWN0b3IoaS5wMSk7aWYocj49MSYmbz49MSlyZXR1cm4gbnVsbDtpZihyPD0wJiZvPD0wKXJldHVybiBudWxsO3ZhciBzPXRoaXMucHJvamVjdChpLnAwKTtyPDAmJihzPXRoaXMucDApLHI+MSYmKHM9dGhpcy5wMSk7dmFyIGE9dGhpcy5wcm9qZWN0KGkucDEpO3JldHVybiBvPDAmJihhPXRoaXMucDApLG8+MSYmKGE9dGhpcy5wMSksbmV3IGRuKHMsYSl9fSxkbi5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKCl7dGhpcy5wMS5jb21wYXJlVG8odGhpcy5wMCk8MCYmdGhpcy5yZXZlcnNlKCl9LGRuLnByb3RvdHlwZS5hbmdsZT1mdW5jdGlvbigpe3JldHVybiBNYXRoLmF0YW4yKHRoaXMucDEueS10aGlzLnAwLnksdGhpcy5wMS54LXRoaXMucDAueCl9LGRuLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKHQpe3JldHVybiAwPT09dD90aGlzLnAwOnRoaXMucDF9LGRuLnByb3RvdHlwZS5kaXN0YW5jZVBlcnBlbmRpY3VsYXI9ZnVuY3Rpb24odCl7cmV0dXJuIHN0LmRpc3RhbmNlUG9pbnRMaW5lUGVycGVuZGljdWxhcih0LHRoaXMucDAsdGhpcy5wMSl9LGRuLnByb3RvdHlwZS5taW5ZPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgubWluKHRoaXMucDAueSx0aGlzLnAxLnkpfSxkbi5wcm90b3R5cGUubWlkUG9pbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gZG4ubWlkUG9pbnQodGhpcy5wMCx0aGlzLnAxKX0sZG4ucHJvdG90eXBlLnByb2plY3Rpb25GYWN0b3I9ZnVuY3Rpb24odCl7aWYodC5lcXVhbHModGhpcy5wMCkpcmV0dXJuIDA7aWYodC5lcXVhbHModGhpcy5wMSkpcmV0dXJuIDE7dmFyIGU9dGhpcy5wMS54LXRoaXMucDAueCxuPXRoaXMucDEueS10aGlzLnAwLnksaT1lKmUrbipuO2lmKGk8PTApcmV0dXJuIG0uTmFOO3JldHVybigodC54LXRoaXMucDAueCkqZSsodC55LXRoaXMucDAueSkqbikvaX0sZG4ucHJvdG90eXBlLmNsb3Nlc3RQb2ludHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5pbnRlcnNlY3Rpb24odCk7aWYobnVsbCE9PWUpcmV0dXJuW2UsZV07dmFyIG49bmV3IEFycmF5KDIpLmZpbGwobnVsbCksaT1tLk1BWF9WQUxVRSxyPW51bGwsbz10aGlzLmNsb3Nlc3RQb2ludCh0LnAwKTtpPW8uZGlzdGFuY2UodC5wMCksblswXT1vLG5bMV09dC5wMDt2YXIgcz10aGlzLmNsb3Nlc3RQb2ludCh0LnAxKTsocj1zLmRpc3RhbmNlKHQucDEpKTxpJiYoaT1yLG5bMF09cyxuWzFdPXQucDEpO3ZhciBhPXQuY2xvc2VzdFBvaW50KHRoaXMucDApOyhyPWEuZGlzdGFuY2UodGhpcy5wMCkpPGkmJihpPXIsblswXT10aGlzLnAwLG5bMV09YSk7dmFyIHU9dC5jbG9zZXN0UG9pbnQodGhpcy5wMSk7cmV0dXJuKHI9dS5kaXN0YW5jZSh0aGlzLnAxKSk8aSYmKGk9cixuWzBdPXRoaXMucDEsblsxXT11KSxufSxkbi5wcm90b3R5cGUuY2xvc2VzdFBvaW50PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucHJvamVjdGlvbkZhY3Rvcih0KTtpZihlPjAmJmU8MSlyZXR1cm4gdGhpcy5wcm9qZWN0KHQpO3JldHVybiB0aGlzLnAwLmRpc3RhbmNlKHQpPHRoaXMucDEuZGlzdGFuY2UodCk/dGhpcy5wMDp0aGlzLnAxfSxkbi5wcm90b3R5cGUubWF4WD1mdW5jdGlvbigpe3JldHVybiBNYXRoLm1heCh0aGlzLnAwLngsdGhpcy5wMS54KX0sZG4ucHJvdG90eXBlLmdldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnAwLmRpc3RhbmNlKHRoaXMucDEpfSxkbi5wcm90b3R5cGUuY29tcGFyZVRvPWZ1bmN0aW9uKHQpe3ZhciBlPXQsbj10aGlzLnAwLmNvbXBhcmVUbyhlLnAwKTtyZXR1cm4gMCE9PW4/bjp0aGlzLnAxLmNvbXBhcmVUbyhlLnAxKX0sZG4ucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnAwO3RoaXMucDA9dGhpcy5wMSx0aGlzLnAxPXR9LGRuLnByb3RvdHlwZS5lcXVhbHNUb3BvPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnAwLmVxdWFscyh0LnAwKSYmKHRoaXMucDEuZXF1YWxzKHQucDEpfHx0aGlzLnAwLmVxdWFscyh0LnAxKSkmJnRoaXMucDEuZXF1YWxzKHQucDApfSxkbi5wcm90b3R5cGUubGluZUludGVyc2VjdGlvbj1mdW5jdGlvbih0KXt0cnl7cmV0dXJuIFkuaW50ZXJzZWN0aW9uKHRoaXMucDAsdGhpcy5wMSx0LnAwLHQucDEpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIHopKXRocm93IHR9cmV0dXJuIG51bGx9LGRuLnByb3RvdHlwZS5tYXhZPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgubWF4KHRoaXMucDAueSx0aGlzLnAxLnkpfSxkbi5wcm90b3R5cGUucG9pbnRBbG9uZ09mZnNldD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMucDAueCt0Kih0aGlzLnAxLngtdGhpcy5wMC54KSxpPXRoaXMucDAueSt0Kih0aGlzLnAxLnktdGhpcy5wMC55KSxyPXRoaXMucDEueC10aGlzLnAwLngsbz10aGlzLnAxLnktdGhpcy5wMC55LHM9TWF0aC5zcXJ0KHIqcitvKm8pLGE9MCx1PTA7aWYoMCE9PWUpe2lmKHM8PTApdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbXB1dGUgb2Zmc2V0IGZyb20gemVyby1sZW5ndGggbGluZSBzZWdtZW50XCIpO2E9ZSpyL3MsdT1lKm8vc31yZXR1cm4gbmV3IE4obi11LGkrYSl9LGRuLnByb3RvdHlwZS5zZXRDb29yZGluYXRlcz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zZXRDb29yZGluYXRlcyh0LnAwLHQucDEpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0aGlzLnAwLng9ZS54LHRoaXMucDAueT1lLnksdGhpcy5wMS54PW4ueCx0aGlzLnAxLnk9bi55fX0sZG4ucHJvdG90eXBlLnNlZ21lbnRGcmFjdGlvbj1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnByb2plY3Rpb25GYWN0b3IodCk7cmV0dXJuIGU8MD9lPTA6KGU+MXx8bS5pc05hTihlKSkmJihlPTEpLGV9LGRuLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiTElORVNUUklORyggXCIrdGhpcy5wMC54K1wiIFwiK3RoaXMucDAueStcIiwgXCIrdGhpcy5wMS54K1wiIFwiK3RoaXMucDEueStcIilcIn0sZG4ucHJvdG90eXBlLmlzSG9yaXpvbnRhbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnAwLnk9PT10aGlzLnAxLnl9LGRuLnByb3RvdHlwZS5kaXN0YW5jZT1mdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZG4pe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gc3QuZGlzdGFuY2VMaW5lTGluZSh0aGlzLnAwLHRoaXMucDEsdC5wMCx0LnAxKX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gc3QuZGlzdGFuY2VQb2ludExpbmUoZSx0aGlzLnAwLHRoaXMucDEpfX0sZG4ucHJvdG90eXBlLnBvaW50QWxvbmc9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IE47cmV0dXJuIGUueD10aGlzLnAwLngrdCoodGhpcy5wMS54LXRoaXMucDAueCksZS55PXRoaXMucDAueSt0Kih0aGlzLnAxLnktdGhpcy5wMC55KSxlfSxkbi5wcm90b3R5cGUuaGFzaENvZGU9ZnVuY3Rpb24oKXt2YXIgdD1tLmRvdWJsZVRvTG9uZ0JpdHModGhpcy5wMC54KTt0Xj0zMSptLmRvdWJsZVRvTG9uZ0JpdHModGhpcy5wMC55KTt2YXIgZT1NYXRoLnRydW5jKHQpXk1hdGgudHJ1bmModD4+MzIpLG49bS5kb3VibGVUb0xvbmdCaXRzKHRoaXMucDEueCk7bl49MzEqbS5kb3VibGVUb0xvbmdCaXRzKHRoaXMucDEueSk7cmV0dXJuIGVeKE1hdGgudHJ1bmMobileTWF0aC50cnVuYyhuPj4zMikpfSxkbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bSSxlXX0sZG4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGRufSxkbi5taWRQb2ludD1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgTigodC54K2UueCkvMiwodC55K2UueSkvMil9LHluLnNlcmlhbFZlcnNpb25VSUQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB4MmQyMTcyMTM1ZjQxMWMwMH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZG4seW4pO3ZhciBfbj1mdW5jdGlvbigpe3RoaXMudGVtcEVudjE9bmV3IGssdGhpcy50ZW1wRW52Mj1uZXcgayx0aGlzLl9vdmVybGFwU2VnMT1uZXcgZG4sdGhpcy5fb3ZlcmxhcFNlZzI9bmV3IGRufTtfbi5wcm90b3R5cGUub3ZlcmxhcD1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKTtlbHNlIGlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl0saT1hcmd1bWVudHNbM107dC5nZXRMaW5lU2VnbWVudChlLHRoaXMuX292ZXJsYXBTZWcxKSxuLmdldExpbmVTZWdtZW50KGksdGhpcy5fb3ZlcmxhcFNlZzIpLHRoaXMub3ZlcmxhcCh0aGlzLl9vdmVybGFwU2VnMSx0aGlzLl9vdmVybGFwU2VnMil9fSxfbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sX24ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIF9ufTt2YXIgbW49ZnVuY3Rpb24oKXt0aGlzLl9wdHM9bnVsbCx0aGlzLl9zdGFydD1udWxsLHRoaXMuX2VuZD1udWxsLHRoaXMuX2Vudj1udWxsLHRoaXMuX2NvbnRleHQ9bnVsbCx0aGlzLl9pZD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXSxpPWFyZ3VtZW50c1szXTt0aGlzLl9wdHM9dCx0aGlzLl9zdGFydD1lLHRoaXMuX2VuZD1uLHRoaXMuX2NvbnRleHQ9aX07bW4ucHJvdG90eXBlLmdldExpbmVTZWdtZW50PWZ1bmN0aW9uKHQsZSl7ZS5wMD10aGlzLl9wdHNbdF0sZS5wMT10aGlzLl9wdHNbdCsxXX0sbW4ucHJvdG90eXBlLmNvbXB1dGVTZWxlY3Q9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dGhpcy5fcHRzW2VdLG89dGhpcy5fcHRzW25dO2lmKGkudGVtcEVudjEuaW5pdChyLG8pLG4tZT09MSlyZXR1cm4gaS5zZWxlY3QodGhpcyxlKSxudWxsO2lmKCF0LmludGVyc2VjdHMoaS50ZW1wRW52MSkpcmV0dXJuIG51bGw7dmFyIHM9TWF0aC50cnVuYygoZStuKS8yKTtlPHMmJnRoaXMuY29tcHV0ZVNlbGVjdCh0LGUscyxpKSxzPG4mJnRoaXMuY29tcHV0ZVNlbGVjdCh0LHMsbixpKX0sbW4ucHJvdG90eXBlLmdldENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLl9lbmQtdGhpcy5fc3RhcnQrMSkuZmlsbChudWxsKSxlPTAsbj10aGlzLl9zdGFydDtuPD10aGlzLl9lbmQ7bisrKXRbZSsrXT10aGlzLl9wdHNbbl07cmV0dXJuIHR9LG1uLnByb3RvdHlwZS5jb21wdXRlT3ZlcmxhcHM9ZnVuY3Rpb24odCxlKXt0aGlzLmNvbXB1dGVPdmVybGFwc0ludGVybmFsKHRoaXMuX3N0YXJ0LHRoaXMuX2VuZCx0LHQuX3N0YXJ0LHQuX2VuZCxlKX0sbW4ucHJvdG90eXBlLnNldElkPWZ1bmN0aW9uKHQpe3RoaXMuX2lkPXR9LG1uLnByb3RvdHlwZS5zZWxlY3Q9ZnVuY3Rpb24odCxlKXt0aGlzLmNvbXB1dGVTZWxlY3QodCx0aGlzLl9zdGFydCx0aGlzLl9lbmQsZSl9LG1uLnByb3RvdHlwZS5nZXRFbnZlbG9wZT1mdW5jdGlvbigpe2lmKG51bGw9PT10aGlzLl9lbnYpe3ZhciB0PXRoaXMuX3B0c1t0aGlzLl9zdGFydF0sZT10aGlzLl9wdHNbdGhpcy5fZW5kXTt0aGlzLl9lbnY9bmV3IGsodCxlKX1yZXR1cm4gdGhpcy5fZW52fSxtbi5wcm90b3R5cGUuZ2V0RW5kSW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW5kfSxtbi5wcm90b3R5cGUuZ2V0U3RhcnRJbmRleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFydH0sbW4ucHJvdG90eXBlLmdldENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29udGV4dH0sbW4ucHJvdG90eXBlLmdldElkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lkfSxtbi5wcm90b3R5cGUuY29tcHV0ZU92ZXJsYXBzSW50ZXJuYWw9ZnVuY3Rpb24odCxlLG4saSxyLG8pe3ZhciBzPXRoaXMuX3B0c1t0XSxhPXRoaXMuX3B0c1tlXSx1PW4uX3B0c1tpXSxsPW4uX3B0c1tyXTtpZihlLXQ9PTEmJnItaT09MSlyZXR1cm4gby5vdmVybGFwKHRoaXMsdCxuLGkpLG51bGw7aWYoby50ZW1wRW52MS5pbml0KHMsYSksby50ZW1wRW52Mi5pbml0KHUsbCksIW8udGVtcEVudjEuaW50ZXJzZWN0cyhvLnRlbXBFbnYyKSlyZXR1cm4gbnVsbDt2YXIgYz1NYXRoLnRydW5jKCh0K2UpLzIpLHA9TWF0aC50cnVuYygoaStyKS8yKTt0PGMmJihpPHAmJnRoaXMuY29tcHV0ZU92ZXJsYXBzSW50ZXJuYWwodCxjLG4saSxwLG8pLHA8ciYmdGhpcy5jb21wdXRlT3ZlcmxhcHNJbnRlcm5hbCh0LGMsbixwLHIsbykpLGM8ZSYmKGk8cCYmdGhpcy5jb21wdXRlT3ZlcmxhcHNJbnRlcm5hbChjLGUsbixpLHAsbykscDxyJiZ0aGlzLmNvbXB1dGVPdmVybGFwc0ludGVybmFsKGMsZSxuLHAscixvKSl9LG1uLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxtbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gbW59O3ZhciB2bj1mdW5jdGlvbigpe307dm4ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHZuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB2bn0sdm4uZ2V0Q2hhaW5TdGFydEluZGljZXM9ZnVuY3Rpb24odCl7dmFyIGU9MCxuPW5ldyBOdDtuLmFkZChuZXcgRChlKSk7ZG97dmFyIGk9dm4uZmluZENoYWluRW5kKHQsZSk7bi5hZGQobmV3IEQoaSkpLGU9aX13aGlsZShlPHQubGVuZ3RoLTEpO3JldHVybiB2bi50b0ludEFycmF5KG4pfSx2bi5maW5kQ2hhaW5FbmQ9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49ZTtuPHQubGVuZ3RoLTEmJnRbbl0uZXF1YWxzMkQodFtuKzFdKTspbisrO2lmKG4+PXQubGVuZ3RoLTEpcmV0dXJuIHQubGVuZ3RoLTE7Zm9yKHZhciBpPUJlLnF1YWRyYW50KHRbbl0sdFtuKzFdKSxyPWUrMTtyPHQubGVuZ3RoOyl7aWYoIXRbci0xXS5lcXVhbHMyRCh0W3JdKSl7aWYoQmUucXVhZHJhbnQodFtyLTFdLHRbcl0pIT09aSlicmVha31yKyt9cmV0dXJuIHItMX0sdm4uZ2V0Q2hhaW5zPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdm4uZ2V0Q2hhaW5zKHQsbnVsbCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1uZXcgTnQscj12bi5nZXRDaGFpblN0YXJ0SW5kaWNlcyhlKSxvPTA7bzxyLmxlbmd0aC0xO28rKyl7dmFyIHM9bmV3IG1uKGUscltvXSxyW28rMV0sbik7aS5hZGQocyl9cmV0dXJuIGl9fSx2bi50b0ludEFycmF5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgQXJyYXkodC5zaXplKCkpLmZpbGwobnVsbCksbj0wO248ZS5sZW5ndGg7bisrKWVbbl09dC5nZXQobikuaW50VmFsdWUoKTtyZXR1cm4gZX07dmFyIEluPWZ1bmN0aW9uKCl7fTtJbi5wcm90b3R5cGUuY29tcHV0ZU5vZGVzPWZ1bmN0aW9uKHQpe30sSW4ucHJvdG90eXBlLmdldE5vZGVkU3Vic3RyaW5ncz1mdW5jdGlvbigpe30sSW4ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LEluLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBJbn07dmFyIEVuPWZ1bmN0aW9uKCl7aWYodGhpcy5fc2VnSW50PW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNldFNlZ21lbnRJbnRlcnNlY3Rvcih0KX19O0VuLnByb3RvdHlwZS5zZXRTZWdtZW50SW50ZXJzZWN0b3I9ZnVuY3Rpb24odCl7dGhpcy5fc2VnSW50PXR9LEVuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJbl19LEVuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBFbn07dmFyIHhuPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7ZT90LmNhbGwodGhpcyxlKTp0LmNhbGwodGhpcyksdGhpcy5fbW9ub0NoYWlucz1uZXcgTnQsdGhpcy5faW5kZXg9bmV3IHNuLHRoaXMuX2lkQ291bnRlcj0wLHRoaXMuX25vZGVkU2VnU3RyaW5ncz1udWxsLHRoaXMuX25PdmVybGFwcz0wfXQmJihlLl9fcHJvdG9fXz10KSwoZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWU7dmFyIG49e1NlZ21lbnRPdmVybGFwQWN0aW9uOntjb25maWd1cmFibGU6ITB9fTtyZXR1cm4gZS5wcm90b3R5cGUuZ2V0TW9ub3RvbmVDaGFpbnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbW9ub0NoYWluc30sZS5wcm90b3R5cGUuZ2V0Tm9kZWRTdWJzdHJpbmdzPWZ1bmN0aW9uKCl7cmV0dXJuIGduLmdldE5vZGVkU3Vic3RyaW5ncyh0aGlzLl9ub2RlZFNlZ1N0cmluZ3MpfSxlLnByb3RvdHlwZS5nZXRJbmRleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbmRleH0sZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT12bi5nZXRDaGFpbnModC5nZXRDb29yZGluYXRlcygpLHQpLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLnNldElkKHRoaXMuX2lkQ291bnRlcisrKSx0aGlzLl9pbmRleC5pbnNlcnQobi5nZXRFbnZlbG9wZSgpLG4pLHRoaXMuX21vbm9DaGFpbnMuYWRkKG4pfX0sZS5wcm90b3R5cGUuY29tcHV0ZU5vZGVzPWZ1bmN0aW9uKHQpe3RoaXMuX25vZGVkU2VnU3RyaW5ncz10O2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXRoaXMuYWRkKGUubmV4dCgpKTt0aGlzLmludGVyc2VjdENoYWlucygpfSxlLnByb3RvdHlwZS5pbnRlcnNlY3RDaGFpbnM9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IE5uKHRoaXMuX3NlZ0ludCksZT10aGlzLl9tb25vQ2hhaW5zLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KWZvcih2YXIgbj1lLm5leHQoKSxpPXRoaXMuX2luZGV4LnF1ZXJ5KG4uZ2V0RW52ZWxvcGUoKSkuaXRlcmF0b3IoKTtpLmhhc05leHQoKTspe3ZhciByPWkubmV4dCgpO2lmKHIuZ2V0SWQoKT5uLmdldElkKCkmJihuLmNvbXB1dGVPdmVybGFwcyhyLHQpLHRoaXMuX25PdmVybGFwcysrKSx0aGlzLl9zZWdJbnQuaXNEb25lKCkpcmV0dXJuIG51bGx9fSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxuLlNlZ21lbnRPdmVybGFwQWN0aW9uLmdldD1mdW5jdGlvbigpe3JldHVybiBObn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxuKSxlfShFbiksTm49ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuY2FsbCh0aGlzKSx0aGlzLl9zaT1udWxsO3ZhciBlPWFyZ3VtZW50c1swXTt0aGlzLl9zaT1lfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5vdmVybGFwPWZ1bmN0aW9uKCl7aWYoNCE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHQucHJvdG90eXBlLm92ZXJsYXAuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPWFyZ3VtZW50c1syXSxyPWFyZ3VtZW50c1szXSxvPWUuZ2V0Q29udGV4dCgpLHM9aS5nZXRDb250ZXh0KCk7dGhpcy5fc2kucHJvY2Vzc0ludGVyc2VjdGlvbnMobyxuLHMscil9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9KF9uKSxDbj1mdW5jdGlvbiB0KCl7aWYodGhpcy5fcXVhZHJhbnRTZWdtZW50cz10LkRFRkFVTFRfUVVBRFJBTlRfU0VHTUVOVFMsdGhpcy5fZW5kQ2FwU3R5bGU9dC5DQVBfUk9VTkQsdGhpcy5fam9pblN0eWxlPXQuSk9JTl9ST1VORCx0aGlzLl9taXRyZUxpbWl0PXQuREVGQVVMVF9NSVRSRV9MSU1JVCx0aGlzLl9pc1NpbmdsZVNpZGVkPSExLHRoaXMuX3NpbXBsaWZ5RmFjdG9yPXQuREVGQVVMVF9TSU1QTElGWV9GQUNUT1IsMD09PWFyZ3VtZW50cy5sZW5ndGgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXTt0aGlzLnNldFF1YWRyYW50U2VnbWVudHMoZSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3RoaXMuc2V0UXVhZHJhbnRTZWdtZW50cyhuKSx0aGlzLnNldEVuZENhcFN0eWxlKGkpfWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXSxhPWFyZ3VtZW50c1szXTt0aGlzLnNldFF1YWRyYW50U2VnbWVudHMociksdGhpcy5zZXRFbmRDYXBTdHlsZShvKSx0aGlzLnNldEpvaW5TdHlsZShzKSx0aGlzLnNldE1pdHJlTGltaXQoYSl9fSxTbj17Q0FQX1JPVU5EOntjb25maWd1cmFibGU6ITB9LENBUF9GTEFUOntjb25maWd1cmFibGU6ITB9LENBUF9TUVVBUkU6e2NvbmZpZ3VyYWJsZTohMH0sSk9JTl9ST1VORDp7Y29uZmlndXJhYmxlOiEwfSxKT0lOX01JVFJFOntjb25maWd1cmFibGU6ITB9LEpPSU5fQkVWRUw6e2NvbmZpZ3VyYWJsZTohMH0sREVGQVVMVF9RVUFEUkFOVF9TRUdNRU5UUzp7Y29uZmlndXJhYmxlOiEwfSxERUZBVUxUX01JVFJFX0xJTUlUOntjb25maWd1cmFibGU6ITB9LERFRkFVTFRfU0lNUExJRllfRkFDVE9SOntjb25maWd1cmFibGU6ITB9fTtDbi5wcm90b3R5cGUuZ2V0RW5kQ2FwU3R5bGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW5kQ2FwU3R5bGV9LENuLnByb3RvdHlwZS5pc1NpbmdsZVNpZGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzU2luZ2xlU2lkZWR9LENuLnByb3RvdHlwZS5zZXRRdWFkcmFudFNlZ21lbnRzPWZ1bmN0aW9uKHQpe3RoaXMuX3F1YWRyYW50U2VnbWVudHM9dCwwPT09dGhpcy5fcXVhZHJhbnRTZWdtZW50cyYmKHRoaXMuX2pvaW5TdHlsZT1Dbi5KT0lOX0JFVkVMKSx0aGlzLl9xdWFkcmFudFNlZ21lbnRzPDAmJih0aGlzLl9qb2luU3R5bGU9Q24uSk9JTl9NSVRSRSx0aGlzLl9taXRyZUxpbWl0PU1hdGguYWJzKHRoaXMuX3F1YWRyYW50U2VnbWVudHMpKSx0PD0wJiYodGhpcy5fcXVhZHJhbnRTZWdtZW50cz0xKSx0aGlzLl9qb2luU3R5bGUhPT1Dbi5KT0lOX1JPVU5EJiYodGhpcy5fcXVhZHJhbnRTZWdtZW50cz1Dbi5ERUZBVUxUX1FVQURSQU5UX1NFR01FTlRTKX0sQ24ucHJvdG90eXBlLmdldEpvaW5TdHlsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9qb2luU3R5bGV9LENuLnByb3RvdHlwZS5zZXRKb2luU3R5bGU9ZnVuY3Rpb24odCl7dGhpcy5fam9pblN0eWxlPXR9LENuLnByb3RvdHlwZS5zZXRTaW1wbGlmeUZhY3Rvcj1mdW5jdGlvbih0KXt0aGlzLl9zaW1wbGlmeUZhY3Rvcj10PDA/MDp0fSxDbi5wcm90b3R5cGUuZ2V0U2ltcGxpZnlGYWN0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2ltcGxpZnlGYWN0b3J9LENuLnByb3RvdHlwZS5nZXRRdWFkcmFudFNlZ21lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3F1YWRyYW50U2VnbWVudHN9LENuLnByb3RvdHlwZS5zZXRFbmRDYXBTdHlsZT1mdW5jdGlvbih0KXt0aGlzLl9lbmRDYXBTdHlsZT10fSxDbi5wcm90b3R5cGUuZ2V0TWl0cmVMaW1pdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9taXRyZUxpbWl0fSxDbi5wcm90b3R5cGUuc2V0TWl0cmVMaW1pdD1mdW5jdGlvbih0KXt0aGlzLl9taXRyZUxpbWl0PXR9LENuLnByb3RvdHlwZS5zZXRTaW5nbGVTaWRlZD1mdW5jdGlvbih0KXt0aGlzLl9pc1NpbmdsZVNpZGVkPXR9LENuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxDbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gQ259LENuLmJ1ZmZlckRpc3RhbmNlRXJyb3I9ZnVuY3Rpb24odCl7dmFyIGU9TWF0aC5QSS8yL3Q7cmV0dXJuIDEtTWF0aC5jb3MoZS8yKX0sU24uQ0FQX1JPVU5ELmdldD1mdW5jdGlvbigpe3JldHVybiAxfSxTbi5DQVBfRkxBVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMn0sU24uQ0FQX1NRVUFSRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gM30sU24uSk9JTl9ST1VORC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMX0sU24uSk9JTl9NSVRSRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMn0sU24uSk9JTl9CRVZFTC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gM30sU24uREVGQVVMVF9RVUFEUkFOVF9TRUdNRU5UUy5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gOH0sU24uREVGQVVMVF9NSVRSRV9MSU1JVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gNX0sU24uREVGQVVMVF9TSU1QTElGWV9GQUNUT1IuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLjAxfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDbixTbik7dmFyIExuPWZ1bmN0aW9uKHQpe3RoaXMuX2Rpc3RhbmNlVG9sPW51bGwsdGhpcy5faXNEZWxldGVkPW51bGwsdGhpcy5fYW5nbGVPcmllbnRhdGlvbj1zdC5DT1VOVEVSQ0xPQ0tXSVNFLHRoaXMuX2lucHV0TGluZT10fHxudWxsfSxibj17SU5JVDp7Y29uZmlndXJhYmxlOiEwfSxERUxFVEU6e2NvbmZpZ3VyYWJsZTohMH0sS0VFUDp7Y29uZmlndXJhYmxlOiEwfSxOVU1fUFRTX1RPX0NIRUNLOntjb25maWd1cmFibGU6ITB9fTtMbi5wcm90b3R5cGUuaXNEZWxldGFibGU9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dGhpcy5faW5wdXRMaW5lW3RdLG89dGhpcy5faW5wdXRMaW5lW2VdLHM9dGhpcy5faW5wdXRMaW5lW25dO3JldHVybiEhdGhpcy5pc0NvbmNhdmUocixvLHMpJiYoISF0aGlzLmlzU2hhbGxvdyhyLG8scyxpKSYmdGhpcy5pc1NoYWxsb3dTYW1wbGVkKHIsbyx0LG4saSkpfSxMbi5wcm90b3R5cGUuZGVsZXRlU2hhbGxvd0NvbmNhdml0aWVzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTEsZT10aGlzLmZpbmROZXh0Tm9uRGVsZXRlZEluZGV4KHQpLG49dGhpcy5maW5kTmV4dE5vbkRlbGV0ZWRJbmRleChlKSxpPSExO248dGhpcy5faW5wdXRMaW5lLmxlbmd0aDspe3ZhciByPSExO3RoaXMuaXNEZWxldGFibGUodCxlLG4sdGhpcy5fZGlzdGFuY2VUb2wpJiYodGhpcy5faXNEZWxldGVkW2VdPUxuLkRFTEVURSxyPSEwLGk9ITApLHQ9cj9uOmUsZT10aGlzLmZpbmROZXh0Tm9uRGVsZXRlZEluZGV4KHQpLG49dGhpcy5maW5kTmV4dE5vbkRlbGV0ZWRJbmRleChlKX1yZXR1cm4gaX0sTG4ucHJvdG90eXBlLmlzU2hhbGxvd0NvbmNhdml0eT1mdW5jdGlvbih0LGUsbixpKXtpZighKHN0LmNvbXB1dGVPcmllbnRhdGlvbih0LGUsbik9PT10aGlzLl9hbmdsZU9yaWVudGF0aW9uKSlyZXR1cm4hMTtyZXR1cm4gc3QuZGlzdGFuY2VQb2ludExpbmUoZSx0LG4pPGl9LExuLnByb3RvdHlwZS5pc1NoYWxsb3dTYW1wbGVkPWZ1bmN0aW9uKHQsZSxuLGkscil7dmFyIG89TWF0aC50cnVuYygoaS1uKS9Mbi5OVU1fUFRTX1RPX0NIRUNLKTtvPD0wJiYobz0xKTtmb3IodmFyIHM9bjtzPGk7cys9bylpZighdGhpcy5pc1NoYWxsb3codCxlLHRoaXMuX2lucHV0TGluZVtzXSxyKSlyZXR1cm4hMTtyZXR1cm4hMH0sTG4ucHJvdG90eXBlLmlzQ29uY2F2ZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9c3QuY29tcHV0ZU9yaWVudGF0aW9uKHQsZSxuKT09PXRoaXMuX2FuZ2xlT3JpZW50YXRpb247cmV0dXJuIGl9LExuLnByb3RvdHlwZS5zaW1wbGlmeT1mdW5jdGlvbih0KXt0aGlzLl9kaXN0YW5jZVRvbD1NYXRoLmFicyh0KSx0PDAmJih0aGlzLl9hbmdsZU9yaWVudGF0aW9uPXN0LkNMT0NLV0lTRSksdGhpcy5faXNEZWxldGVkPW5ldyBBcnJheSh0aGlzLl9pbnB1dExpbmUubGVuZ3RoKS5maWxsKG51bGwpO3ZhciBlPSExO2Rve2U9dGhpcy5kZWxldGVTaGFsbG93Q29uY2F2aXRpZXMoKX13aGlsZShlKTtyZXR1cm4gdGhpcy5jb2xsYXBzZUxpbmUoKX0sTG4ucHJvdG90eXBlLmZpbmROZXh0Tm9uRGVsZXRlZEluZGV4PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10KzE7ZTx0aGlzLl9pbnB1dExpbmUubGVuZ3RoJiZ0aGlzLl9pc0RlbGV0ZWRbZV09PT1Mbi5ERUxFVEU7KWUrKztyZXR1cm4gZX0sTG4ucHJvdG90eXBlLmlzU2hhbGxvdz1mdW5jdGlvbih0LGUsbixpKXtyZXR1cm4gc3QuZGlzdGFuY2VQb2ludExpbmUoZSx0LG4pPGl9LExuLnByb3RvdHlwZS5jb2xsYXBzZUxpbmU9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IFN0LGU9MDtlPHRoaXMuX2lucHV0TGluZS5sZW5ndGg7ZSsrKXRoaXMuX2lzRGVsZXRlZFtlXSE9PUxuLkRFTEVURSYmdC5hZGQodGhpcy5faW5wdXRMaW5lW2VdKTtyZXR1cm4gdC50b0Nvb3JkaW5hdGVBcnJheSgpfSxMbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sTG4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIExufSxMbi5zaW1wbGlmeT1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgTG4odCkuc2ltcGxpZnkoZSl9LGJuLklOSVQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDB9LGJuLkRFTEVURS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMX0sYm4uS0VFUC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMX0sYm4uTlVNX1BUU19UT19DSEVDSy5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMTB9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKExuLGJuKTt2YXIgd249ZnVuY3Rpb24oKXt0aGlzLl9wdExpc3Q9bnVsbCx0aGlzLl9wcmVjaXNpb25Nb2RlbD1udWxsLHRoaXMuX21pbmltaW1WZXJ0ZXhEaXN0YW5jZT0wLHRoaXMuX3B0TGlzdD1uZXcgTnR9LE9uPXtDT09SRElOQVRFX0FSUkFZX1RZUEU6e2NvbmZpZ3VyYWJsZTohMH19O3duLnByb3RvdHlwZS5nZXRDb29yZGluYXRlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wdExpc3QudG9BcnJheSh3bi5DT09SRElOQVRFX0FSUkFZX1RZUEUpfSx3bi5wcm90b3R5cGUuc2V0UHJlY2lzaW9uTW9kZWw9ZnVuY3Rpb24odCl7dGhpcy5fcHJlY2lzaW9uTW9kZWw9dH0sd24ucHJvdG90eXBlLmFkZFB0PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBOKHQpO2lmKHRoaXMuX3ByZWNpc2lvbk1vZGVsLm1ha2VQcmVjaXNlKGUpLHRoaXMuaXNSZWR1bmRhbnQoZSkpcmV0dXJuIG51bGw7dGhpcy5fcHRMaXN0LmFkZChlKX0sd24ucHJvdG90eXBlLnJldmVyZT1mdW5jdGlvbigpe30sd24ucHJvdG90eXBlLmFkZFB0cz1mdW5jdGlvbih0LGUpe2lmKGUpZm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspdGhpcy5hZGRQdCh0W25dKTtlbHNlIGZvcih2YXIgaT10Lmxlbmd0aC0xO2k+PTA7aS0tKXRoaXMuYWRkUHQodFtpXSl9LHduLnByb3RvdHlwZS5pc1JlZHVuZGFudD1mdW5jdGlvbih0KXtpZih0aGlzLl9wdExpc3Quc2l6ZSgpPDEpcmV0dXJuITE7dmFyIGU9dGhpcy5fcHRMaXN0LmdldCh0aGlzLl9wdExpc3Quc2l6ZSgpLTEpO3JldHVybiB0LmRpc3RhbmNlKGUpPHRoaXMuX21pbmltaW1WZXJ0ZXhEaXN0YW5jZX0sd24ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBfZSkuY3JlYXRlTGluZVN0cmluZyh0aGlzLmdldENvb3JkaW5hdGVzKCkpLnRvU3RyaW5nKCl9LHduLnByb3RvdHlwZS5jbG9zZVJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLl9wdExpc3Quc2l6ZSgpPDEpcmV0dXJuIG51bGw7dmFyIHQ9bmV3IE4odGhpcy5fcHRMaXN0LmdldCgwKSksZT10aGlzLl9wdExpc3QuZ2V0KHRoaXMuX3B0TGlzdC5zaXplKCktMSk7aWYodC5lcXVhbHMoZSkpcmV0dXJuIG51bGw7dGhpcy5fcHRMaXN0LmFkZCh0KX0sd24ucHJvdG90eXBlLnNldE1pbmltdW1WZXJ0ZXhEaXN0YW5jZT1mdW5jdGlvbih0KXt0aGlzLl9taW5pbWltVmVydGV4RGlzdGFuY2U9dH0sd24ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHduLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB3bn0sT24uQ09PUkRJTkFURV9BUlJBWV9UWVBFLmdldD1mdW5jdGlvbigpe3JldHVybiBuZXcgQXJyYXkoMCkuZmlsbChudWxsKX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMod24sT24pO3ZhciBUbj1mdW5jdGlvbigpe30sUm49e1BJX1RJTUVTXzI6e2NvbmZpZ3VyYWJsZTohMH0sUElfT1ZFUl8yOntjb25maWd1cmFibGU6ITB9LFBJX09WRVJfNDp7Y29uZmlndXJhYmxlOiEwfSxDT1VOVEVSQ0xPQ0tXSVNFOntjb25maWd1cmFibGU6ITB9LENMT0NLV0lTRTp7Y29uZmlndXJhYmxlOiEwfSxOT05FOntjb25maWd1cmFibGU6ITB9fTtUbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sVG4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFRufSxUbi50b0RlZ3JlZXM9ZnVuY3Rpb24odCl7cmV0dXJuIDE4MCp0L01hdGguUEl9LFRuLm5vcm1hbGl6ZT1mdW5jdGlvbih0KXtmb3IoO3Q+TWF0aC5QSTspdC09VG4uUElfVElNRVNfMjtmb3IoO3Q8PS1NYXRoLlBJOyl0Kz1Ubi5QSV9USU1FU18yO3JldHVybiB0fSxUbi5hbmdsZT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIE1hdGguYXRhbjIodC55LHQueCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPW4ueC1lLngscj1uLnktZS55O3JldHVybiBNYXRoLmF0YW4yKHIsaSl9fSxUbi5pc0FjdXRlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LngtZS54LHI9dC55LWUueTtyZXR1cm4gaSoobi54LWUueCkrcioobi55LWUueSk+MH0sVG4uaXNPYnR1c2U9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQueC1lLngscj10LnktZS55O3JldHVybiBpKihuLngtZS54KStyKihuLnktZS55KTwwfSxUbi5pbnRlcmlvckFuZ2xlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1Ubi5hbmdsZShlLHQpLHI9VG4uYW5nbGUoZSxuKTtyZXR1cm4gTWF0aC5hYnMoci1pKX0sVG4ubm9ybWFsaXplUG9zaXRpdmU9ZnVuY3Rpb24odCl7aWYodDwwKXtmb3IoO3Q8MDspdCs9VG4uUElfVElNRVNfMjt0Pj1Ubi5QSV9USU1FU18yJiYodD0wKX1lbHNle2Zvcig7dD49VG4uUElfVElNRVNfMjspdC09VG4uUElfVElNRVNfMjt0PDAmJih0PTApfXJldHVybiB0fSxUbi5hbmdsZUJldHdlZW49ZnVuY3Rpb24odCxlLG4pe3ZhciBpPVRuLmFuZ2xlKGUsdCkscj1Ubi5hbmdsZShlLG4pO3JldHVybiBUbi5kaWZmKGkscil9LFRuLmRpZmY9ZnVuY3Rpb24odCxlKXt2YXIgbj1udWxsO3JldHVybihuPXQ8ZT9lLXQ6dC1lKT5NYXRoLlBJJiYobj0yKk1hdGguUEktbiksbn0sVG4udG9SYWRpYW5zPWZ1bmN0aW9uKHQpe3JldHVybiB0Kk1hdGguUEkvMTgwfSxUbi5nZXRUdXJuPWZ1bmN0aW9uKHQsZSl7dmFyIG49TWF0aC5zaW4oZS10KTtyZXR1cm4gbj4wP1RuLkNPVU5URVJDTE9DS1dJU0U6bjwwP1RuLkNMT0NLV0lTRTpUbi5OT05FfSxUbi5hbmdsZUJldHdlZW5PcmllbnRlZD1mdW5jdGlvbih0LGUsbil7dmFyIGk9VG4uYW5nbGUoZSx0KSxyPVRuLmFuZ2xlKGUsbiktaTtyZXR1cm4gcjw9LU1hdGguUEk/citUbi5QSV9USU1FU18yOnI+TWF0aC5QST9yLVRuLlBJX1RJTUVTXzI6cn0sUm4uUElfVElNRVNfMi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMipNYXRoLlBJfSxSbi5QSV9PVkVSXzIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguUEkvMn0sUm4uUElfT1ZFUl80LmdldD1mdW5jdGlvbigpe3JldHVybiBNYXRoLlBJLzR9LFJuLkNPVU5URVJDTE9DS1dJU0UuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHN0LkNPVU5URVJDTE9DS1dJU0V9LFJuLkNMT0NLV0lTRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gc3QuQ0xPQ0tXSVNFfSxSbi5OT05FLmdldD1mdW5jdGlvbigpe3JldHVybiBzdC5DT0xMSU5FQVJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFRuLFJuKTt2YXIgUG49ZnVuY3Rpb24gdCgpe3RoaXMuX21heEN1cnZlU2VnbWVudEVycm9yPTAsdGhpcy5fZmlsbGV0QW5nbGVRdWFudHVtPW51bGwsdGhpcy5fY2xvc2luZ1NlZ0xlbmd0aEZhY3Rvcj0xLHRoaXMuX3NlZ0xpc3Q9bnVsbCx0aGlzLl9kaXN0YW5jZT0wLHRoaXMuX3ByZWNpc2lvbk1vZGVsPW51bGwsdGhpcy5fYnVmUGFyYW1zPW51bGwsdGhpcy5fbGk9bnVsbCx0aGlzLl9zMD1udWxsLHRoaXMuX3MxPW51bGwsdGhpcy5fczI9bnVsbCx0aGlzLl9zZWcwPW5ldyBkbix0aGlzLl9zZWcxPW5ldyBkbix0aGlzLl9vZmZzZXQwPW5ldyBkbix0aGlzLl9vZmZzZXQxPW5ldyBkbix0aGlzLl9zaWRlPTAsdGhpcy5faGFzTmFycm93Q29uY2F2ZUFuZ2xlPSExO3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPWFyZ3VtZW50c1syXTt0aGlzLl9wcmVjaXNpb25Nb2RlbD1lLHRoaXMuX2J1ZlBhcmFtcz1uLHRoaXMuX2xpPW5ldyBpdCx0aGlzLl9maWxsZXRBbmdsZVF1YW50dW09TWF0aC5QSS8yL24uZ2V0UXVhZHJhbnRTZWdtZW50cygpLG4uZ2V0UXVhZHJhbnRTZWdtZW50cygpPj04JiZuLmdldEpvaW5TdHlsZSgpPT09Q24uSk9JTl9ST1VORCYmKHRoaXMuX2Nsb3NpbmdTZWdMZW5ndGhGYWN0b3I9dC5NQVhfQ0xPU0lOR19TRUdfTEVOX0ZBQ1RPUiksdGhpcy5pbml0KGkpfSxEbj17T0ZGU0VUX1NFR01FTlRfU0VQQVJBVElPTl9GQUNUT1I6e2NvbmZpZ3VyYWJsZTohMH0sSU5TSURFX1RVUk5fVkVSVEVYX1NOQVBfRElTVEFOQ0VfRkFDVE9SOntjb25maWd1cmFibGU6ITB9LENVUlZFX1ZFUlRFWF9TTkFQX0RJU1RBTkNFX0ZBQ1RPUjp7Y29uZmlndXJhYmxlOiEwfSxNQVhfQ0xPU0lOR19TRUdfTEVOX0ZBQ1RPUjp7Y29uZmlndXJhYmxlOiEwfX07UG4ucHJvdG90eXBlLmFkZE5leHRTZWdtZW50PWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fczA9dGhpcy5fczEsdGhpcy5fczE9dGhpcy5fczIsdGhpcy5fczI9dCx0aGlzLl9zZWcwLnNldENvb3JkaW5hdGVzKHRoaXMuX3MwLHRoaXMuX3MxKSx0aGlzLmNvbXB1dGVPZmZzZXRTZWdtZW50KHRoaXMuX3NlZzAsdGhpcy5fc2lkZSx0aGlzLl9kaXN0YW5jZSx0aGlzLl9vZmZzZXQwKSx0aGlzLl9zZWcxLnNldENvb3JkaW5hdGVzKHRoaXMuX3MxLHRoaXMuX3MyKSx0aGlzLmNvbXB1dGVPZmZzZXRTZWdtZW50KHRoaXMuX3NlZzEsdGhpcy5fc2lkZSx0aGlzLl9kaXN0YW5jZSx0aGlzLl9vZmZzZXQxKSx0aGlzLl9zMS5lcXVhbHModGhpcy5fczIpKXJldHVybiBudWxsO3ZhciBuPXN0LmNvbXB1dGVPcmllbnRhdGlvbih0aGlzLl9zMCx0aGlzLl9zMSx0aGlzLl9zMiksaT1uPT09c3QuQ0xPQ0tXSVNFJiZ0aGlzLl9zaWRlPT09U2UuTEVGVHx8bj09PXN0LkNPVU5URVJDTE9DS1dJU0UmJnRoaXMuX3NpZGU9PT1TZS5SSUdIVDswPT09bj90aGlzLmFkZENvbGxpbmVhcihlKTppP3RoaXMuYWRkT3V0c2lkZVR1cm4obixlKTp0aGlzLmFkZEluc2lkZVR1cm4obixlKX0sUG4ucHJvdG90eXBlLmFkZExpbmVFbmRDYXA9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgZG4odCxlKSxpPW5ldyBkbjt0aGlzLmNvbXB1dGVPZmZzZXRTZWdtZW50KG4sU2UuTEVGVCx0aGlzLl9kaXN0YW5jZSxpKTt2YXIgcj1uZXcgZG47dGhpcy5jb21wdXRlT2Zmc2V0U2VnbWVudChuLFNlLlJJR0hULHRoaXMuX2Rpc3RhbmNlLHIpO3ZhciBvPWUueC10Lngscz1lLnktdC55LGE9TWF0aC5hdGFuMihzLG8pO3N3aXRjaCh0aGlzLl9idWZQYXJhbXMuZ2V0RW5kQ2FwU3R5bGUoKSl7Y2FzZSBDbi5DQVBfUk9VTkQ6dGhpcy5fc2VnTGlzdC5hZGRQdChpLnAxKSx0aGlzLmFkZEZpbGxldEFyYyhlLGErTWF0aC5QSS8yLGEtTWF0aC5QSS8yLHN0LkNMT0NLV0lTRSx0aGlzLl9kaXN0YW5jZSksdGhpcy5fc2VnTGlzdC5hZGRQdChyLnAxKTticmVhaztjYXNlIENuLkNBUF9GTEFUOnRoaXMuX3NlZ0xpc3QuYWRkUHQoaS5wMSksdGhpcy5fc2VnTGlzdC5hZGRQdChyLnAxKTticmVhaztjYXNlIENuLkNBUF9TUVVBUkU6dmFyIHU9bmV3IE47dS54PU1hdGguYWJzKHRoaXMuX2Rpc3RhbmNlKSpNYXRoLmNvcyhhKSx1Lnk9TWF0aC5hYnModGhpcy5fZGlzdGFuY2UpKk1hdGguc2luKGEpO3ZhciBsPW5ldyBOKGkucDEueCt1LngsaS5wMS55K3UueSksYz1uZXcgTihyLnAxLngrdS54LHIucDEueSt1LnkpO3RoaXMuX3NlZ0xpc3QuYWRkUHQobCksdGhpcy5fc2VnTGlzdC5hZGRQdChjKX19LFBuLnByb3RvdHlwZS5nZXRDb29yZGluYXRlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZWdMaXN0LmdldENvb3JkaW5hdGVzKCl9LFBuLnByb3RvdHlwZS5hZGRNaXRyZUpvaW49ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9ITAsbz1udWxsO3RyeXtvPVkuaW50ZXJzZWN0aW9uKGUucDAsZS5wMSxuLnAwLG4ucDEpOyhpPD0wPzE6by5kaXN0YW5jZSh0KS9NYXRoLmFicyhpKSk+dGhpcy5fYnVmUGFyYW1zLmdldE1pdHJlTGltaXQoKSYmKHI9ITEpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIHopKXRocm93IHQ7bz1uZXcgTigwLDApLHI9ITF9cj90aGlzLl9zZWdMaXN0LmFkZFB0KG8pOnRoaXMuYWRkTGltaXRlZE1pdHJlSm9pbihlLG4saSx0aGlzLl9idWZQYXJhbXMuZ2V0TWl0cmVMaW1pdCgpKX0sUG4ucHJvdG90eXBlLmFkZEZpbGxldENvcm5lcj1mdW5jdGlvbih0LGUsbixpLHIpe3ZhciBvPWUueC10Lngscz1lLnktdC55LGE9TWF0aC5hdGFuMihzLG8pLHU9bi54LXQueCxsPW4ueS10LnksYz1NYXRoLmF0YW4yKGwsdSk7aT09PXN0LkNMT0NLV0lTRT9hPD1jJiYoYSs9MipNYXRoLlBJKTphPj1jJiYoYS09MipNYXRoLlBJKSx0aGlzLl9zZWdMaXN0LmFkZFB0KGUpLHRoaXMuYWRkRmlsbGV0QXJjKHQsYSxjLGksciksdGhpcy5fc2VnTGlzdC5hZGRQdChuKX0sUG4ucHJvdG90eXBlLmFkZE91dHNpZGVUdXJuPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fb2Zmc2V0MC5wMS5kaXN0YW5jZSh0aGlzLl9vZmZzZXQxLnAwKTx0aGlzLl9kaXN0YW5jZSpQbi5PRkZTRVRfU0VHTUVOVF9TRVBBUkFUSU9OX0ZBQ1RPUilyZXR1cm4gdGhpcy5fc2VnTGlzdC5hZGRQdCh0aGlzLl9vZmZzZXQwLnAxKSxudWxsO3RoaXMuX2J1ZlBhcmFtcy5nZXRKb2luU3R5bGUoKT09PUNuLkpPSU5fTUlUUkU/dGhpcy5hZGRNaXRyZUpvaW4odGhpcy5fczEsdGhpcy5fb2Zmc2V0MCx0aGlzLl9vZmZzZXQxLHRoaXMuX2Rpc3RhbmNlKTp0aGlzLl9idWZQYXJhbXMuZ2V0Sm9pblN0eWxlKCk9PT1Dbi5KT0lOX0JFVkVMP3RoaXMuYWRkQmV2ZWxKb2luKHRoaXMuX29mZnNldDAsdGhpcy5fb2Zmc2V0MSk6KGUmJnRoaXMuX3NlZ0xpc3QuYWRkUHQodGhpcy5fb2Zmc2V0MC5wMSksdGhpcy5hZGRGaWxsZXRDb3JuZXIodGhpcy5fczEsdGhpcy5fb2Zmc2V0MC5wMSx0aGlzLl9vZmZzZXQxLnAwLHQsdGhpcy5fZGlzdGFuY2UpLHRoaXMuX3NlZ0xpc3QuYWRkUHQodGhpcy5fb2Zmc2V0MS5wMCkpfSxQbi5wcm90b3R5cGUuY3JlYXRlU3F1YXJlPWZ1bmN0aW9uKHQpe3RoaXMuX3NlZ0xpc3QuYWRkUHQobmV3IE4odC54K3RoaXMuX2Rpc3RhbmNlLHQueSt0aGlzLl9kaXN0YW5jZSkpLHRoaXMuX3NlZ0xpc3QuYWRkUHQobmV3IE4odC54K3RoaXMuX2Rpc3RhbmNlLHQueS10aGlzLl9kaXN0YW5jZSkpLHRoaXMuX3NlZ0xpc3QuYWRkUHQobmV3IE4odC54LXRoaXMuX2Rpc3RhbmNlLHQueS10aGlzLl9kaXN0YW5jZSkpLHRoaXMuX3NlZ0xpc3QuYWRkUHQobmV3IE4odC54LXRoaXMuX2Rpc3RhbmNlLHQueSt0aGlzLl9kaXN0YW5jZSkpLHRoaXMuX3NlZ0xpc3QuY2xvc2VSaW5nKCl9LFBuLnByb3RvdHlwZS5hZGRTZWdtZW50cz1mdW5jdGlvbih0LGUpe3RoaXMuX3NlZ0xpc3QuYWRkUHRzKHQsZSl9LFBuLnByb3RvdHlwZS5hZGRGaXJzdFNlZ21lbnQ9ZnVuY3Rpb24oKXt0aGlzLl9zZWdMaXN0LmFkZFB0KHRoaXMuX29mZnNldDEucDApfSxQbi5wcm90b3R5cGUuYWRkTGFzdFNlZ21lbnQ9ZnVuY3Rpb24oKXt0aGlzLl9zZWdMaXN0LmFkZFB0KHRoaXMuX29mZnNldDEucDEpfSxQbi5wcm90b3R5cGUuaW5pdFNpZGVTZWdtZW50cz1mdW5jdGlvbih0LGUsbil7dGhpcy5fczE9dCx0aGlzLl9zMj1lLHRoaXMuX3NpZGU9bix0aGlzLl9zZWcxLnNldENvb3JkaW5hdGVzKHQsZSksdGhpcy5jb21wdXRlT2Zmc2V0U2VnbWVudCh0aGlzLl9zZWcxLG4sdGhpcy5fZGlzdGFuY2UsdGhpcy5fb2Zmc2V0MSl9LFBuLnByb3RvdHlwZS5hZGRMaW1pdGVkTWl0cmVKb2luPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXRoaXMuX3NlZzAucDEsbz1Ubi5hbmdsZShyLHRoaXMuX3NlZzAucDApLHM9VG4uYW5nbGVCZXR3ZWVuT3JpZW50ZWQodGhpcy5fc2VnMC5wMCxyLHRoaXMuX3NlZzEucDEpLzIsYT1Ubi5ub3JtYWxpemUobytzKSx1PVRuLm5vcm1hbGl6ZShhK01hdGguUEkpLGw9aSpuLGM9bi1sKk1hdGguYWJzKE1hdGguc2luKHMpKSxwPXIueCtsKk1hdGguY29zKHUpLGg9ci55K2wqTWF0aC5zaW4odSksZj1uZXcgTihwLGgpLGc9bmV3IGRuKHIsZiksZD1nLnBvaW50QWxvbmdPZmZzZXQoMSxjKSx5PWcucG9pbnRBbG9uZ09mZnNldCgxLC1jKTt0aGlzLl9zaWRlPT09U2UuTEVGVD8odGhpcy5fc2VnTGlzdC5hZGRQdChkKSx0aGlzLl9zZWdMaXN0LmFkZFB0KHkpKToodGhpcy5fc2VnTGlzdC5hZGRQdCh5KSx0aGlzLl9zZWdMaXN0LmFkZFB0KGQpKX0sUG4ucHJvdG90eXBlLmNvbXB1dGVPZmZzZXRTZWdtZW50PWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPWU9PT1TZS5MRUZUPzE6LTEsbz10LnAxLngtdC5wMC54LHM9dC5wMS55LXQucDAueSxhPU1hdGguc3FydChvKm8rcypzKSx1PXIqbipvL2EsbD1yKm4qcy9hO2kucDAueD10LnAwLngtbCxpLnAwLnk9dC5wMC55K3UsaS5wMS54PXQucDEueC1sLGkucDEueT10LnAxLnkrdX0sUG4ucHJvdG90eXBlLmFkZEZpbGxldEFyYz1mdW5jdGlvbih0LGUsbixpLHIpe3ZhciBvPWk9PT1zdC5DTE9DS1dJU0U/LTE6MSxzPU1hdGguYWJzKGUtbiksYT1NYXRoLnRydW5jKHMvdGhpcy5fZmlsbGV0QW5nbGVRdWFudHVtKy41KTtpZihhPDEpcmV0dXJuIG51bGw7Zm9yKHZhciB1PXMvYSxsPTAsYz1uZXcgTjtsPHM7KXt2YXIgcD1lK28qbDtjLng9dC54K3IqTWF0aC5jb3MocCksYy55PXQueStyKk1hdGguc2luKHApLHRoaXMuX3NlZ0xpc3QuYWRkUHQoYyksbCs9dX19LFBuLnByb3RvdHlwZS5hZGRJbnNpZGVUdXJuPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fbGkuY29tcHV0ZUludGVyc2VjdGlvbih0aGlzLl9vZmZzZXQwLnAwLHRoaXMuX29mZnNldDAucDEsdGhpcy5fb2Zmc2V0MS5wMCx0aGlzLl9vZmZzZXQxLnAxKSx0aGlzLl9saS5oYXNJbnRlcnNlY3Rpb24oKSl0aGlzLl9zZWdMaXN0LmFkZFB0KHRoaXMuX2xpLmdldEludGVyc2VjdGlvbigwKSk7ZWxzZSBpZih0aGlzLl9oYXNOYXJyb3dDb25jYXZlQW5nbGU9ITAsdGhpcy5fb2Zmc2V0MC5wMS5kaXN0YW5jZSh0aGlzLl9vZmZzZXQxLnAwKTx0aGlzLl9kaXN0YW5jZSpQbi5JTlNJREVfVFVSTl9WRVJURVhfU05BUF9ESVNUQU5DRV9GQUNUT1IpdGhpcy5fc2VnTGlzdC5hZGRQdCh0aGlzLl9vZmZzZXQwLnAxKTtlbHNle2lmKHRoaXMuX3NlZ0xpc3QuYWRkUHQodGhpcy5fb2Zmc2V0MC5wMSksdGhpcy5fY2xvc2luZ1NlZ0xlbmd0aEZhY3Rvcj4wKXt2YXIgbj1uZXcgTigodGhpcy5fY2xvc2luZ1NlZ0xlbmd0aEZhY3Rvcip0aGlzLl9vZmZzZXQwLnAxLngrdGhpcy5fczEueCkvKHRoaXMuX2Nsb3NpbmdTZWdMZW5ndGhGYWN0b3IrMSksKHRoaXMuX2Nsb3NpbmdTZWdMZW5ndGhGYWN0b3IqdGhpcy5fb2Zmc2V0MC5wMS55K3RoaXMuX3MxLnkpLyh0aGlzLl9jbG9zaW5nU2VnTGVuZ3RoRmFjdG9yKzEpKTt0aGlzLl9zZWdMaXN0LmFkZFB0KG4pO3ZhciBpPW5ldyBOKCh0aGlzLl9jbG9zaW5nU2VnTGVuZ3RoRmFjdG9yKnRoaXMuX29mZnNldDEucDAueCt0aGlzLl9zMS54KS8odGhpcy5fY2xvc2luZ1NlZ0xlbmd0aEZhY3RvcisxKSwodGhpcy5fY2xvc2luZ1NlZ0xlbmd0aEZhY3Rvcip0aGlzLl9vZmZzZXQxLnAwLnkrdGhpcy5fczEueSkvKHRoaXMuX2Nsb3NpbmdTZWdMZW5ndGhGYWN0b3IrMSkpO3RoaXMuX3NlZ0xpc3QuYWRkUHQoaSl9ZWxzZSB0aGlzLl9zZWdMaXN0LmFkZFB0KHRoaXMuX3MxKTt0aGlzLl9zZWdMaXN0LmFkZFB0KHRoaXMuX29mZnNldDEucDApfX0sUG4ucHJvdG90eXBlLmNyZWF0ZUNpcmNsZT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgTih0LngrdGhpcy5fZGlzdGFuY2UsdC55KTt0aGlzLl9zZWdMaXN0LmFkZFB0KGUpLHRoaXMuYWRkRmlsbGV0QXJjKHQsMCwyKk1hdGguUEksLTEsdGhpcy5fZGlzdGFuY2UpLHRoaXMuX3NlZ0xpc3QuY2xvc2VSaW5nKCl9LFBuLnByb3RvdHlwZS5hZGRCZXZlbEpvaW49ZnVuY3Rpb24odCxlKXt0aGlzLl9zZWdMaXN0LmFkZFB0KHQucDEpLHRoaXMuX3NlZ0xpc3QuYWRkUHQoZS5wMCl9LFBuLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKHQpe3RoaXMuX2Rpc3RhbmNlPXQsdGhpcy5fbWF4Q3VydmVTZWdtZW50RXJyb3I9dCooMS1NYXRoLmNvcyh0aGlzLl9maWxsZXRBbmdsZVF1YW50dW0vMikpLHRoaXMuX3NlZ0xpc3Q9bmV3IHduLHRoaXMuX3NlZ0xpc3Quc2V0UHJlY2lzaW9uTW9kZWwodGhpcy5fcHJlY2lzaW9uTW9kZWwpLHRoaXMuX3NlZ0xpc3Quc2V0TWluaW11bVZlcnRleERpc3RhbmNlKHQqUG4uQ1VSVkVfVkVSVEVYX1NOQVBfRElTVEFOQ0VfRkFDVE9SKX0sUG4ucHJvdG90eXBlLmFkZENvbGxpbmVhcj1mdW5jdGlvbih0KXt0aGlzLl9saS5jb21wdXRlSW50ZXJzZWN0aW9uKHRoaXMuX3MwLHRoaXMuX3MxLHRoaXMuX3MxLHRoaXMuX3MyKTt0aGlzLl9saS5nZXRJbnRlcnNlY3Rpb25OdW0oKT49MiYmKHRoaXMuX2J1ZlBhcmFtcy5nZXRKb2luU3R5bGUoKT09PUNuLkpPSU5fQkVWRUx8fHRoaXMuX2J1ZlBhcmFtcy5nZXRKb2luU3R5bGUoKT09PUNuLkpPSU5fTUlUUkU/KHQmJnRoaXMuX3NlZ0xpc3QuYWRkUHQodGhpcy5fb2Zmc2V0MC5wMSksdGhpcy5fc2VnTGlzdC5hZGRQdCh0aGlzLl9vZmZzZXQxLnAwKSk6dGhpcy5hZGRGaWxsZXRDb3JuZXIodGhpcy5fczEsdGhpcy5fb2Zmc2V0MC5wMSx0aGlzLl9vZmZzZXQxLnAwLHN0LkNMT0NLV0lTRSx0aGlzLl9kaXN0YW5jZSkpfSxQbi5wcm90b3R5cGUuY2xvc2VSaW5nPWZ1bmN0aW9uKCl7dGhpcy5fc2VnTGlzdC5jbG9zZVJpbmcoKX0sUG4ucHJvdG90eXBlLmhhc05hcnJvd0NvbmNhdmVBbmdsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9oYXNOYXJyb3dDb25jYXZlQW5nbGV9LFBuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxQbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gUG59LERuLk9GRlNFVF9TRUdNRU5UX1NFUEFSQVRJT05fRkFDVE9SLmdldD1mdW5jdGlvbigpe3JldHVybi4wMDF9LERuLklOU0lERV9UVVJOX1ZFUlRFWF9TTkFQX0RJU1RBTkNFX0ZBQ1RPUi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4uMDAxfSxEbi5DVVJWRV9WRVJURVhfU05BUF9ESVNUQU5DRV9GQUNUT1IuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDFlLTZ9LERuLk1BWF9DTE9TSU5HX1NFR19MRU5fRkFDVE9SLmdldD1mdW5jdGlvbigpe3JldHVybiA4MH0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUG4sRG4pO3ZhciBNbj1mdW5jdGlvbigpe3RoaXMuX2Rpc3RhbmNlPTAsdGhpcy5fcHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLl9idWZQYXJhbXM9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5fcHJlY2lzaW9uTW9kZWw9dCx0aGlzLl9idWZQYXJhbXM9ZX07TW4ucHJvdG90eXBlLmdldE9mZnNldEN1cnZlPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fZGlzdGFuY2U9ZSwwPT09ZSlyZXR1cm4gbnVsbDt2YXIgbj1lPDAsaT1NYXRoLmFicyhlKSxyPXRoaXMuZ2V0U2VnR2VuKGkpO3QubGVuZ3RoPD0xP3RoaXMuY29tcHV0ZVBvaW50Q3VydmUodFswXSxyKTp0aGlzLmNvbXB1dGVPZmZzZXRDdXJ2ZSh0LG4scik7dmFyIG89ci5nZXRDb29yZGluYXRlcygpO3JldHVybiBuJiZMdC5yZXZlcnNlKG8pLG99LE1uLnByb3RvdHlwZS5jb21wdXRlU2luZ2xlU2lkZWRCdWZmZXJDdXJ2ZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5zaW1wbGlmeVRvbGVyYW5jZSh0aGlzLl9kaXN0YW5jZSk7aWYoZSl7bi5hZGRTZWdtZW50cyh0LCEwKTt2YXIgcj1Mbi5zaW1wbGlmeSh0LC1pKSxvPXIubGVuZ3RoLTE7bi5pbml0U2lkZVNlZ21lbnRzKHJbb10scltvLTFdLFNlLkxFRlQpLG4uYWRkRmlyc3RTZWdtZW50KCk7Zm9yKHZhciBzPW8tMjtzPj0wO3MtLSluLmFkZE5leHRTZWdtZW50KHJbc10sITApfWVsc2V7bi5hZGRTZWdtZW50cyh0LCExKTt2YXIgYT1Mbi5zaW1wbGlmeSh0LGkpLHU9YS5sZW5ndGgtMTtuLmluaXRTaWRlU2VnbWVudHMoYVswXSxhWzFdLFNlLkxFRlQpLG4uYWRkRmlyc3RTZWdtZW50KCk7Zm9yKHZhciBsPTI7bDw9dTtsKyspbi5hZGROZXh0U2VnbWVudChhW2xdLCEwKX1uLmFkZExhc3RTZWdtZW50KCksbi5jbG9zZVJpbmcoKX0sTW4ucHJvdG90eXBlLmNvbXB1dGVSaW5nQnVmZmVyQ3VydmU9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuc2ltcGxpZnlUb2xlcmFuY2UodGhpcy5fZGlzdGFuY2UpO2U9PT1TZS5SSUdIVCYmKGk9LWkpO3ZhciByPUxuLnNpbXBsaWZ5KHQsaSksbz1yLmxlbmd0aC0xO24uaW5pdFNpZGVTZWdtZW50cyhyW28tMV0sclswXSxlKTtmb3IodmFyIHM9MTtzPD1vO3MrKyl7dmFyIGE9MSE9PXM7bi5hZGROZXh0U2VnbWVudChyW3NdLGEpfW4uY2xvc2VSaW5nKCl9LE1uLnByb3RvdHlwZS5jb21wdXRlTGluZUJ1ZmZlckN1cnZlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5zaW1wbGlmeVRvbGVyYW5jZSh0aGlzLl9kaXN0YW5jZSksaT1Mbi5zaW1wbGlmeSh0LG4pLHI9aS5sZW5ndGgtMTtlLmluaXRTaWRlU2VnbWVudHMoaVswXSxpWzFdLFNlLkxFRlQpO2Zvcih2YXIgbz0yO288PXI7bysrKWUuYWRkTmV4dFNlZ21lbnQoaVtvXSwhMCk7ZS5hZGRMYXN0U2VnbWVudCgpLGUuYWRkTGluZUVuZENhcChpW3ItMV0saVtyXSk7dmFyIHM9TG4uc2ltcGxpZnkodCwtbiksYT1zLmxlbmd0aC0xO2UuaW5pdFNpZGVTZWdtZW50cyhzW2FdLHNbYS0xXSxTZS5MRUZUKTtmb3IodmFyIHU9YS0yO3U+PTA7dS0tKWUuYWRkTmV4dFNlZ21lbnQoc1t1XSwhMCk7ZS5hZGRMYXN0U2VnbWVudCgpLGUuYWRkTGluZUVuZENhcChzWzFdLHNbMF0pLGUuY2xvc2VSaW5nKCl9LE1uLnByb3RvdHlwZS5jb21wdXRlUG9pbnRDdXJ2ZT1mdW5jdGlvbih0LGUpe3N3aXRjaCh0aGlzLl9idWZQYXJhbXMuZ2V0RW5kQ2FwU3R5bGUoKSl7Y2FzZSBDbi5DQVBfUk9VTkQ6ZS5jcmVhdGVDaXJjbGUodCk7YnJlYWs7Y2FzZSBDbi5DQVBfU1FVQVJFOmUuY3JlYXRlU3F1YXJlKHQpfX0sTW4ucHJvdG90eXBlLmdldExpbmVDdXJ2ZT1mdW5jdGlvbih0LGUpe2lmKHRoaXMuX2Rpc3RhbmNlPWUsZTwwJiYhdGhpcy5fYnVmUGFyYW1zLmlzU2luZ2xlU2lkZWQoKSlyZXR1cm4gbnVsbDtpZigwPT09ZSlyZXR1cm4gbnVsbDt2YXIgbj1NYXRoLmFicyhlKSxpPXRoaXMuZ2V0U2VnR2VuKG4pO2lmKHQubGVuZ3RoPD0xKXRoaXMuY29tcHV0ZVBvaW50Q3VydmUodFswXSxpKTtlbHNlIGlmKHRoaXMuX2J1ZlBhcmFtcy5pc1NpbmdsZVNpZGVkKCkpe3ZhciByPWU8MDt0aGlzLmNvbXB1dGVTaW5nbGVTaWRlZEJ1ZmZlckN1cnZlKHQscixpKX1lbHNlIHRoaXMuY29tcHV0ZUxpbmVCdWZmZXJDdXJ2ZSh0LGkpO3JldHVybiBpLmdldENvb3JkaW5hdGVzKCl9LE1uLnByb3RvdHlwZS5nZXRCdWZmZXJQYXJhbWV0ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2J1ZlBhcmFtc30sTW4ucHJvdG90eXBlLnNpbXBsaWZ5VG9sZXJhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiB0KnRoaXMuX2J1ZlBhcmFtcy5nZXRTaW1wbGlmeUZhY3RvcigpfSxNbi5wcm90b3R5cGUuZ2V0UmluZ0N1cnZlPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLl9kaXN0YW5jZT1uLHQubGVuZ3RoPD0yKXJldHVybiB0aGlzLmdldExpbmVDdXJ2ZSh0LG4pO2lmKDA9PT1uKXJldHVybiBNbi5jb3B5Q29vcmRpbmF0ZXModCk7dmFyIGk9dGhpcy5nZXRTZWdHZW4obik7cmV0dXJuIHRoaXMuY29tcHV0ZVJpbmdCdWZmZXJDdXJ2ZSh0LGUsaSksaS5nZXRDb29yZGluYXRlcygpfSxNbi5wcm90b3R5cGUuY29tcHV0ZU9mZnNldEN1cnZlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLnNpbXBsaWZ5VG9sZXJhbmNlKHRoaXMuX2Rpc3RhbmNlKTtpZihlKXt2YXIgcj1Mbi5zaW1wbGlmeSh0LC1pKSxvPXIubGVuZ3RoLTE7bi5pbml0U2lkZVNlZ21lbnRzKHJbb10scltvLTFdLFNlLkxFRlQpLG4uYWRkRmlyc3RTZWdtZW50KCk7Zm9yKHZhciBzPW8tMjtzPj0wO3MtLSluLmFkZE5leHRTZWdtZW50KHJbc10sITApfWVsc2V7dmFyIGE9TG4uc2ltcGxpZnkodCxpKSx1PWEubGVuZ3RoLTE7bi5pbml0U2lkZVNlZ21lbnRzKGFbMF0sYVsxXSxTZS5MRUZUKSxuLmFkZEZpcnN0U2VnbWVudCgpO2Zvcih2YXIgbD0yO2w8PXU7bCsrKW4uYWRkTmV4dFNlZ21lbnQoYVtsXSwhMCl9bi5hZGRMYXN0U2VnbWVudCgpfSxNbi5wcm90b3R5cGUuZ2V0U2VnR2VuPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgUG4odGhpcy5fcHJlY2lzaW9uTW9kZWwsdGhpcy5fYnVmUGFyYW1zLHQpfSxNbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sTW4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIE1ufSxNbi5jb3B5Q29vcmRpbmF0ZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBBcnJheSh0Lmxlbmd0aCkuZmlsbChudWxsKSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXT1uZXcgTih0W25dKTtyZXR1cm4gZX07dmFyIEFuPWZ1bmN0aW9uKCl7dGhpcy5fc3ViZ3JhcGhzPW51bGwsdGhpcy5fc2VnPW5ldyBkbix0aGlzLl9jZ2E9bmV3IHN0O3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9zdWJncmFwaHM9dH0sRm49e0RlcHRoU2VnbWVudDp7Y29uZmlndXJhYmxlOiEwfX07QW4ucHJvdG90eXBlLmZpbmRTdGFiYmVkU2VnbWVudHM9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPW5ldyBOdCxuPXRoaXMuX3N1YmdyYXBocy5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCkscj1pLmdldEVudmVsb3BlKCk7dC55PHIuZ2V0TWluWSgpfHx0Lnk+ci5nZXRNYXhZKCl8fHRoaXMuZmluZFN0YWJiZWRTZWdtZW50cyh0LGkuZ2V0RGlyZWN0ZWRFZGdlcygpLGUpfXJldHVybiBlfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKWlmKE8oYXJndW1lbnRzWzJdLHh0KSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIHplKWZvcih2YXIgbz1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sYT1hcmd1bWVudHNbMl0sdT1zLmdldEVkZ2UoKS5nZXRDb29yZGluYXRlcygpLGw9MDtsPHUubGVuZ3RoLTE7bCsrKXt0aGlzLl9zZWcucDA9dVtsXSx0aGlzLl9zZWcucDE9dVtsKzFdLHRoaXMuX3NlZy5wMC55PnRoaXMuX3NlZy5wMS55JiZ0aGlzLl9zZWcucmV2ZXJzZSgpO2lmKCEoTWF0aC5tYXgodGhpcy5fc2VnLnAwLngsdGhpcy5fc2VnLnAxLngpPG8ueCkmJiEodGhpcy5fc2VnLmlzSG9yaXpvbnRhbCgpfHxvLnk8dGhpcy5fc2VnLnAwLnl8fG8ueT50aGlzLl9zZWcucDEueXx8c3QuY29tcHV0ZU9yaWVudGF0aW9uKHRoaXMuX3NlZy5wMCx0aGlzLl9zZWcucDEsbyk9PT1zdC5SSUdIVCkpe3ZhciBjPXMuZ2V0RGVwdGgoU2UuTEVGVCk7dGhpcy5fc2VnLnAwLmVxdWFscyh1W2xdKXx8KGM9cy5nZXREZXB0aChTZS5SSUdIVCkpO3ZhciBwPW5ldyBHbih0aGlzLl9zZWcsYyk7YS5hZGQocCl9fWVsc2UgaWYoTyhhcmd1bWVudHNbMl0seHQpJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4mJk8oYXJndW1lbnRzWzFdLHh0KSlmb3IodmFyIGg9YXJndW1lbnRzWzBdLGY9YXJndW1lbnRzWzFdLGc9YXJndW1lbnRzWzJdLGQ9Zi5pdGVyYXRvcigpO2QuaGFzTmV4dCgpOyl7dmFyIHk9ZC5uZXh0KCk7eS5pc0ZvcndhcmQoKSYmdGhpcy5maW5kU3RhYmJlZFNlZ21lbnRzKGgseSxnKX19LEFuLnByb3RvdHlwZS5nZXREZXB0aD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmZpbmRTdGFiYmVkU2VnbWVudHModCk7aWYoMD09PWUuc2l6ZSgpKXJldHVybiAwO3JldHVybiAkZS5taW4oZSkuX2xlZnREZXB0aH0sQW4ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LEFuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBBbn0sRm4uRGVwdGhTZWdtZW50LmdldD1mdW5jdGlvbigpe3JldHVybiBHbn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQW4sRm4pO3ZhciBHbj1mdW5jdGlvbigpe3RoaXMuX3Vwd2FyZFNlZz1udWxsLHRoaXMuX2xlZnREZXB0aD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLl91cHdhcmRTZWc9bmV3IGRuKHQpLHRoaXMuX2xlZnREZXB0aD1lfTtHbi5wcm90b3R5cGUuY29tcGFyZVRvPWZ1bmN0aW9uKHQpe3ZhciBlPXQ7aWYodGhpcy5fdXB3YXJkU2VnLm1pblgoKT49ZS5fdXB3YXJkU2VnLm1heFgoKSlyZXR1cm4gMTtpZih0aGlzLl91cHdhcmRTZWcubWF4WCgpPD1lLl91cHdhcmRTZWcubWluWCgpKXJldHVybi0xO3ZhciBuPXRoaXMuX3Vwd2FyZFNlZy5vcmllbnRhdGlvbkluZGV4KGUuX3Vwd2FyZFNlZyk7cmV0dXJuIDAhPT1uP246MCE9KG49LTEqZS5fdXB3YXJkU2VnLm9yaWVudGF0aW9uSW5kZXgodGhpcy5fdXB3YXJkU2VnKSk/bjp0aGlzLl91cHdhcmRTZWcuY29tcGFyZVRvKGUuX3Vwd2FyZFNlZyl9LEduLnByb3RvdHlwZS5jb21wYXJlWD1mdW5jdGlvbih0LGUpe3ZhciBuPXQucDAuY29tcGFyZVRvKGUucDApO3JldHVybiAwIT09bj9uOnQucDEuY29tcGFyZVRvKGUucDEpfSxHbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdXB3YXJkU2VnLnRvU3RyaW5nKCl9LEduLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJXX0sR24ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEdufTt2YXIgcW49ZnVuY3Rpb24odCxlLG4pe3RoaXMucDA9dHx8bnVsbCx0aGlzLnAxPWV8fG51bGwsdGhpcy5wMj1ufHxudWxsfTtxbi5wcm90b3R5cGUuYXJlYT1mdW5jdGlvbigpe3JldHVybiBxbi5hcmVhKHRoaXMucDAsdGhpcy5wMSx0aGlzLnAyKX0scW4ucHJvdG90eXBlLnNpZ25lZEFyZWE9ZnVuY3Rpb24oKXtyZXR1cm4gcW4uc2lnbmVkQXJlYSh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LHFuLnByb3RvdHlwZS5pbnRlcnBvbGF0ZVo9ZnVuY3Rpb24odCl7aWYobnVsbD09PXQpdGhyb3cgbmV3IF8oXCJTdXBwbGllZCBwb2ludCBpcyBudWxsLlwiKTtyZXR1cm4gcW4uaW50ZXJwb2xhdGVaKHQsdGhpcy5wMCx0aGlzLnAxLHRoaXMucDIpfSxxbi5wcm90b3R5cGUubG9uZ2VzdFNpZGVMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gcW4ubG9uZ2VzdFNpZGVMZW5ndGgodGhpcy5wMCx0aGlzLnAxLHRoaXMucDIpfSxxbi5wcm90b3R5cGUuaXNBY3V0ZT1mdW5jdGlvbigpe3JldHVybiBxbi5pc0FjdXRlKHRoaXMucDAsdGhpcy5wMSx0aGlzLnAyKX0scW4ucHJvdG90eXBlLmNpcmN1bWNlbnRyZT1mdW5jdGlvbigpe3JldHVybiBxbi5jaXJjdW1jZW50cmUodGhpcy5wMCx0aGlzLnAxLHRoaXMucDIpfSxxbi5wcm90b3R5cGUuYXJlYTNEPWZ1bmN0aW9uKCl7cmV0dXJuIHFuLmFyZWEzRCh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LHFuLnByb3RvdHlwZS5jZW50cm9pZD1mdW5jdGlvbigpe3JldHVybiBxbi5jZW50cm9pZCh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LHFuLnByb3RvdHlwZS5pbkNlbnRyZT1mdW5jdGlvbigpe3JldHVybiBxbi5pbkNlbnRyZSh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LHFuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxxbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gcW59LHFuLmFyZWE9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBNYXRoLmFicygoKG4ueC10LngpKihlLnktdC55KS0oZS54LXQueCkqKG4ueS10LnkpKS8yKX0scW4uc2lnbmVkQXJlYT1mdW5jdGlvbih0LGUsbil7cmV0dXJuKChuLngtdC54KSooZS55LXQueSktKGUueC10LngpKihuLnktdC55KSkvMn0scW4uZGV0PWZ1bmN0aW9uKHQsZSxuLGkpe3JldHVybiB0KmktZSpufSxxbi5pbnRlcnBvbGF0ZVo9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9ZS54LG89ZS55LHM9bi54LXIsYT1pLngtcix1PW4ueS1vLGw9aS55LW8sYz1zKmwtYSp1LHA9dC54LXIsaD10LnktbyxmPShsKnAtYSpoKS9jLGc9KC11KnArcypoKS9jO3JldHVybiBlLnorZioobi56LWUueikrZyooaS56LWUueil9LHFuLmxvbmdlc3RTaWRlTGVuZ3RoPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmRpc3RhbmNlKGUpLHI9ZS5kaXN0YW5jZShuKSxvPW4uZGlzdGFuY2UodCkscz1pO3JldHVybiByPnMmJihzPXIpLG8+cyYmKHM9byksc30scW4uaXNBY3V0ZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuISFUbi5pc0FjdXRlKHQsZSxuKSYmKCEhVG4uaXNBY3V0ZShlLG4sdCkmJiEhVG4uaXNBY3V0ZShuLHQsZSkpfSxxbi5jaXJjdW1jZW50cmU9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4ueCxyPW4ueSxvPXQueC1pLHM9dC55LXIsYT1lLngtaSx1PWUueS1yLGw9Mipxbi5kZXQobyxzLGEsdSksYz1xbi5kZXQocyxvKm8rcypzLHUsYSphK3UqdSkscD1xbi5kZXQobyxvKm8rcypzLGEsYSphK3UqdSk7cmV0dXJuIG5ldyBOKGktYy9sLHIrcC9sKX0scW4ucGVycGVuZGljdWxhckJpc2VjdG9yPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS54LXQueCxpPWUueS10Lnkscj1uZXcgWSh0Lngrbi8yLHQueStpLzIsMSksbz1uZXcgWSh0LngtaStuLzIsdC55K24raS8yLDEpO3JldHVybiBuZXcgWShyLG8pfSxxbi5hbmdsZUJpc2VjdG9yPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1lLmRpc3RhbmNlKHQpLHI9aS8oaStlLmRpc3RhbmNlKG4pKSxvPW4ueC10Lngscz1uLnktdC55O3JldHVybiBuZXcgTih0LngrcipvLHQueStyKnMpfSxxbi5hcmVhM0Q9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPWUueC10Lngscj1lLnktdC55LG89ZS56LXQueixzPW4ueC10LngsYT1uLnktdC55LHU9bi56LXQueixsPXIqdS1vKmEsYz1vKnMtaSp1LHA9aSphLXIqcyxoPWwqbCtjKmMrcCpwLGY9TWF0aC5zcXJ0KGgpLzI7cmV0dXJuIGZ9LHFuLmNlbnRyb2lkPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT0odC54K2UueCtuLngpLzMscj0odC55K2UueStuLnkpLzM7cmV0dXJuIG5ldyBOKGkscil9LHFuLmluQ2VudHJlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1lLmRpc3RhbmNlKG4pLHI9dC5kaXN0YW5jZShuKSxvPXQuZGlzdGFuY2UoZSkscz1pK3IrbyxhPShpKnQueCtyKmUueCtvKm4ueCkvcyx1PShpKnQueStyKmUueStvKm4ueSkvcztyZXR1cm4gbmV3IE4oYSx1KX07dmFyIEJuPWZ1bmN0aW9uKCl7dGhpcy5faW5wdXRHZW9tPW51bGwsdGhpcy5fZGlzdGFuY2U9bnVsbCx0aGlzLl9jdXJ2ZUJ1aWxkZXI9bnVsbCx0aGlzLl9jdXJ2ZUxpc3Q9bmV3IE50O3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTt0aGlzLl9pbnB1dEdlb209dCx0aGlzLl9kaXN0YW5jZT1lLHRoaXMuX2N1cnZlQnVpbGRlcj1ufTtCbi5wcm90b3R5cGUuYWRkUG9pbnQ9ZnVuY3Rpb24odCl7aWYodGhpcy5fZGlzdGFuY2U8PTApcmV0dXJuIG51bGw7dmFyIGU9dC5nZXRDb29yZGluYXRlcygpLG49dGhpcy5fY3VydmVCdWlsZGVyLmdldExpbmVDdXJ2ZShlLHRoaXMuX2Rpc3RhbmNlKTt0aGlzLmFkZEN1cnZlKG4sYi5FWFRFUklPUixiLklOVEVSSU9SKX0sQm4ucHJvdG90eXBlLmFkZFBvbHlnb249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZGlzdGFuY2Usbj1TZS5MRUZUO3RoaXMuX2Rpc3RhbmNlPDAmJihlPS10aGlzLl9kaXN0YW5jZSxuPVNlLlJJR0hUKTt2YXIgaT10LmdldEV4dGVyaW9yUmluZygpLHI9THQucmVtb3ZlUmVwZWF0ZWRQb2ludHMoaS5nZXRDb29yZGluYXRlcygpKTtpZih0aGlzLl9kaXN0YW5jZTwwJiZ0aGlzLmlzRXJvZGVkQ29tcGxldGVseShpLHRoaXMuX2Rpc3RhbmNlKSlyZXR1cm4gbnVsbDtpZih0aGlzLl9kaXN0YW5jZTw9MCYmci5sZW5ndGg8MylyZXR1cm4gbnVsbDt0aGlzLmFkZFBvbHlnb25SaW5nKHIsZSxuLGIuRVhURVJJT1IsYi5JTlRFUklPUik7Zm9yKHZhciBvPTA7bzx0LmdldE51bUludGVyaW9yUmluZygpO28rKyl7dmFyIHM9dC5nZXRJbnRlcmlvclJpbmdOKG8pLGE9THQucmVtb3ZlUmVwZWF0ZWRQb2ludHMocy5nZXRDb29yZGluYXRlcygpKTt0aGlzLl9kaXN0YW5jZT4wJiZ0aGlzLmlzRXJvZGVkQ29tcGxldGVseShzLC10aGlzLl9kaXN0YW5jZSl8fHRoaXMuYWRkUG9seWdvblJpbmcoYSxlLFNlLm9wcG9zaXRlKG4pLGIuSU5URVJJT1IsYi5FWFRFUklPUil9fSxCbi5wcm90b3R5cGUuaXNUcmlhbmdsZUVyb2RlZENvbXBsZXRlbHk9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgcW4odFswXSx0WzFdLHRbMl0pLGk9bi5pbkNlbnRyZSgpO3JldHVybiBzdC5kaXN0YW5jZVBvaW50TGluZShpLG4ucDAsbi5wMSk8TWF0aC5hYnMoZSl9LEJuLnByb3RvdHlwZS5hZGRMaW5lU3RyaW5nPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2Rpc3RhbmNlPD0wJiYhdGhpcy5fY3VydmVCdWlsZGVyLmdldEJ1ZmZlclBhcmFtZXRlcnMoKS5pc1NpbmdsZVNpZGVkKCkpcmV0dXJuIG51bGw7dmFyIGU9THQucmVtb3ZlUmVwZWF0ZWRQb2ludHModC5nZXRDb29yZGluYXRlcygpKSxuPXRoaXMuX2N1cnZlQnVpbGRlci5nZXRMaW5lQ3VydmUoZSx0aGlzLl9kaXN0YW5jZSk7dGhpcy5hZGRDdXJ2ZShuLGIuRVhURVJJT1IsYi5JTlRFUklPUil9LEJuLnByb3RvdHlwZS5hZGRDdXJ2ZT1mdW5jdGlvbih0LGUsbil7aWYobnVsbD09PXR8fHQubGVuZ3RoPDIpcmV0dXJuIG51bGw7dmFyIGk9bmV3IGduKHQsbmV3IFBlKDAsYi5CT1VOREFSWSxlLG4pKTt0aGlzLl9jdXJ2ZUxpc3QuYWRkKGkpfSxCbi5wcm90b3R5cGUuZ2V0Q3VydmVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWRkKHRoaXMuX2lucHV0R2VvbSksdGhpcy5fY3VydmVMaXN0fSxCbi5wcm90b3R5cGUuYWRkUG9seWdvblJpbmc9ZnVuY3Rpb24odCxlLG4saSxyKXtpZigwPT09ZSYmdC5sZW5ndGg8ZWUuTUlOSU1VTV9WQUxJRF9TSVpFKXJldHVybiBudWxsO3ZhciBvPWkscz1yO3QubGVuZ3RoPj1lZS5NSU5JTVVNX1ZBTElEX1NJWkUmJnN0LmlzQ0NXKHQpJiYobz1yLHM9aSxuPVNlLm9wcG9zaXRlKG4pKTt2YXIgYT10aGlzLl9jdXJ2ZUJ1aWxkZXIuZ2V0UmluZ0N1cnZlKHQsbixlKTt0aGlzLmFkZEN1cnZlKGEsbyxzKX0sQm4ucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXtpZih0LmlzRW1wdHkoKSlyZXR1cm4gbnVsbDt0IGluc3RhbmNlb2YgJHQ/dGhpcy5hZGRQb2x5Z29uKHQpOnQgaW5zdGFuY2VvZiBLdD90aGlzLmFkZExpbmVTdHJpbmcodCk6dCBpbnN0YW5jZW9mIFF0P3RoaXMuYWRkUG9pbnQodCk6dCBpbnN0YW5jZW9mIHRlP3RoaXMuYWRkQ29sbGVjdGlvbih0KTp0IGluc3RhbmNlb2YgWHQ/dGhpcy5hZGRDb2xsZWN0aW9uKHQpOnQgaW5zdGFuY2VvZiBuZT90aGlzLmFkZENvbGxlY3Rpb24odCk6dCBpbnN0YW5jZW9mIHp0JiZ0aGlzLmFkZENvbGxlY3Rpb24odCl9LEJuLnByb3RvdHlwZS5pc0Vyb2RlZENvbXBsZXRlbHk9ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldENvb3JkaW5hdGVzKCk7aWYobi5sZW5ndGg8NClyZXR1cm4gZTwwO2lmKDQ9PT1uLmxlbmd0aClyZXR1cm4gdGhpcy5pc1RyaWFuZ2xlRXJvZGVkQ29tcGxldGVseShuLGUpO3ZhciBpPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLHI9TWF0aC5taW4oaS5nZXRIZWlnaHQoKSxpLmdldFdpZHRoKCkpO3JldHVybiBlPDAmJjIqTWF0aC5hYnMoZSk+cn0sQm4ucHJvdG90eXBlLmFkZENvbGxlY3Rpb249ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0LmdldE51bUdlb21ldHJpZXMoKTtlKyspe3ZhciBuPXQuZ2V0R2VvbWV0cnlOKGUpO3RoaXMuYWRkKG4pfX0sQm4ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LEJuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBCbn07dmFyIFZuPWZ1bmN0aW9uKCl7fTtWbi5wcm90b3R5cGUubG9jYXRlPWZ1bmN0aW9uKHQpe30sVm4ucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFZuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBWbn07dmFyIFVuPWZ1bmN0aW9uKCl7dGhpcy5fcGFyZW50PW51bGwsdGhpcy5fYXRTdGFydD1udWxsLHRoaXMuX21heD1udWxsLHRoaXMuX2luZGV4PW51bGwsdGhpcy5fc3ViY29sbGVjdGlvbkl0ZXJhdG9yPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX3BhcmVudD10LHRoaXMuX2F0U3RhcnQ9ITAsdGhpcy5faW5kZXg9MCx0aGlzLl9tYXg9dC5nZXROdW1HZW9tZXRyaWVzKCl9O1VuLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7aWYodGhpcy5fYXRTdGFydClyZXR1cm4gdGhpcy5fYXRTdGFydD0hMSxVbi5pc0F0b21pYyh0aGlzLl9wYXJlbnQpJiZ0aGlzLl9pbmRleCsrLHRoaXMuX3BhcmVudDtpZihudWxsIT09dGhpcy5fc3ViY29sbGVjdGlvbkl0ZXJhdG9yKXtpZih0aGlzLl9zdWJjb2xsZWN0aW9uSXRlcmF0b3IuaGFzTmV4dCgpKXJldHVybiB0aGlzLl9zdWJjb2xsZWN0aW9uSXRlcmF0b3IubmV4dCgpO3RoaXMuX3N1YmNvbGxlY3Rpb25JdGVyYXRvcj1udWxsfWlmKHRoaXMuX2luZGV4Pj10aGlzLl9tYXgpdGhyb3cgbmV3IG47dmFyIHQ9dGhpcy5fcGFyZW50LmdldEdlb21ldHJ5Tih0aGlzLl9pbmRleCsrKTtyZXR1cm4gdCBpbnN0YW5jZW9mIHp0Pyh0aGlzLl9zdWJjb2xsZWN0aW9uSXRlcmF0b3I9bmV3IFVuKHQpLHRoaXMuX3N1YmNvbGxlY3Rpb25JdGVyYXRvci5uZXh0KCkpOnR9LFVuLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IodGhpcy5nZXRDbGFzcygpLmdldE5hbWUoKSl9LFVuLnByb3RvdHlwZS5oYXNOZXh0PWZ1bmN0aW9uKCl7aWYodGhpcy5fYXRTdGFydClyZXR1cm4hMDtpZihudWxsIT09dGhpcy5fc3ViY29sbGVjdGlvbkl0ZXJhdG9yKXtpZih0aGlzLl9zdWJjb2xsZWN0aW9uSXRlcmF0b3IuaGFzTmV4dCgpKXJldHVybiEwO3RoaXMuX3N1YmNvbGxlY3Rpb25JdGVyYXRvcj1udWxsfXJldHVybiEodGhpcy5faW5kZXg+PXRoaXMuX21heCl9LFVuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltFdF19LFVuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBVbn0sVW4uaXNBdG9taWM9ZnVuY3Rpb24odCl7cmV0dXJuISh0IGluc3RhbmNlb2YgenQpfTt2YXIgem49ZnVuY3Rpb24oKXt0aGlzLl9nZW9tPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX2dlb209dH07em4ucHJvdG90eXBlLmxvY2F0ZT1mdW5jdGlvbih0KXtyZXR1cm4gem4ubG9jYXRlKHQsdGhpcy5fZ2VvbSl9LHpuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltWbl19LHpuLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB6bn0sem4uaXNQb2ludEluUmluZz1mdW5jdGlvbih0LGUpe3JldHVybiEhZS5nZXRFbnZlbG9wZUludGVybmFsKCkuaW50ZXJzZWN0cyh0KSYmc3QuaXNQb2ludEluUmluZyh0LGUuZ2V0Q29vcmRpbmF0ZXMoKSl9LHpuLmNvbnRhaW5zUG9pbnRJblBvbHlnb249ZnVuY3Rpb24odCxlKXtpZihlLmlzRW1wdHkoKSlyZXR1cm4hMTt2YXIgbj1lLmdldEV4dGVyaW9yUmluZygpO2lmKCF6bi5pc1BvaW50SW5SaW5nKHQsbikpcmV0dXJuITE7Zm9yKHZhciBpPTA7aTxlLmdldE51bUludGVyaW9yUmluZygpO2krKyl7dmFyIHI9ZS5nZXRJbnRlcmlvclJpbmdOKGkpO2lmKHpuLmlzUG9pbnRJblJpbmcodCxyKSlyZXR1cm4hMX1yZXR1cm4hMH0sem4uY29udGFpbnNQb2ludD1mdW5jdGlvbih0LGUpe2lmKGUgaW5zdGFuY2VvZiAkdClyZXR1cm4gem4uY29udGFpbnNQb2ludEluUG9seWdvbih0LGUpO2lmKGUgaW5zdGFuY2VvZiB6dClmb3IodmFyIG49bmV3IFVuKGUpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7aWYoaSE9PWUmJnpuLmNvbnRhaW5zUG9pbnQodCxpKSlyZXR1cm4hMH1yZXR1cm4hMX0sem4ubG9jYXRlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuaXNFbXB0eSgpP2IuRVhURVJJT1I6em4uY29udGFpbnNQb2ludCh0LGUpP2IuSU5URVJJT1I6Yi5FWFRFUklPUn07dmFyIFhuPWZ1bmN0aW9uKCl7dGhpcy5fZWRnZU1hcD1uZXcgYyx0aGlzLl9lZGdlTGlzdD1udWxsLHRoaXMuX3B0SW5BcmVhTG9jYXRpb249W2IuTk9ORSxiLk5PTkVdfTtYbi5wcm90b3R5cGUuZ2V0TmV4dENXPWZ1bmN0aW9uKHQpe3RoaXMuZ2V0RWRnZXMoKTt2YXIgZT10aGlzLl9lZGdlTGlzdC5pbmRleE9mKHQpLG49ZS0xO3JldHVybiAwPT09ZSYmKG49dGhpcy5fZWRnZUxpc3Quc2l6ZSgpLTEpLHRoaXMuX2VkZ2VMaXN0LmdldChuKX0sWG4ucHJvdG90eXBlLnByb3BhZ2F0ZVNpZGVMYWJlbHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPWIuTk9ORSxuPXRoaXMuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpLmdldExhYmVsKCk7aS5pc0FyZWEodCkmJmkuZ2V0TG9jYXRpb24odCxTZS5MRUZUKSE9PWIuTk9ORSYmKGU9aS5nZXRMb2NhdGlvbih0LFNlLkxFRlQpKX1pZihlPT09Yi5OT05FKXJldHVybiBudWxsO2Zvcih2YXIgcj1lLG89dGhpcy5pdGVyYXRvcigpO28uaGFzTmV4dCgpOyl7dmFyIHM9by5uZXh0KCksYT1zLmdldExhYmVsKCk7aWYoYS5nZXRMb2NhdGlvbih0LFNlLk9OKT09PWIuTk9ORSYmYS5zZXRMb2NhdGlvbih0LFNlLk9OLHIpLGEuaXNBcmVhKHQpKXt2YXIgdT1hLmdldExvY2F0aW9uKHQsU2UuTEVGVCksbD1hLmdldExvY2F0aW9uKHQsU2UuUklHSFQpO2lmKGwhPT1iLk5PTkUpe2lmKGwhPT1yKXRocm93IG5ldyB3ZShcInNpZGUgbG9jYXRpb24gY29uZmxpY3RcIixzLmdldENvb3JkaW5hdGUoKSk7dT09PWIuTk9ORSYmdHQuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoXCJmb3VuZCBzaW5nbGUgbnVsbCBzaWRlIChhdCBcIitzLmdldENvb3JkaW5hdGUoKStcIilcIikscj11fWVsc2UgdHQuaXNUcnVlKGEuZ2V0TG9jYXRpb24odCxTZS5MRUZUKT09PWIuTk9ORSxcImZvdW5kIHNpbmdsZSBudWxsIHNpZGVcIiksYS5zZXRMb2NhdGlvbih0LFNlLlJJR0hULHIpLGEuc2V0TG9jYXRpb24odCxTZS5MRUZULHIpfX19LFhuLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5pdGVyYXRvcigpO2lmKCF0Lmhhc05leHQoKSlyZXR1cm4gbnVsbDtyZXR1cm4gdC5uZXh0KCkuZ2V0Q29vcmRpbmF0ZSgpfSxYbi5wcm90b3R5cGUucHJpbnQ9ZnVuY3Rpb24odCl7WC5vdXQucHJpbnRsbihcIkVkZ2VFbmRTdGFyOiAgIFwiK3RoaXMuZ2V0Q29vcmRpbmF0ZSgpKTtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7ZS5uZXh0KCkucHJpbnQodCl9fSxYbi5wcm90b3R5cGUuaXNBcmVhTGFiZWxzQ29uc2lzdGVudD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jb21wdXRlRWRnZUVuZExhYmVscyh0LmdldEJvdW5kYXJ5Tm9kZVJ1bGUoKSksdGhpcy5jaGVja0FyZWFMYWJlbHNDb25zaXN0ZW50KDApfSxYbi5wcm90b3R5cGUuY2hlY2tBcmVhTGFiZWxzQ29uc2lzdGVudD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEVkZ2VzKCk7aWYoZS5zaXplKCk8PTApcmV0dXJuITA7dmFyIG49ZS5zaXplKCktMSxpPWUuZ2V0KG4pLmdldExhYmVsKCkuZ2V0TG9jYXRpb24odCxTZS5MRUZUKTt0dC5pc1RydWUoaSE9PWIuTk9ORSxcIkZvdW5kIHVubGFiZWxsZWQgYXJlYSBlZGdlXCIpO2Zvcih2YXIgcj1pLG89dGhpcy5pdGVyYXRvcigpO28uaGFzTmV4dCgpOyl7dmFyIHM9by5uZXh0KCkuZ2V0TGFiZWwoKTt0dC5pc1RydWUocy5pc0FyZWEodCksXCJGb3VuZCBub24tYXJlYSBlZGdlXCIpO3ZhciBhPXMuZ2V0TG9jYXRpb24odCxTZS5MRUZUKSx1PXMuZ2V0TG9jYXRpb24odCxTZS5SSUdIVCk7aWYoYT09PXUpcmV0dXJuITE7aWYodSE9PXIpcmV0dXJuITE7cj1hfXJldHVybiEwfSxYbi5wcm90b3R5cGUuZmluZEluZGV4PWZ1bmN0aW9uKHQpe3RoaXMuaXRlcmF0b3IoKTtmb3IodmFyIGU9MDtlPHRoaXMuX2VkZ2VMaXN0LnNpemUoKTtlKyspe2lmKHRoaXMuX2VkZ2VMaXN0LmdldChlKT09PXQpcmV0dXJuIGV9cmV0dXJuLTF9LFhuLnByb3RvdHlwZS5pdGVyYXRvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEVkZ2VzKCkuaXRlcmF0b3IoKX0sWG4ucHJvdG90eXBlLmdldEVkZ2VzPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLl9lZGdlTGlzdCYmKHRoaXMuX2VkZ2VMaXN0PW5ldyBOdCh0aGlzLl9lZGdlTWFwLnZhbHVlcygpKSksdGhpcy5fZWRnZUxpc3R9LFhuLnByb3RvdHlwZS5nZXRMb2NhdGlvbj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMuX3B0SW5BcmVhTG9jYXRpb25bdF09PT1iLk5PTkUmJih0aGlzLl9wdEluQXJlYUxvY2F0aW9uW3RdPXpuLmxvY2F0ZShlLG5bdF0uZ2V0R2VvbWV0cnkoKSkpLHRoaXMuX3B0SW5BcmVhTG9jYXRpb25bdF19LFhuLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciB0PW5ldyBQO3QuYXBwZW5kKFwiRWRnZUVuZFN0YXI6ICAgXCIrdGhpcy5nZXRDb29yZGluYXRlKCkpLHQuYXBwZW5kKFwiXFxuXCIpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0LmFwcGVuZChuKSx0LmFwcGVuZChcIlxcblwiKX1yZXR1cm4gdC50b1N0cmluZygpfSxYbi5wcm90b3R5cGUuY29tcHV0ZUVkZ2VFbmRMYWJlbHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe2UubmV4dCgpLmNvbXB1dGVMYWJlbCh0KX19LFhuLnByb3RvdHlwZS5jb21wdXRlTGFiZWxsaW5nPWZ1bmN0aW9uKHQpe3RoaXMuY29tcHV0ZUVkZ2VFbmRMYWJlbHModFswXS5nZXRCb3VuZGFyeU5vZGVSdWxlKCkpLHRoaXMucHJvcGFnYXRlU2lkZUxhYmVscygwKSx0aGlzLnByb3BhZ2F0ZVNpZGVMYWJlbHMoMSk7Zm9yKHZhciBlPVshMSwhMV0sbj10aGlzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KWZvcih2YXIgaT1uLm5leHQoKS5nZXRMYWJlbCgpLHI9MDtyPDI7cisrKWkuaXNMaW5lKHIpJiZpLmdldExvY2F0aW9uKHIpPT09Yi5CT1VOREFSWSYmKGVbcl09ITApO2Zvcih2YXIgbz10aGlzLml0ZXJhdG9yKCk7by5oYXNOZXh0KCk7KWZvcih2YXIgcz1vLm5leHQoKSxhPXMuZ2V0TGFiZWwoKSx1PTA7dTwyO3UrKylpZihhLmlzQW55TnVsbCh1KSl7dmFyIGw9Yi5OT05FO2lmKGVbdV0pbD1iLkVYVEVSSU9SO2Vsc2V7dmFyIGM9cy5nZXRDb29yZGluYXRlKCk7bD10aGlzLmdldExvY2F0aW9uKHUsYyx0KX1hLnNldEFsbExvY2F0aW9uc0lmTnVsbCh1LGwpfX0sWG4ucHJvdG90eXBlLmdldERlZ3JlZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lZGdlTWFwLnNpemUoKX0sWG4ucHJvdG90eXBlLmluc2VydEVkZ2VFbmQ9ZnVuY3Rpb24odCxlKXt0aGlzLl9lZGdlTWFwLnB1dCh0LGUpLHRoaXMuX2VkZ2VMaXN0PW51bGx9LFhuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxYbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gWG59O3ZhciBZbj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5jYWxsKHRoaXMpLHRoaXMuX3Jlc3VsdEFyZWFFZGdlTGlzdD1udWxsLHRoaXMuX2xhYmVsPW51bGwsdGhpcy5fU0NBTk5JTkdfRk9SX0lOQ09NSU5HPTEsdGhpcy5fTElOS0lOR19UT19PVVRHT0lORz0yfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5saW5rUmVzdWx0RGlyZWN0ZWRFZGdlcz1mdW5jdGlvbigpe3RoaXMuZ2V0UmVzdWx0QXJlYUVkZ2VzKCk7Zm9yKHZhciB0PW51bGwsZT1udWxsLG49dGhpcy5fU0NBTk5JTkdfRk9SX0lOQ09NSU5HLGk9MDtpPHRoaXMuX3Jlc3VsdEFyZWFFZGdlTGlzdC5zaXplKCk7aSsrKXt2YXIgcj10aGlzLl9yZXN1bHRBcmVhRWRnZUxpc3QuZ2V0KGkpLG89ci5nZXRTeW0oKTtpZihyLmdldExhYmVsKCkuaXNBcmVhKCkpc3dpdGNoKG51bGw9PT10JiZyLmlzSW5SZXN1bHQoKSYmKHQ9ciksbil7Y2FzZSB0aGlzLl9TQ0FOTklOR19GT1JfSU5DT01JTkc6aWYoIW8uaXNJblJlc3VsdCgpKWNvbnRpbnVlO2U9byxuPXRoaXMuX0xJTktJTkdfVE9fT1VUR09JTkc7YnJlYWs7Y2FzZSB0aGlzLl9MSU5LSU5HX1RPX09VVEdPSU5HOmlmKCFyLmlzSW5SZXN1bHQoKSljb250aW51ZTtlLnNldE5leHQociksbj10aGlzLl9TQ0FOTklOR19GT1JfSU5DT01JTkd9fWlmKG49PT10aGlzLl9MSU5LSU5HX1RPX09VVEdPSU5HKXtpZihudWxsPT09dCl0aHJvdyBuZXcgd2UoXCJubyBvdXRnb2luZyBkaXJFZGdlIGZvdW5kXCIsdGhpcy5nZXRDb29yZGluYXRlKCkpO3R0LmlzVHJ1ZSh0LmlzSW5SZXN1bHQoKSxcInVuYWJsZSB0byBsaW5rIGxhc3QgaW5jb21pbmcgZGlyRWRnZVwiKSxlLnNldE5leHQodCl9fSxlLnByb3RvdHlwZS5pbnNlcnQ9ZnVuY3Rpb24odCl7dmFyIGU9dDt0aGlzLmluc2VydEVkZ2VFbmQoZSxlKX0sZS5wcm90b3R5cGUuZ2V0UmlnaHRtb3N0RWRnZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0RWRnZXMoKSxlPXQuc2l6ZSgpO2lmKGU8MSlyZXR1cm4gbnVsbDt2YXIgbj10LmdldCgwKTtpZigxPT09ZSlyZXR1cm4gbjt2YXIgaT10LmdldChlLTEpLHI9bi5nZXRRdWFkcmFudCgpLG89aS5nZXRRdWFkcmFudCgpO3JldHVybiBCZS5pc05vcnRoZXJuKHIpJiZCZS5pc05vcnRoZXJuKG8pP246QmUuaXNOb3J0aGVybihyKXx8QmUuaXNOb3J0aGVybihvKT8wIT09bi5nZXREeSgpP246MCE9PWkuZ2V0RHkoKT9pOih0dC5zaG91bGROZXZlclJlYWNoSGVyZShcImZvdW5kIHR3byBob3Jpem9udGFsIGVkZ2VzIGluY2lkZW50IG9uIG5vZGVcIiksbnVsbCk6aX0sZS5wcm90b3R5cGUucHJpbnQ9ZnVuY3Rpb24odCl7WC5vdXQucHJpbnRsbihcIkRpcmVjdGVkRWRnZVN0YXI6IFwiK3RoaXMuZ2V0Q29vcmRpbmF0ZSgpKTtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7dC5wcmludChcIm91dCBcIiksbi5wcmludCh0KSx0LnByaW50bG4oKSx0LnByaW50KFwiaW4gXCIpLG4uZ2V0U3ltKCkucHJpbnQodCksdC5wcmludGxuKCl9fSxlLnByb3RvdHlwZS5nZXRSZXN1bHRBcmVhRWRnZXM9ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5fcmVzdWx0QXJlYUVkZ2VMaXN0KXJldHVybiB0aGlzLl9yZXN1bHRBcmVhRWRnZUxpc3Q7dGhpcy5fcmVzdWx0QXJlYUVkZ2VMaXN0PW5ldyBOdDtmb3IodmFyIHQ9dGhpcy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7KGUuaXNJblJlc3VsdCgpfHxlLmdldFN5bSgpLmlzSW5SZXN1bHQoKSkmJnRoaXMuX3Jlc3VsdEFyZWFFZGdlTGlzdC5hZGQoZSl9cmV0dXJuIHRoaXMuX3Jlc3VsdEFyZWFFZGdlTGlzdH0sZS5wcm90b3R5cGUudXBkYXRlTGFiZWxsaW5nPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKS5nZXRMYWJlbCgpO24uc2V0QWxsTG9jYXRpb25zSWZOdWxsKDAsdC5nZXRMb2NhdGlvbigwKSksbi5zZXRBbGxMb2NhdGlvbnNJZk51bGwoMSx0LmdldExvY2F0aW9uKDEpKX19LGUucHJvdG90eXBlLmxpbmtBbGxEaXJlY3RlZEVkZ2VzPWZ1bmN0aW9uKCl7dGhpcy5nZXRFZGdlcygpO2Zvcih2YXIgdD1udWxsLGU9bnVsbCxuPXRoaXMuX2VkZ2VMaXN0LnNpemUoKS0xO24+PTA7bi0tKXt2YXIgaT10aGlzLl9lZGdlTGlzdC5nZXQobikscj1pLmdldFN5bSgpO251bGw9PT1lJiYoZT1yKSxudWxsIT09dCYmci5zZXROZXh0KHQpLHQ9aX1lLnNldE5leHQodCl9LGUucHJvdG90eXBlLmNvbXB1dGVEZXB0aHM9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy5maW5kSW5kZXgodCksbj10LmdldERlcHRoKFNlLkxFRlQpLGk9dC5nZXREZXB0aChTZS5SSUdIVCkscj10aGlzLmNvbXB1dGVEZXB0aHMoZSsxLHRoaXMuX2VkZ2VMaXN0LnNpemUoKSxuKTtpZih0aGlzLmNvbXB1dGVEZXB0aHMoMCxlLHIpIT09aSl0aHJvdyBuZXcgd2UoXCJkZXB0aCBtaXNtYXRjaCBhdCBcIit0LmdldENvb3JkaW5hdGUoKSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBvPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxhPWFyZ3VtZW50c1syXSx1PW87dTxzO3UrKyl7dmFyIGw9dGhpcy5fZWRnZUxpc3QuZ2V0KHUpO2wuc2V0RWRnZURlcHRocyhTZS5SSUdIVCxhKSxhPWwuZ2V0RGVwdGgoU2UuTEVGVCl9cmV0dXJuIGF9fSxlLnByb3RvdHlwZS5tZXJnZVN5bUxhYmVscz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTtlLmdldExhYmVsKCkubWVyZ2UoZS5nZXRTeW0oKS5nZXRMYWJlbCgpKX19LGUucHJvdG90eXBlLmxpbmtNaW5pbWFsRGlyZWN0ZWRFZGdlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPW51bGwsaT10aGlzLl9TQ0FOTklOR19GT1JfSU5DT01JTkcscj10aGlzLl9yZXN1bHRBcmVhRWRnZUxpc3Quc2l6ZSgpLTE7cj49MDtyLS0pe3ZhciBvPXRoaXMuX3Jlc3VsdEFyZWFFZGdlTGlzdC5nZXQocikscz1vLmdldFN5bSgpO3N3aXRjaChudWxsPT09ZSYmby5nZXRFZGdlUmluZygpPT09dCYmKGU9byksaSl7Y2FzZSB0aGlzLl9TQ0FOTklOR19GT1JfSU5DT01JTkc6aWYocy5nZXRFZGdlUmluZygpIT09dCljb250aW51ZTtuPXMsaT10aGlzLl9MSU5LSU5HX1RPX09VVEdPSU5HO2JyZWFrO2Nhc2UgdGhpcy5fTElOS0lOR19UT19PVVRHT0lORzppZihvLmdldEVkZ2VSaW5nKCkhPT10KWNvbnRpbnVlO24uc2V0TmV4dE1pbihvKSxpPXRoaXMuX1NDQU5OSU5HX0ZPUl9JTkNPTUlOR319aT09PXRoaXMuX0xJTktJTkdfVE9fT1VUR09JTkcmJih0dC5pc1RydWUobnVsbCE9PWUsXCJmb3VuZCBudWxsIGZvciBmaXJzdCBvdXRnb2luZyBkaXJFZGdlXCIpLHR0LmlzVHJ1ZShlLmdldEVkZ2VSaW5nKCk9PT10LFwidW5hYmxlIHRvIGxpbmsgbGFzdCBpbmNvbWluZyBkaXJFZGdlXCIpLG4uc2V0TmV4dE1pbihlKSl9LGUucHJvdG90eXBlLmdldE91dGdvaW5nRGVncmVlPWZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgdD0wLGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7ZS5uZXh0KCkuaXNJblJlc3VsdCgpJiZ0Kyt9cmV0dXJuIHR9aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgbj1hcmd1bWVudHNbMF0saT0wLHI9dGhpcy5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7ci5uZXh0KCkuZ2V0RWRnZVJpbmcoKT09PW4mJmkrK31yZXR1cm4gaX19LGUucHJvdG90eXBlLmdldExhYmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xhYmVsfSxlLnByb3RvdHlwZS5maW5kQ292ZXJlZExpbmVFZGdlcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1iLk5PTkUsZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKSxpPW4uZ2V0U3ltKCk7aWYoIW4uaXNMaW5lRWRnZSgpKXtpZihuLmlzSW5SZXN1bHQoKSl7dD1iLklOVEVSSU9SO2JyZWFrfWlmKGkuaXNJblJlc3VsdCgpKXt0PWIuRVhURVJJT1I7YnJlYWt9fX1pZih0PT09Yi5OT05FKXJldHVybiBudWxsO2Zvcih2YXIgcj10LG89dGhpcy5pdGVyYXRvcigpO28uaGFzTmV4dCgpOyl7dmFyIHM9by5uZXh0KCksYT1zLmdldFN5bSgpO3MuaXNMaW5lRWRnZSgpP3MuZ2V0RWRnZSgpLnNldENvdmVyZWQocj09PWIuSU5URVJJT1IpOihzLmlzSW5SZXN1bHQoKSYmKHI9Yi5FWFRFUklPUiksYS5pc0luUmVzdWx0KCkmJihyPWIuSU5URVJJT1IpKX19LGUucHJvdG90eXBlLmNvbXB1dGVMYWJlbGxpbmc9ZnVuY3Rpb24oZSl7dC5wcm90b3R5cGUuY29tcHV0ZUxhYmVsbGluZy5jYWxsKHRoaXMsZSksdGhpcy5fbGFiZWw9bmV3IFBlKGIuTk9ORSk7Zm9yKHZhciBuPXRoaXMuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspZm9yKHZhciBpPW4ubmV4dCgpLmdldEVkZ2UoKS5nZXRMYWJlbCgpLHI9MDtyPDI7cisrKXt2YXIgbz1pLmdldExvY2F0aW9uKHIpO28hPT1iLklOVEVSSU9SJiZvIT09Yi5CT1VOREFSWXx8dGhpcy5fbGFiZWwuc2V0TG9jYXRpb24ocixiLklOVEVSSU9SKX19LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9KFhuKSxrbj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUucHJvdG90eXBlLmNyZWF0ZU5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBHZSh0LG5ldyBZbil9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9KFhlKSxqbj1mdW5jdGlvbiB0KCl7dGhpcy5fcHRzPW51bGwsdGhpcy5fb3JpZW50YXRpb249bnVsbDt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5fcHRzPWUsdGhpcy5fb3JpZW50YXRpb249dC5vcmllbnRhdGlvbihlKX07am4ucHJvdG90eXBlLmNvbXBhcmVUbz1mdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiBqbi5jb21wYXJlT3JpZW50ZWQodGhpcy5fcHRzLHRoaXMuX29yaWVudGF0aW9uLGUuX3B0cyxlLl9vcmllbnRhdGlvbil9LGpuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJXX0sam4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGpufSxqbi5vcmllbnRhdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4gMT09PUx0LmluY3JlYXNpbmdEaXJlY3Rpb24odCl9LGpuLmNvbXBhcmVPcmllbnRlZD1mdW5jdGlvbih0LGUsbixpKXtmb3IodmFyIHI9ZT8xOi0xLG89aT8xOi0xLHM9ZT90Lmxlbmd0aDotMSxhPWk/bi5sZW5ndGg6LTEsdT1lPzA6dC5sZW5ndGgtMSxsPWk/MDpuLmxlbmd0aC0xOzspe3ZhciBjPXRbdV0uY29tcGFyZVRvKG5bbF0pO2lmKDAhPT1jKXJldHVybiBjO3ZhciBwPSh1Kz1yKT09PXMsaD0obCs9byk9PT1hO2lmKHAmJiFoKXJldHVybi0xO2lmKCFwJiZoKXJldHVybiAxO2lmKHAmJmgpcmV0dXJuIDB9fTt2YXIgSG49ZnVuY3Rpb24oKXt0aGlzLl9lZGdlcz1uZXcgTnQsdGhpcy5fb2NhTWFwPW5ldyBjfTtIbi5wcm90b3R5cGUucHJpbnQ9ZnVuY3Rpb24odCl7dC5wcmludChcIk1VTFRJTElORVNUUklORyAoIFwiKTtmb3IodmFyIGU9MDtlPHRoaXMuX2VkZ2VzLnNpemUoKTtlKyspe3ZhciBuPXRoaXMuX2VkZ2VzLmdldChlKTtlPjAmJnQucHJpbnQoXCIsXCIpLHQucHJpbnQoXCIoXCIpO2Zvcih2YXIgaT1uLmdldENvb3JkaW5hdGVzKCkscj0wO3I8aS5sZW5ndGg7cisrKXI+MCYmdC5wcmludChcIixcIiksdC5wcmludChpW3JdLngrXCIgXCIraVtyXS55KTt0LnByaW50bG4oXCIpXCIpfXQucHJpbnQoXCIpICBcIil9LEhuLnByb3RvdHlwZS5hZGRBbGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspdGhpcy5hZGQoZS5uZXh0KCkpfSxIbi5wcm90b3R5cGUuZmluZEVkZ2VJbmRleD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMuX2VkZ2VzLnNpemUoKTtlKyspaWYodGhpcy5fZWRnZXMuZ2V0KGUpLmVxdWFscyh0KSlyZXR1cm4gZTtyZXR1cm4tMX0sSG4ucHJvdG90eXBlLml0ZXJhdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VkZ2VzLml0ZXJhdG9yKCl9LEhuLnByb3RvdHlwZS5nZXRFZGdlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lZGdlc30sSG4ucHJvdG90eXBlLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fZWRnZXMuZ2V0KHQpfSxIbi5wcm90b3R5cGUuZmluZEVxdWFsRWRnZT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgam4odC5nZXRDb29yZGluYXRlcygpKTtyZXR1cm4gdGhpcy5fb2NhTWFwLmdldChlKX0sSG4ucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXt0aGlzLl9lZGdlcy5hZGQodCk7dmFyIGU9bmV3IGpuKHQuZ2V0Q29vcmRpbmF0ZXMoKSk7dGhpcy5fb2NhTWFwLnB1dChlLHQpfSxIbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sSG4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEhufTt2YXIgV249ZnVuY3Rpb24oKXt9O1duLnByb3RvdHlwZS5wcm9jZXNzSW50ZXJzZWN0aW9ucz1mdW5jdGlvbih0LGUsbixpKXt9LFduLnByb3RvdHlwZS5pc0RvbmU9ZnVuY3Rpb24oKXt9LFduLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxXbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gV259O3ZhciBLbj1mdW5jdGlvbigpe3RoaXMuX2hhc0ludGVyc2VjdGlvbj0hMSx0aGlzLl9oYXNQcm9wZXI9ITEsdGhpcy5faGFzUHJvcGVySW50ZXJpb3I9ITEsdGhpcy5faGFzSW50ZXJpb3I9ITEsdGhpcy5fcHJvcGVySW50ZXJzZWN0aW9uUG9pbnQ9bnVsbCx0aGlzLl9saT1udWxsLHRoaXMuX2lzU2VsZkludGVyc2VjdGlvbj1udWxsLHRoaXMubnVtSW50ZXJzZWN0aW9ucz0wLHRoaXMubnVtSW50ZXJpb3JJbnRlcnNlY3Rpb25zPTAsdGhpcy5udW1Qcm9wZXJJbnRlcnNlY3Rpb25zPTAsdGhpcy5udW1UZXN0cz0wO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9saT10fTtLbi5wcm90b3R5cGUuaXNUcml2aWFsSW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKHQ9PT1uJiYxPT09dGhpcy5fbGkuZ2V0SW50ZXJzZWN0aW9uTnVtKCkpe2lmKEtuLmlzQWRqYWNlbnRTZWdtZW50cyhlLGkpKXJldHVybiEwO2lmKHQuaXNDbG9zZWQoKSl7dmFyIHI9dC5zaXplKCktMTtpZigwPT09ZSYmaT09PXJ8fDA9PT1pJiZlPT09cilyZXR1cm4hMH19cmV0dXJuITF9LEtuLnByb3RvdHlwZS5nZXRQcm9wZXJJbnRlcnNlY3Rpb25Qb2ludD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9wZXJJbnRlcnNlY3Rpb25Qb2ludH0sS24ucHJvdG90eXBlLmhhc1Byb3BlckludGVyaW9ySW50ZXJzZWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc1Byb3BlckludGVyaW9yfSxLbi5wcm90b3R5cGUuZ2V0TGluZUludGVyc2VjdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xpfSxLbi5wcm90b3R5cGUuaGFzUHJvcGVySW50ZXJzZWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc1Byb3Blcn0sS24ucHJvdG90eXBlLnByb2Nlc3NJbnRlcnNlY3Rpb25zPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKHQ9PT1uJiZlPT09aSlyZXR1cm4gbnVsbDt0aGlzLm51bVRlc3RzKys7dmFyIHI9dC5nZXRDb29yZGluYXRlcygpW2VdLG89dC5nZXRDb29yZGluYXRlcygpW2UrMV0scz1uLmdldENvb3JkaW5hdGVzKClbaV0sYT1uLmdldENvb3JkaW5hdGVzKClbaSsxXTt0aGlzLl9saS5jb21wdXRlSW50ZXJzZWN0aW9uKHIsbyxzLGEpLHRoaXMuX2xpLmhhc0ludGVyc2VjdGlvbigpJiYodGhpcy5udW1JbnRlcnNlY3Rpb25zKyssdGhpcy5fbGkuaXNJbnRlcmlvckludGVyc2VjdGlvbigpJiYodGhpcy5udW1JbnRlcmlvckludGVyc2VjdGlvbnMrKyx0aGlzLl9oYXNJbnRlcmlvcj0hMCksdGhpcy5pc1RyaXZpYWxJbnRlcnNlY3Rpb24odCxlLG4saSl8fCh0aGlzLl9oYXNJbnRlcnNlY3Rpb249ITAsdC5hZGRJbnRlcnNlY3Rpb25zKHRoaXMuX2xpLGUsMCksbi5hZGRJbnRlcnNlY3Rpb25zKHRoaXMuX2xpLGksMSksdGhpcy5fbGkuaXNQcm9wZXIoKSYmKHRoaXMubnVtUHJvcGVySW50ZXJzZWN0aW9ucysrLHRoaXMuX2hhc1Byb3Blcj0hMCx0aGlzLl9oYXNQcm9wZXJJbnRlcmlvcj0hMCkpKX0sS24ucHJvdG90eXBlLmhhc0ludGVyc2VjdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9oYXNJbnRlcnNlY3Rpb259LEtuLnByb3RvdHlwZS5pc0RvbmU9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sS24ucHJvdG90eXBlLmhhc0ludGVyaW9ySW50ZXJzZWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc0ludGVyaW9yfSxLbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bV25dfSxLbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gS259LEtuLmlzQWRqYWNlbnRTZWdtZW50cz1mdW5jdGlvbih0LGUpe3JldHVybiAxPT09TWF0aC5hYnModC1lKX07dmFyIEpuPWZ1bmN0aW9uKCl7dGhpcy5jb29yZD1udWxsLHRoaXMuc2VnbWVudEluZGV4PW51bGwsdGhpcy5kaXN0PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdO3RoaXMuY29vcmQ9bmV3IE4odCksdGhpcy5zZWdtZW50SW5kZXg9ZSx0aGlzLmRpc3Q9bn07Sm4ucHJvdG90eXBlLmdldFNlZ21lbnRJbmRleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNlZ21lbnRJbmRleH0sSm4ucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb29yZH0sSm4ucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe3QucHJpbnQodGhpcy5jb29yZCksdC5wcmludChcIiBzZWcgIyA9IFwiK3RoaXMuc2VnbWVudEluZGV4KSx0LnByaW50bG4oXCIgZGlzdCA9IFwiK3RoaXMuZGlzdCl9LEpuLnByb3RvdHlwZS5jb21wYXJlVG89ZnVuY3Rpb24odCl7dmFyIGU9dDtyZXR1cm4gdGhpcy5jb21wYXJlKGUuc2VnbWVudEluZGV4LGUuZGlzdCl9LEpuLnByb3RvdHlwZS5pc0VuZFBvaW50PWZ1bmN0aW9uKHQpe3JldHVybiAwPT09dGhpcy5zZWdtZW50SW5kZXgmJjA9PT10aGlzLmRpc3R8fHRoaXMuc2VnbWVudEluZGV4PT09dH0sSm4ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmQrXCIgc2VnICMgPSBcIit0aGlzLnNlZ21lbnRJbmRleCtcIiBkaXN0ID0gXCIrdGhpcy5kaXN0fSxKbi5wcm90b3R5cGUuZ2V0RGlzdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXN0fSxKbi5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnNlZ21lbnRJbmRleDx0Py0xOnRoaXMuc2VnbWVudEluZGV4PnQ/MTp0aGlzLmRpc3Q8ZT8tMTp0aGlzLmRpc3Q+ZT8xOjB9LEpuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJXX0sSm4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEpufTt2YXIgUW49ZnVuY3Rpb24oKXt0aGlzLl9ub2RlTWFwPW5ldyBjLHRoaXMuZWRnZT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmVkZ2U9dH07UW4ucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe3QucHJpbnRsbihcIkludGVyc2VjdGlvbnM6XCIpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXtlLm5leHQoKS5wcmludCh0KX19LFFuLnByb3RvdHlwZS5pdGVyYXRvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ub2RlTWFwLnZhbHVlcygpLml0ZXJhdG9yKCl9LFFuLnByb3RvdHlwZS5hZGRTcGxpdEVkZ2VzPWZ1bmN0aW9uKHQpe3RoaXMuYWRkRW5kcG9pbnRzKCk7Zm9yKHZhciBlPXRoaXMuaXRlcmF0b3IoKSxuPWUubmV4dCgpO2UuaGFzTmV4dCgpOyl7dmFyIGk9ZS5uZXh0KCkscj10aGlzLmNyZWF0ZVNwbGl0RWRnZShuLGkpO3QuYWRkKHIpLG49aX19LFFuLnByb3RvdHlwZS5hZGRFbmRwb2ludHM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVkZ2UucHRzLmxlbmd0aC0xO3RoaXMuYWRkKHRoaXMuZWRnZS5wdHNbMF0sMCwwKSx0aGlzLmFkZCh0aGlzLmVkZ2UucHRzW3RdLHQsMCl9LFFuLnByb3RvdHlwZS5jcmVhdGVTcGxpdEVkZ2U9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnNlZ21lbnRJbmRleC10LnNlZ21lbnRJbmRleCsyLGk9dGhpcy5lZGdlLnB0c1tlLnNlZ21lbnRJbmRleF0scj1lLmRpc3Q+MHx8IWUuY29vcmQuZXF1YWxzMkQoaSk7cnx8bi0tO3ZhciBvPW5ldyBBcnJheShuKS5maWxsKG51bGwpLHM9MDtvW3MrK109bmV3IE4odC5jb29yZCk7Zm9yKHZhciBhPXQuc2VnbWVudEluZGV4KzE7YTw9ZS5zZWdtZW50SW5kZXg7YSsrKW9bcysrXT10aGlzLmVkZ2UucHRzW2FdO3JldHVybiByJiYob1tzXT1lLmNvb3JkKSxuZXcgbmkobyxuZXcgUGUodGhpcy5lZGdlLl9sYWJlbCkpfSxRbi5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgSm4odCxlLG4pLHI9dGhpcy5fbm9kZU1hcC5nZXQoaSk7cmV0dXJuIG51bGwhPT1yP3I6KHRoaXMuX25vZGVNYXAucHV0KGksaSksaSl9LFFuLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7aWYoZS5uZXh0KCkuY29vcmQuZXF1YWxzKHQpKXJldHVybiEwfXJldHVybiExfSxRbi5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sUW4ucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFFufTt2YXIgWm49ZnVuY3Rpb24oKXt9O1puLnByb3RvdHlwZS5nZXRDaGFpblN0YXJ0SW5kaWNlcz1mdW5jdGlvbih0KXt2YXIgZT0wLG49bmV3IE50O24uYWRkKG5ldyBEKGUpKTtkb3t2YXIgaT10aGlzLmZpbmRDaGFpbkVuZCh0LGUpO24uYWRkKG5ldyBEKGkpKSxlPWl9d2hpbGUoZTx0Lmxlbmd0aC0xKTtyZXR1cm4gWm4udG9JbnRBcnJheShuKX0sWm4ucHJvdG90eXBlLmZpbmRDaGFpbkVuZD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1CZS5xdWFkcmFudCh0W2VdLHRbZSsxXSksaT1lKzE7aTx0Lmxlbmd0aDspe2lmKEJlLnF1YWRyYW50KHRbaS0xXSx0W2ldKSE9PW4pYnJlYWs7aSsrfXJldHVybiBpLTF9LFpuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxabi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gWm59LFpuLnRvSW50QXJyYXk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXT10LmdldChuKS5pbnRWYWx1ZSgpO3JldHVybiBlfTt2YXIgJG49ZnVuY3Rpb24oKXt0aGlzLmU9bnVsbCx0aGlzLnB0cz1udWxsLHRoaXMuc3RhcnRJbmRleD1udWxsLHRoaXMuZW52MT1uZXcgayx0aGlzLmVudjI9bmV3IGs7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZT10LHRoaXMucHRzPXQuZ2V0Q29vcmRpbmF0ZXMoKTt2YXIgZT1uZXcgWm47dGhpcy5zdGFydEluZGV4PWUuZ2V0Q2hhaW5TdGFydEluZGljZXModGhpcy5wdHMpfTskbi5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdHN9LCRuLnByb3RvdHlwZS5nZXRNYXhYPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucHRzW3RoaXMuc3RhcnRJbmRleFt0XV0ueCxuPXRoaXMucHRzW3RoaXMuc3RhcnRJbmRleFt0KzFdXS54O3JldHVybiBlPm4/ZTpufSwkbi5wcm90b3R5cGUuZ2V0TWluWD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnB0c1t0aGlzLnN0YXJ0SW5kZXhbdF1dLngsbj10aGlzLnB0c1t0aGlzLnN0YXJ0SW5kZXhbdCsxXV0ueDtyZXR1cm4gZTxuP2U6bn0sJG4ucHJvdG90eXBlLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW49ZnVuY3Rpb24oKXtpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdO3RoaXMuY29tcHV0ZUludGVyc2VjdHNGb3JDaGFpbih0aGlzLnN0YXJ0SW5kZXhbdF0sdGhpcy5zdGFydEluZGV4W3QrMV0sZSxlLnN0YXJ0SW5kZXhbbl0sZS5zdGFydEluZGV4W24rMV0saSl9ZWxzZSBpZig2PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHI9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdLHM9YXJndW1lbnRzWzJdLGE9YXJndW1lbnRzWzNdLHU9YXJndW1lbnRzWzRdLGw9YXJndW1lbnRzWzVdLGM9dGhpcy5wdHNbcl0scD10aGlzLnB0c1tvXSxoPXMucHRzW2FdLGY9cy5wdHNbdV07aWYoby1yPT0xJiZ1LWE9PTEpcmV0dXJuIGwuYWRkSW50ZXJzZWN0aW9ucyh0aGlzLmUscixzLmUsYSksbnVsbDtpZih0aGlzLmVudjEuaW5pdChjLHApLHRoaXMuZW52Mi5pbml0KGgsZiksIXRoaXMuZW52MS5pbnRlcnNlY3RzKHRoaXMuZW52MikpcmV0dXJuIG51bGw7dmFyIGc9TWF0aC50cnVuYygocitvKS8yKSxkPU1hdGgudHJ1bmMoKGErdSkvMik7cjxnJiYoYTxkJiZ0aGlzLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW4ocixnLHMsYSxkLGwpLGQ8dSYmdGhpcy5jb21wdXRlSW50ZXJzZWN0c0ZvckNoYWluKHIsZyxzLGQsdSxsKSksZzxvJiYoYTxkJiZ0aGlzLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW4oZyxvLHMsYSxkLGwpLGQ8dSYmdGhpcy5jb21wdXRlSW50ZXJzZWN0c0ZvckNoYWluKGcsbyxzLGQsdSxsKSl9fSwkbi5wcm90b3R5cGUuZ2V0U3RhcnRJbmRleGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnRJbmRleH0sJG4ucHJvdG90eXBlLmNvbXB1dGVJbnRlcnNlY3RzPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0aGlzLnN0YXJ0SW5kZXgubGVuZ3RoLTE7bisrKWZvcih2YXIgaT0wO2k8dC5zdGFydEluZGV4Lmxlbmd0aC0xO2krKyl0aGlzLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW4obix0LGksZSl9LCRuLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSwkbi5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gJG59O3ZhciB0aT1mdW5jdGlvbiB0KCl7dGhpcy5fZGVwdGg9QXJyYXkoMikuZmlsbCgpLm1hcChmdW5jdGlvbigpe3JldHVybiBBcnJheSgzKX0pO2Zvcih2YXIgZT0wO2U8MjtlKyspZm9yKHZhciBuPTA7bjwzO24rKyl0aGlzLl9kZXB0aFtlXVtuXT10Lk5VTExfVkFMVUV9LGVpPXtOVUxMX1ZBTFVFOntjb25maWd1cmFibGU6ITB9fTt0aS5wcm90b3R5cGUuZ2V0RGVwdGg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fZGVwdGhbdF1bZV19LHRpLnByb3RvdHlwZS5zZXREZXB0aD1mdW5jdGlvbih0LGUsbil7dGhpcy5fZGVwdGhbdF1bZV09bn0sdGkucHJvdG90eXBlLmlzTnVsbD1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIHQ9MDt0PDI7dCsrKWZvcih2YXIgZT0wO2U8MztlKyspaWYodGhpcy5fZGVwdGhbdF1bZV0hPT10aS5OVUxMX1ZBTFVFKXJldHVybiExO3JldHVybiEwfWlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuX2RlcHRoW25dWzFdPT09dGkuTlVMTF9WQUxVRX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdO3JldHVybiB0aGlzLl9kZXB0aFtpXVtyXT09PXRpLk5VTExfVkFMVUV9fSx0aS5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDwyO3QrKylpZighdGhpcy5pc051bGwodCkpe3ZhciBlPXRoaXMuX2RlcHRoW3RdWzFdO3RoaXMuX2RlcHRoW3RdWzJdPGUmJihlPXRoaXMuX2RlcHRoW3RdWzJdKSxlPDAmJihlPTApO2Zvcih2YXIgbj0xO248MztuKyspe3ZhciBpPTA7dGhpcy5fZGVwdGhbdF1bbl0+ZSYmKGk9MSksdGhpcy5fZGVwdGhbdF1bbl09aX19fSx0aS5wcm90b3R5cGUuZ2V0RGVsdGE9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2RlcHRoW3RdW1NlLlJJR0hUXS10aGlzLl9kZXB0aFt0XVtTZS5MRUZUXX0sdGkucHJvdG90eXBlLmdldExvY2F0aW9uPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2RlcHRoW3RdW2VdPD0wP2IuRVhURVJJT1I6Yi5JTlRFUklPUn0sdGkucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJBOiBcIit0aGlzLl9kZXB0aFswXVsxXStcIixcIit0aGlzLl9kZXB0aFswXVsyXStcIiBCOiBcIit0aGlzLl9kZXB0aFsxXVsxXStcIixcIit0aGlzLl9kZXB0aFsxXVsyXX0sdGkucHJvdG90eXBlLmFkZD1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0wO2U8MjtlKyspZm9yKHZhciBuPTE7bjwzO24rKyl7dmFyIGk9dC5nZXRMb2NhdGlvbihlLG4pO2khPT1iLkVYVEVSSU9SJiZpIT09Yi5JTlRFUklPUnx8KHRoaXMuaXNOdWxsKGUsbik/dGhpcy5fZGVwdGhbZV1bbl09dGkuZGVwdGhBdExvY2F0aW9uKGkpOnRoaXMuX2RlcHRoW2VdW25dKz10aS5kZXB0aEF0TG9jYXRpb24oaSkpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXTthcmd1bWVudHNbMl09PT1iLklOVEVSSU9SJiZ0aGlzLl9kZXB0aFtyXVtvXSsrfX0sdGkucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHRpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB0aX0sdGkuZGVwdGhBdExvY2F0aW9uPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09Yi5FWFRFUklPUj8wOnQ9PT1iLklOVEVSSU9SPzE6dGkuTlVMTF9WQUxVRX0sZWkuTlVMTF9WQUxVRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4tMX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGksZWkpO3ZhciBuaT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7aWYodC5jYWxsKHRoaXMpLHRoaXMucHRzPW51bGwsdGhpcy5fZW52PW51bGwsdGhpcy5laUxpc3Q9bmV3IFFuKHRoaXMpLHRoaXMuX25hbWU9bnVsbCx0aGlzLl9tY2U9bnVsbCx0aGlzLl9pc0lzb2xhdGVkPSEwLHRoaXMuX2RlcHRoPW5ldyB0aSx0aGlzLl9kZXB0aERlbHRhPTAsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXTtlLmNhbGwodGhpcyxuLG51bGwpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXTt0aGlzLnB0cz1pLHRoaXMuX2xhYmVsPXJ9fXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5nZXREZXB0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9kZXB0aH0sZS5wcm90b3R5cGUuZ2V0Q29sbGFwc2VkRWRnZT1mdW5jdGlvbigpe3ZhciB0PW5ldyBBcnJheSgyKS5maWxsKG51bGwpO3RbMF09dGhpcy5wdHNbMF0sdFsxXT10aGlzLnB0c1sxXTtyZXR1cm4gbmV3IGUodCxQZS50b0xpbmVMYWJlbCh0aGlzLl9sYWJlbCkpfSxlLnByb3RvdHlwZS5pc0lzb2xhdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzSXNvbGF0ZWR9LGUucHJvdG90eXBlLmdldENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHRzfSxlLnByb3RvdHlwZS5zZXRJc29sYXRlZD1mdW5jdGlvbih0KXt0aGlzLl9pc0lzb2xhdGVkPXR9LGUucHJvdG90eXBlLnNldE5hbWU9ZnVuY3Rpb24odCl7dGhpcy5fbmFtZT10fSxlLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24odCl7aWYoISh0IGluc3RhbmNlb2YgZSkpcmV0dXJuITE7dmFyIG49dDtpZih0aGlzLnB0cy5sZW5ndGghPT1uLnB0cy5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBpPSEwLHI9ITAsbz10aGlzLnB0cy5sZW5ndGgscz0wO3M8dGhpcy5wdHMubGVuZ3RoO3MrKylpZih0aGlzLnB0c1tzXS5lcXVhbHMyRChuLnB0c1tzXSl8fChpPSExKSx0aGlzLnB0c1tzXS5lcXVhbHMyRChuLnB0c1stLW9dKXx8KHI9ITEpLCFpJiYhcilyZXR1cm4hMTtyZXR1cm4hMH0sZS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZT1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLnB0cy5sZW5ndGg+MD90aGlzLnB0c1swXTpudWxsO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMucHRzW3RdfX0sZS5wcm90b3R5cGUucHJpbnQ9ZnVuY3Rpb24odCl7dC5wcmludChcImVkZ2UgXCIrdGhpcy5fbmFtZStcIjogXCIpLHQucHJpbnQoXCJMSU5FU1RSSU5HIChcIik7Zm9yKHZhciBlPTA7ZTx0aGlzLnB0cy5sZW5ndGg7ZSsrKWU+MCYmdC5wcmludChcIixcIiksdC5wcmludCh0aGlzLnB0c1tlXS54K1wiIFwiK3RoaXMucHRzW2VdLnkpO3QucHJpbnQoXCIpICBcIit0aGlzLl9sYWJlbCtcIiBcIit0aGlzLl9kZXB0aERlbHRhKX0sZS5wcm90b3R5cGUuY29tcHV0ZUlNPWZ1bmN0aW9uKHQpe2UudXBkYXRlSU0odGhpcy5fbGFiZWwsdCl9LGUucHJvdG90eXBlLmlzQ29sbGFwc2VkPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLl9sYWJlbC5pc0FyZWEoKSYmKDM9PT10aGlzLnB0cy5sZW5ndGgmJiEhdGhpcy5wdHNbMF0uZXF1YWxzKHRoaXMucHRzWzJdKSl9LGUucHJvdG90eXBlLmlzQ2xvc2VkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHRzWzBdLmVxdWFscyh0aGlzLnB0c1t0aGlzLnB0cy5sZW5ndGgtMV0pfSxlLnByb3RvdHlwZS5nZXRNYXhpbXVtU2VnbWVudEluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHRzLmxlbmd0aC0xfSxlLnByb3RvdHlwZS5nZXREZXB0aERlbHRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RlcHRoRGVsdGF9LGUucHJvdG90eXBlLmdldE51bVBvaW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnB0cy5sZW5ndGh9LGUucHJvdG90eXBlLnByaW50UmV2ZXJzZT1mdW5jdGlvbih0KXt0LnByaW50KFwiZWRnZSBcIit0aGlzLl9uYW1lK1wiOiBcIik7Zm9yKHZhciBlPXRoaXMucHRzLmxlbmd0aC0xO2U+PTA7ZS0tKXQucHJpbnQodGhpcy5wdHNbZV0rXCIgXCIpO3QucHJpbnRsbihcIlwiKX0sZS5wcm90b3R5cGUuZ2V0TW9ub3RvbmVDaGFpbkVkZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuX21jZSYmKHRoaXMuX21jZT1uZXcgJG4odGhpcykpLHRoaXMuX21jZX0sZS5wcm90b3R5cGUuZ2V0RW52ZWxvcGU9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5fZW52KXt0aGlzLl9lbnY9bmV3IGs7Zm9yKHZhciB0PTA7dDx0aGlzLnB0cy5sZW5ndGg7dCsrKXRoaXMuX2Vudi5leHBhbmRUb0luY2x1ZGUodGhpcy5wdHNbdF0pfXJldHVybiB0aGlzLl9lbnZ9LGUucHJvdG90eXBlLmFkZEludGVyc2VjdGlvbj1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1uZXcgTih0LmdldEludGVyc2VjdGlvbihpKSksbz1lLHM9dC5nZXRFZGdlRGlzdGFuY2UobixpKSxhPW8rMTtpZihhPHRoaXMucHRzLmxlbmd0aCl7dmFyIHU9dGhpcy5wdHNbYV07ci5lcXVhbHMyRCh1KSYmKG89YSxzPTApfXRoaXMuZWlMaXN0LmFkZChyLG8scyl9LGUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFA7dC5hcHBlbmQoXCJlZGdlIFwiK3RoaXMuX25hbWUrXCI6IFwiKSx0LmFwcGVuZChcIkxJTkVTVFJJTkcgKFwiKTtmb3IodmFyIGU9MDtlPHRoaXMucHRzLmxlbmd0aDtlKyspZT4wJiZ0LmFwcGVuZChcIixcIiksdC5hcHBlbmQodGhpcy5wdHNbZV0ueCtcIiBcIit0aGlzLnB0c1tlXS55KTtyZXR1cm4gdC5hcHBlbmQoXCIpICBcIit0aGlzLl9sYWJlbCtcIiBcIit0aGlzLl9kZXB0aERlbHRhKSx0LnRvU3RyaW5nKCl9LGUucHJvdG90eXBlLmlzUG9pbnR3aXNlRXF1YWw9ZnVuY3Rpb24odCl7aWYodGhpcy5wdHMubGVuZ3RoIT09dC5wdHMubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgZT0wO2U8dGhpcy5wdHMubGVuZ3RoO2UrKylpZighdGhpcy5wdHNbZV0uZXF1YWxzMkQodC5wdHNbZV0pKXJldHVybiExO3JldHVybiEwfSxlLnByb3RvdHlwZS5zZXREZXB0aERlbHRhPWZ1bmN0aW9uKHQpe3RoaXMuX2RlcHRoRGVsdGE9dH0sZS5wcm90b3R5cGUuZ2V0RWRnZUludGVyc2VjdGlvbkxpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5laUxpc3R9LGUucHJvdG90eXBlLmFkZEludGVyc2VjdGlvbnM9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT0wO2k8dC5nZXRJbnRlcnNlY3Rpb25OdW0oKTtpKyspdGhpcy5hZGRJbnRlcnNlY3Rpb24odCxlLG4saSl9LGUucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGUucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGUudXBkYXRlSU09ZnVuY3Rpb24oKXtpZigyIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdC5wcm90b3R5cGUudXBkYXRlSU0uYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtuLnNldEF0TGVhc3RJZlZhbGlkKGUuZ2V0TG9jYXRpb24oMCxTZS5PTiksZS5nZXRMb2NhdGlvbigxLFNlLk9OKSwxKSxlLmlzQXJlYSgpJiYobi5zZXRBdExlYXN0SWZWYWxpZChlLmdldExvY2F0aW9uKDAsU2UuTEVGVCksZS5nZXRMb2NhdGlvbigxLFNlLkxFRlQpLDIpLG4uc2V0QXRMZWFzdElmVmFsaWQoZS5nZXRMb2NhdGlvbigwLFNlLlJJR0hUKSxlLmdldExvY2F0aW9uKDEsU2UuUklHSFQpLDIpKX0sZX0oRmUpLGlpPWZ1bmN0aW9uKHQpe3RoaXMuX3dvcmtpbmdQcmVjaXNpb25Nb2RlbD1udWxsLHRoaXMuX3dvcmtpbmdOb2Rlcj1udWxsLHRoaXMuX2dlb21GYWN0PW51bGwsdGhpcy5fZ3JhcGg9bnVsbCx0aGlzLl9lZGdlTGlzdD1uZXcgSG4sdGhpcy5fYnVmUGFyYW1zPXR8fG51bGx9O2lpLnByb3RvdHlwZS5zZXRXb3JraW5nUHJlY2lzaW9uTW9kZWw9ZnVuY3Rpb24odCl7dGhpcy5fd29ya2luZ1ByZWNpc2lvbk1vZGVsPXR9LGlpLnByb3RvdHlwZS5pbnNlcnRVbmlxdWVFZGdlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2VkZ2VMaXN0LmZpbmRFcXVhbEVkZ2UodCk7aWYobnVsbCE9PWUpe3ZhciBuPWUuZ2V0TGFiZWwoKSxpPXQuZ2V0TGFiZWwoKTtlLmlzUG9pbnR3aXNlRXF1YWwodCl8fChpPW5ldyBQZSh0LmdldExhYmVsKCkpKS5mbGlwKCksbi5tZXJnZShpKTt2YXIgcj1paS5kZXB0aERlbHRhKGkpLG89ZS5nZXREZXB0aERlbHRhKCkrcjtlLnNldERlcHRoRGVsdGEobyl9ZWxzZSB0aGlzLl9lZGdlTGlzdC5hZGQodCksdC5zZXREZXB0aERlbHRhKGlpLmRlcHRoRGVsdGEodC5nZXRMYWJlbCgpKSl9LGlpLnByb3RvdHlwZS5idWlsZFN1YmdyYXBocz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgTnQsaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKSxvPXIuZ2V0UmlnaHRtb3N0Q29vcmRpbmF0ZSgpLHM9bmV3IEFuKG4pLmdldERlcHRoKG8pO3IuY29tcHV0ZURlcHRoKHMpLHIuZmluZFJlc3VsdEVkZ2VzKCksbi5hZGQociksZS5hZGQoci5nZXREaXJlY3RlZEVkZ2VzKCksci5nZXROb2RlcygpKX19LGlpLnByb3RvdHlwZS5jcmVhdGVTdWJncmFwaHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBOdCxuPXQuZ2V0Tm9kZXMoKS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7aWYoIWkuaXNWaXNpdGVkKCkpe3ZhciByPW5ldyBUZTtyLmNyZWF0ZShpKSxlLmFkZChyKX19cmV0dXJuICRlLnNvcnQoZSwkZS5yZXZlcnNlT3JkZXIoKSksZX0saWkucHJvdG90eXBlLmNyZWF0ZUVtcHR5UmVzdWx0R2VvbWV0cnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZ2VvbUZhY3QuY3JlYXRlUG9seWdvbigpfSxpaS5wcm90b3R5cGUuZ2V0Tm9kZXI9ZnVuY3Rpb24odCl7aWYobnVsbCE9PXRoaXMuX3dvcmtpbmdOb2RlcilyZXR1cm4gdGhpcy5fd29ya2luZ05vZGVyO3ZhciBlPW5ldyB4bixuPW5ldyBpdDtyZXR1cm4gbi5zZXRQcmVjaXNpb25Nb2RlbCh0KSxlLnNldFNlZ21lbnRJbnRlcnNlY3RvcihuZXcgS24obikpLGV9LGlpLnByb3RvdHlwZS5idWZmZXI9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl93b3JraW5nUHJlY2lzaW9uTW9kZWw7bnVsbD09PW4mJihuPXQuZ2V0UHJlY2lzaW9uTW9kZWwoKSksdGhpcy5fZ2VvbUZhY3Q9dC5nZXRGYWN0b3J5KCk7dmFyIGk9bmV3IE1uKG4sdGhpcy5fYnVmUGFyYW1zKSxyPW5ldyBCbih0LGUsaSkuZ2V0Q3VydmVzKCk7aWYoci5zaXplKCk8PTApcmV0dXJuIHRoaXMuY3JlYXRlRW1wdHlSZXN1bHRHZW9tZXRyeSgpO3RoaXMuY29tcHV0ZU5vZGVkRWRnZXMocixuKSx0aGlzLl9ncmFwaD1uZXcgWWUobmV3IGtuKSx0aGlzLl9ncmFwaC5hZGRFZGdlcyh0aGlzLl9lZGdlTGlzdC5nZXRFZGdlcygpKTt2YXIgbz10aGlzLmNyZWF0ZVN1YmdyYXBocyh0aGlzLl9ncmFwaCkscz1uZXcga2UodGhpcy5fZ2VvbUZhY3QpO3RoaXMuYnVpbGRTdWJncmFwaHMobyxzKTt2YXIgYT1zLmdldFBvbHlnb25zKCk7aWYoYS5zaXplKCk8PTApcmV0dXJuIHRoaXMuY3JlYXRlRW1wdHlSZXN1bHRHZW9tZXRyeSgpO3JldHVybiB0aGlzLl9nZW9tRmFjdC5idWlsZEdlb21ldHJ5KGEpfSxpaS5wcm90b3R5cGUuY29tcHV0ZU5vZGVkRWRnZXM9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldE5vZGVyKGUpO24uY29tcHV0ZU5vZGVzKHQpO2Zvcih2YXIgaT1uLmdldE5vZGVkU3Vic3RyaW5ncygpLml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKSxvPXIuZ2V0Q29vcmRpbmF0ZXMoKTtpZigyIT09by5sZW5ndGh8fCFvWzBdLmVxdWFsczJEKG9bMV0pKXt2YXIgcz1yLmdldERhdGEoKSxhPW5ldyBuaShyLmdldENvb3JkaW5hdGVzKCksbmV3IFBlKHMpKTt0aGlzLmluc2VydFVuaXF1ZUVkZ2UoYSl9fX0saWkucHJvdG90eXBlLnNldE5vZGVyPWZ1bmN0aW9uKHQpe3RoaXMuX3dvcmtpbmdOb2Rlcj10fSxpaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0saWkucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGlpfSxpaS5kZXB0aERlbHRhPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0TG9jYXRpb24oMCxTZS5MRUZUKSxuPXQuZ2V0TG9jYXRpb24oMCxTZS5SSUdIVCk7cmV0dXJuIGU9PT1iLklOVEVSSU9SJiZuPT09Yi5FWFRFUklPUj8xOmU9PT1iLkVYVEVSSU9SJiZuPT09Yi5JTlRFUklPUj8tMTowfSxpaS5jb252ZXJ0U2VnU3RyaW5ncz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IF9lLG49bmV3IE50O3QuaGFzTmV4dCgpOyl7dmFyIGk9dC5uZXh0KCkscj1lLmNyZWF0ZUxpbmVTdHJpbmcoaS5nZXRDb29yZGluYXRlcygpKTtuLmFkZChyKX1yZXR1cm4gZS5idWlsZEdlb21ldHJ5KG4pfTt2YXIgcmk9ZnVuY3Rpb24oKXtpZih0aGlzLl9ub2Rlcj1udWxsLHRoaXMuX3NjYWxlRmFjdG9yPW51bGwsdGhpcy5fb2Zmc2V0WD1udWxsLHRoaXMuX29mZnNldFk9bnVsbCx0aGlzLl9pc1NjYWxlZD0hMSwyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuX25vZGVyPXQsdGhpcy5fc2NhbGVGYWN0b3I9ZSx0aGlzLl9vZmZzZXRYPTAsdGhpcy5fb2Zmc2V0WT0wLHRoaXMuX2lzU2NhbGVkPSF0aGlzLmlzSW50ZWdlclByZWNpc2lvbigpfWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXSxvPWFyZ3VtZW50c1szXTt0aGlzLl9ub2Rlcj1uLHRoaXMuX3NjYWxlRmFjdG9yPWksdGhpcy5fb2Zmc2V0WD1yLHRoaXMuX29mZnNldFk9byx0aGlzLl9pc1NjYWxlZD0hdGhpcy5pc0ludGVnZXJQcmVjaXNpb24oKX19O3JpLnByb3RvdHlwZS5yZXNjYWxlPWZ1bmN0aW9uKCl7aWYoTyhhcmd1bWVudHNbMF0sdnQpKWZvcih2YXIgdD1hcmd1bWVudHNbMF0uaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpO3RoaXMucmVzY2FsZShlLmdldENvb3JkaW5hdGVzKCkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7Zm9yKHZhciBuPWFyZ3VtZW50c1swXSxpPTA7aTxuLmxlbmd0aDtpKyspbltpXS54PW5baV0ueC90aGlzLl9zY2FsZUZhY3Rvcit0aGlzLl9vZmZzZXRYLG5baV0ueT1uW2ldLnkvdGhpcy5fc2NhbGVGYWN0b3IrdGhpcy5fb2Zmc2V0WTsyPT09bi5sZW5ndGgmJm5bMF0uZXF1YWxzMkQoblsxXSkmJlgub3V0LnByaW50bG4obil9fSxyaS5wcm90b3R5cGUuc2NhbGU9ZnVuY3Rpb24oKXtpZihPKGFyZ3VtZW50c1swXSx2dCkpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgTnQsbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtlLmFkZChuZXcgZ24odGhpcy5zY2FsZShpLmdldENvb3JkaW5hdGVzKCkpLGkuZ2V0RGF0YSgpKSl9cmV0dXJuIGV9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7Zm9yKHZhciByPWFyZ3VtZW50c1swXSxvPW5ldyBBcnJheShyLmxlbmd0aCkuZmlsbChudWxsKSxzPTA7czxyLmxlbmd0aDtzKyspb1tzXT1uZXcgTihNYXRoLnJvdW5kKChyW3NdLngtdGhpcy5fb2Zmc2V0WCkqdGhpcy5fc2NhbGVGYWN0b3IpLE1hdGgucm91bmQoKHJbc10ueS10aGlzLl9vZmZzZXRZKSp0aGlzLl9zY2FsZUZhY3RvcikscltzXS56KTtyZXR1cm4gTHQucmVtb3ZlUmVwZWF0ZWRQb2ludHMobyl9fSxyaS5wcm90b3R5cGUuaXNJbnRlZ2VyUHJlY2lzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIDE9PT10aGlzLl9zY2FsZUZhY3Rvcn0scmkucHJvdG90eXBlLmdldE5vZGVkU3Vic3RyaW5ncz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX25vZGVyLmdldE5vZGVkU3Vic3RyaW5ncygpO3JldHVybiB0aGlzLl9pc1NjYWxlZCYmdGhpcy5yZXNjYWxlKHQpLHR9LHJpLnByb3RvdHlwZS5jb21wdXRlTm9kZXM9ZnVuY3Rpb24odCl7dmFyIGU9dDt0aGlzLl9pc1NjYWxlZCYmKGU9dGhpcy5zY2FsZSh0KSksdGhpcy5fbm9kZXIuY29tcHV0ZU5vZGVzKGUpfSxyaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bSW5dfSxyaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gcml9O3ZhciBvaT1mdW5jdGlvbigpe3RoaXMuX2xpPW5ldyBpdCx0aGlzLl9zZWdTdHJpbmdzPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX3NlZ1N0cmluZ3M9dH0sc2k9e2ZhY3Q6e2NvbmZpZ3VyYWJsZTohMH19O29pLnByb3RvdHlwZS5jaGVja0VuZFB0VmVydGV4SW50ZXJzZWN0aW9ucz1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgdD10aGlzLl9zZWdTdHJpbmdzLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKS5nZXRDb29yZGluYXRlcygpO3RoaXMuY2hlY2tFbmRQdFZlcnRleEludGVyc2VjdGlvbnMoZVswXSx0aGlzLl9zZWdTdHJpbmdzKSx0aGlzLmNoZWNrRW5kUHRWZXJ0ZXhJbnRlcnNlY3Rpb25zKGVbZS5sZW5ndGgtMV0sdGhpcy5fc2VnU3RyaW5ncyl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KWZvcih2YXIgcj1pLm5leHQoKS5nZXRDb29yZGluYXRlcygpLG89MTtvPHIubGVuZ3RoLTE7bysrKWlmKHJbb10uZXF1YWxzKG4pKXRocm93IG5ldyBaKFwiZm91bmQgZW5kcHQvaW50ZXJpb3IgcHQgaW50ZXJzZWN0aW9uIGF0IGluZGV4IFwiK28rXCIgOnB0IFwiK24pfSxvaS5wcm90b3R5cGUuY2hlY2tJbnRlcmlvckludGVyc2VjdGlvbnM9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIHQ9dGhpcy5fc2VnU3RyaW5ncy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOylmb3IodmFyIGU9dC5uZXh0KCksbj10aGlzLl9zZWdTdHJpbmdzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTt0aGlzLmNoZWNrSW50ZXJpb3JJbnRlcnNlY3Rpb25zKGUsaSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIHI9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdLHM9ci5nZXRDb29yZGluYXRlcygpLGE9by5nZXRDb29yZGluYXRlcygpLHU9MDt1PHMubGVuZ3RoLTE7dSsrKWZvcih2YXIgbD0wO2w8YS5sZW5ndGgtMTtsKyspdGhpcy5jaGVja0ludGVyaW9ySW50ZXJzZWN0aW9ucyhyLHUsbyxsKTtlbHNlIGlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgYz1hcmd1bWVudHNbMF0scD1hcmd1bWVudHNbMV0saD1hcmd1bWVudHNbMl0sZj1hcmd1bWVudHNbM107aWYoYz09PWgmJnA9PT1mKXJldHVybiBudWxsO3ZhciBnPWMuZ2V0Q29vcmRpbmF0ZXMoKVtwXSxkPWMuZ2V0Q29vcmRpbmF0ZXMoKVtwKzFdLHk9aC5nZXRDb29yZGluYXRlcygpW2ZdLF89aC5nZXRDb29yZGluYXRlcygpW2YrMV07aWYodGhpcy5fbGkuY29tcHV0ZUludGVyc2VjdGlvbihnLGQseSxfKSx0aGlzLl9saS5oYXNJbnRlcnNlY3Rpb24oKSYmKHRoaXMuX2xpLmlzUHJvcGVyKCl8fHRoaXMuaGFzSW50ZXJpb3JJbnRlcnNlY3Rpb24odGhpcy5fbGksZyxkKXx8dGhpcy5oYXNJbnRlcmlvckludGVyc2VjdGlvbih0aGlzLl9saSx5LF8pKSl0aHJvdyBuZXcgWihcImZvdW5kIG5vbi1ub2RlZCBpbnRlcnNlY3Rpb24gYXQgXCIrZytcIi1cIitkK1wiIGFuZCBcIit5K1wiLVwiK18pfX0sb2kucHJvdG90eXBlLmNoZWNrVmFsaWQ9ZnVuY3Rpb24oKXt0aGlzLmNoZWNrRW5kUHRWZXJ0ZXhJbnRlcnNlY3Rpb25zKCksdGhpcy5jaGVja0ludGVyaW9ySW50ZXJzZWN0aW9ucygpLHRoaXMuY2hlY2tDb2xsYXBzZXMoKX0sb2kucHJvdG90eXBlLmNoZWNrQ29sbGFwc2VzPWZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciB0PXRoaXMuX3NlZ1N0cmluZ3MuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpO3RoaXMuY2hlY2tDb2xsYXBzZXMoZSl9ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIG49YXJndW1lbnRzWzBdLmdldENvb3JkaW5hdGVzKCksaT0wO2k8bi5sZW5ndGgtMjtpKyspdGhpcy5jaGVja0NvbGxhcHNlKG5baV0sbltpKzFdLG5baSsyXSl9LG9pLnByb3RvdHlwZS5oYXNJbnRlcmlvckludGVyc2VjdGlvbj1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPTA7aTx0LmdldEludGVyc2VjdGlvbk51bSgpO2krKyl7dmFyIHI9dC5nZXRJbnRlcnNlY3Rpb24oaSk7aWYoIXIuZXF1YWxzKGUpJiYhci5lcXVhbHMobikpcmV0dXJuITB9cmV0dXJuITF9LG9pLnByb3RvdHlwZS5jaGVja0NvbGxhcHNlPWZ1bmN0aW9uKHQsZSxuKXtpZih0LmVxdWFscyhuKSl0aHJvdyBuZXcgWihcImZvdW5kIG5vbi1ub2RlZCBjb2xsYXBzZSBhdCBcIitvaS5mYWN0LmNyZWF0ZUxpbmVTdHJpbmcoW3QsZSxuXSkpfSxvaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sb2kucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIG9pfSxzaS5mYWN0LmdldD1mdW5jdGlvbigpe3JldHVybiBuZXcgX2V9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9pLHNpKTt2YXIgYWk9ZnVuY3Rpb24oKXt0aGlzLl9saT1udWxsLHRoaXMuX3B0PW51bGwsdGhpcy5fb3JpZ2luYWxQdD1udWxsLHRoaXMuX3B0U2NhbGVkPW51bGwsdGhpcy5fcDBTY2FsZWQ9bnVsbCx0aGlzLl9wMVNjYWxlZD1udWxsLHRoaXMuX3NjYWxlRmFjdG9yPW51bGwsdGhpcy5fbWlueD1udWxsLHRoaXMuX21heHg9bnVsbCx0aGlzLl9taW55PW51bGwsdGhpcy5fbWF4eT1udWxsLHRoaXMuX2Nvcm5lcj1uZXcgQXJyYXkoNCkuZmlsbChudWxsKSx0aGlzLl9zYWZlRW52PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdO2lmKHRoaXMuX29yaWdpbmFsUHQ9dCx0aGlzLl9wdD10LHRoaXMuX3NjYWxlRmFjdG9yPWUsdGhpcy5fbGk9bixlPD0wKXRocm93IG5ldyBfKFwiU2NhbGUgZmFjdG9yIG11c3QgYmUgbm9uLXplcm9cIik7MSE9PWUmJih0aGlzLl9wdD1uZXcgTih0aGlzLnNjYWxlKHQueCksdGhpcy5zY2FsZSh0LnkpKSx0aGlzLl9wMFNjYWxlZD1uZXcgTix0aGlzLl9wMVNjYWxlZD1uZXcgTiksdGhpcy5pbml0Q29ybmVycyh0aGlzLl9wdCl9LHVpPXtTQUZFX0VOVl9FWFBBTlNJT05fRkFDVE9SOntjb25maWd1cmFibGU6ITB9fTthaS5wcm90b3R5cGUuaW50ZXJzZWN0c1NjYWxlZD1mdW5jdGlvbih0LGUpe3ZhciBuPU1hdGgubWluKHQueCxlLngpLGk9TWF0aC5tYXgodC54LGUueCkscj1NYXRoLm1pbih0LnksZS55KSxvPU1hdGgubWF4KHQueSxlLnkpLHM9dGhpcy5fbWF4eDxufHx0aGlzLl9taW54Pml8fHRoaXMuX21heHk8cnx8dGhpcy5fbWlueT5vO2lmKHMpcmV0dXJuITE7dmFyIGE9dGhpcy5pbnRlcnNlY3RzVG9sZXJhbmNlU3F1YXJlKHQsZSk7cmV0dXJuIHR0LmlzVHJ1ZSghKHMmJmEpLFwiRm91bmQgYmFkIGVudmVsb3BlIHRlc3RcIiksYX0sYWkucHJvdG90eXBlLmluaXRDb3JuZXJzPWZ1bmN0aW9uKHQpe3RoaXMuX21pbng9dC54LS41LHRoaXMuX21heHg9dC54Ky41LHRoaXMuX21pbnk9dC55LS41LHRoaXMuX21heHk9dC55Ky41LHRoaXMuX2Nvcm5lclswXT1uZXcgTih0aGlzLl9tYXh4LHRoaXMuX21heHkpLHRoaXMuX2Nvcm5lclsxXT1uZXcgTih0aGlzLl9taW54LHRoaXMuX21heHkpLHRoaXMuX2Nvcm5lclsyXT1uZXcgTih0aGlzLl9taW54LHRoaXMuX21pbnkpLHRoaXMuX2Nvcm5lclszXT1uZXcgTih0aGlzLl9tYXh4LHRoaXMuX21pbnkpfSxhaS5wcm90b3R5cGUuaW50ZXJzZWN0cz1mdW5jdGlvbih0LGUpe3JldHVybiAxPT09dGhpcy5fc2NhbGVGYWN0b3I/dGhpcy5pbnRlcnNlY3RzU2NhbGVkKHQsZSk6KHRoaXMuY29weVNjYWxlZCh0LHRoaXMuX3AwU2NhbGVkKSx0aGlzLmNvcHlTY2FsZWQoZSx0aGlzLl9wMVNjYWxlZCksdGhpcy5pbnRlcnNlY3RzU2NhbGVkKHRoaXMuX3AwU2NhbGVkLHRoaXMuX3AxU2NhbGVkKSl9LGFpLnByb3RvdHlwZS5zY2FsZT1mdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5yb3VuZCh0KnRoaXMuX3NjYWxlRmFjdG9yKX0sYWkucHJvdG90eXBlLmdldENvb3JkaW5hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3JpZ2luYWxQdH0sYWkucHJvdG90eXBlLmNvcHlTY2FsZWQ9ZnVuY3Rpb24odCxlKXtlLng9dGhpcy5zY2FsZSh0LngpLGUueT10aGlzLnNjYWxlKHQueSl9LGFpLnByb3RvdHlwZS5nZXRTYWZlRW52ZWxvcGU9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5fc2FmZUVudil7dmFyIHQ9YWkuU0FGRV9FTlZfRVhQQU5TSU9OX0ZBQ1RPUi90aGlzLl9zY2FsZUZhY3Rvcjt0aGlzLl9zYWZlRW52PW5ldyBrKHRoaXMuX29yaWdpbmFsUHQueC10LHRoaXMuX29yaWdpbmFsUHQueCt0LHRoaXMuX29yaWdpbmFsUHQueS10LHRoaXMuX29yaWdpbmFsUHQueSt0KX1yZXR1cm4gdGhpcy5fc2FmZUVudn0sYWkucHJvdG90eXBlLmludGVyc2VjdHNQaXhlbENsb3N1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fbGkuY29tcHV0ZUludGVyc2VjdGlvbih0LGUsdGhpcy5fY29ybmVyWzBdLHRoaXMuX2Nvcm5lclsxXSksISF0aGlzLl9saS5oYXNJbnRlcnNlY3Rpb24oKXx8KHRoaXMuX2xpLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxlLHRoaXMuX2Nvcm5lclsxXSx0aGlzLl9jb3JuZXJbMl0pLCEhdGhpcy5fbGkuaGFzSW50ZXJzZWN0aW9uKCl8fCh0aGlzLl9saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLl9jb3JuZXJbMl0sdGhpcy5fY29ybmVyWzNdKSwhIXRoaXMuX2xpLmhhc0ludGVyc2VjdGlvbigpfHwodGhpcy5fbGkuY29tcHV0ZUludGVyc2VjdGlvbih0LGUsdGhpcy5fY29ybmVyWzNdLHRoaXMuX2Nvcm5lclswXSksISF0aGlzLl9saS5oYXNJbnRlcnNlY3Rpb24oKSkpKX0sYWkucHJvdG90eXBlLmludGVyc2VjdHNUb2xlcmFuY2VTcXVhcmU9ZnVuY3Rpb24odCxlKXt2YXIgbj0hMSxpPSExO3JldHVybiB0aGlzLl9saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLl9jb3JuZXJbMF0sdGhpcy5fY29ybmVyWzFdKSwhIXRoaXMuX2xpLmlzUHJvcGVyKCl8fCh0aGlzLl9saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLl9jb3JuZXJbMV0sdGhpcy5fY29ybmVyWzJdKSwhIXRoaXMuX2xpLmlzUHJvcGVyKCl8fCh0aGlzLl9saS5oYXNJbnRlcnNlY3Rpb24oKSYmKG49ITApLHRoaXMuX2xpLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxlLHRoaXMuX2Nvcm5lclsyXSx0aGlzLl9jb3JuZXJbM10pLCEhdGhpcy5fbGkuaXNQcm9wZXIoKXx8KHRoaXMuX2xpLmhhc0ludGVyc2VjdGlvbigpJiYoaT0hMCksdGhpcy5fbGkuY29tcHV0ZUludGVyc2VjdGlvbih0LGUsdGhpcy5fY29ybmVyWzNdLHRoaXMuX2Nvcm5lclswXSksISF0aGlzLl9saS5pc1Byb3BlcigpfHwoISghbnx8IWkpfHwoISF0LmVxdWFscyh0aGlzLl9wdCl8fCEhZS5lcXVhbHModGhpcy5fcHQpKSkpKSl9LGFpLnByb3RvdHlwZS5hZGRTbmFwcGVkTm9kZT1mdW5jdGlvbih0LGUpe3ZhciBuPXQuZ2V0Q29vcmRpbmF0ZShlKSxpPXQuZ2V0Q29vcmRpbmF0ZShlKzEpO3JldHVybiEhdGhpcy5pbnRlcnNlY3RzKG4saSkmJih0LmFkZEludGVyc2VjdGlvbih0aGlzLmdldENvb3JkaW5hdGUoKSxlKSwhMCl9LGFpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxhaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gYWl9LHVpLlNBRkVfRU5WX0VYUEFOU0lPTl9GQUNUT1IuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLjc1fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhaSx1aSk7dmFyIGxpPWZ1bmN0aW9uKCl7dGhpcy50ZW1wRW52MT1uZXcgayx0aGlzLnNlbGVjdGVkU2VnbWVudD1uZXcgZG59O2xpLnByb3RvdHlwZS5zZWxlY3Q9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCk7ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3QuZ2V0TGluZVNlZ21lbnQoZSx0aGlzLnNlbGVjdGVkU2VnbWVudCksdGhpcy5zZWxlY3QodGhpcy5zZWxlY3RlZFNlZ21lbnQpfX0sbGkucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGxpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBsaX07dmFyIGNpPWZ1bmN0aW9uKCl7dGhpcy5faW5kZXg9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5faW5kZXg9dH0scGk9e0hvdFBpeGVsU25hcEFjdGlvbjp7Y29uZmlndXJhYmxlOiEwfX07Y2kucHJvdG90eXBlLnNuYXA9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLnNuYXAodCxudWxsLC0xKX1pZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9YXJndW1lbnRzWzJdLHI9ZS5nZXRTYWZlRW52ZWxvcGUoKSxvPW5ldyBoaShlLG4saSk7cmV0dXJuIHRoaXMuX2luZGV4LnF1ZXJ5KHIse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW0tlXX0sdmlzaXRJdGVtOmZ1bmN0aW9uKHQpe3Quc2VsZWN0KHIsbyl9fSksby5pc05vZGVBZGRlZCgpfX0sY2kucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGNpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBjaX0scGkuSG90UGl4ZWxTbmFwQWN0aW9uLmdldD1mdW5jdGlvbigpe3JldHVybiBoaX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2kscGkpO3ZhciBoaT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5jYWxsKHRoaXMpLHRoaXMuX2hvdFBpeGVsPW51bGwsdGhpcy5fcGFyZW50RWRnZT1udWxsLHRoaXMuX2hvdFBpeGVsVmVydGV4SW5kZXg9bnVsbCx0aGlzLl9pc05vZGVBZGRlZD0hMTt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1hcmd1bWVudHNbMl07dGhpcy5faG90UGl4ZWw9ZSx0aGlzLl9wYXJlbnRFZGdlPW4sdGhpcy5faG90UGl4ZWxWZXJ0ZXhJbmRleD1pfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5pc05vZGVBZGRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc05vZGVBZGRlZH0sZS5wcm90b3R5cGUuc2VsZWN0PWZ1bmN0aW9uKCl7aWYoMiE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHQucHJvdG90eXBlLnNlbGVjdC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9ZS5nZXRDb250ZXh0KCk7aWYobnVsbCE9PXRoaXMuX3BhcmVudEVkZ2UmJmk9PT10aGlzLl9wYXJlbnRFZGdlJiZuPT09dGhpcy5faG90UGl4ZWxWZXJ0ZXhJbmRleClyZXR1cm4gbnVsbDt0aGlzLl9pc05vZGVBZGRlZD10aGlzLl9ob3RQaXhlbC5hZGRTbmFwcGVkTm9kZShpLG4pfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxlfShsaSksZmk9ZnVuY3Rpb24oKXt0aGlzLl9saT1udWxsLHRoaXMuX2ludGVyaW9ySW50ZXJzZWN0aW9ucz1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9saT10LHRoaXMuX2ludGVyaW9ySW50ZXJzZWN0aW9ucz1uZXcgTnR9O2ZpLnByb3RvdHlwZS5wcm9jZXNzSW50ZXJzZWN0aW9ucz1mdW5jdGlvbih0LGUsbixpKXtpZih0PT09biYmZT09PWkpcmV0dXJuIG51bGw7dmFyIHI9dC5nZXRDb29yZGluYXRlcygpW2VdLG89dC5nZXRDb29yZGluYXRlcygpW2UrMV0scz1uLmdldENvb3JkaW5hdGVzKClbaV0sYT1uLmdldENvb3JkaW5hdGVzKClbaSsxXTtpZih0aGlzLl9saS5jb21wdXRlSW50ZXJzZWN0aW9uKHIsbyxzLGEpLHRoaXMuX2xpLmhhc0ludGVyc2VjdGlvbigpJiZ0aGlzLl9saS5pc0ludGVyaW9ySW50ZXJzZWN0aW9uKCkpe2Zvcih2YXIgdT0wO3U8dGhpcy5fbGkuZ2V0SW50ZXJzZWN0aW9uTnVtKCk7dSsrKXRoaXMuX2ludGVyaW9ySW50ZXJzZWN0aW9ucy5hZGQodGhpcy5fbGkuZ2V0SW50ZXJzZWN0aW9uKHUpKTt0LmFkZEludGVyc2VjdGlvbnModGhpcy5fbGksZSwwKSxuLmFkZEludGVyc2VjdGlvbnModGhpcy5fbGksaSwxKX19LGZpLnByb3RvdHlwZS5pc0RvbmU9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZmkucHJvdG90eXBlLmdldEludGVyaW9ySW50ZXJzZWN0aW9ucz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnRlcmlvckludGVyc2VjdGlvbnN9LGZpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltXbl19LGZpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBmaX07dmFyIGdpPWZ1bmN0aW9uKCl7dGhpcy5fcG09bnVsbCx0aGlzLl9saT1udWxsLHRoaXMuX3NjYWxlRmFjdG9yPW51bGwsdGhpcy5fbm9kZXI9bnVsbCx0aGlzLl9wb2ludFNuYXBwZXI9bnVsbCx0aGlzLl9ub2RlZFNlZ1N0cmluZ3M9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fcG09dCx0aGlzLl9saT1uZXcgaXQsdGhpcy5fbGkuc2V0UHJlY2lzaW9uTW9kZWwodCksdGhpcy5fc2NhbGVGYWN0b3I9dC5nZXRTY2FsZSgpfTtnaS5wcm90b3R5cGUuY2hlY2tDb3JyZWN0bmVzcz1mdW5jdGlvbih0KXt2YXIgZT1nbi5nZXROb2RlZFN1YnN0cmluZ3ModCksbj1uZXcgb2koZSk7dHJ5e24uY2hlY2tWYWxpZCgpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIFUpKXRocm93IHQ7dC5wcmludFN0YWNrVHJhY2UoKX19LGdpLnByb3RvdHlwZS5nZXROb2RlZFN1YnN0cmluZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gZ24uZ2V0Tm9kZWRTdWJzdHJpbmdzKHRoaXMuX25vZGVkU2VnU3RyaW5ncyl9LGdpLnByb3RvdHlwZS5zbmFwUm91bmQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmZpbmRJbnRlcmlvckludGVyc2VjdGlvbnModCxlKTt0aGlzLmNvbXB1dGVJbnRlcnNlY3Rpb25TbmFwcyhuKSx0aGlzLmNvbXB1dGVWZXJ0ZXhTbmFwcyh0KX0sZ2kucHJvdG90eXBlLmZpbmRJbnRlcmlvckludGVyc2VjdGlvbnM9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgZmkoZSk7cmV0dXJuIHRoaXMuX25vZGVyLnNldFNlZ21lbnRJbnRlcnNlY3RvcihuKSx0aGlzLl9ub2Rlci5jb21wdXRlTm9kZXModCksbi5nZXRJbnRlcmlvckludGVyc2VjdGlvbnMoKX0sZ2kucHJvdG90eXBlLmNvbXB1dGVWZXJ0ZXhTbmFwcz1mdW5jdGlvbigpe2lmKE8oYXJndW1lbnRzWzBdLHZ0KSlmb3IodmFyIHQ9YXJndW1lbnRzWzBdLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTt0aGlzLmNvbXB1dGVWZXJ0ZXhTbmFwcyhlKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZ24pZm9yKHZhciBuPWFyZ3VtZW50c1swXSxpPW4uZ2V0Q29vcmRpbmF0ZXMoKSxyPTA7cjxpLmxlbmd0aDtyKyspe3ZhciBvPW5ldyBhaShpW3JdLHRoaXMuX3NjYWxlRmFjdG9yLHRoaXMuX2xpKTt0aGlzLl9wb2ludFNuYXBwZXIuc25hcChvLG4scikmJm4uYWRkSW50ZXJzZWN0aW9uKGlbcl0scil9fSxnaS5wcm90b3R5cGUuY29tcHV0ZU5vZGVzPWZ1bmN0aW9uKHQpe3RoaXMuX25vZGVkU2VnU3RyaW5ncz10LHRoaXMuX25vZGVyPW5ldyB4bix0aGlzLl9wb2ludFNuYXBwZXI9bmV3IGNpKHRoaXMuX25vZGVyLmdldEluZGV4KCkpLHRoaXMuc25hcFJvdW5kKHQsdGhpcy5fbGkpfSxnaS5wcm90b3R5cGUuY29tcHV0ZUludGVyc2VjdGlvblNuYXBzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKSxpPW5ldyBhaShuLHRoaXMuX3NjYWxlRmFjdG9yLHRoaXMuX2xpKTt0aGlzLl9wb2ludFNuYXBwZXIuc25hcChpKX19LGdpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJbl19LGdpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBnaX07dmFyIGRpPWZ1bmN0aW9uKCl7aWYodGhpcy5fYXJnR2VvbT1udWxsLHRoaXMuX2Rpc3RhbmNlPW51bGwsdGhpcy5fYnVmUGFyYW1zPW5ldyBDbix0aGlzLl9yZXN1bHRHZW9tZXRyeT1udWxsLHRoaXMuX3NhdmVFeGNlcHRpb249bnVsbCwxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX2FyZ0dlb209dH1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5fYXJnR2VvbT1lLHRoaXMuX2J1ZlBhcmFtcz1ufX0seWk9e0NBUF9ST1VORDp7Y29uZmlndXJhYmxlOiEwfSxDQVBfQlVUVDp7Y29uZmlndXJhYmxlOiEwfSxDQVBfRkxBVDp7Y29uZmlndXJhYmxlOiEwfSxDQVBfU1FVQVJFOntjb25maWd1cmFibGU6ITB9LE1BWF9QUkVDSVNJT05fRElHSVRTOntjb25maWd1cmFibGU6ITB9fTtkaS5wcm90b3R5cGUuYnVmZmVyRml4ZWRQcmVjaXNpb249ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHJpKG5ldyBnaShuZXcgZmUoMSkpLHQuZ2V0U2NhbGUoKSksbj1uZXcgaWkodGhpcy5fYnVmUGFyYW1zKTtuLnNldFdvcmtpbmdQcmVjaXNpb25Nb2RlbCh0KSxuLnNldE5vZGVyKGUpLHRoaXMuX3Jlc3VsdEdlb21ldHJ5PW4uYnVmZmVyKHRoaXMuX2FyZ0dlb20sdGhpcy5fZGlzdGFuY2UpfSxkaS5wcm90b3R5cGUuYnVmZmVyUmVkdWNlZFByZWNpc2lvbj1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgZT1kaS5NQVhfUFJFQ0lTSU9OX0RJR0lUUztlPj0wO2UtLSl7dHJ5e3QuYnVmZmVyUmVkdWNlZFByZWNpc2lvbihlKX1jYXRjaChlKXtpZighKGUgaW5zdGFuY2VvZiB3ZSkpdGhyb3cgZTt0Ll9zYXZlRXhjZXB0aW9uPWV9aWYobnVsbCE9PXQuX3Jlc3VsdEdlb21ldHJ5KXJldHVybiBudWxsfXRocm93IHRoaXMuX3NhdmVFeGNlcHRpb259aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWRpLnByZWNpc2lvblNjYWxlRmFjdG9yKHRoaXMuX2FyZ0dlb20sdGhpcy5fZGlzdGFuY2Usbikscj1uZXcgZmUoaSk7dGhpcy5idWZmZXJGaXhlZFByZWNpc2lvbihyKX19LGRpLnByb3RvdHlwZS5jb21wdXRlR2VvbWV0cnk9ZnVuY3Rpb24oKXtpZih0aGlzLmJ1ZmZlck9yaWdpbmFsUHJlY2lzaW9uKCksbnVsbCE9PXRoaXMuX3Jlc3VsdEdlb21ldHJ5KXJldHVybiBudWxsO3ZhciB0PXRoaXMuX2FyZ0dlb20uZ2V0RmFjdG9yeSgpLmdldFByZWNpc2lvbk1vZGVsKCk7dC5nZXRUeXBlKCk9PT1mZS5GSVhFRD90aGlzLmJ1ZmZlckZpeGVkUHJlY2lzaW9uKHQpOnRoaXMuYnVmZmVyUmVkdWNlZFByZWNpc2lvbigpfSxkaS5wcm90b3R5cGUuc2V0UXVhZHJhbnRTZWdtZW50cz1mdW5jdGlvbih0KXt0aGlzLl9idWZQYXJhbXMuc2V0UXVhZHJhbnRTZWdtZW50cyh0KX0sZGkucHJvdG90eXBlLmJ1ZmZlck9yaWdpbmFsUHJlY2lzaW9uPWZ1bmN0aW9uKCl7dHJ5e3ZhciB0PW5ldyBpaSh0aGlzLl9idWZQYXJhbXMpO3RoaXMuX3Jlc3VsdEdlb21ldHJ5PXQuYnVmZmVyKHRoaXMuX2FyZ0dlb20sdGhpcy5fZGlzdGFuY2UpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIFopKXRocm93IHQ7dGhpcy5fc2F2ZUV4Y2VwdGlvbj10fX0sZGkucHJvdG90eXBlLmdldFJlc3VsdEdlb21ldHJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9kaXN0YW5jZT10LHRoaXMuY29tcHV0ZUdlb21ldHJ5KCksdGhpcy5fcmVzdWx0R2VvbWV0cnl9LGRpLnByb3RvdHlwZS5zZXRFbmRDYXBTdHlsZT1mdW5jdGlvbih0KXt0aGlzLl9idWZQYXJhbXMuc2V0RW5kQ2FwU3R5bGUodCl9LGRpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxkaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZGl9LGRpLmJ1ZmZlck9wPWZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtyZXR1cm4gbmV3IGRpKHQpLmdldFJlc3VsdEdlb21ldHJ5KGUpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihOdW1iZXIuaXNJbnRlZ2VyKGFyZ3VtZW50c1syXSkmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgbHQmJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXSxvPW5ldyBkaShuKTtvLnNldFF1YWRyYW50U2VnbWVudHMocik7cmV0dXJuIG8uZ2V0UmVzdWx0R2VvbWV0cnkoaSl9aWYoYXJndW1lbnRzWzJdaW5zdGFuY2VvZiBDbiYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBsdCYmXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIHM9YXJndW1lbnRzWzBdLGE9YXJndW1lbnRzWzFdLHU9YXJndW1lbnRzWzJdO3JldHVybiBuZXcgZGkocyx1KS5nZXRSZXN1bHRHZW9tZXRyeShhKX19ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGw9YXJndW1lbnRzWzBdLGM9YXJndW1lbnRzWzFdLHA9YXJndW1lbnRzWzJdLGg9YXJndW1lbnRzWzNdLGY9bmV3IGRpKGwpO2Yuc2V0UXVhZHJhbnRTZWdtZW50cyhwKSxmLnNldEVuZENhcFN0eWxlKGgpO3JldHVybiBmLmdldFJlc3VsdEdlb21ldHJ5KGMpfX0sZGkucHJlY2lzaW9uU2NhbGVGYWN0b3I9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLHI9VC5tYXgoTWF0aC5hYnMoaS5nZXRNYXhYKCkpLE1hdGguYWJzKGkuZ2V0TWF4WSgpKSxNYXRoLmFicyhpLmdldE1pblgoKSksTWF0aC5hYnMoaS5nZXRNaW5ZKCkpKSsyKihlPjA/ZTowKSxvPW4tTWF0aC50cnVuYyhNYXRoLmxvZyhyKS9NYXRoLmxvZygxMCkrMSk7cmV0dXJuIE1hdGgucG93KDEwLG8pfSx5aS5DQVBfUk9VTkQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIENuLkNBUF9ST1VORH0seWkuQ0FQX0JVVFQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIENuLkNBUF9GTEFUfSx5aS5DQVBfRkxBVC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gQ24uQ0FQX0ZMQVR9LHlpLkNBUF9TUVVBUkUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIENuLkNBUF9TUVVBUkV9LHlpLk1BWF9QUkVDSVNJT05fRElHSVRTLmdldD1mdW5jdGlvbigpe3JldHVybiAxMn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZGkseWkpO3ZhciBfaT1mdW5jdGlvbigpe3RoaXMuX3B0PVtuZXcgTixuZXcgTl0sdGhpcy5fZGlzdGFuY2U9bS5OYU4sdGhpcy5faXNOdWxsPSEwfTtfaS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHR9LF9pLnByb3RvdHlwZS5nZXRDb29yZGluYXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9wdFt0XX0sX2kucHJvdG90eXBlLnNldE1pbmltdW09ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2V0TWluaW11bSh0Ll9wdFswXSx0Ll9wdFsxXSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO2lmKHRoaXMuX2lzTnVsbClyZXR1cm4gdGhpcy5pbml0aWFsaXplKGUsbiksbnVsbDt2YXIgaT1lLmRpc3RhbmNlKG4pO2k8dGhpcy5fZGlzdGFuY2UmJnRoaXMuaW5pdGlhbGl6ZShlLG4saSl9fSxfaS5wcm90b3R5cGUuaW5pdGlhbGl6ZT1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXRoaXMuX2lzTnVsbD0hMDtlbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5fcHRbMF0uc2V0Q29vcmRpbmF0ZSh0KSx0aGlzLl9wdFsxXS5zZXRDb29yZGluYXRlKGUpLHRoaXMuX2Rpc3RhbmNlPXQuZGlzdGFuY2UoZSksdGhpcy5faXNOdWxsPSExfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXTt0aGlzLl9wdFswXS5zZXRDb29yZGluYXRlKG4pLHRoaXMuX3B0WzFdLnNldENvb3JkaW5hdGUoaSksdGhpcy5fZGlzdGFuY2U9cix0aGlzLl9pc051bGw9ITF9fSxfaS5wcm90b3R5cGUuZ2V0RGlzdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGlzdGFuY2V9LF9pLnByb3RvdHlwZS5zZXRNYXhpbXVtPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNldE1heGltdW0odC5fcHRbMF0sdC5fcHRbMV0pfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtpZih0aGlzLl9pc051bGwpcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZShlLG4pLG51bGw7dmFyIGk9ZS5kaXN0YW5jZShuKTtpPnRoaXMuX2Rpc3RhbmNlJiZ0aGlzLmluaXRpYWxpemUoZSxuLGkpfX0sX2kucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LF9pLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBfaX07dmFyIG1pPWZ1bmN0aW9uKCl7fTttaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sbWkucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIG1pfSxtaS5jb21wdXRlRGlzdGFuY2U9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIF9pJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEt0JiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIE4pZm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXSxpPXQuZ2V0Q29vcmRpbmF0ZXMoKSxyPW5ldyBkbixvPTA7bzxpLmxlbmd0aC0xO28rKyl7ci5zZXRDb29yZGluYXRlcyhpW29dLGlbbysxXSk7dmFyIHM9ci5jbG9zZXN0UG9pbnQoZSk7bi5zZXRNaW5pbXVtKHMsZSl9ZWxzZSBpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIF9pJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mICR0JiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIE4pe3ZhciBhPWFyZ3VtZW50c1swXSx1PWFyZ3VtZW50c1sxXSxsPWFyZ3VtZW50c1syXTttaS5jb21wdXRlRGlzdGFuY2UoYS5nZXRFeHRlcmlvclJpbmcoKSx1LGwpO2Zvcih2YXIgYz0wO2M8YS5nZXROdW1JbnRlcmlvclJpbmcoKTtjKyspbWkuY29tcHV0ZURpc3RhbmNlKGEuZ2V0SW50ZXJpb3JSaW5nTihjKSx1LGwpfWVsc2UgaWYoYXJndW1lbnRzWzJdaW5zdGFuY2VvZiBfaSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBsdCYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBOKXt2YXIgcD1hcmd1bWVudHNbMF0saD1hcmd1bWVudHNbMV0sZj1hcmd1bWVudHNbMl07aWYocCBpbnN0YW5jZW9mIEt0KW1pLmNvbXB1dGVEaXN0YW5jZShwLGgsZik7ZWxzZSBpZihwIGluc3RhbmNlb2YgJHQpbWkuY29tcHV0ZURpc3RhbmNlKHAsaCxmKTtlbHNlIGlmKHAgaW5zdGFuY2VvZiB6dClmb3IodmFyIGc9cCxkPTA7ZDxnLmdldE51bUdlb21ldHJpZXMoKTtkKyspe3ZhciB5PWcuZ2V0R2VvbWV0cnlOKGQpO21pLmNvbXB1dGVEaXN0YW5jZSh5LGgsZil9ZWxzZSBmLnNldE1pbmltdW0ocC5nZXRDb29yZGluYXRlKCksaCl9ZWxzZSBpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIF9pJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGRuJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIE4pe3ZhciBfPWFyZ3VtZW50c1swXSxtPWFyZ3VtZW50c1sxXSx2PWFyZ3VtZW50c1syXSxJPV8uY2xvc2VzdFBvaW50KG0pO3Yuc2V0TWluaW11bShJLG0pfX07dmFyIHZpPWZ1bmN0aW9uKHQpe3RoaXMuX21heFB0RGlzdD1uZXcgX2ksdGhpcy5faW5wdXRHZW9tPXR8fG51bGx9LElpPXtNYXhQb2ludERpc3RhbmNlRmlsdGVyOntjb25maWd1cmFibGU6ITB9LE1heE1pZHBvaW50RGlzdGFuY2VGaWx0ZXI6e2NvbmZpZ3VyYWJsZTohMH19O3ZpLnByb3RvdHlwZS5jb21wdXRlTWF4TWlkcG9pbnREaXN0YW5jZT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgeGkodGhpcy5faW5wdXRHZW9tKTt0LmFwcGx5KGUpLHRoaXMuX21heFB0RGlzdC5zZXRNYXhpbXVtKGUuZ2V0TWF4UG9pbnREaXN0YW5jZSgpKX0sdmkucHJvdG90eXBlLmNvbXB1dGVNYXhWZXJ0ZXhEaXN0YW5jZT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgRWkodGhpcy5faW5wdXRHZW9tKTt0LmFwcGx5KGUpLHRoaXMuX21heFB0RGlzdC5zZXRNYXhpbXVtKGUuZ2V0TWF4UG9pbnREaXN0YW5jZSgpKX0sdmkucHJvdG90eXBlLmZpbmREaXN0YW5jZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jb21wdXRlTWF4VmVydGV4RGlzdGFuY2UodCksdGhpcy5jb21wdXRlTWF4TWlkcG9pbnREaXN0YW5jZSh0KSx0aGlzLl9tYXhQdERpc3QuZ2V0RGlzdGFuY2UoKX0sdmkucHJvdG90eXBlLmdldERpc3RhbmNlUG9pbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21heFB0RGlzdH0sdmkucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHZpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB2aX0sSWkuTWF4UG9pbnREaXN0YW5jZUZpbHRlci5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gRWl9LElpLk1heE1pZHBvaW50RGlzdGFuY2VGaWx0ZXIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHhpfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyh2aSxJaSk7dmFyIEVpPWZ1bmN0aW9uKHQpe3RoaXMuX21heFB0RGlzdD1uZXcgX2ksdGhpcy5fbWluUHREaXN0PW5ldyBfaSx0aGlzLl9nZW9tPXR8fG51bGx9O0VpLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCl7dGhpcy5fbWluUHREaXN0LmluaXRpYWxpemUoKSxtaS5jb21wdXRlRGlzdGFuY2UodGhpcy5fZ2VvbSx0LHRoaXMuX21pblB0RGlzdCksdGhpcy5fbWF4UHREaXN0LnNldE1heGltdW0odGhpcy5fbWluUHREaXN0KX0sRWkucHJvdG90eXBlLmdldE1heFBvaW50RGlzdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF4UHREaXN0fSxFaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5baHRdfSxFaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gRWl9O3ZhciB4aT1mdW5jdGlvbih0KXt0aGlzLl9tYXhQdERpc3Q9bmV3IF9pLHRoaXMuX21pblB0RGlzdD1uZXcgX2ksdGhpcy5fZ2VvbT10fHxudWxsfTt4aS5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKHQsZSl7aWYoMD09PWUpcmV0dXJuIG51bGw7dmFyIG49dC5nZXRDb29yZGluYXRlKGUtMSksaT10LmdldENvb3JkaW5hdGUoZSkscj1uZXcgTigobi54K2kueCkvMiwobi55K2kueSkvMik7dGhpcy5fbWluUHREaXN0LmluaXRpYWxpemUoKSxtaS5jb21wdXRlRGlzdGFuY2UodGhpcy5fZ2VvbSxyLHRoaXMuX21pblB0RGlzdCksdGhpcy5fbWF4UHREaXN0LnNldE1heGltdW0odGhpcy5fbWluUHREaXN0KX0seGkucHJvdG90eXBlLmlzRG9uZT1mdW5jdGlvbigpe3JldHVybiExfSx4aS5wcm90b3R5cGUuaXNHZW9tZXRyeUNoYW5nZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX0seGkucHJvdG90eXBlLmdldE1heFBvaW50RGlzdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF4UHREaXN0fSx4aS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bVXRdfSx4aS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4geGl9O3ZhciBOaT1mdW5jdGlvbih0KXt0aGlzLl9jb21wcz10fHxudWxsfTtOaS5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiAkdCYmdGhpcy5fY29tcHMuYWRkKHQpfSxOaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bVnRdfSxOaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gTml9LE5pLmdldFBvbHlnb25zPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gTmkuZ2V0UG9seWdvbnModCxuZXcgTnQpfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07cmV0dXJuIGUgaW5zdGFuY2VvZiAkdD9uLmFkZChlKTplIGluc3RhbmNlb2YgenQmJmUuYXBwbHkobmV3IE5pKG4pKSxufX07dmFyIENpPWZ1bmN0aW9uKCl7aWYodGhpcy5fbGluZXM9bnVsbCx0aGlzLl9pc0ZvcmNlZFRvTGluZVN0cmluZz0hMSwxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX2xpbmVzPXR9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMuX2xpbmVzPWUsdGhpcy5faXNGb3JjZWRUb0xpbmVTdHJpbmc9bn19O0NpLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCl7aWYodGhpcy5faXNGb3JjZWRUb0xpbmVTdHJpbmcmJnQgaW5zdGFuY2VvZiBlZSl7dmFyIGU9dC5nZXRGYWN0b3J5KCkuY3JlYXRlTGluZVN0cmluZyh0LmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpKTtyZXR1cm4gdGhpcy5fbGluZXMuYWRkKGUpLG51bGx9dCBpbnN0YW5jZW9mIEt0JiZ0aGlzLl9saW5lcy5hZGQodCl9LENpLnByb3RvdHlwZS5zZXRGb3JjZVRvTGluZVN0cmluZz1mdW5jdGlvbih0KXt0aGlzLl9pc0ZvcmNlZFRvTGluZVN0cmluZz10fSxDaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bdXRdfSxDaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gQ2l9LENpLmdldEdlb21ldHJ5PWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdC5nZXRGYWN0b3J5KCkuYnVpbGRHZW9tZXRyeShDaS5nZXRMaW5lcyh0KSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gZS5nZXRGYWN0b3J5KCkuYnVpbGRHZW9tZXRyeShDaS5nZXRMaW5lcyhlLG4pKX19LENpLmdldExpbmVzPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gQ2kuZ2V0TGluZXModCwhMSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKE8oYXJndW1lbnRzWzBdLHZ0KSYmTyhhcmd1bWVudHNbMV0sdnQpKXtmb3IodmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9ZS5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7Q2kuZ2V0TGluZXMocixuKX1yZXR1cm4gbn1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGx0JiZcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIG89YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGE9bmV3IE50O3JldHVybiBvLmFwcGx5KG5ldyBDaShhLHMpKSxhfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgbHQmJk8oYXJndW1lbnRzWzFdLHZ0KSl7dmFyIHU9YXJndW1lbnRzWzBdLGw9YXJndW1lbnRzWzFdO3JldHVybiB1IGluc3RhbmNlb2YgS3Q/bC5hZGQodSk6dS5hcHBseShuZXcgQ2kobCkpLGx9fWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFwiYm9vbGVhblwiPT10eXBlb2YgYXJndW1lbnRzWzJdJiZPKGFyZ3VtZW50c1swXSx2dCkmJk8oYXJndW1lbnRzWzFdLHZ0KSl7Zm9yKHZhciBjPWFyZ3VtZW50c1swXSxwPWFyZ3VtZW50c1sxXSxoPWFyZ3VtZW50c1syXSxmPWMuaXRlcmF0b3IoKTtmLmhhc05leHQoKTspe3ZhciBnPWYubmV4dCgpO0NpLmdldExpbmVzKGcscCxoKX1yZXR1cm4gcH1pZihcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBsdCYmTyhhcmd1bWVudHNbMV0sdnQpKXt2YXIgZD1hcmd1bWVudHNbMF0seT1hcmd1bWVudHNbMV0sXz1hcmd1bWVudHNbMl07cmV0dXJuIGQuYXBwbHkobmV3IENpKHksXykpLHl9fX07dmFyIFNpPWZ1bmN0aW9uKCl7aWYodGhpcy5fYm91bmRhcnlSdWxlPWZ0Lk9HQ19TRlNfQk9VTkRBUllfUlVMRSx0aGlzLl9pc0luPW51bGwsdGhpcy5fbnVtQm91bmRhcmllcz1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07aWYobnVsbD09PXQpdGhyb3cgbmV3IF8oXCJSdWxlIG11c3QgYmUgbm9uLW51bGxcIik7dGhpcy5fYm91bmRhcnlSdWxlPXR9fTtTaS5wcm90b3R5cGUubG9jYXRlSW50ZXJuYWw9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE4mJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgJHQpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZihlLmlzRW1wdHkoKSlyZXR1cm4gYi5FWFRFUklPUjt2YXIgbj1lLmdldEV4dGVyaW9yUmluZygpLGk9dGhpcy5sb2NhdGVJblBvbHlnb25SaW5nKHQsbik7aWYoaT09PWIuRVhURVJJT1IpcmV0dXJuIGIuRVhURVJJT1I7aWYoaT09PWIuQk9VTkRBUlkpcmV0dXJuIGIuQk9VTkRBUlk7Zm9yKHZhciByPTA7cjxlLmdldE51bUludGVyaW9yUmluZygpO3IrKyl7dmFyIG89ZS5nZXRJbnRlcmlvclJpbmdOKHIpLHM9dGhpcy5sb2NhdGVJblBvbHlnb25SaW5nKHQsbyk7aWYocz09PWIuSU5URVJJT1IpcmV0dXJuIGIuRVhURVJJT1I7aWYocz09PWIuQk9VTkRBUlkpcmV0dXJuIGIuQk9VTkRBUll9cmV0dXJuIGIuSU5URVJJT1J9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIEt0KXt2YXIgYT1hcmd1bWVudHNbMF0sdT1hcmd1bWVudHNbMV07aWYoIXUuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLmludGVyc2VjdHMoYSkpcmV0dXJuIGIuRVhURVJJT1I7dmFyIGw9dS5nZXRDb29yZGluYXRlcygpO3JldHVybiB1LmlzQ2xvc2VkKCl8fCFhLmVxdWFscyhsWzBdKSYmIWEuZXF1YWxzKGxbbC5sZW5ndGgtMV0pP3N0LmlzT25MaW5lKGEsbCk/Yi5JTlRFUklPUjpiLkVYVEVSSU9SOmIuQk9VTkRBUll9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIFF0KXt2YXIgYz1hcmd1bWVudHNbMF07cmV0dXJuIGFyZ3VtZW50c1sxXS5nZXRDb29yZGluYXRlKCkuZXF1YWxzMkQoYyk/Yi5JTlRFUklPUjpiLkVYVEVSSU9SfX0sU2kucHJvdG90eXBlLmxvY2F0ZUluUG9seWdvblJpbmc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5nZXRFbnZlbG9wZUludGVybmFsKCkuaW50ZXJzZWN0cyh0KT9zdC5sb2NhdGVQb2ludEluUmluZyh0LGUuZ2V0Q29vcmRpbmF0ZXMoKSk6Yi5FWFRFUklPUn0sU2kucHJvdG90eXBlLmludGVyc2VjdHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5sb2NhdGUodCxlKSE9PWIuRVhURVJJT1J9LFNpLnByb3RvdHlwZS51cGRhdGVMb2NhdGlvbkluZm89ZnVuY3Rpb24odCl7dD09PWIuSU5URVJJT1ImJih0aGlzLl9pc0luPSEwKSx0PT09Yi5CT1VOREFSWSYmdGhpcy5fbnVtQm91bmRhcmllcysrfSxTaS5wcm90b3R5cGUuY29tcHV0ZUxvY2F0aW9uPWZ1bmN0aW9uKHQsZSl7aWYoZSBpbnN0YW5jZW9mIFF0JiZ0aGlzLnVwZGF0ZUxvY2F0aW9uSW5mbyh0aGlzLmxvY2F0ZUludGVybmFsKHQsZSkpLGUgaW5zdGFuY2VvZiBLdCl0aGlzLnVwZGF0ZUxvY2F0aW9uSW5mbyh0aGlzLmxvY2F0ZUludGVybmFsKHQsZSkpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mICR0KXRoaXMudXBkYXRlTG9jYXRpb25JbmZvKHRoaXMubG9jYXRlSW50ZXJuYWwodCxlKSk7ZWxzZSBpZihlIGluc3RhbmNlb2YgWHQpZm9yKHZhciBuPWUsaT0wO2k8bi5nZXROdW1HZW9tZXRyaWVzKCk7aSsrKXt2YXIgcj1uLmdldEdlb21ldHJ5TihpKTt0aGlzLnVwZGF0ZUxvY2F0aW9uSW5mbyh0aGlzLmxvY2F0ZUludGVybmFsKHQscikpfWVsc2UgaWYoZSBpbnN0YW5jZW9mIG5lKWZvcih2YXIgbz1lLHM9MDtzPG8uZ2V0TnVtR2VvbWV0cmllcygpO3MrKyl7dmFyIGE9by5nZXRHZW9tZXRyeU4ocyk7dGhpcy51cGRhdGVMb2NhdGlvbkluZm8odGhpcy5sb2NhdGVJbnRlcm5hbCh0LGEpKX1lbHNlIGlmKGUgaW5zdGFuY2VvZiB6dClmb3IodmFyIHU9bmV3IFVuKGUpO3UuaGFzTmV4dCgpOyl7dmFyIGw9dS5uZXh0KCk7bCE9PWUmJnRoaXMuY29tcHV0ZUxvY2F0aW9uKHQsbCl9fSxTaS5wcm90b3R5cGUubG9jYXRlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuaXNFbXB0eSgpP2IuRVhURVJJT1I6ZSBpbnN0YW5jZW9mIEt0P3RoaXMubG9jYXRlSW50ZXJuYWwodCxlKTplIGluc3RhbmNlb2YgJHQ/dGhpcy5sb2NhdGVJbnRlcm5hbCh0LGUpOih0aGlzLl9pc0luPSExLHRoaXMuX251bUJvdW5kYXJpZXM9MCx0aGlzLmNvbXB1dGVMb2NhdGlvbih0LGUpLHRoaXMuX2JvdW5kYXJ5UnVsZS5pc0luQm91bmRhcnkodGhpcy5fbnVtQm91bmRhcmllcyk/Yi5CT1VOREFSWTp0aGlzLl9udW1Cb3VuZGFyaWVzPjB8fHRoaXMuX2lzSW4/Yi5JTlRFUklPUjpiLkVYVEVSSU9SKX0sU2kucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFNpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBTaX07dmFyIExpPWZ1bmN0aW9uIHQoKXtpZih0aGlzLl9jb21wb25lbnQ9bnVsbCx0aGlzLl9zZWdJbmRleD1udWxsLHRoaXMuX3B0PW51bGwsMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0LmNhbGwodGhpcyxlLHQuSU5TSURFX0FSRUEsbil9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdLG89YXJndW1lbnRzWzJdO3RoaXMuX2NvbXBvbmVudD1pLHRoaXMuX3NlZ0luZGV4PXIsdGhpcy5fcHQ9b319LGJpPXtJTlNJREVfQVJFQTp7Y29uZmlndXJhYmxlOiEwfX07TGkucHJvdG90eXBlLmlzSW5zaWRlQXJlYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZWdJbmRleD09PUxpLklOU0lERV9BUkVBfSxMaS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wdH0sTGkucHJvdG90eXBlLmdldEdlb21ldHJ5Q29tcG9uZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbXBvbmVudH0sTGkucHJvdG90eXBlLmdldFNlZ21lbnRJbmRleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZWdJbmRleH0sTGkucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LExpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBMaX0sYmkuSU5TSURFX0FSRUEuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLTF9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKExpLGJpKTt2YXIgd2k9ZnVuY3Rpb24odCl7dGhpcy5fcHRzPXR8fG51bGx9O3dpLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCl7dCBpbnN0YW5jZW9mIFF0JiZ0aGlzLl9wdHMuYWRkKHQpfSx3aS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bVnRdfSx3aS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gd2l9LHdpLmdldFBvaW50cz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHQgaW5zdGFuY2VvZiBRdD8kZS5zaW5nbGV0b25MaXN0KHQpOndpLmdldFBvaW50cyh0LG5ldyBOdCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gZSBpbnN0YW5jZW9mIFF0P24uYWRkKGUpOmUgaW5zdGFuY2VvZiB6dCYmZS5hcHBseShuZXcgd2kobikpLG59fTt2YXIgT2k9ZnVuY3Rpb24oKXt0aGlzLl9sb2NhdGlvbnM9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fbG9jYXRpb25zPXR9O09pLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCl7KHQgaW5zdGFuY2VvZiBRdHx8dCBpbnN0YW5jZW9mIEt0fHx0IGluc3RhbmNlb2YgJHQpJiZ0aGlzLl9sb2NhdGlvbnMuYWRkKG5ldyBMaSh0LDAsdC5nZXRDb29yZGluYXRlKCkpKX0sT2kucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW1Z0XX0sT2kucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIE9pfSxPaS5nZXRMb2NhdGlvbnM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IE50O3JldHVybiB0LmFwcGx5KG5ldyBPaShlKSksZX07dmFyIFRpPWZ1bmN0aW9uKCl7aWYodGhpcy5fZ2VvbT1udWxsLHRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlPTAsdGhpcy5fcHRMb2NhdG9yPW5ldyBTaSx0aGlzLl9taW5EaXN0YW5jZUxvY2F0aW9uPW51bGwsdGhpcy5fbWluRGlzdGFuY2U9bS5NQVhfVkFMVUUsMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLl9nZW9tPVt0LGVdLHRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlPTB9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzJdO3RoaXMuX2dlb209bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5fZ2VvbVswXT1uLHRoaXMuX2dlb21bMV09aSx0aGlzLl90ZXJtaW5hdGVEaXN0YW5jZT1yfX07VGkucHJvdG90eXBlLmNvbXB1dGVDb250YWlubWVudERpc3RhbmNlPWZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PW5ldyBBcnJheSgyKS5maWxsKG51bGwpO2lmKHRoaXMuY29tcHV0ZUNvbnRhaW5tZW50RGlzdGFuY2UoMCx0KSx0aGlzLl9taW5EaXN0YW5jZTw9dGhpcy5fdGVybWluYXRlRGlzdGFuY2UpcmV0dXJuIG51bGw7dGhpcy5jb21wdXRlQ29udGFpbm1lbnREaXN0YW5jZSgxLHQpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPTEtZSxyPU5pLmdldFBvbHlnb25zKHRoaXMuX2dlb21bZV0pO2lmKHIuc2l6ZSgpPjApe3ZhciBvPU9pLmdldExvY2F0aW9ucyh0aGlzLl9nZW9tW2ldKTtpZih0aGlzLmNvbXB1dGVDb250YWlubWVudERpc3RhbmNlKG8scixuKSx0aGlzLl9taW5EaXN0YW5jZTw9dGhpcy5fdGVybWluYXRlRGlzdGFuY2UpcmV0dXJuIHRoaXMuX21pbkRpc3RhbmNlTG9jYXRpb25baV09blswXSx0aGlzLl9taW5EaXN0YW5jZUxvY2F0aW9uW2VdPW5bMV0sbnVsbH19ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aClpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIEFycmF5JiZPKGFyZ3VtZW50c1swXSx4dCkmJk8oYXJndW1lbnRzWzFdLHh0KSl7Zm9yKHZhciBzPWFyZ3VtZW50c1swXSxhPWFyZ3VtZW50c1sxXSx1PWFyZ3VtZW50c1syXSxsPTA7bDxzLnNpemUoKTtsKyspZm9yKHZhciBjPXMuZ2V0KGwpLHA9MDtwPGEuc2l6ZSgpO3ArKylpZih0aGlzLmNvbXB1dGVDb250YWlubWVudERpc3RhbmNlKGMsYS5nZXQocCksdSksdGhpcy5fbWluRGlzdGFuY2U8PXRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfWVsc2UgaWYoYXJndW1lbnRzWzJdaW5zdGFuY2VvZiBBcnJheSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBMaSYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiAkdCl7dmFyIGg9YXJndW1lbnRzWzBdLGY9YXJndW1lbnRzWzFdLGc9YXJndW1lbnRzWzJdLGQ9aC5nZXRDb29yZGluYXRlKCk7aWYoYi5FWFRFUklPUiE9PXRoaXMuX3B0TG9jYXRvci5sb2NhdGUoZCxmKSlyZXR1cm4gdGhpcy5fbWluRGlzdGFuY2U9MCxnWzBdPWgsZ1sxXT1uZXcgTGkoZixkKSxudWxsfX0sVGkucHJvdG90eXBlLmNvbXB1dGVNaW5EaXN0YW5jZUxpbmVzUG9pbnRzPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9MDtpPHQuc2l6ZSgpO2krKylmb3IodmFyIHI9dC5nZXQoaSksbz0wO288ZS5zaXplKCk7bysrKXt2YXIgcz1lLmdldChvKTtpZih0aGlzLmNvbXB1dGVNaW5EaXN0YW5jZShyLHMsbiksdGhpcy5fbWluRGlzdGFuY2U8PXRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfX0sVGkucHJvdG90eXBlLmNvbXB1dGVGYWNldERpc3RhbmNlPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IEFycmF5KDIpLmZpbGwobnVsbCksZT1DaS5nZXRMaW5lcyh0aGlzLl9nZW9tWzBdKSxuPUNpLmdldExpbmVzKHRoaXMuX2dlb21bMV0pLGk9d2kuZ2V0UG9pbnRzKHRoaXMuX2dlb21bMF0pLHI9d2kuZ2V0UG9pbnRzKHRoaXMuX2dlb21bMV0pO3JldHVybiB0aGlzLmNvbXB1dGVNaW5EaXN0YW5jZUxpbmVzKGUsbix0KSx0aGlzLnVwZGF0ZU1pbkRpc3RhbmNlKHQsITEpLHRoaXMuX21pbkRpc3RhbmNlPD10aGlzLl90ZXJtaW5hdGVEaXN0YW5jZT9udWxsOih0WzBdPW51bGwsdFsxXT1udWxsLHRoaXMuY29tcHV0ZU1pbkRpc3RhbmNlTGluZXNQb2ludHMoZSxyLHQpLHRoaXMudXBkYXRlTWluRGlzdGFuY2UodCwhMSksdGhpcy5fbWluRGlzdGFuY2U8PXRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlP251bGw6KHRbMF09bnVsbCx0WzFdPW51bGwsdGhpcy5jb21wdXRlTWluRGlzdGFuY2VMaW5lc1BvaW50cyhuLGksdCksdGhpcy51cGRhdGVNaW5EaXN0YW5jZSh0LCEwKSx0aGlzLl9taW5EaXN0YW5jZTw9dGhpcy5fdGVybWluYXRlRGlzdGFuY2U/bnVsbDoodFswXT1udWxsLHRbMV09bnVsbCx0aGlzLmNvbXB1dGVNaW5EaXN0YW5jZVBvaW50cyhpLHIsdCksdm9pZCB0aGlzLnVwZGF0ZU1pbkRpc3RhbmNlKHQsITEpKSkpfSxUaS5wcm90b3R5cGUubmVhcmVzdExvY2F0aW9ucz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbXB1dGVNaW5EaXN0YW5jZSgpLHRoaXMuX21pbkRpc3RhbmNlTG9jYXRpb259LFRpLnByb3RvdHlwZS51cGRhdGVNaW5EaXN0YW5jZT1mdW5jdGlvbih0LGUpe2lmKG51bGw9PT10WzBdKXJldHVybiBudWxsO2U/KHRoaXMuX21pbkRpc3RhbmNlTG9jYXRpb25bMF09dFsxXSx0aGlzLl9taW5EaXN0YW5jZUxvY2F0aW9uWzFdPXRbMF0pOih0aGlzLl9taW5EaXN0YW5jZUxvY2F0aW9uWzBdPXRbMF0sdGhpcy5fbWluRGlzdGFuY2VMb2NhdGlvblsxXT10WzFdKX0sVGkucHJvdG90eXBlLm5lYXJlc3RQb2ludHM9ZnVuY3Rpb24oKXt0aGlzLmNvbXB1dGVNaW5EaXN0YW5jZSgpO3JldHVyblt0aGlzLl9taW5EaXN0YW5jZUxvY2F0aW9uWzBdLmdldENvb3JkaW5hdGUoKSx0aGlzLl9taW5EaXN0YW5jZUxvY2F0aW9uWzFdLmdldENvb3JkaW5hdGUoKV19LFRpLnByb3RvdHlwZS5jb21wdXRlTWluRGlzdGFuY2U9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7aWYobnVsbCE9PXRoaXMuX21pbkRpc3RhbmNlTG9jYXRpb24pcmV0dXJuIG51bGw7aWYodGhpcy5fbWluRGlzdGFuY2VMb2NhdGlvbj1uZXcgQXJyYXkoMikuZmlsbChudWxsKSx0aGlzLmNvbXB1dGVDb250YWlubWVudERpc3RhbmNlKCksdGhpcy5fbWluRGlzdGFuY2U8PXRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsO3RoaXMuY29tcHV0ZUZhY2V0RGlzdGFuY2UoKX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKWlmKGFyZ3VtZW50c1syXWluc3RhbmNlb2YgQXJyYXkmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgS3QmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgUXQpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTtpZih0LmdldEVudmVsb3BlSW50ZXJuYWwoKS5kaXN0YW5jZShlLmdldEVudmVsb3BlSW50ZXJuYWwoKSk+dGhpcy5fbWluRGlzdGFuY2UpcmV0dXJuIG51bGw7Zm9yKHZhciBpPXQuZ2V0Q29vcmRpbmF0ZXMoKSxyPWUuZ2V0Q29vcmRpbmF0ZSgpLG89MDtvPGkubGVuZ3RoLTE7bysrKXt2YXIgcz1zdC5kaXN0YW5jZVBvaW50TGluZShyLGlbb10saVtvKzFdKTtpZihzPHRoaXMuX21pbkRpc3RhbmNlKXt0aGlzLl9taW5EaXN0YW5jZT1zO3ZhciBhPW5ldyBkbihpW29dLGlbbysxXSkuY2xvc2VzdFBvaW50KHIpO25bMF09bmV3IExpKHQsbyxhKSxuWzFdPW5ldyBMaShlLDAscil9aWYodGhpcy5fbWluRGlzdGFuY2U8PXRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfX1lbHNlIGlmKGFyZ3VtZW50c1syXWluc3RhbmNlb2YgQXJyYXkmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgS3QmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgS3Qpe3ZhciB1PWFyZ3VtZW50c1swXSxsPWFyZ3VtZW50c1sxXSxjPWFyZ3VtZW50c1syXTtpZih1LmdldEVudmVsb3BlSW50ZXJuYWwoKS5kaXN0YW5jZShsLmdldEVudmVsb3BlSW50ZXJuYWwoKSk+dGhpcy5fbWluRGlzdGFuY2UpcmV0dXJuIG51bGw7Zm9yKHZhciBwPXUuZ2V0Q29vcmRpbmF0ZXMoKSxoPWwuZ2V0Q29vcmRpbmF0ZXMoKSxmPTA7ZjxwLmxlbmd0aC0xO2YrKylmb3IodmFyIGc9MDtnPGgubGVuZ3RoLTE7ZysrKXt2YXIgZD1zdC5kaXN0YW5jZUxpbmVMaW5lKHBbZl0scFtmKzFdLGhbZ10saFtnKzFdKTtpZihkPHRoaXMuX21pbkRpc3RhbmNlKXt0aGlzLl9taW5EaXN0YW5jZT1kO3ZhciB5PW5ldyBkbihwW2ZdLHBbZisxXSksXz1uZXcgZG4oaFtnXSxoW2crMV0pLG09eS5jbG9zZXN0UG9pbnRzKF8pO2NbMF09bmV3IExpKHUsZixtWzBdKSxjWzFdPW5ldyBMaShsLGcsbVsxXSl9aWYodGhpcy5fbWluRGlzdGFuY2U8PXRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfX19LFRpLnByb3RvdHlwZS5jb21wdXRlTWluRGlzdGFuY2VQb2ludHM9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT0wO2k8dC5zaXplKCk7aSsrKWZvcih2YXIgcj10LmdldChpKSxvPTA7bzxlLnNpemUoKTtvKyspe3ZhciBzPWUuZ2V0KG8pLGE9ci5nZXRDb29yZGluYXRlKCkuZGlzdGFuY2Uocy5nZXRDb29yZGluYXRlKCkpO2lmKGE8dGhpcy5fbWluRGlzdGFuY2UmJih0aGlzLl9taW5EaXN0YW5jZT1hLG5bMF09bmV3IExpKHIsMCxyLmdldENvb3JkaW5hdGUoKSksblsxXT1uZXcgTGkocywwLHMuZ2V0Q29vcmRpbmF0ZSgpKSksdGhpcy5fbWluRGlzdGFuY2U8PXRoaXMuX3Rlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfX0sVGkucHJvdG90eXBlLmRpc3RhbmNlPWZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMuX2dlb21bMF18fG51bGw9PT10aGlzLl9nZW9tWzFdKXRocm93IG5ldyBfKFwibnVsbCBnZW9tZXRyaWVzIGFyZSBub3Qgc3VwcG9ydGVkXCIpO3JldHVybiB0aGlzLl9nZW9tWzBdLmlzRW1wdHkoKXx8dGhpcy5fZ2VvbVsxXS5pc0VtcHR5KCk/MDoodGhpcy5jb21wdXRlTWluRGlzdGFuY2UoKSx0aGlzLl9taW5EaXN0YW5jZSl9LFRpLnByb3RvdHlwZS5jb21wdXRlTWluRGlzdGFuY2VMaW5lcz1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPTA7aTx0LnNpemUoKTtpKyspZm9yKHZhciByPXQuZ2V0KGkpLG89MDtvPGUuc2l6ZSgpO28rKyl7dmFyIHM9ZS5nZXQobyk7aWYodGhpcy5jb21wdXRlTWluRGlzdGFuY2UocixzLG4pLHRoaXMuX21pbkRpc3RhbmNlPD10aGlzLl90ZXJtaW5hdGVEaXN0YW5jZSlyZXR1cm4gbnVsbH19LFRpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxUaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gVGl9LFRpLmRpc3RhbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBUaSh0LGUpLmRpc3RhbmNlKCl9LFRpLmlzV2l0aGluRGlzdGFuY2U9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBuZXcgVGkodCxlLG4pLmRpc3RhbmNlKCk8PW59LFRpLm5lYXJlc3RQb2ludHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IFRpKHQsZSkubmVhcmVzdFBvaW50cygpfTt2YXIgUmk9ZnVuY3Rpb24oKXt0aGlzLl9wdD1bbmV3IE4sbmV3IE5dLHRoaXMuX2Rpc3RhbmNlPW0uTmFOLHRoaXMuX2lzTnVsbD0hMH07UmkucHJvdG90eXBlLmdldENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3B0fSxSaS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcHRbdF19LFJpLnByb3RvdHlwZS5zZXRNaW5pbXVtPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNldE1pbmltdW0odC5fcHRbMF0sdC5fcHRbMV0pfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtpZih0aGlzLl9pc051bGwpcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZShlLG4pLG51bGw7dmFyIGk9ZS5kaXN0YW5jZShuKTtpPHRoaXMuX2Rpc3RhbmNlJiZ0aGlzLmluaXRpYWxpemUoZSxuLGkpfX0sUmkucHJvdG90eXBlLmluaXRpYWxpemU9ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl0aGlzLl9pc051bGw9ITA7ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuX3B0WzBdLnNldENvb3JkaW5hdGUodCksdGhpcy5fcHRbMV0uc2V0Q29vcmRpbmF0ZShlKSx0aGlzLl9kaXN0YW5jZT10LmRpc3RhbmNlKGUpLHRoaXMuX2lzTnVsbD0hMX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl07dGhpcy5fcHRbMF0uc2V0Q29vcmRpbmF0ZShuKSx0aGlzLl9wdFsxXS5zZXRDb29yZGluYXRlKGkpLHRoaXMuX2Rpc3RhbmNlPXIsdGhpcy5faXNOdWxsPSExfX0sUmkucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIFEudG9MaW5lU3RyaW5nKHRoaXMuX3B0WzBdLHRoaXMuX3B0WzFdKX0sUmkucHJvdG90eXBlLmdldERpc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Rpc3RhbmNlfSxSaS5wcm90b3R5cGUuc2V0TWF4aW11bT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zZXRNYXhpbXVtKHQuX3B0WzBdLHQuX3B0WzFdKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07aWYodGhpcy5faXNOdWxsKXJldHVybiB0aGlzLmluaXRpYWxpemUoZSxuKSxudWxsO3ZhciBpPWUuZGlzdGFuY2Uobik7aT50aGlzLl9kaXN0YW5jZSYmdGhpcy5pbml0aWFsaXplKGUsbixpKX19LFJpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxSaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gUml9O3ZhciBQaT1mdW5jdGlvbigpe307UGkucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFBpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBQaX0sUGkuY29tcHV0ZURpc3RhbmNlPWZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzJdaW5zdGFuY2VvZiBSaSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBLdCYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBOKWZvcih2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl0saT1uZXcgZG4scj10LmdldENvb3JkaW5hdGVzKCksbz0wO288ci5sZW5ndGgtMTtvKyspe2kuc2V0Q29vcmRpbmF0ZXMocltvXSxyW28rMV0pO3ZhciBzPWkuY2xvc2VzdFBvaW50KGUpO24uc2V0TWluaW11bShzLGUpfWVsc2UgaWYoYXJndW1lbnRzWzJdaW5zdGFuY2VvZiBSaSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiAkdCYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBOKXt2YXIgYT1hcmd1bWVudHNbMF0sdT1hcmd1bWVudHNbMV0sbD1hcmd1bWVudHNbMl07UGkuY29tcHV0ZURpc3RhbmNlKGEuZ2V0RXh0ZXJpb3JSaW5nKCksdSxsKTtmb3IodmFyIGM9MDtjPGEuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7YysrKVBpLmNvbXB1dGVEaXN0YW5jZShhLmdldEludGVyaW9yUmluZ04oYyksdSxsKX1lbHNlIGlmKGFyZ3VtZW50c1syXWluc3RhbmNlb2YgUmkmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgbHQmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgTil7dmFyIHA9YXJndW1lbnRzWzBdLGg9YXJndW1lbnRzWzFdLGY9YXJndW1lbnRzWzJdO2lmKHAgaW5zdGFuY2VvZiBLdClQaS5jb21wdXRlRGlzdGFuY2UocCxoLGYpO2Vsc2UgaWYocCBpbnN0YW5jZW9mICR0KVBpLmNvbXB1dGVEaXN0YW5jZShwLGgsZik7ZWxzZSBpZihwIGluc3RhbmNlb2YgenQpZm9yKHZhciBnPXAsZD0wO2Q8Zy5nZXROdW1HZW9tZXRyaWVzKCk7ZCsrKXt2YXIgeT1nLmdldEdlb21ldHJ5TihkKTtQaS5jb21wdXRlRGlzdGFuY2UoeSxoLGYpfWVsc2UgZi5zZXRNaW5pbXVtKHAuZ2V0Q29vcmRpbmF0ZSgpLGgpfWVsc2UgaWYoYXJndW1lbnRzWzJdaW5zdGFuY2VvZiBSaSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBkbiYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBOKXt2YXIgXz1hcmd1bWVudHNbMF0sbT1hcmd1bWVudHNbMV0sdj1hcmd1bWVudHNbMl0sST1fLmNsb3Nlc3RQb2ludChtKTt2LnNldE1pbmltdW0oSSxtKX19O3ZhciBEaT1mdW5jdGlvbigpe3RoaXMuX2cwPW51bGwsdGhpcy5fZzE9bnVsbCx0aGlzLl9wdERpc3Q9bmV3IFJpLHRoaXMuX2RlbnNpZnlGcmFjPTA7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuX2cwPXQsdGhpcy5fZzE9ZX0sTWk9e01heFBvaW50RGlzdGFuY2VGaWx0ZXI6e2NvbmZpZ3VyYWJsZTohMH0sTWF4RGVuc2lmaWVkQnlGcmFjdGlvbkRpc3RhbmNlRmlsdGVyOntjb25maWd1cmFibGU6ITB9fTtEaS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHREaXN0LmdldENvb3JkaW5hdGVzKCl9LERpLnByb3RvdHlwZS5zZXREZW5zaWZ5RnJhY3Rpb249ZnVuY3Rpb24odCl7aWYodD4xfHx0PD0wKXRocm93IG5ldyBfKFwiRnJhY3Rpb24gaXMgbm90IGluIHJhbmdlICgwLjAgLSAxLjBdXCIpO3RoaXMuX2RlbnNpZnlGcmFjPXR9LERpLnByb3RvdHlwZS5jb21wdXRlPWZ1bmN0aW9uKHQsZSl7dGhpcy5jb21wdXRlT3JpZW50ZWREaXN0YW5jZSh0LGUsdGhpcy5fcHREaXN0KSx0aGlzLmNvbXB1dGVPcmllbnRlZERpc3RhbmNlKGUsdCx0aGlzLl9wdERpc3QpfSxEaS5wcm90b3R5cGUuZGlzdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb21wdXRlKHRoaXMuX2cwLHRoaXMuX2cxKSx0aGlzLl9wdERpc3QuZ2V0RGlzdGFuY2UoKX0sRGkucHJvdG90eXBlLmNvbXB1dGVPcmllbnRlZERpc3RhbmNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgQWkoZSk7aWYodC5hcHBseShpKSxuLnNldE1heGltdW0oaS5nZXRNYXhQb2ludERpc3RhbmNlKCkpLHRoaXMuX2RlbnNpZnlGcmFjPjApe3ZhciByPW5ldyBGaShlLHRoaXMuX2RlbnNpZnlGcmFjKTt0LmFwcGx5KHIpLG4uc2V0TWF4aW11bShyLmdldE1heFBvaW50RGlzdGFuY2UoKSl9fSxEaS5wcm90b3R5cGUub3JpZW50ZWREaXN0YW5jZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbXB1dGVPcmllbnRlZERpc3RhbmNlKHRoaXMuX2cwLHRoaXMuX2cxLHRoaXMuX3B0RGlzdCksdGhpcy5fcHREaXN0LmdldERpc3RhbmNlKCl9LERpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxEaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gRGl9LERpLmRpc3RhbmNlPWZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtyZXR1cm4gbmV3IERpKHQsZSkuZGlzdGFuY2UoKX1pZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzJdLG89bmV3IERpKG4saSk7cmV0dXJuIG8uc2V0RGVuc2lmeUZyYWN0aW9uKHIpLG8uZGlzdGFuY2UoKX19LE1pLk1heFBvaW50RGlzdGFuY2VGaWx0ZXIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIEFpfSxNaS5NYXhEZW5zaWZpZWRCeUZyYWN0aW9uRGlzdGFuY2VGaWx0ZXIuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIEZpfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhEaSxNaSk7dmFyIEFpPWZ1bmN0aW9uKCl7dGhpcy5fbWF4UHREaXN0PW5ldyBSaSx0aGlzLl9taW5QdERpc3Q9bmV3IFJpLHRoaXMuX2V1Y2xpZGVhbkRpc3Q9bmV3IFBpLHRoaXMuX2dlb209bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fZ2VvbT10fTtBaS5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKHQpe3RoaXMuX21pblB0RGlzdC5pbml0aWFsaXplKCksUGkuY29tcHV0ZURpc3RhbmNlKHRoaXMuX2dlb20sdCx0aGlzLl9taW5QdERpc3QpLHRoaXMuX21heFB0RGlzdC5zZXRNYXhpbXVtKHRoaXMuX21pblB0RGlzdCl9LEFpLnByb3RvdHlwZS5nZXRNYXhQb2ludERpc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21heFB0RGlzdH0sQWkucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW2h0XX0sQWkucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEFpfTt2YXIgRmk9ZnVuY3Rpb24oKXt0aGlzLl9tYXhQdERpc3Q9bmV3IFJpLHRoaXMuX21pblB0RGlzdD1uZXcgUmksdGhpcy5fZ2VvbT1udWxsLHRoaXMuX251bVN1YlNlZ3M9MDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5fZ2VvbT10LHRoaXMuX251bVN1YlNlZ3M9TWF0aC50cnVuYyhNYXRoLnJvdW5kKDEvZSkpfTtGaS5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKHQsZSl7aWYoMD09PWUpcmV0dXJuIG51bGw7Zm9yKHZhciBuPXQuZ2V0Q29vcmRpbmF0ZShlLTEpLGk9dC5nZXRDb29yZGluYXRlKGUpLHI9KGkueC1uLngpL3RoaXMuX251bVN1YlNlZ3Msbz0oaS55LW4ueSkvdGhpcy5fbnVtU3ViU2VncyxzPTA7czx0aGlzLl9udW1TdWJTZWdzO3MrKyl7dmFyIGE9bi54K3Mqcix1PW4ueStzKm8sbD1uZXcgTihhLHUpO3RoaXMuX21pblB0RGlzdC5pbml0aWFsaXplKCksUGkuY29tcHV0ZURpc3RhbmNlKHRoaXMuX2dlb20sbCx0aGlzLl9taW5QdERpc3QpLHRoaXMuX21heFB0RGlzdC5zZXRNYXhpbXVtKHRoaXMuX21pblB0RGlzdCl9fSxGaS5wcm90b3R5cGUuaXNEb25lPWZ1bmN0aW9uKCl7cmV0dXJuITF9LEZpLnByb3RvdHlwZS5pc0dlb21ldHJ5Q2hhbmdlZD1mdW5jdGlvbigpe3JldHVybiExfSxGaS5wcm90b3R5cGUuZ2V0TWF4UG9pbnREaXN0YW5jZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9tYXhQdERpc3R9LEZpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltVdF19LEZpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBGaX07dmFyIEdpPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLl9taW5WYWxpZERpc3RhbmNlPW51bGwsdGhpcy5fbWF4VmFsaWREaXN0YW5jZT1udWxsLHRoaXMuX21pbkRpc3RhbmNlRm91bmQ9bnVsbCx0aGlzLl9tYXhEaXN0YW5jZUZvdW5kPW51bGwsdGhpcy5faXNWYWxpZD0hMCx0aGlzLl9lcnJNc2c9bnVsbCx0aGlzLl9lcnJvckxvY2F0aW9uPW51bGwsdGhpcy5fZXJyb3JJbmRpY2F0b3I9bnVsbCx0aGlzLl9pbnB1dD10fHxudWxsLHRoaXMuX2J1ZkRpc3RhbmNlPWV8fG51bGwsdGhpcy5fcmVzdWx0PW58fG51bGx9LHFpPXtWRVJCT1NFOntjb25maWd1cmFibGU6ITB9LE1BWF9ESVNUQU5DRV9ESUZGX0ZSQUM6e2NvbmZpZ3VyYWJsZTohMH19O0dpLnByb3RvdHlwZS5jaGVja01heGltdW1EaXN0YW5jZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9bmV3IERpKGUsdCk7aWYoaS5zZXREZW5zaWZ5RnJhY3Rpb24oLjI1KSx0aGlzLl9tYXhEaXN0YW5jZUZvdW5kPWkub3JpZW50ZWREaXN0YW5jZSgpLHRoaXMuX21heERpc3RhbmNlRm91bmQ+bil7dGhpcy5faXNWYWxpZD0hMTt2YXIgcj1pLmdldENvb3JkaW5hdGVzKCk7dGhpcy5fZXJyb3JMb2NhdGlvbj1yWzFdLHRoaXMuX2Vycm9ySW5kaWNhdG9yPXQuZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVTdHJpbmcociksdGhpcy5fZXJyTXNnPVwiRGlzdGFuY2UgYmV0d2VlbiBidWZmZXIgY3VydmUgYW5kIGlucHV0IGlzIHRvbyBsYXJnZSAoXCIrdGhpcy5fbWF4RGlzdGFuY2VGb3VuZCtcIiBhdCBcIitRLnRvTGluZVN0cmluZyhyWzBdLHJbMV0pK1wiKVwifX0sR2kucHJvdG90eXBlLmlzVmFsaWQ9ZnVuY3Rpb24oKXt2YXIgdD1NYXRoLmFicyh0aGlzLl9idWZEaXN0YW5jZSksZT1HaS5NQVhfRElTVEFOQ0VfRElGRl9GUkFDKnQ7cmV0dXJuIHRoaXMuX21pblZhbGlkRGlzdGFuY2U9dC1lLHRoaXMuX21heFZhbGlkRGlzdGFuY2U9dCtlLCEoIXRoaXMuX2lucHV0LmlzRW1wdHkoKSYmIXRoaXMuX3Jlc3VsdC5pc0VtcHR5KCkpfHwodGhpcy5fYnVmRGlzdGFuY2U+MD90aGlzLmNoZWNrUG9zaXRpdmVWYWxpZCgpOnRoaXMuY2hlY2tOZWdhdGl2ZVZhbGlkKCksR2kuVkVSQk9TRSYmWC5vdXQucHJpbnRsbihcIk1pbiBEaXN0PSBcIit0aGlzLl9taW5EaXN0YW5jZUZvdW5kK1wiICBlcnI9IFwiKygxLXRoaXMuX21pbkRpc3RhbmNlRm91bmQvdGhpcy5fYnVmRGlzdGFuY2UpK1wiICBNYXggRGlzdD0gXCIrdGhpcy5fbWF4RGlzdGFuY2VGb3VuZCtcIiAgZXJyPSBcIisodGhpcy5fbWF4RGlzdGFuY2VGb3VuZC90aGlzLl9idWZEaXN0YW5jZS0xKSksdGhpcy5faXNWYWxpZCl9LEdpLnByb3RvdHlwZS5jaGVja05lZ2F0aXZlVmFsaWQ9ZnVuY3Rpb24oKXtpZighKHRoaXMuX2lucHV0IGluc3RhbmNlb2YgJHR8fHRoaXMuX2lucHV0IGluc3RhbmNlb2YgbmV8fHRoaXMuX2lucHV0IGluc3RhbmNlb2YgenQpKXJldHVybiBudWxsO3ZhciB0PXRoaXMuZ2V0UG9seWdvbkxpbmVzKHRoaXMuX2lucHV0KTtpZih0aGlzLmNoZWNrTWluaW11bURpc3RhbmNlKHQsdGhpcy5fcmVzdWx0LHRoaXMuX21pblZhbGlkRGlzdGFuY2UpLCF0aGlzLl9pc1ZhbGlkKXJldHVybiBudWxsO3RoaXMuY2hlY2tNYXhpbXVtRGlzdGFuY2UodCx0aGlzLl9yZXN1bHQsdGhpcy5fbWF4VmFsaWREaXN0YW5jZSl9LEdpLnByb3RvdHlwZS5nZXRFcnJvckluZGljYXRvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lcnJvckluZGljYXRvcn0sR2kucHJvdG90eXBlLmNoZWNrTWluaW11bURpc3RhbmNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgVGkodCxlLG4pO2lmKHRoaXMuX21pbkRpc3RhbmNlRm91bmQ9aS5kaXN0YW5jZSgpLHRoaXMuX21pbkRpc3RhbmNlRm91bmQ8bil7dGhpcy5faXNWYWxpZD0hMTt2YXIgcj1pLm5lYXJlc3RQb2ludHMoKTt0aGlzLl9lcnJvckxvY2F0aW9uPWkubmVhcmVzdFBvaW50cygpWzFdLHRoaXMuX2Vycm9ySW5kaWNhdG9yPXQuZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVTdHJpbmcociksdGhpcy5fZXJyTXNnPVwiRGlzdGFuY2UgYmV0d2VlbiBidWZmZXIgY3VydmUgYW5kIGlucHV0IGlzIHRvbyBzbWFsbCAoXCIrdGhpcy5fbWluRGlzdGFuY2VGb3VuZCtcIiBhdCBcIitRLnRvTGluZVN0cmluZyhyWzBdLHJbMV0pK1wiIClcIn19LEdpLnByb3RvdHlwZS5jaGVja1Bvc2l0aXZlVmFsaWQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9yZXN1bHQuZ2V0Qm91bmRhcnkoKTtpZih0aGlzLmNoZWNrTWluaW11bURpc3RhbmNlKHRoaXMuX2lucHV0LHQsdGhpcy5fbWluVmFsaWREaXN0YW5jZSksIXRoaXMuX2lzVmFsaWQpcmV0dXJuIG51bGw7dGhpcy5jaGVja01heGltdW1EaXN0YW5jZSh0aGlzLl9pbnB1dCx0LHRoaXMuX21heFZhbGlkRGlzdGFuY2UpfSxHaS5wcm90b3R5cGUuZ2V0RXJyb3JMb2NhdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lcnJvckxvY2F0aW9ufSxHaS5wcm90b3R5cGUuZ2V0UG9seWdvbkxpbmVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgTnQsbj1uZXcgQ2koZSksaT1OaS5nZXRQb2x5Z29ucyh0KS5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7aS5uZXh0KCkuYXBwbHkobil9cmV0dXJuIHQuZ2V0RmFjdG9yeSgpLmJ1aWxkR2VvbWV0cnkoZSl9LEdpLnByb3RvdHlwZS5nZXRFcnJvck1lc3NhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXJyTXNnfSxHaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sR2kucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEdpfSxxaS5WRVJCT1NFLmdldD1mdW5jdGlvbigpe3JldHVybiExfSxxaS5NQVhfRElTVEFOQ0VfRElGRl9GUkFDLmdldD1mdW5jdGlvbigpe3JldHVybi4wMTJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEdpLHFpKTt2YXIgQmk9ZnVuY3Rpb24odCxlLG4pe3RoaXMuX2lzVmFsaWQ9ITAsdGhpcy5fZXJyb3JNc2c9bnVsbCx0aGlzLl9lcnJvckxvY2F0aW9uPW51bGwsdGhpcy5fZXJyb3JJbmRpY2F0b3I9bnVsbCx0aGlzLl9pbnB1dD10fHxudWxsLHRoaXMuX2Rpc3RhbmNlPWV8fG51bGwsdGhpcy5fcmVzdWx0PW58fG51bGx9LFZpPXtWRVJCT1NFOntjb25maWd1cmFibGU6ITB9LE1BWF9FTlZfRElGRl9GUkFDOntjb25maWd1cmFibGU6ITB9fTtCaS5wcm90b3R5cGUuaXNWYWxpZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNoZWNrUG9seWdvbmFsKCksdGhpcy5faXNWYWxpZD8odGhpcy5jaGVja0V4cGVjdGVkRW1wdHkoKSx0aGlzLl9pc1ZhbGlkPyh0aGlzLmNoZWNrRW52ZWxvcGUoKSx0aGlzLl9pc1ZhbGlkPyh0aGlzLmNoZWNrQXJlYSgpLHRoaXMuX2lzVmFsaWQ/KHRoaXMuY2hlY2tEaXN0YW5jZSgpLHRoaXMuX2lzVmFsaWQpOnRoaXMuX2lzVmFsaWQpOnRoaXMuX2lzVmFsaWQpOnRoaXMuX2lzVmFsaWQpOnRoaXMuX2lzVmFsaWR9LEJpLnByb3RvdHlwZS5jaGVja0VudmVsb3BlPWZ1bmN0aW9uKCl7aWYodGhpcy5fZGlzdGFuY2U8MClyZXR1cm4gbnVsbDt2YXIgdD10aGlzLl9kaXN0YW5jZSpCaS5NQVhfRU5WX0RJRkZfRlJBQzswPT09dCYmKHQ9LjAwMSk7dmFyIGU9bmV3IGsodGhpcy5faW5wdXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKTtlLmV4cGFuZEJ5KHRoaXMuX2Rpc3RhbmNlKTt2YXIgbj1uZXcgayh0aGlzLl9yZXN1bHQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKTtuLmV4cGFuZEJ5KHQpLG4uY29udGFpbnMoZSl8fCh0aGlzLl9pc1ZhbGlkPSExLHRoaXMuX2Vycm9yTXNnPVwiQnVmZmVyIGVudmVsb3BlIGlzIGluY29ycmVjdFwiLHRoaXMuX2Vycm9ySW5kaWNhdG9yPXRoaXMuX2lucHV0LmdldEZhY3RvcnkoKS50b0dlb21ldHJ5KG4pKSx0aGlzLnJlcG9ydChcIkVudmVsb3BlXCIpfSxCaS5wcm90b3R5cGUuY2hlY2tEaXN0YW5jZT1mdW5jdGlvbigpe3ZhciB0PW5ldyBHaSh0aGlzLl9pbnB1dCx0aGlzLl9kaXN0YW5jZSx0aGlzLl9yZXN1bHQpO3QuaXNWYWxpZCgpfHwodGhpcy5faXNWYWxpZD0hMSx0aGlzLl9lcnJvck1zZz10LmdldEVycm9yTWVzc2FnZSgpLHRoaXMuX2Vycm9yTG9jYXRpb249dC5nZXRFcnJvckxvY2F0aW9uKCksdGhpcy5fZXJyb3JJbmRpY2F0b3I9dC5nZXRFcnJvckluZGljYXRvcigpKSx0aGlzLnJlcG9ydChcIkRpc3RhbmNlXCIpfSxCaS5wcm90b3R5cGUuY2hlY2tBcmVhPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5faW5wdXQuZ2V0QXJlYSgpLGU9dGhpcy5fcmVzdWx0LmdldEFyZWEoKTt0aGlzLl9kaXN0YW5jZT4wJiZ0PmUmJih0aGlzLl9pc1ZhbGlkPSExLHRoaXMuX2Vycm9yTXNnPVwiQXJlYSBvZiBwb3NpdGl2ZSBidWZmZXIgaXMgc21hbGxlciB0aGFuIGlucHV0XCIsdGhpcy5fZXJyb3JJbmRpY2F0b3I9dGhpcy5fcmVzdWx0KSx0aGlzLl9kaXN0YW5jZTwwJiZ0PGUmJih0aGlzLl9pc1ZhbGlkPSExLHRoaXMuX2Vycm9yTXNnPVwiQXJlYSBvZiBuZWdhdGl2ZSBidWZmZXIgaXMgbGFyZ2VyIHRoYW4gaW5wdXRcIix0aGlzLl9lcnJvckluZGljYXRvcj10aGlzLl9yZXN1bHQpLHRoaXMucmVwb3J0KFwiQXJlYVwiKX0sQmkucHJvdG90eXBlLmNoZWNrUG9seWdvbmFsPWZ1bmN0aW9uKCl7dGhpcy5fcmVzdWx0IGluc3RhbmNlb2YgJHR8fHRoaXMuX3Jlc3VsdCBpbnN0YW5jZW9mIG5lfHwodGhpcy5faXNWYWxpZD0hMSksdGhpcy5fZXJyb3JNc2c9XCJSZXN1bHQgaXMgbm90IHBvbHlnb25hbFwiLHRoaXMuX2Vycm9ySW5kaWNhdG9yPXRoaXMuX3Jlc3VsdCx0aGlzLnJlcG9ydChcIlBvbHlnb25hbFwiKX0sQmkucHJvdG90eXBlLmdldEVycm9ySW5kaWNhdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Vycm9ySW5kaWNhdG9yfSxCaS5wcm90b3R5cGUuZ2V0RXJyb3JMb2NhdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lcnJvckxvY2F0aW9ufSxCaS5wcm90b3R5cGUuY2hlY2tFeHBlY3RlZEVtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lucHV0LmdldERpbWVuc2lvbigpPj0yP251bGw6dGhpcy5fZGlzdGFuY2U+MD9udWxsOih0aGlzLl9yZXN1bHQuaXNFbXB0eSgpfHwodGhpcy5faXNWYWxpZD0hMSx0aGlzLl9lcnJvck1zZz1cIlJlc3VsdCBpcyBub24tZW1wdHlcIix0aGlzLl9lcnJvckluZGljYXRvcj10aGlzLl9yZXN1bHQpLHZvaWQgdGhpcy5yZXBvcnQoXCJFeHBlY3RlZEVtcHR5XCIpKX0sQmkucHJvdG90eXBlLnJlcG9ydD1mdW5jdGlvbih0KXtpZighQmkuVkVSQk9TRSlyZXR1cm4gbnVsbDtYLm91dC5wcmludGxuKFwiQ2hlY2sgXCIrdCtcIjogXCIrKHRoaXMuX2lzVmFsaWQ/XCJwYXNzZWRcIjpcIkZBSUxFRFwiKSl9LEJpLnByb3RvdHlwZS5nZXRFcnJvck1lc3NhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXJyb3JNc2d9LEJpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxCaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gQml9LEJpLmlzVmFsaWRNc2c9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW5ldyBCaSh0LGUsbik7cmV0dXJuIGkuaXNWYWxpZCgpP251bGw6aS5nZXRFcnJvck1lc3NhZ2UoKX0sQmkuaXNWYWxpZD1mdW5jdGlvbih0LGUsbil7cmV0dXJuISFuZXcgQmkodCxlLG4pLmlzVmFsaWQoKX0sVmkuVkVSQk9TRS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sVmkuTUFYX0VOVl9ESUZGX0ZSQUMuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuLjAxMn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQmksVmkpO3ZhciBVaT1mdW5jdGlvbigpe3RoaXMuX3B0cz1udWxsLHRoaXMuX2RhdGE9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5fcHRzPXQsdGhpcy5fZGF0YT1lfTtVaS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHRzfSxVaS5wcm90b3R5cGUuc2l6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wdHMubGVuZ3RofSxVaS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcHRzW3RdfSxVaS5wcm90b3R5cGUuaXNDbG9zZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHRzWzBdLmVxdWFscyh0aGlzLl9wdHNbdGhpcy5fcHRzLmxlbmd0aC0xXSl9LFVpLnByb3RvdHlwZS5nZXRTZWdtZW50T2N0YW50PWZ1bmN0aW9uKHQpe3JldHVybiB0PT09dGhpcy5fcHRzLmxlbmd0aC0xPy0xOnBuLm9jdGFudCh0aGlzLmdldENvb3JkaW5hdGUodCksdGhpcy5nZXRDb29yZGluYXRlKHQrMSkpfSxVaS5wcm90b3R5cGUuc2V0RGF0YT1mdW5jdGlvbih0KXt0aGlzLl9kYXRhPXR9LFVpLnByb3RvdHlwZS5nZXREYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGF9LFVpLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBRLnRvTGluZVN0cmluZyhuZXcgdWUodGhpcy5fcHRzKSl9LFVpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltobl19LFVpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBVaX07dmFyIHppPWZ1bmN0aW9uKCl7dGhpcy5fZmluZEFsbEludGVyc2VjdGlvbnM9ITEsdGhpcy5faXNDaGVja0VuZFNlZ21lbnRzT25seT0hMSx0aGlzLl9saT1udWxsLHRoaXMuX2ludGVyaW9ySW50ZXJzZWN0aW9uPW51bGwsdGhpcy5faW50U2VnbWVudHM9bnVsbCx0aGlzLl9pbnRlcnNlY3Rpb25zPW5ldyBOdCx0aGlzLl9pbnRlcnNlY3Rpb25Db3VudD0wLHRoaXMuX2tlZXBJbnRlcnNlY3Rpb25zPSEwO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9saT10LHRoaXMuX2ludGVyaW9ySW50ZXJzZWN0aW9uPW51bGx9O3ppLnByb3RvdHlwZS5nZXRJbnRlcmlvckludGVyc2VjdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnRlcmlvckludGVyc2VjdGlvbn0semkucHJvdG90eXBlLnNldENoZWNrRW5kU2VnbWVudHNPbmx5PWZ1bmN0aW9uKHQpe3RoaXMuX2lzQ2hlY2tFbmRTZWdtZW50c09ubHk9dH0semkucHJvdG90eXBlLmdldEludGVyc2VjdGlvblNlZ21lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ludFNlZ21lbnRzfSx6aS5wcm90b3R5cGUuY291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW50ZXJzZWN0aW9uQ291bnR9LHppLnByb3RvdHlwZS5nZXRJbnRlcnNlY3Rpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ludGVyc2VjdGlvbnN9LHppLnByb3RvdHlwZS5zZXRGaW5kQWxsSW50ZXJzZWN0aW9ucz1mdW5jdGlvbih0KXt0aGlzLl9maW5kQWxsSW50ZXJzZWN0aW9ucz10fSx6aS5wcm90b3R5cGUuc2V0S2VlcEludGVyc2VjdGlvbnM9ZnVuY3Rpb24odCl7dGhpcy5fa2VlcEludGVyc2VjdGlvbnM9dH0semkucHJvdG90eXBlLnByb2Nlc3NJbnRlcnNlY3Rpb25zPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKCF0aGlzLl9maW5kQWxsSW50ZXJzZWN0aW9ucyYmdGhpcy5oYXNJbnRlcnNlY3Rpb24oKSlyZXR1cm4gbnVsbDtpZih0PT09biYmZT09PWkpcmV0dXJuIG51bGw7aWYodGhpcy5faXNDaGVja0VuZFNlZ21lbnRzT25seSl7aWYoISh0aGlzLmlzRW5kU2VnbWVudCh0LGUpfHx0aGlzLmlzRW5kU2VnbWVudChuLGkpKSlyZXR1cm4gbnVsbH12YXIgcj10LmdldENvb3JkaW5hdGVzKClbZV0sbz10LmdldENvb3JkaW5hdGVzKClbZSsxXSxzPW4uZ2V0Q29vcmRpbmF0ZXMoKVtpXSxhPW4uZ2V0Q29vcmRpbmF0ZXMoKVtpKzFdO3RoaXMuX2xpLmNvbXB1dGVJbnRlcnNlY3Rpb24ocixvLHMsYSksdGhpcy5fbGkuaGFzSW50ZXJzZWN0aW9uKCkmJnRoaXMuX2xpLmlzSW50ZXJpb3JJbnRlcnNlY3Rpb24oKSYmKHRoaXMuX2ludFNlZ21lbnRzPW5ldyBBcnJheSg0KS5maWxsKG51bGwpLHRoaXMuX2ludFNlZ21lbnRzWzBdPXIsdGhpcy5faW50U2VnbWVudHNbMV09byx0aGlzLl9pbnRTZWdtZW50c1syXT1zLHRoaXMuX2ludFNlZ21lbnRzWzNdPWEsdGhpcy5faW50ZXJpb3JJbnRlcnNlY3Rpb249dGhpcy5fbGkuZ2V0SW50ZXJzZWN0aW9uKDApLHRoaXMuX2tlZXBJbnRlcnNlY3Rpb25zJiZ0aGlzLl9pbnRlcnNlY3Rpb25zLmFkZCh0aGlzLl9pbnRlcmlvckludGVyc2VjdGlvbiksdGhpcy5faW50ZXJzZWN0aW9uQ291bnQrKyl9LHppLnByb3RvdHlwZS5pc0VuZFNlZ21lbnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gMD09PWV8fGU+PXQuc2l6ZSgpLTJ9LHppLnByb3RvdHlwZS5oYXNJbnRlcnNlY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuX2ludGVyaW9ySW50ZXJzZWN0aW9ufSx6aS5wcm90b3R5cGUuaXNEb25lPWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuX2ZpbmRBbGxJbnRlcnNlY3Rpb25zJiZudWxsIT09dGhpcy5faW50ZXJpb3JJbnRlcnNlY3Rpb259LHppLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltXbl19LHppLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB6aX0semkuY3JlYXRlQWxsSW50ZXJzZWN0aW9uc0ZpbmRlcj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgemkodCk7cmV0dXJuIGUuc2V0RmluZEFsbEludGVyc2VjdGlvbnMoITApLGV9LHppLmNyZWF0ZUFueUludGVyc2VjdGlvbkZpbmRlcj1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IHppKHQpfSx6aS5jcmVhdGVJbnRlcnNlY3Rpb25Db3VudGVyPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB6aSh0KTtyZXR1cm4gZS5zZXRGaW5kQWxsSW50ZXJzZWN0aW9ucyghMCksZS5zZXRLZWVwSW50ZXJzZWN0aW9ucyghMSksZX07dmFyIFhpPWZ1bmN0aW9uKCl7dGhpcy5fbGk9bmV3IGl0LHRoaXMuX3NlZ1N0cmluZ3M9bnVsbCx0aGlzLl9maW5kQWxsSW50ZXJzZWN0aW9ucz0hMSx0aGlzLl9zZWdJbnQ9bnVsbCx0aGlzLl9pc1ZhbGlkPSEwO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9zZWdTdHJpbmdzPXR9O1hpLnByb3RvdHlwZS5leGVjdXRlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PXRoaXMuX3NlZ0ludClyZXR1cm4gbnVsbDt0aGlzLmNoZWNrSW50ZXJpb3JJbnRlcnNlY3Rpb25zKCl9LFhpLnByb3RvdHlwZS5nZXRJbnRlcnNlY3Rpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlZ0ludC5nZXRJbnRlcnNlY3Rpb25zKCl9LFhpLnByb3RvdHlwZS5pc1ZhbGlkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXhlY3V0ZSgpLHRoaXMuX2lzVmFsaWR9LFhpLnByb3RvdHlwZS5zZXRGaW5kQWxsSW50ZXJzZWN0aW9ucz1mdW5jdGlvbih0KXt0aGlzLl9maW5kQWxsSW50ZXJzZWN0aW9ucz10fSxYaS5wcm90b3R5cGUuY2hlY2tJbnRlcmlvckludGVyc2VjdGlvbnM9ZnVuY3Rpb24oKXt0aGlzLl9pc1ZhbGlkPSEwLHRoaXMuX3NlZ0ludD1uZXcgemkodGhpcy5fbGkpLHRoaXMuX3NlZ0ludC5zZXRGaW5kQWxsSW50ZXJzZWN0aW9ucyh0aGlzLl9maW5kQWxsSW50ZXJzZWN0aW9ucyk7dmFyIHQ9bmV3IHhuO2lmKHQuc2V0U2VnbWVudEludGVyc2VjdG9yKHRoaXMuX3NlZ0ludCksdC5jb21wdXRlTm9kZXModGhpcy5fc2VnU3RyaW5ncyksdGhpcy5fc2VnSW50Lmhhc0ludGVyc2VjdGlvbigpKXJldHVybiB0aGlzLl9pc1ZhbGlkPSExLG51bGx9LFhpLnByb3RvdHlwZS5jaGVja1ZhbGlkPWZ1bmN0aW9uKCl7aWYodGhpcy5leGVjdXRlKCksIXRoaXMuX2lzVmFsaWQpdGhyb3cgbmV3IHdlKHRoaXMuZ2V0RXJyb3JNZXNzYWdlKCksdGhpcy5fc2VnSW50LmdldEludGVyaW9ySW50ZXJzZWN0aW9uKCkpfSxYaS5wcm90b3R5cGUuZ2V0RXJyb3JNZXNzYWdlPWZ1bmN0aW9uKCl7aWYodGhpcy5faXNWYWxpZClyZXR1cm5cIm5vIGludGVyc2VjdGlvbnMgZm91bmRcIjt2YXIgdD10aGlzLl9zZWdJbnQuZ2V0SW50ZXJzZWN0aW9uU2VnbWVudHMoKTtyZXR1cm5cImZvdW5kIG5vbi1ub2RlZCBpbnRlcnNlY3Rpb24gYmV0d2VlbiBcIitRLnRvTGluZVN0cmluZyh0WzBdLHRbMV0pK1wiIGFuZCBcIitRLnRvTGluZVN0cmluZyh0WzJdLHRbM10pfSxYaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sWGkucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFhpfSxYaS5jb21wdXRlSW50ZXJzZWN0aW9ucz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWGkodCk7cmV0dXJuIGUuc2V0RmluZEFsbEludGVyc2VjdGlvbnMoITApLGUuaXNWYWxpZCgpLGUuZ2V0SW50ZXJzZWN0aW9ucygpfTt2YXIgWWk9ZnVuY3Rpb24gdCgpe3RoaXMuX252PW51bGw7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuX252PW5ldyBYaSh0LnRvU2VnbWVudFN0cmluZ3MoZSkpfTtZaS5wcm90b3R5cGUuY2hlY2tWYWxpZD1mdW5jdGlvbigpe3RoaXMuX252LmNoZWNrVmFsaWQoKX0sWWkucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFlpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBZaX0sWWkudG9TZWdtZW50U3RyaW5ncz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IE50LG49dC5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7ZS5hZGQobmV3IFVpKGkuZ2V0Q29vcmRpbmF0ZXMoKSxpKSl9cmV0dXJuIGV9LFlpLmNoZWNrVmFsaWQ9ZnVuY3Rpb24odCl7bmV3IFlpKHQpLmNoZWNrVmFsaWQoKX07dmFyIGtpPWZ1bmN0aW9uKHQpe3RoaXMuX21hcE9wPXR9O2tpLnByb3RvdHlwZS5tYXA9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBOdCxuPTA7bjx0LmdldE51bUdlb21ldHJpZXMoKTtuKyspe3ZhciBpPXRoaXMuX21hcE9wLm1hcCh0LmdldEdlb21ldHJ5TihuKSk7aS5pc0VtcHR5KCl8fGUuYWRkKGkpfXJldHVybiB0LmdldEZhY3RvcnkoKS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24oX2UudG9HZW9tZXRyeUFycmF5KGUpKX0sa2kucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGtpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBraX0sa2kubWFwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBraShlKS5tYXAodCl9O3ZhciBqaT1mdW5jdGlvbigpe3RoaXMuX29wPW51bGwsdGhpcy5fZ2VvbWV0cnlGYWN0b3J5PW51bGwsdGhpcy5fcHRMb2NhdG9yPW51bGwsdGhpcy5fbGluZUVkZ2VzTGlzdD1uZXcgTnQsdGhpcy5fcmVzdWx0TGluZUxpc3Q9bmV3IE50O3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTt0aGlzLl9vcD10LHRoaXMuX2dlb21ldHJ5RmFjdG9yeT1lLHRoaXMuX3B0TG9jYXRvcj1ufTtqaS5wcm90b3R5cGUuY29sbGVjdExpbmVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9vcC5nZXRHcmFwaCgpLmdldEVkZ2VFbmRzKCkuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3RoaXMuY29sbGVjdExpbmVFZGdlKG4sdCx0aGlzLl9saW5lRWRnZXNMaXN0KSx0aGlzLmNvbGxlY3RCb3VuZGFyeVRvdWNoRWRnZShuLHQsdGhpcy5fbGluZUVkZ2VzTGlzdCl9fSxqaS5wcm90b3R5cGUubGFiZWxJc29sYXRlZExpbmU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9wdExvY2F0b3IubG9jYXRlKHQuZ2V0Q29vcmRpbmF0ZSgpLHRoaXMuX29wLmdldEFyZ0dlb21ldHJ5KGUpKTt0LmdldExhYmVsKCkuc2V0TG9jYXRpb24oZSxuKX0samkucHJvdG90eXBlLmJ1aWxkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZpbmRDb3ZlcmVkTGluZUVkZ2VzKCksdGhpcy5jb2xsZWN0TGluZXModCksdGhpcy5idWlsZExpbmVzKHQpLHRoaXMuX3Jlc3VsdExpbmVMaXN0fSxqaS5wcm90b3R5cGUuY29sbGVjdExpbmVFZGdlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmdldExhYmVsKCkscj10LmdldEVkZ2UoKTt0LmlzTGluZUVkZ2UoKSYmKHQuaXNWaXNpdGVkKCl8fCFMci5pc1Jlc3VsdE9mT3AoaSxlKXx8ci5pc0NvdmVyZWQoKXx8KG4uYWRkKHIpLHQuc2V0VmlzaXRlZEVkZ2UoITApKSl9LGppLnByb3RvdHlwZS5maW5kQ292ZXJlZExpbmVFZGdlcz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLl9vcC5nZXRHcmFwaCgpLmdldE5vZGVzKCkuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3QubmV4dCgpLmdldEVkZ2VzKCkuZmluZENvdmVyZWRMaW5lRWRnZXMoKX1mb3IodmFyIGU9dGhpcy5fb3AuZ2V0R3JhcGgoKS5nZXRFZGdlRW5kcygpLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKSxpPW4uZ2V0RWRnZSgpO2lmKG4uaXNMaW5lRWRnZSgpJiYhaS5pc0NvdmVyZWRTZXQoKSl7dmFyIHI9dGhpcy5fb3AuaXNDb3ZlcmVkQnlBKG4uZ2V0Q29vcmRpbmF0ZSgpKTtpLnNldENvdmVyZWQocil9fX0samkucHJvdG90eXBlLmxhYmVsSXNvbGF0ZWRMaW5lcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCksaT1uLmdldExhYmVsKCk7bi5pc0lzb2xhdGVkKCkmJihpLmlzTnVsbCgwKT90aGlzLmxhYmVsSXNvbGF0ZWRMaW5lKG4sMCk6dGhpcy5sYWJlbElzb2xhdGVkTGluZShuLDEpKX19LGppLnByb3RvdHlwZS5idWlsZExpbmVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9saW5lRWRnZXNMaXN0Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKSxpPXRoaXMuX2dlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lU3RyaW5nKG4uZ2V0Q29vcmRpbmF0ZXMoKSk7dGhpcy5fcmVzdWx0TGluZUxpc3QuYWRkKGkpLG4uc2V0SW5SZXN1bHQoITApfX0samkucHJvdG90eXBlLmNvbGxlY3RCb3VuZGFyeVRvdWNoRWRnZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC5nZXRMYWJlbCgpO3JldHVybiB0LmlzTGluZUVkZ2UoKT9udWxsOnQuaXNWaXNpdGVkKCk/bnVsbDp0LmlzSW50ZXJpb3JBcmVhRWRnZSgpP251bGw6dC5nZXRFZGdlKCkuaXNJblJlc3VsdCgpP251bGw6KHR0LmlzVHJ1ZSghKHQuaXNJblJlc3VsdCgpfHx0LmdldFN5bSgpLmlzSW5SZXN1bHQoKSl8fCF0LmdldEVkZ2UoKS5pc0luUmVzdWx0KCkpLHZvaWQoTHIuaXNSZXN1bHRPZk9wKGksZSkmJmU9PT1Mci5JTlRFUlNFQ1RJT04mJihuLmFkZCh0LmdldEVkZ2UoKSksdC5zZXRWaXNpdGVkRWRnZSghMCkpKSl9LGppLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxqaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gaml9O3ZhciBIaT1mdW5jdGlvbigpe3RoaXMuX29wPW51bGwsdGhpcy5fZ2VvbWV0cnlGYWN0b3J5PW51bGwsdGhpcy5fcmVzdWx0UG9pbnRMaXN0PW5ldyBOdDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5fb3A9dCx0aGlzLl9nZW9tZXRyeUZhY3Rvcnk9ZX07SGkucHJvdG90eXBlLmZpbHRlckNvdmVyZWROb2RlVG9Qb2ludD1mdW5jdGlvbih0KXt2YXIgZT10LmdldENvb3JkaW5hdGUoKTtpZighdGhpcy5fb3AuaXNDb3ZlcmVkQnlMQShlKSl7dmFyIG49dGhpcy5fZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZVBvaW50KGUpO3RoaXMuX3Jlc3VsdFBvaW50TGlzdC5hZGQobil9fSxIaS5wcm90b3R5cGUuZXh0cmFjdE5vbkNvdmVyZWRSZXN1bHROb2Rlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5fb3AuZ2V0R3JhcGgoKS5nZXROb2RlcygpLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtpZighbi5pc0luUmVzdWx0KCkmJighbi5pc0luY2lkZW50RWRnZUluUmVzdWx0KCkmJigwPT09bi5nZXRFZGdlcygpLmdldERlZ3JlZSgpfHx0PT09THIuSU5URVJTRUNUSU9OKSkpe3ZhciBpPW4uZ2V0TGFiZWwoKTtMci5pc1Jlc3VsdE9mT3AoaSx0KSYmdGhpcy5maWx0ZXJDb3ZlcmVkTm9kZVRvUG9pbnQobil9fX0sSGkucHJvdG90eXBlLmJ1aWxkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmV4dHJhY3ROb25Db3ZlcmVkUmVzdWx0Tm9kZXModCksdGhpcy5fcmVzdWx0UG9pbnRMaXN0fSxIaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sSGkucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEhpfTt2YXIgV2k9ZnVuY3Rpb24oKXt0aGlzLl9pbnB1dEdlb209bnVsbCx0aGlzLl9mYWN0b3J5PW51bGwsdGhpcy5fcHJ1bmVFbXB0eUdlb21ldHJ5PSEwLHRoaXMuX3ByZXNlcnZlR2VvbWV0cnlDb2xsZWN0aW9uVHlwZT0hMCx0aGlzLl9wcmVzZXJ2ZUNvbGxlY3Rpb25zPSExLHRoaXMuX3ByZXNlcnZlVHlwZT0hMX07V2kucHJvdG90eXBlLnRyYW5zZm9ybVBvaW50PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2ZhY3RvcnkuY3JlYXRlUG9pbnQodGhpcy50cmFuc2Zvcm1Db29yZGluYXRlcyh0LmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLHQpKX0sV2kucHJvdG90eXBlLnRyYW5zZm9ybVBvbHlnb249ZnVuY3Rpb24odCxlKXt2YXIgbj0hMCxpPXRoaXMudHJhbnNmb3JtTGluZWFyUmluZyh0LmdldEV4dGVyaW9yUmluZygpLHQpO251bGwhPT1pJiZpIGluc3RhbmNlb2YgZWUmJiFpLmlzRW1wdHkoKXx8KG49ITEpO2Zvcih2YXIgcj1uZXcgTnQsbz0wO288dC5nZXROdW1JbnRlcmlvclJpbmcoKTtvKyspe3ZhciBzPXRoaXMudHJhbnNmb3JtTGluZWFyUmluZyh0LmdldEludGVyaW9yUmluZ04obyksdCk7bnVsbD09PXN8fHMuaXNFbXB0eSgpfHwocyBpbnN0YW5jZW9mIGVlfHwobj0hMSksci5hZGQocykpfWlmKG4pcmV0dXJuIHRoaXMuX2ZhY3RvcnkuY3JlYXRlUG9seWdvbihpLHIudG9BcnJheShbXSkpO3ZhciBhPW5ldyBOdDtyZXR1cm4gbnVsbCE9PWkmJmEuYWRkKGkpLGEuYWRkQWxsKHIpLHRoaXMuX2ZhY3RvcnkuYnVpbGRHZW9tZXRyeShhKX0sV2kucHJvdG90eXBlLmNyZWF0ZUNvb3JkaW5hdGVTZXF1ZW5jZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fZmFjdG9yeS5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKHQpfSxXaS5wcm90b3R5cGUuZ2V0SW5wdXRHZW9tZXRyeT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnB1dEdlb219LFdpLnByb3RvdHlwZS50cmFuc2Zvcm1NdWx0aUxpbmVTdHJpbmc9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IE50LGk9MDtpPHQuZ2V0TnVtR2VvbWV0cmllcygpO2krKyl7dmFyIHI9dGhpcy50cmFuc2Zvcm1MaW5lU3RyaW5nKHQuZ2V0R2VvbWV0cnlOKGkpLHQpO251bGwhPT1yJiYoci5pc0VtcHR5KCl8fG4uYWRkKHIpKX1yZXR1cm4gdGhpcy5fZmFjdG9yeS5idWlsZEdlb21ldHJ5KG4pfSxXaS5wcm90b3R5cGUudHJhbnNmb3JtQ29vcmRpbmF0ZXM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jb3B5KHQpfSxXaS5wcm90b3R5cGUudHJhbnNmb3JtTGluZVN0cmluZz1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9mYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcodGhpcy50cmFuc2Zvcm1Db29yZGluYXRlcyh0LmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLHQpKX0sV2kucHJvdG90eXBlLnRyYW5zZm9ybU11bHRpUG9pbnQ9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IE50LGk9MDtpPHQuZ2V0TnVtR2VvbWV0cmllcygpO2krKyl7dmFyIHI9dGhpcy50cmFuc2Zvcm1Qb2ludCh0LmdldEdlb21ldHJ5TihpKSx0KTtudWxsIT09ciYmKHIuaXNFbXB0eSgpfHxuLmFkZChyKSl9cmV0dXJuIHRoaXMuX2ZhY3RvcnkuYnVpbGRHZW9tZXRyeShuKX0sV2kucHJvdG90eXBlLnRyYW5zZm9ybU11bHRpUG9seWdvbj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgTnQsaT0wO2k8dC5nZXROdW1HZW9tZXRyaWVzKCk7aSsrKXt2YXIgcj10aGlzLnRyYW5zZm9ybVBvbHlnb24odC5nZXRHZW9tZXRyeU4oaSksdCk7bnVsbCE9PXImJihyLmlzRW1wdHkoKXx8bi5hZGQocikpfXJldHVybiB0aGlzLl9mYWN0b3J5LmJ1aWxkR2VvbWV0cnkobil9LFdpLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKHQpe3JldHVybiB0LmNvcHkoKX0sV2kucHJvdG90eXBlLnRyYW5zZm9ybUdlb21ldHJ5Q29sbGVjdGlvbj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgTnQsaT0wO2k8dC5nZXROdW1HZW9tZXRyaWVzKCk7aSsrKXt2YXIgcj10aGlzLnRyYW5zZm9ybSh0LmdldEdlb21ldHJ5TihpKSk7bnVsbCE9PXImJih0aGlzLl9wcnVuZUVtcHR5R2VvbWV0cnkmJnIuaXNFbXB0eSgpfHxuLmFkZChyKSl9cmV0dXJuIHRoaXMuX3ByZXNlcnZlR2VvbWV0cnlDb2xsZWN0aW9uVHlwZT90aGlzLl9mYWN0b3J5LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihfZS50b0dlb21ldHJ5QXJyYXkobikpOnRoaXMuX2ZhY3RvcnkuYnVpbGRHZW9tZXRyeShuKX0sV2kucHJvdG90eXBlLnRyYW5zZm9ybT1mdW5jdGlvbih0KXtpZih0aGlzLl9pbnB1dEdlb209dCx0aGlzLl9mYWN0b3J5PXQuZ2V0RmFjdG9yeSgpLHQgaW5zdGFuY2VvZiBRdClyZXR1cm4gdGhpcy50cmFuc2Zvcm1Qb2ludCh0LG51bGwpO2lmKHQgaW5zdGFuY2VvZiB0ZSlyZXR1cm4gdGhpcy50cmFuc2Zvcm1NdWx0aVBvaW50KHQsbnVsbCk7aWYodCBpbnN0YW5jZW9mIGVlKXJldHVybiB0aGlzLnRyYW5zZm9ybUxpbmVhclJpbmcodCxudWxsKTtpZih0IGluc3RhbmNlb2YgS3QpcmV0dXJuIHRoaXMudHJhbnNmb3JtTGluZVN0cmluZyh0LG51bGwpO2lmKHQgaW5zdGFuY2VvZiBYdClyZXR1cm4gdGhpcy50cmFuc2Zvcm1NdWx0aUxpbmVTdHJpbmcodCxudWxsKTtpZih0IGluc3RhbmNlb2YgJHQpcmV0dXJuIHRoaXMudHJhbnNmb3JtUG9seWdvbih0LG51bGwpO2lmKHQgaW5zdGFuY2VvZiBuZSlyZXR1cm4gdGhpcy50cmFuc2Zvcm1NdWx0aVBvbHlnb24odCxudWxsKTtpZih0IGluc3RhbmNlb2YgenQpcmV0dXJuIHRoaXMudHJhbnNmb3JtR2VvbWV0cnlDb2xsZWN0aW9uKHQsbnVsbCk7dGhyb3cgbmV3IF8oXCJVbmtub3duIEdlb21ldHJ5IHN1YnR5cGU6IFwiK3QuZ2V0Q2xhc3MoKS5nZXROYW1lKCkpfSxXaS5wcm90b3R5cGUudHJhbnNmb3JtTGluZWFyUmluZz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMudHJhbnNmb3JtQ29vcmRpbmF0ZXModC5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSx0KTtpZihudWxsPT09bilyZXR1cm4gdGhpcy5fZmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKG51bGwpO3ZhciBpPW4uc2l6ZSgpO3JldHVybiBpPjAmJmk8NCYmIXRoaXMuX3ByZXNlcnZlVHlwZT90aGlzLl9mYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcobik6dGhpcy5fZmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKG4pfSxXaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sV2kucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFdpfTt2YXIgS2k9ZnVuY3Rpb24gdCgpe2lmKHRoaXMuX3NuYXBUb2xlcmFuY2U9MCx0aGlzLl9zcmNQdHM9bnVsbCx0aGlzLl9zZWc9bmV3IGRuLHRoaXMuX2FsbG93U25hcHBpbmdUb1NvdXJjZVZlcnRpY2VzPSExLHRoaXMuX2lzQ2xvc2VkPSExLGFyZ3VtZW50c1swXWluc3RhbmNlb2YgS3QmJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0LmNhbGwodGhpcyxlLmdldENvb3JkaW5hdGVzKCksbil9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5JiZcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV07dGhpcy5fc3JjUHRzPWksdGhpcy5faXNDbG9zZWQ9dC5pc0Nsb3NlZChpKSx0aGlzLl9zbmFwVG9sZXJhbmNlPXJ9fTtLaS5wcm90b3R5cGUuc25hcFZlcnRpY2VzPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXRoaXMuX2lzQ2xvc2VkP3Quc2l6ZSgpLTE6dC5zaXplKCksaT0wO2k8bjtpKyspe3ZhciByPXQuZ2V0KGkpLG89dGhpcy5maW5kU25hcEZvclZlcnRleChyLGUpO251bGwhPT1vJiYodC5zZXQoaSxuZXcgTihvKSksMD09PWkmJnRoaXMuX2lzQ2xvc2VkJiZ0LnNldCh0LnNpemUoKS0xLG5ldyBOKG8pKSl9fSxLaS5wcm90b3R5cGUuZmluZFNuYXBGb3JWZXJ0ZXg9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7aWYodC5lcXVhbHMyRChlW25dKSlyZXR1cm4gbnVsbDtpZih0LmRpc3RhbmNlKGVbbl0pPHRoaXMuX3NuYXBUb2xlcmFuY2UpcmV0dXJuIGVbbl19cmV0dXJuIG51bGx9LEtpLnByb3RvdHlwZS5zbmFwVG89ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFN0KHRoaXMuX3NyY1B0cyk7dGhpcy5zbmFwVmVydGljZXMoZSx0KSx0aGlzLnNuYXBTZWdtZW50cyhlLHQpO3JldHVybiBlLnRvQ29vcmRpbmF0ZUFycmF5KCl9LEtpLnByb3RvdHlwZS5zbmFwU2VnbWVudHM9ZnVuY3Rpb24odCxlKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIG49ZS5sZW5ndGg7ZVswXS5lcXVhbHMyRChlW2UubGVuZ3RoLTFdKSYmKG49ZS5sZW5ndGgtMSk7Zm9yKHZhciBpPTA7aTxuO2krKyl7dmFyIHI9ZVtpXSxvPXRoaXMuZmluZFNlZ21lbnRJbmRleFRvU25hcChyLHQpO28+PTAmJnQuYWRkKG8rMSxuZXcgTihyKSwhMSl9fSxLaS5wcm90b3R5cGUuZmluZFNlZ21lbnRJbmRleFRvU25hcD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1tLk1BWF9WQUxVRSxpPS0xLHI9MDtyPGUuc2l6ZSgpLTE7cisrKXtpZih0aGlzLl9zZWcucDA9ZS5nZXQociksdGhpcy5fc2VnLnAxPWUuZ2V0KHIrMSksdGhpcy5fc2VnLnAwLmVxdWFsczJEKHQpfHx0aGlzLl9zZWcucDEuZXF1YWxzMkQodCkpe2lmKHRoaXMuX2FsbG93U25hcHBpbmdUb1NvdXJjZVZlcnRpY2VzKWNvbnRpbnVlO3JldHVybi0xfXZhciBvPXRoaXMuX3NlZy5kaXN0YW5jZSh0KTtvPHRoaXMuX3NuYXBUb2xlcmFuY2UmJm88biYmKG49byxpPXIpfXJldHVybiBpfSxLaS5wcm90b3R5cGUuc2V0QWxsb3dTbmFwcGluZ1RvU291cmNlVmVydGljZXM9ZnVuY3Rpb24odCl7dGhpcy5fYWxsb3dTbmFwcGluZ1RvU291cmNlVmVydGljZXM9dH0sS2kucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LEtpLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBLaX0sS2kuaXNDbG9zZWQ9ZnVuY3Rpb24odCl7cmV0dXJuISh0Lmxlbmd0aDw9MSkmJnRbMF0uZXF1YWxzMkQodFt0Lmxlbmd0aC0xXSl9O3ZhciBKaT1mdW5jdGlvbih0KXt0aGlzLl9zcmNHZW9tPXR8fG51bGx9LFFpPXtTTkFQX1BSRUNJU0lPTl9GQUNUT1I6e2NvbmZpZ3VyYWJsZTohMH19O0ppLnByb3RvdHlwZS5zbmFwVG89ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmV4dHJhY3RUYXJnZXRDb29yZGluYXRlcyh0KTtyZXR1cm4gbmV3IFppKGUsbikudHJhbnNmb3JtKHRoaXMuX3NyY0dlb20pfSxKaS5wcm90b3R5cGUuc25hcFRvU2VsZj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZXh0cmFjdFRhcmdldENvb3JkaW5hdGVzKHRoaXMuX3NyY0dlb20pLGk9bmV3IFppKHQsbiwhMCkudHJhbnNmb3JtKHRoaXMuX3NyY0dlb20pLHI9aTtyZXR1cm4gZSYmTyhyLFp0KSYmKHI9aS5idWZmZXIoMCkpLHJ9LEppLnByb3RvdHlwZS5jb21wdXRlU25hcFRvbGVyYW5jZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jb21wdXRlTWluaW11bVNlZ21lbnRMZW5ndGgodCkvMTB9LEppLnByb3RvdHlwZS5leHRyYWN0VGFyZ2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBoLG49dC5nZXRDb29yZGluYXRlcygpLGk9MDtpPG4ubGVuZ3RoO2krKyllLmFkZChuW2ldKTtyZXR1cm4gZS50b0FycmF5KG5ldyBBcnJheSgwKS5maWxsKG51bGwpKX0sSmkucHJvdG90eXBlLmNvbXB1dGVNaW5pbXVtU2VnbWVudExlbmd0aD1mdW5jdGlvbih0KXtmb3IodmFyIGU9bS5NQVhfVkFMVUUsbj0wO248dC5sZW5ndGgtMTtuKyspe3ZhciBpPXRbbl0uZGlzdGFuY2UodFtuKzFdKTtpPGUmJihlPWkpfXJldHVybiBlfSxKaS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sSmkucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEppfSxKaS5zbmFwPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgQXJyYXkoMikuZmlsbChudWxsKSxyPW5ldyBKaSh0KTtpWzBdPXIuc25hcFRvKGUsbik7dmFyIG89bmV3IEppKGUpO3JldHVybiBpWzFdPW8uc25hcFRvKGlbMF0sbiksaX0sSmkuY29tcHV0ZU92ZXJsYXlTbmFwVG9sZXJhbmNlPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPUppLmNvbXB1dGVTaXplQmFzZWRTbmFwVG9sZXJhbmNlKHQpLG49dC5nZXRQcmVjaXNpb25Nb2RlbCgpO2lmKG4uZ2V0VHlwZSgpPT09ZmUuRklYRUQpe3ZhciBpPTEvbi5nZXRTY2FsZSgpKjIvMS40MTU7aT5lJiYoZT1pKX1yZXR1cm4gZX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHI9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdO3JldHVybiBNYXRoLm1pbihKaS5jb21wdXRlT3ZlcmxheVNuYXBUb2xlcmFuY2UociksSmkuY29tcHV0ZU92ZXJsYXlTbmFwVG9sZXJhbmNlKG8pKX19LEppLmNvbXB1dGVTaXplQmFzZWRTbmFwVG9sZXJhbmNlPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpO3JldHVybiBNYXRoLm1pbihlLmdldEhlaWdodCgpLGUuZ2V0V2lkdGgoKSkqSmkuU05BUF9QUkVDSVNJT05fRkFDVE9SfSxKaS5zbmFwVG9TZWxmPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gbmV3IEppKHQpLnNuYXBUb1NlbGYoZSxuKX0sUWkuU05BUF9QUkVDSVNJT05fRkFDVE9SLmdldD1mdW5jdGlvbigpe3JldHVybiAxZS05fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhKaSxRaSk7dmFyIFppPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSxuLGkpe3QuY2FsbCh0aGlzKSx0aGlzLl9zbmFwVG9sZXJhbmNlPWV8fG51bGwsdGhpcy5fc25hcFB0cz1ufHxudWxsLHRoaXMuX2lzU2VsZlNuYXA9dm9pZCAwIT09aSYmaX1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuc25hcExpbmU9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgS2kodCx0aGlzLl9zbmFwVG9sZXJhbmNlKTtyZXR1cm4gbi5zZXRBbGxvd1NuYXBwaW5nVG9Tb3VyY2VWZXJ0aWNlcyh0aGlzLl9pc1NlbGZTbmFwKSxuLnNuYXBUbyhlKX0sZS5wcm90b3R5cGUudHJhbnNmb3JtQ29vcmRpbmF0ZXM9ZnVuY3Rpb24odCxlKXt2YXIgbj10LnRvQ29vcmRpbmF0ZUFycmF5KCksaT10aGlzLnNuYXBMaW5lKG4sdGhpcy5fc25hcFB0cyk7cmV0dXJuIHRoaXMuX2ZhY3RvcnkuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShpKX0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX0oV2kpLCRpPWZ1bmN0aW9uKCl7dGhpcy5faXNGaXJzdD0hMCx0aGlzLl9jb21tb25NYW50aXNzYUJpdHNDb3VudD01Myx0aGlzLl9jb21tb25CaXRzPTAsdGhpcy5fY29tbW9uU2lnbkV4cD1udWxsfTskaS5wcm90b3R5cGUuZ2V0Q29tbW9uPWZ1bmN0aW9uKCl7cmV0dXJuIG0ubG9uZ0JpdHNUb0RvdWJsZSh0aGlzLl9jb21tb25CaXRzKX0sJGkucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXt2YXIgZT1tLmRvdWJsZVRvTG9uZ0JpdHModCk7aWYodGhpcy5faXNGaXJzdClyZXR1cm4gdGhpcy5fY29tbW9uQml0cz1lLHRoaXMuX2NvbW1vblNpZ25FeHA9JGkuc2lnbkV4cEJpdHModGhpcy5fY29tbW9uQml0cyksdGhpcy5faXNGaXJzdD0hMSxudWxsO2lmKCRpLnNpZ25FeHBCaXRzKGUpIT09dGhpcy5fY29tbW9uU2lnbkV4cClyZXR1cm4gdGhpcy5fY29tbW9uQml0cz0wLG51bGw7dGhpcy5fY29tbW9uTWFudGlzc2FCaXRzQ291bnQ9JGkubnVtQ29tbW9uTW9zdFNpZ01hbnRpc3NhQml0cyh0aGlzLl9jb21tb25CaXRzLGUpLHRoaXMuX2NvbW1vbkJpdHM9JGkuemVyb0xvd2VyQml0cyh0aGlzLl9jb21tb25CaXRzLDY0LSgxMit0aGlzLl9jb21tb25NYW50aXNzYUJpdHNDb3VudCkpfSwkaS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9bS5sb25nQml0c1RvRG91YmxlKHQpLG49XCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIrbS50b0JpbmFyeVN0cmluZyh0KSxpPW4uc3Vic3RyaW5nKG4ubGVuZ3RoLTY0KTtyZXR1cm4gaS5zdWJzdHJpbmcoMCwxKStcIiAgXCIraS5zdWJzdHJpbmcoMSwxMikrXCIoZXhwKSBcIitpLnN1YnN0cmluZygxMikrXCIgWyBcIitlK1wiIF1cIn19LCRpLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSwkaS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gJGl9LCRpLmdldEJpdD1mdW5jdGlvbih0LGUpe3JldHVybiAwIT0odCYxPDxlKT8xOjB9LCRpLnNpZ25FeHBCaXRzPWZ1bmN0aW9uKHQpe3JldHVybiB0Pj41Mn0sJGkuemVyb0xvd2VyQml0cz1mdW5jdGlvbih0LGUpe3JldHVybiB0Jn4oKDE8PGUpLTEpfSwkaS5udW1Db21tb25Nb3N0U2lnTWFudGlzc2FCaXRzPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTAsaT01MjtpPj0wO2ktLSl7aWYoJGkuZ2V0Qml0KHQsaSkhPT0kaS5nZXRCaXQoZSxpKSlyZXR1cm4gbjtuKyt9cmV0dXJuIDUyfTt2YXIgdHI9ZnVuY3Rpb24oKXt0aGlzLl9jb21tb25Db29yZD1udWxsLHRoaXMuX2NjRmlsdGVyPW5ldyBucn0sZXI9e0NvbW1vbkNvb3JkaW5hdGVGaWx0ZXI6e2NvbmZpZ3VyYWJsZTohMH0sVHJhbnNsYXRlcjp7Y29uZmlndXJhYmxlOiEwfX07dHIucHJvdG90eXBlLmFkZENvbW1vbkJpdHM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGlyKHRoaXMuX2NvbW1vbkNvb3JkKTt0LmFwcGx5KGUpLHQuZ2VvbWV0cnlDaGFuZ2VkKCl9LHRyLnByb3RvdHlwZS5yZW1vdmVDb21tb25CaXRzPWZ1bmN0aW9uKHQpe2lmKDA9PT10aGlzLl9jb21tb25Db29yZC54JiYwPT09dGhpcy5fY29tbW9uQ29vcmQueSlyZXR1cm4gdDt2YXIgZT1uZXcgTih0aGlzLl9jb21tb25Db29yZCk7ZS54PS1lLngsZS55PS1lLnk7dmFyIG49bmV3IGlyKGUpO3JldHVybiB0LmFwcGx5KG4pLHQuZ2VvbWV0cnlDaGFuZ2VkKCksdH0sdHIucHJvdG90eXBlLmdldENvbW1vbkNvb3JkaW5hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29tbW9uQ29vcmR9LHRyLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7dC5hcHBseSh0aGlzLl9jY0ZpbHRlciksdGhpcy5fY29tbW9uQ29vcmQ9dGhpcy5fY2NGaWx0ZXIuZ2V0Q29tbW9uQ29vcmRpbmF0ZSgpfSx0ci5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sdHIucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHRyfSxlci5Db21tb25Db29yZGluYXRlRmlsdGVyLmdldD1mdW5jdGlvbigpe3JldHVybiBucn0sZXIuVHJhbnNsYXRlci5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gaXJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRyLGVyKTt2YXIgbnI9ZnVuY3Rpb24oKXt0aGlzLl9jb21tb25CaXRzWD1uZXcgJGksdGhpcy5fY29tbW9uQml0c1k9bmV3ICRpfTtuci5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKHQpe3RoaXMuX2NvbW1vbkJpdHNYLmFkZCh0LngpLHRoaXMuX2NvbW1vbkJpdHNZLmFkZCh0LnkpfSxuci5wcm90b3R5cGUuZ2V0Q29tbW9uQ29vcmRpbmF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgTih0aGlzLl9jb21tb25CaXRzWC5nZXRDb21tb24oKSx0aGlzLl9jb21tb25CaXRzWS5nZXRDb21tb24oKSl9LG5yLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltodF19LG5yLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBucn07dmFyIGlyPWZ1bmN0aW9uKCl7dGhpcy50cmFucz1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnRyYW5zPXR9O2lyLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldE9yZGluYXRlKGUsMCkrdGhpcy50cmFucy54LGk9dC5nZXRPcmRpbmF0ZShlLDEpK3RoaXMudHJhbnMueTt0LnNldE9yZGluYXRlKGUsMCxuKSx0LnNldE9yZGluYXRlKGUsMSxpKX0saXIucHJvdG90eXBlLmlzRG9uZT1mdW5jdGlvbigpe3JldHVybiExfSxpci5wcm90b3R5cGUuaXNHZW9tZXRyeUNoYW5nZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hMH0saXIucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW1V0XX0saXIucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGlyfTt2YXIgcnI9ZnVuY3Rpb24odCxlKXt0aGlzLl9nZW9tPW5ldyBBcnJheSgyKS5maWxsKG51bGwpLHRoaXMuX3NuYXBUb2xlcmFuY2U9bnVsbCx0aGlzLl9jYnI9bnVsbCx0aGlzLl9nZW9tWzBdPXQsdGhpcy5fZ2VvbVsxXT1lLHRoaXMuY29tcHV0ZVNuYXBUb2xlcmFuY2UoKX07cnIucHJvdG90eXBlLnNlbGZTbmFwPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgSmkodCkuc25hcFRvKHQsdGhpcy5fc25hcFRvbGVyYW5jZSl9LHJyLnByb3RvdHlwZS5yZW1vdmVDb21tb25CaXRzPWZ1bmN0aW9uKHQpe3RoaXMuX2Nicj1uZXcgdHIsdGhpcy5fY2JyLmFkZCh0WzBdKSx0aGlzLl9jYnIuYWRkKHRbMV0pO3ZhciBlPW5ldyBBcnJheSgyKS5maWxsKG51bGwpO3JldHVybiBlWzBdPXRoaXMuX2Nici5yZW1vdmVDb21tb25CaXRzKHRbMF0uY29weSgpKSxlWzFdPXRoaXMuX2Nici5yZW1vdmVDb21tb25CaXRzKHRbMV0uY29weSgpKSxlfSxyci5wcm90b3R5cGUucHJlcGFyZVJlc3VsdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fY2JyLmFkZENvbW1vbkJpdHModCksdH0scnIucHJvdG90eXBlLmdldFJlc3VsdEdlb21ldHJ5PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc25hcCh0aGlzLl9nZW9tKSxuPUxyLm92ZXJsYXlPcChlWzBdLGVbMV0sdCk7cmV0dXJuIHRoaXMucHJlcGFyZVJlc3VsdChuKX0scnIucHJvdG90eXBlLmNoZWNrVmFsaWQ9ZnVuY3Rpb24odCl7dC5pc1ZhbGlkKCl8fFgub3V0LnByaW50bG4oXCJTbmFwcGVkIGdlb21ldHJ5IGlzIGludmFsaWRcIil9LHJyLnByb3RvdHlwZS5jb21wdXRlU25hcFRvbGVyYW5jZT1mdW5jdGlvbigpe3RoaXMuX3NuYXBUb2xlcmFuY2U9SmkuY29tcHV0ZU92ZXJsYXlTbmFwVG9sZXJhbmNlKHRoaXMuX2dlb21bMF0sdGhpcy5fZ2VvbVsxXSl9LHJyLnByb3RvdHlwZS5zbmFwPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucmVtb3ZlQ29tbW9uQml0cyh0KTtyZXR1cm4gSmkuc25hcChlWzBdLGVbMV0sdGhpcy5fc25hcFRvbGVyYW5jZSl9LHJyLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxyci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gcnJ9LHJyLm92ZXJsYXlPcD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIG5ldyBycih0LGUpLmdldFJlc3VsdEdlb21ldHJ5KG4pfSxyci51bmlvbj1mdW5jdGlvbih0LGUpe3JldHVybiByci5vdmVybGF5T3AodCxlLExyLlVOSU9OKX0scnIuaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHJyLm92ZXJsYXlPcCh0LGUsTHIuSU5URVJTRUNUSU9OKX0scnIuc3ltRGlmZmVyZW5jZT1mdW5jdGlvbih0LGUpe3JldHVybiByci5vdmVybGF5T3AodCxlLExyLlNZTURJRkZFUkVOQ0UpfSxyci5kaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHJyLm92ZXJsYXlPcCh0LGUsTHIuRElGRkVSRU5DRSl9O3ZhciBvcj1mdW5jdGlvbih0LGUpe3RoaXMuX2dlb209bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5fZ2VvbVswXT10LHRoaXMuX2dlb21bMV09ZX07b3IucHJvdG90eXBlLmdldFJlc3VsdEdlb21ldHJ5PWZ1bmN0aW9uKHQpe3ZhciBlPW51bGwsbj0hMSxpPW51bGw7dHJ5e2U9THIub3ZlcmxheU9wKHRoaXMuX2dlb21bMF0sdGhpcy5fZ2VvbVsxXSx0KTtuPSEwfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIFopKXRocm93IHQ7aT10fWlmKCFuKXRyeXtlPXJyLm92ZXJsYXlPcCh0aGlzLl9nZW9tWzBdLHRoaXMuX2dlb21bMV0sdCl9Y2F0Y2godCl7dGhyb3cgdCBpbnN0YW5jZW9mIFo/aTp0fXJldHVybiBlfSxvci5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sb3IucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIG9yfSxvci5vdmVybGF5T3A9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBuZXcgb3IodCxlKS5nZXRSZXN1bHRHZW9tZXRyeShuKX0sb3IudW5pb249ZnVuY3Rpb24odCxlKXtyZXR1cm4gb3Iub3ZlcmxheU9wKHQsZSxMci5VTklPTil9LG9yLmludGVyc2VjdGlvbj1mdW5jdGlvbih0LGUpe3JldHVybiBvci5vdmVybGF5T3AodCxlLExyLklOVEVSU0VDVElPTil9LG9yLnN5bURpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gb3Iub3ZlcmxheU9wKHQsZSxMci5TWU1ESUZGRVJFTkNFKX0sb3IuZGlmZmVyZW5jZT1mdW5jdGlvbih0LGUpe3JldHVybiBvci5vdmVybGF5T3AodCxlLExyLkRJRkZFUkVOQ0UpfTt2YXIgc3I9ZnVuY3Rpb24oKXt0aGlzLm1jZT1udWxsLHRoaXMuY2hhaW5JbmRleD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLm1jZT10LHRoaXMuY2hhaW5JbmRleD1lfTtzci5wcm90b3R5cGUuY29tcHV0ZUludGVyc2VjdGlvbnM9ZnVuY3Rpb24odCxlKXt0aGlzLm1jZS5jb21wdXRlSW50ZXJzZWN0c0ZvckNoYWluKHRoaXMuY2hhaW5JbmRleCx0Lm1jZSx0LmNoYWluSW5kZXgsZSl9LHNyLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxzci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gc3J9O3ZhciBhcj1mdW5jdGlvbiB0KCl7aWYodGhpcy5fbGFiZWw9bnVsbCx0aGlzLl94VmFsdWU9bnVsbCx0aGlzLl9ldmVudFR5cGU9bnVsbCx0aGlzLl9pbnNlcnRFdmVudD1udWxsLHRoaXMuX2RlbGV0ZUV2ZW50SW5kZXg9bnVsbCx0aGlzLl9vYmo9bnVsbCwyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMuX2V2ZW50VHlwZT10LkRFTEVURSx0aGlzLl94VmFsdWU9ZSx0aGlzLl9pbnNlcnRFdmVudD1ufWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXTt0aGlzLl9ldmVudFR5cGU9dC5JTlNFUlQsdGhpcy5fbGFiZWw9aSx0aGlzLl94VmFsdWU9cix0aGlzLl9vYmo9b319LHVyPXtJTlNFUlQ6e2NvbmZpZ3VyYWJsZTohMH0sREVMRVRFOntjb25maWd1cmFibGU6ITB9fTthci5wcm90b3R5cGUuaXNEZWxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRUeXBlPT09YXIuREVMRVRFfSxhci5wcm90b3R5cGUuc2V0RGVsZXRlRXZlbnRJbmRleD1mdW5jdGlvbih0KXt0aGlzLl9kZWxldGVFdmVudEluZGV4PXR9LGFyLnByb3RvdHlwZS5nZXRPYmplY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb2JqfSxhci5wcm90b3R5cGUuY29tcGFyZVRvPWZ1bmN0aW9uKHQpe3ZhciBlPXQ7cmV0dXJuIHRoaXMuX3hWYWx1ZTxlLl94VmFsdWU/LTE6dGhpcy5feFZhbHVlPmUuX3hWYWx1ZT8xOnRoaXMuX2V2ZW50VHlwZTxlLl9ldmVudFR5cGU/LTE6dGhpcy5fZXZlbnRUeXBlPmUuX2V2ZW50VHlwZT8xOjB9LGFyLnByb3RvdHlwZS5nZXRJbnNlcnRFdmVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnNlcnRFdmVudH0sYXIucHJvdG90eXBlLmlzSW5zZXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50VHlwZT09PWFyLklOU0VSVH0sYXIucHJvdG90eXBlLmlzU2FtZUxhYmVsPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dGhpcy5fbGFiZWwmJnRoaXMuX2xhYmVsPT09dC5fbGFiZWx9LGFyLnByb3RvdHlwZS5nZXREZWxldGVFdmVudEluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RlbGV0ZUV2ZW50SW5kZXh9LGFyLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltJXX0sYXIucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGFyfSx1ci5JTlNFUlQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDF9LHVyLkRFTEVURS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMn0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYXIsdXIpO3ZhciBscj1mdW5jdGlvbigpe307bHIucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGxyLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBscn07dmFyIGNyPWZ1bmN0aW9uKCl7dGhpcy5faGFzSW50ZXJzZWN0aW9uPSExLHRoaXMuX2hhc1Byb3Blcj0hMSx0aGlzLl9oYXNQcm9wZXJJbnRlcmlvcj0hMSx0aGlzLl9wcm9wZXJJbnRlcnNlY3Rpb25Qb2ludD1udWxsLHRoaXMuX2xpPW51bGwsdGhpcy5faW5jbHVkZVByb3Blcj1udWxsLHRoaXMuX3JlY29yZElzb2xhdGVkPW51bGwsdGhpcy5faXNTZWxmSW50ZXJzZWN0aW9uPW51bGwsdGhpcy5fbnVtSW50ZXJzZWN0aW9ucz0wLHRoaXMubnVtVGVzdHM9MCx0aGlzLl9iZHlOb2Rlcz1udWxsLHRoaXMuX2lzRG9uZT0hMSx0aGlzLl9pc0RvbmVXaGVuUHJvcGVySW50PSExO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTt0aGlzLl9saT10LHRoaXMuX2luY2x1ZGVQcm9wZXI9ZSx0aGlzLl9yZWNvcmRJc29sYXRlZD1ufTtjci5wcm90b3R5cGUuaXNUcml2aWFsSW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKHQ9PT1uJiYxPT09dGhpcy5fbGkuZ2V0SW50ZXJzZWN0aW9uTnVtKCkpe2lmKGNyLmlzQWRqYWNlbnRTZWdtZW50cyhlLGkpKXJldHVybiEwO2lmKHQuaXNDbG9zZWQoKSl7dmFyIHI9dC5nZXROdW1Qb2ludHMoKS0xO2lmKDA9PT1lJiZpPT09cnx8MD09PWkmJmU9PT1yKXJldHVybiEwfX1yZXR1cm4hMX0sY3IucHJvdG90eXBlLmdldFByb3BlckludGVyc2VjdGlvblBvaW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Byb3BlckludGVyc2VjdGlvblBvaW50fSxjci5wcm90b3R5cGUuc2V0SXNEb25lSWZQcm9wZXJJbnQ9ZnVuY3Rpb24odCl7dGhpcy5faXNEb25lV2hlblByb3BlckludD10fSxjci5wcm90b3R5cGUuaGFzUHJvcGVySW50ZXJpb3JJbnRlcnNlY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faGFzUHJvcGVySW50ZXJpb3J9LGNyLnByb3RvdHlwZS5pc0JvdW5kYXJ5UG9pbnRJbnRlcm5hbD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKS5nZXRDb29yZGluYXRlKCk7aWYodC5pc0ludGVyc2VjdGlvbihpKSlyZXR1cm4hMH1yZXR1cm4hMX0sY3IucHJvdG90eXBlLmhhc1Byb3BlckludGVyc2VjdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9oYXNQcm9wZXJ9LGNyLnByb3RvdHlwZS5oYXNJbnRlcnNlY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faGFzSW50ZXJzZWN0aW9ufSxjci5wcm90b3R5cGUuaXNEb25lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzRG9uZX0sY3IucHJvdG90eXBlLmlzQm91bmRhcnlQb2ludD1mdW5jdGlvbih0LGUpe3JldHVybiBudWxsIT09ZSYmKCEhdGhpcy5pc0JvdW5kYXJ5UG9pbnRJbnRlcm5hbCh0LGVbMF0pfHwhIXRoaXMuaXNCb3VuZGFyeVBvaW50SW50ZXJuYWwodCxlWzFdKSl9LGNyLnByb3RvdHlwZS5zZXRCb3VuZGFyeU5vZGVzPWZ1bmN0aW9uKHQsZSl7dGhpcy5fYmR5Tm9kZXM9bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5fYmR5Tm9kZXNbMF09dCx0aGlzLl9iZHlOb2Rlc1sxXT1lfSxjci5wcm90b3R5cGUuYWRkSW50ZXJzZWN0aW9ucz1mdW5jdGlvbih0LGUsbixpKXtpZih0PT09biYmZT09PWkpcmV0dXJuIG51bGw7dGhpcy5udW1UZXN0cysrO3ZhciByPXQuZ2V0Q29vcmRpbmF0ZXMoKVtlXSxvPXQuZ2V0Q29vcmRpbmF0ZXMoKVtlKzFdLHM9bi5nZXRDb29yZGluYXRlcygpW2ldLGE9bi5nZXRDb29yZGluYXRlcygpW2krMV07dGhpcy5fbGkuY29tcHV0ZUludGVyc2VjdGlvbihyLG8scyxhKSx0aGlzLl9saS5oYXNJbnRlcnNlY3Rpb24oKSYmKHRoaXMuX3JlY29yZElzb2xhdGVkJiYodC5zZXRJc29sYXRlZCghMSksbi5zZXRJc29sYXRlZCghMSkpLHRoaXMuX251bUludGVyc2VjdGlvbnMrKyx0aGlzLmlzVHJpdmlhbEludGVyc2VjdGlvbih0LGUsbixpKXx8KHRoaXMuX2hhc0ludGVyc2VjdGlvbj0hMCwhdGhpcy5faW5jbHVkZVByb3BlciYmdGhpcy5fbGkuaXNQcm9wZXIoKXx8KHQuYWRkSW50ZXJzZWN0aW9ucyh0aGlzLl9saSxlLDApLG4uYWRkSW50ZXJzZWN0aW9ucyh0aGlzLl9saSxpLDEpKSx0aGlzLl9saS5pc1Byb3BlcigpJiYodGhpcy5fcHJvcGVySW50ZXJzZWN0aW9uUG9pbnQ9dGhpcy5fbGkuZ2V0SW50ZXJzZWN0aW9uKDApLmNvcHkoKSx0aGlzLl9oYXNQcm9wZXI9ITAsdGhpcy5faXNEb25lV2hlblByb3BlckludCYmKHRoaXMuX2lzRG9uZT0hMCksdGhpcy5pc0JvdW5kYXJ5UG9pbnQodGhpcy5fbGksdGhpcy5fYmR5Tm9kZXMpfHwodGhpcy5faGFzUHJvcGVySW50ZXJpb3I9ITApKSkpfSxjci5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sY3IucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGNyfSxjci5pc0FkamFjZW50U2VnbWVudHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gMT09PU1hdGguYWJzKHQtZSl9O3ZhciBwcj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5jYWxsKHRoaXMpLHRoaXMuZXZlbnRzPW5ldyBOdCx0aGlzLm5PdmVybGFwcz1udWxsfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5wcmVwYXJlRXZlbnRzPWZ1bmN0aW9uKCl7JGUuc29ydCh0aGlzLmV2ZW50cyk7Zm9yKHZhciB0PTA7dDx0aGlzLmV2ZW50cy5zaXplKCk7dCsrKXt2YXIgZT10aGlzLmV2ZW50cy5nZXQodCk7ZS5pc0RlbGV0ZSgpJiZlLmdldEluc2VydEV2ZW50KCkuc2V0RGVsZXRlRXZlbnRJbmRleCh0KX19LGUucHJvdG90eXBlLmNvbXB1dGVJbnRlcnNlY3Rpb25zPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLm5PdmVybGFwcz0wLHRoaXMucHJlcGFyZUV2ZW50cygpO2Zvcih2YXIgZT0wO2U8dGhpcy5ldmVudHMuc2l6ZSgpO2UrKyl7dmFyIG49dGhpcy5ldmVudHMuZ2V0KGUpO2lmKG4uaXNJbnNlcnQoKSYmdGhpcy5wcm9jZXNzT3ZlcmxhcHMoZSxuLmdldERlbGV0ZUV2ZW50SW5kZXgoKSxuLHQpLHQuaXNEb25lKCkpYnJlYWt9fWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpaWYoYXJndW1lbnRzWzJdaW5zdGFuY2VvZiBjciYmTyhhcmd1bWVudHNbMF0seHQpJiZPKGFyZ3VtZW50c1sxXSx4dCkpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXTt0aGlzLmFkZEVkZ2VzKGksaSksdGhpcy5hZGRFZGdlcyhyLHIpLHRoaXMuY29tcHV0ZUludGVyc2VjdGlvbnMobyl9ZWxzZSBpZihcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1syXSYmTyhhcmd1bWVudHNbMF0seHQpJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIGNyKXt2YXIgcz1hcmd1bWVudHNbMF0sYT1hcmd1bWVudHNbMV07YXJndW1lbnRzWzJdP3RoaXMuYWRkRWRnZXMocyxudWxsKTp0aGlzLmFkZEVkZ2VzKHMpLHRoaXMuY29tcHV0ZUludGVyc2VjdGlvbnMoYSl9fSxlLnByb3RvdHlwZS5hZGRFZGdlPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuZ2V0TW9ub3RvbmVDaGFpbkVkZ2UoKSxpPW4uZ2V0U3RhcnRJbmRleGVzKCkscj0wO3I8aS5sZW5ndGgtMTtyKyspe3ZhciBvPW5ldyBzcihuLHIpLHM9bmV3IGFyKGUsbi5nZXRNaW5YKHIpLG8pO3RoaXMuZXZlbnRzLmFkZChzKSx0aGlzLmV2ZW50cy5hZGQobmV3IGFyKG4uZ2V0TWF4WChyKSxzKSl9fSxlLnByb3RvdHlwZS5wcm9jZXNzT3ZlcmxhcHM9ZnVuY3Rpb24odCxlLG4saSl7Zm9yKHZhciByPW4uZ2V0T2JqZWN0KCksbz10O288ZTtvKyspe3ZhciBzPXRoaXMuZXZlbnRzLmdldChvKTtpZihzLmlzSW5zZXJ0KCkpe3ZhciBhPXMuZ2V0T2JqZWN0KCk7bi5pc1NhbWVMYWJlbChzKXx8KHIuY29tcHV0ZUludGVyc2VjdGlvbnMoYSxpKSx0aGlzLm5PdmVybGFwcysrKX19fSxlLnByb3RvdHlwZS5hZGRFZGdlcz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgdD1hcmd1bWVudHNbMF0uaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpO3RoaXMuYWRkRWRnZShlLGUpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPW4uaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3ZhciBvPXIubmV4dCgpO3RoaXMuYWRkRWRnZShvLGkpfX0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX0obHIpLGhyPWZ1bmN0aW9uKCl7dGhpcy5fbWluPW0uUE9TSVRJVkVfSU5GSU5JVFksdGhpcy5fbWF4PW0uTkVHQVRJVkVfSU5GSU5JVFl9LGZyPXtOb2RlQ29tcGFyYXRvcjp7Y29uZmlndXJhYmxlOiEwfX07aHIucHJvdG90eXBlLmdldE1pbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9taW59LGhyLnByb3RvdHlwZS5pbnRlcnNlY3RzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISh0aGlzLl9taW4+ZXx8dGhpcy5fbWF4PHQpfSxoci5wcm90b3R5cGUuZ2V0TWF4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21heH0saHIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIFEudG9MaW5lU3RyaW5nKG5ldyBOKHRoaXMuX21pbiwwKSxuZXcgTih0aGlzLl9tYXgsMCkpfSxoci5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0saHIucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGhyfSxmci5Ob2RlQ29tcGFyYXRvci5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ3J9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGhyLGZyKTt2YXIgZ3I9ZnVuY3Rpb24oKXt9O2dyLnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dCxpPWUscj0obi5fbWluK24uX21heCkvMixvPShpLl9taW4raS5fbWF4KS8yO3JldHVybiByPG8/LTE6cj5vPzE6MH0sZ3IucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW3hdfSxnci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZ3J9O3ZhciBkcj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dC5jYWxsKHRoaXMpLHRoaXMuX2l0ZW09bnVsbDt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1hcmd1bWVudHNbMl07dGhpcy5fbWluPWUsdGhpcy5fbWF4PW4sdGhpcy5faXRlbT1pfXJldHVybiB0JiYoZS5fX3Byb3RvX189dCksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbih0LGUsbil7aWYoIXRoaXMuaW50ZXJzZWN0cyh0LGUpKXJldHVybiBudWxsO24udmlzaXRJdGVtKHRoaXMuX2l0ZW0pfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxlfShocikseXI9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3QuY2FsbCh0aGlzKSx0aGlzLl9ub2RlMT1udWxsLHRoaXMuX25vZGUyPW51bGw7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMuX25vZGUxPWUsdGhpcy5fbm9kZTI9bix0aGlzLmJ1aWxkRXh0ZW50KHRoaXMuX25vZGUxLHRoaXMuX25vZGUyKX1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuYnVpbGRFeHRlbnQ9ZnVuY3Rpb24odCxlKXt0aGlzLl9taW49TWF0aC5taW4odC5fbWluLGUuX21pbiksdGhpcy5fbWF4PU1hdGgubWF4KHQuX21heCxlLl9tYXgpfSxlLnByb3RvdHlwZS5xdWVyeT1mdW5jdGlvbih0LGUsbil7aWYoIXRoaXMuaW50ZXJzZWN0cyh0LGUpKXJldHVybiBudWxsO251bGwhPT10aGlzLl9ub2RlMSYmdGhpcy5fbm9kZTEucXVlcnkodCxlLG4pLG51bGwhPT10aGlzLl9ub2RlMiYmdGhpcy5fbm9kZTIucXVlcnkodCxlLG4pfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxlfShociksX3I9ZnVuY3Rpb24oKXt0aGlzLl9sZWF2ZXM9bmV3IE50LHRoaXMuX3Jvb3Q9bnVsbCx0aGlzLl9sZXZlbD0wfTtfci5wcm90b3R5cGUuYnVpbGRUcmVlPWZ1bmN0aW9uKCl7JGUuc29ydCh0aGlzLl9sZWF2ZXMsbmV3IGhyLk5vZGVDb21wYXJhdG9yKTtmb3IodmFyIHQ9dGhpcy5fbGVhdmVzLGU9bnVsbCxuPW5ldyBOdDs7KXtpZih0aGlzLmJ1aWxkTGV2ZWwodCxuKSwxPT09bi5zaXplKCkpcmV0dXJuIG4uZ2V0KDApO2U9dCx0PW4sbj1lfX0sX3IucHJvdG90eXBlLmluc2VydD1mdW5jdGlvbih0LGUsbil7aWYobnVsbCE9PXRoaXMuX3Jvb3QpdGhyb3cgbmV3IEVycm9yKFwiSW5kZXggY2Fubm90IGJlIGFkZGVkIHRvIG9uY2UgaXQgaGFzIGJlZW4gcXVlcmllZFwiKTt0aGlzLl9sZWF2ZXMuYWRkKG5ldyBkcih0LGUsbikpfSxfci5wcm90b3R5cGUucXVlcnk9ZnVuY3Rpb24odCxlLG4pe3RoaXMuaW5pdCgpLHRoaXMuX3Jvb3QucXVlcnkodCxlLG4pfSxfci5wcm90b3R5cGUuYnVpbGRSb290PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXRoaXMuX3Jvb3QpcmV0dXJuIG51bGw7dGhpcy5fcm9vdD10aGlzLmJ1aWxkVHJlZSgpfSxfci5wcm90b3R5cGUucHJpbnROb2RlPWZ1bmN0aW9uKHQpe1gub3V0LnByaW50bG4oUS50b0xpbmVTdHJpbmcobmV3IE4odC5fbWluLHRoaXMuX2xldmVsKSxuZXcgTih0Ll9tYXgsdGhpcy5fbGV2ZWwpKSl9LF9yLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXRoaXMuX3Jvb3QpcmV0dXJuIG51bGw7dGhpcy5idWlsZFJvb3QoKX0sX3IucHJvdG90eXBlLmJ1aWxkTGV2ZWw9ZnVuY3Rpb24odCxlKXt0aGlzLl9sZXZlbCsrLGUuY2xlYXIoKTtmb3IodmFyIG49MDtuPHQuc2l6ZSgpO24rPTIpe3ZhciBpPXQuZ2V0KG4pO2lmKG51bGw9PT0obisxPHQuc2l6ZSgpP3QuZ2V0KG4pOm51bGwpKWUuYWRkKGkpO2Vsc2V7dmFyIHI9bmV3IHlyKHQuZ2V0KG4pLHQuZ2V0KG4rMSkpO2UuYWRkKHIpfX19LF9yLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxfci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gX3J9O3ZhciBtcj1mdW5jdGlvbigpe3RoaXMuX2l0ZW1zPW5ldyBOdH07bXIucHJvdG90eXBlLnZpc2l0SXRlbT1mdW5jdGlvbih0KXt0aGlzLl9pdGVtcy5hZGQodCl9LG1yLnByb3RvdHlwZS5nZXRJdGVtcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pdGVtc30sbXIucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW0tlXX0sbXIucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIG1yfTt2YXIgdnI9ZnVuY3Rpb24oKXt0aGlzLl9pbmRleD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTtpZighTyh0LFp0KSl0aHJvdyBuZXcgXyhcIkFyZ3VtZW50IG11c3QgYmUgUG9seWdvbmFsXCIpO3RoaXMuX2luZGV4PW5ldyB4cih0KX0sSXI9e1NlZ21lbnRWaXNpdG9yOntjb25maWd1cmFibGU6ITB9LEludGVydmFsSW5kZXhlZEdlb21ldHJ5Ontjb25maWd1cmFibGU6ITB9fTt2ci5wcm90b3R5cGUubG9jYXRlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBvdCh0KSxuPW5ldyBFcihlKTtyZXR1cm4gdGhpcy5faW5kZXgucXVlcnkodC55LHQueSxuKSxlLmdldExvY2F0aW9uKCl9LHZyLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltWbl19LHZyLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB2cn0sSXIuU2VnbWVudFZpc2l0b3IuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIEVyfSxJci5JbnRlcnZhbEluZGV4ZWRHZW9tZXRyeS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4geHJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHZyLElyKTt2YXIgRXI9ZnVuY3Rpb24oKXt0aGlzLl9jb3VudGVyPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuX2NvdW50ZXI9dH07RXIucHJvdG90eXBlLnZpc2l0SXRlbT1mdW5jdGlvbih0KXt2YXIgZT10O3RoaXMuX2NvdW50ZXIuY291bnRTZWdtZW50KGUuZ2V0Q29vcmRpbmF0ZSgwKSxlLmdldENvb3JkaW5hdGUoMSkpfSxFci5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bS2VdfSxFci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gRXJ9O3ZhciB4cj1mdW5jdGlvbigpe3RoaXMuX2luZGV4PW5ldyBfcjt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5pbml0KHQpfTt4ci5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9Q2kuZ2V0TGluZXModCkuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLmdldENvb3JkaW5hdGVzKCk7dGhpcy5hZGRMaW5lKG4pfX0seHIucHJvdG90eXBlLmFkZExpbmU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTx0Lmxlbmd0aDtlKyspe3ZhciBuPW5ldyBkbih0W2UtMV0sdFtlXSksaT1NYXRoLm1pbihuLnAwLnksbi5wMS55KSxyPU1hdGgubWF4KG4ucDAueSxuLnAxLnkpO3RoaXMuX2luZGV4Lmluc2VydChpLHIsbil9fSx4ci5wcm90b3R5cGUucXVlcnk9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49bmV3IG1yO3JldHVybiB0aGlzLl9pbmRleC5xdWVyeSh0LGUsbiksbi5nZXRJdGVtcygpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl07dGhpcy5faW5kZXgucXVlcnkoaSxyLG8pfX0seHIucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LHhyLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiB4cn07dmFyIE5yPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtpZih0LmNhbGwodGhpcyksdGhpcy5fcGFyZW50R2VvbT1udWxsLHRoaXMuX2xpbmVFZGdlTWFwPW5ldyBoZSx0aGlzLl9ib3VuZGFyeU5vZGVSdWxlPW51bGwsdGhpcy5fdXNlQm91bmRhcnlEZXRlcm1pbmF0aW9uUnVsZT0hMCx0aGlzLl9hcmdJbmRleD1udWxsLHRoaXMuX2JvdW5kYXJ5Tm9kZXM9bnVsbCx0aGlzLl9oYXNUb29GZXdQb2ludHM9ITEsdGhpcy5faW52YWxpZFBvaW50PW51bGwsdGhpcy5fYXJlYVB0TG9jYXRvcj1udWxsLHRoaXMuX3B0TG9jYXRvcj1uZXcgU2ksMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPWZ0Lk9HQ19TRlNfQk9VTkRBUllfUlVMRTt0aGlzLl9hcmdJbmRleD1lLHRoaXMuX3BhcmVudEdlb209bix0aGlzLl9ib3VuZGFyeU5vZGVSdWxlPWksbnVsbCE9PW4mJnRoaXMuYWRkKG4pfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXTt0aGlzLl9hcmdJbmRleD1yLHRoaXMuX3BhcmVudEdlb209byx0aGlzLl9ib3VuZGFyeU5vZGVSdWxlPXMsbnVsbCE9PW8mJnRoaXMuYWRkKG8pfX1yZXR1cm4gdCYmKGUuX19wcm90b19fPXQpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZS5wcm90b3R5cGUuaW5zZXJ0Qm91bmRhcnlQb2ludD1mdW5jdGlvbih0LG4pe3ZhciBpPXRoaXMuX25vZGVzLmFkZE5vZGUobikuZ2V0TGFiZWwoKSxyPTE7Yi5OT05FO2kuZ2V0TG9jYXRpb24odCxTZS5PTik9PT1iLkJPVU5EQVJZJiZyKys7dmFyIG89ZS5kZXRlcm1pbmVCb3VuZGFyeSh0aGlzLl9ib3VuZGFyeU5vZGVSdWxlLHIpO2kuc2V0TG9jYXRpb24odCxvKX0sZS5wcm90b3R5cGUuY29tcHV0ZVNlbGZOb2Rlcz1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07cmV0dXJuIHRoaXMuY29tcHV0ZVNlbGZOb2Rlcyh0LGUsITEpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl0sbz1uZXcgY3IobiwhMCwhMSk7by5zZXRJc0RvbmVJZlByb3BlckludChyKTt2YXIgcz10aGlzLmNyZWF0ZUVkZ2VTZXRJbnRlcnNlY3RvcigpLGE9dGhpcy5fcGFyZW50R2VvbSBpbnN0YW5jZW9mIGVlfHx0aGlzLl9wYXJlbnRHZW9tIGluc3RhbmNlb2YgJHR8fHRoaXMuX3BhcmVudEdlb20gaW5zdGFuY2VvZiBuZSx1PWl8fCFhO3JldHVybiBzLmNvbXB1dGVJbnRlcnNlY3Rpb25zKHRoaXMuX2VkZ2VzLG8sdSksdGhpcy5hZGRTZWxmSW50ZXJzZWN0aW9uTm9kZXModGhpcy5fYXJnSW5kZXgpLG99fSxlLnByb3RvdHlwZS5jb21wdXRlU3BsaXRFZGdlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5fZWRnZXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe2UubmV4dCgpLmVpTGlzdC5hZGRTcGxpdEVkZ2VzKHQpfX0sZS5wcm90b3R5cGUuY29tcHV0ZUVkZ2VJbnRlcnNlY3Rpb25zPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgY3IoZSxuLCEwKTtpLnNldEJvdW5kYXJ5Tm9kZXModGhpcy5nZXRCb3VuZGFyeU5vZGVzKCksdC5nZXRCb3VuZGFyeU5vZGVzKCkpO3JldHVybiB0aGlzLmNyZWF0ZUVkZ2VTZXRJbnRlcnNlY3RvcigpLmNvbXB1dGVJbnRlcnNlY3Rpb25zKHRoaXMuX2VkZ2VzLHQuX2VkZ2VzLGkpLGl9LGUucHJvdG90eXBlLmdldEdlb21ldHJ5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BhcmVudEdlb219LGUucHJvdG90eXBlLmdldEJvdW5kYXJ5Tm9kZVJ1bGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYm91bmRhcnlOb2RlUnVsZX0sZS5wcm90b3R5cGUuaGFzVG9vRmV3UG9pbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc1Rvb0Zld1BvaW50c30sZS5wcm90b3R5cGUuYWRkUG9pbnQ9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIFF0KXt2YXIgdD1hcmd1bWVudHNbMF0uZ2V0Q29vcmRpbmF0ZSgpO3RoaXMuaW5zZXJ0UG9pbnQodGhpcy5fYXJnSW5kZXgsdCxiLklOVEVSSU9SKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTil7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuaW5zZXJ0UG9pbnQodGhpcy5fYXJnSW5kZXgsZSxiLklOVEVSSU9SKX19LGUucHJvdG90eXBlLmFkZFBvbHlnb249ZnVuY3Rpb24odCl7dGhpcy5hZGRQb2x5Z29uUmluZyh0LmdldEV4dGVyaW9yUmluZygpLGIuRVhURVJJT1IsYi5JTlRFUklPUik7Zm9yKHZhciBlPTA7ZTx0LmdldE51bUludGVyaW9yUmluZygpO2UrKyl7dmFyIG49dC5nZXRJbnRlcmlvclJpbmdOKGUpO3RoaXMuYWRkUG9seWdvblJpbmcobixiLklOVEVSSU9SLGIuRVhURVJJT1IpfX0sZS5wcm90b3R5cGUuYWRkRWRnZT1mdW5jdGlvbih0KXt0aGlzLmluc2VydEVkZ2UodCk7dmFyIGU9dC5nZXRDb29yZGluYXRlcygpO3RoaXMuaW5zZXJ0UG9pbnQodGhpcy5fYXJnSW5kZXgsZVswXSxiLkJPVU5EQVJZKSx0aGlzLmluc2VydFBvaW50KHRoaXMuX2FyZ0luZGV4LGVbZS5sZW5ndGgtMV0sYi5CT1VOREFSWSl9LGUucHJvdG90eXBlLmFkZExpbmVTdHJpbmc9ZnVuY3Rpb24odCl7dmFyIGU9THQucmVtb3ZlUmVwZWF0ZWRQb2ludHModC5nZXRDb29yZGluYXRlcygpKTtpZihlLmxlbmd0aDwyKXJldHVybiB0aGlzLl9oYXNUb29GZXdQb2ludHM9ITAsdGhpcy5faW52YWxpZFBvaW50PWVbMF0sbnVsbDt2YXIgbj1uZXcgbmkoZSxuZXcgUGUodGhpcy5fYXJnSW5kZXgsYi5JTlRFUklPUikpO3RoaXMuX2xpbmVFZGdlTWFwLnB1dCh0LG4pLHRoaXMuaW5zZXJ0RWRnZShuKSx0dC5pc1RydWUoZS5sZW5ndGg+PTIsXCJmb3VuZCBMaW5lU3RyaW5nIHdpdGggc2luZ2xlIHBvaW50XCIpLHRoaXMuaW5zZXJ0Qm91bmRhcnlQb2ludCh0aGlzLl9hcmdJbmRleCxlWzBdKSx0aGlzLmluc2VydEJvdW5kYXJ5UG9pbnQodGhpcy5fYXJnSW5kZXgsZVtlLmxlbmd0aC0xXSl9LGUucHJvdG90eXBlLmdldEludmFsaWRQb2ludD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnZhbGlkUG9pbnR9LGUucHJvdG90eXBlLmdldEJvdW5kYXJ5UG9pbnRzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ2V0Qm91bmRhcnlOb2RlcygpLGU9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpLG49MCxpPXQuaXRlcmF0b3IoKTtpLmhhc05leHQoKTspe3ZhciByPWkubmV4dCgpO2VbbisrXT1yLmdldENvb3JkaW5hdGUoKS5jb3B5KCl9cmV0dXJuIGV9LGUucHJvdG90eXBlLmdldEJvdW5kYXJ5Tm9kZXM9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuX2JvdW5kYXJ5Tm9kZXMmJih0aGlzLl9ib3VuZGFyeU5vZGVzPXRoaXMuX25vZGVzLmdldEJvdW5kYXJ5Tm9kZXModGhpcy5fYXJnSW5kZXgpKSx0aGlzLl9ib3VuZGFyeU5vZGVzfSxlLnByb3RvdHlwZS5hZGRTZWxmSW50ZXJzZWN0aW9uTm9kZT1mdW5jdGlvbih0LGUsbil7aWYodGhpcy5pc0JvdW5kYXJ5Tm9kZSh0LGUpKXJldHVybiBudWxsO249PT1iLkJPVU5EQVJZJiZ0aGlzLl91c2VCb3VuZGFyeURldGVybWluYXRpb25SdWxlP3RoaXMuaW5zZXJ0Qm91bmRhcnlQb2ludCh0LGUpOnRoaXMuaW5zZXJ0UG9pbnQodCxlLG4pfSxlLnByb3RvdHlwZS5hZGRQb2x5Z29uUmluZz1mdW5jdGlvbih0LGUsbil7aWYodC5pc0VtcHR5KCkpcmV0dXJuIG51bGw7dmFyIGk9THQucmVtb3ZlUmVwZWF0ZWRQb2ludHModC5nZXRDb29yZGluYXRlcygpKTtpZihpLmxlbmd0aDw0KXJldHVybiB0aGlzLl9oYXNUb29GZXdQb2ludHM9ITAsdGhpcy5faW52YWxpZFBvaW50PWlbMF0sbnVsbDt2YXIgcj1lLG89bjtzdC5pc0NDVyhpKSYmKHI9bixvPWUpO3ZhciBzPW5ldyBuaShpLG5ldyBQZSh0aGlzLl9hcmdJbmRleCxiLkJPVU5EQVJZLHIsbykpO3RoaXMuX2xpbmVFZGdlTWFwLnB1dCh0LHMpLHRoaXMuaW5zZXJ0RWRnZShzKSx0aGlzLmluc2VydFBvaW50KHRoaXMuX2FyZ0luZGV4LGlbMF0sYi5CT1VOREFSWSl9LGUucHJvdG90eXBlLmluc2VydFBvaW50PWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLl9ub2Rlcy5hZGROb2RlKGUpLHI9aS5nZXRMYWJlbCgpO251bGw9PT1yP2kuX2xhYmVsPW5ldyBQZSh0LG4pOnIuc2V0TG9jYXRpb24odCxuKX0sZS5wcm90b3R5cGUuY3JlYXRlRWRnZVNldEludGVyc2VjdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBwcn0sZS5wcm90b3R5cGUuYWRkU2VsZkludGVyc2VjdGlvbk5vZGVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9lZGdlcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOylmb3IodmFyIG49ZS5uZXh0KCksaT1uLmdldExhYmVsKCkuZ2V0TG9jYXRpb24odCkscj1uLmVpTGlzdC5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7dmFyIG89ci5uZXh0KCk7dGhpcy5hZGRTZWxmSW50ZXJzZWN0aW9uTm9kZSh0LG8uY29vcmQsaSl9fSxlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oKXtpZigxIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdC5wcm90b3R5cGUuYWRkLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgZT1hcmd1bWVudHNbMF07aWYoZS5pc0VtcHR5KCkpcmV0dXJuIG51bGw7aWYoZSBpbnN0YW5jZW9mIG5lJiYodGhpcy5fdXNlQm91bmRhcnlEZXRlcm1pbmF0aW9uUnVsZT0hMSksZSBpbnN0YW5jZW9mICR0KXRoaXMuYWRkUG9seWdvbihlKTtlbHNlIGlmKGUgaW5zdGFuY2VvZiBLdCl0aGlzLmFkZExpbmVTdHJpbmcoZSk7ZWxzZSBpZihlIGluc3RhbmNlb2YgUXQpdGhpcy5hZGRQb2ludChlKTtlbHNlIGlmKGUgaW5zdGFuY2VvZiB0ZSl0aGlzLmFkZENvbGxlY3Rpb24oZSk7ZWxzZSBpZihlIGluc3RhbmNlb2YgWHQpdGhpcy5hZGRDb2xsZWN0aW9uKGUpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIG5lKXRoaXMuYWRkQ29sbGVjdGlvbihlKTtlbHNle2lmKCEoZSBpbnN0YW5jZW9mIHp0KSl0aHJvdyBuZXcgRXJyb3IoZS5nZXRDbGFzcygpLmdldE5hbWUoKSk7dGhpcy5hZGRDb2xsZWN0aW9uKGUpfX0sZS5wcm90b3R5cGUuYWRkQ29sbGVjdGlvbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQuZ2V0TnVtR2VvbWV0cmllcygpO2UrKyl7dmFyIG49dC5nZXRHZW9tZXRyeU4oZSk7dGhpcy5hZGQobil9fSxlLnByb3RvdHlwZS5sb2NhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIE8odGhpcy5fcGFyZW50R2VvbSxadCkmJnRoaXMuX3BhcmVudEdlb20uZ2V0TnVtR2VvbWV0cmllcygpPjUwPyhudWxsPT09dGhpcy5fYXJlYVB0TG9jYXRvciYmKHRoaXMuX2FyZWFQdExvY2F0b3I9bmV3IHZyKHRoaXMuX3BhcmVudEdlb20pKSx0aGlzLl9hcmVhUHRMb2NhdG9yLmxvY2F0ZSh0KSk6dGhpcy5fcHRMb2NhdG9yLmxvY2F0ZSh0LHRoaXMuX3BhcmVudEdlb20pfSxlLnByb3RvdHlwZS5maW5kRWRnZT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuX2xpbmVFZGdlTWFwLmdldChlKX1yZXR1cm4gdC5wcm90b3R5cGUuZmluZEVkZ2UuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxlLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlfSxlLmRldGVybWluZUJvdW5kYXJ5PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuaXNJbkJvdW5kYXJ5KGUpP2IuQk9VTkRBUlk6Yi5JTlRFUklPUn0sZX0oWWUpLENyPWZ1bmN0aW9uKCl7aWYodGhpcy5fbGk9bmV3IGl0LHRoaXMuX3Jlc3VsdFByZWNpc2lvbk1vZGVsPW51bGwsdGhpcy5fYXJnPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNldENvbXB1dGF0aW9uUHJlY2lzaW9uKHQuZ2V0UHJlY2lzaW9uTW9kZWwoKSksdGhpcy5fYXJnPW5ldyBBcnJheSgxKS5maWxsKG51bGwpLHRoaXMuX2FyZ1swXT1uZXcgTnIoMCx0KX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1mdC5PR0NfU0ZTX0JPVU5EQVJZX1JVTEU7ZS5nZXRQcmVjaXNpb25Nb2RlbCgpLmNvbXBhcmVUbyhuLmdldFByZWNpc2lvbk1vZGVsKCkpPj0wP3RoaXMuc2V0Q29tcHV0YXRpb25QcmVjaXNpb24oZS5nZXRQcmVjaXNpb25Nb2RlbCgpKTp0aGlzLnNldENvbXB1dGF0aW9uUHJlY2lzaW9uKG4uZ2V0UHJlY2lzaW9uTW9kZWwoKSksdGhpcy5fYXJnPW5ldyBBcnJheSgyKS5maWxsKG51bGwpLHRoaXMuX2FyZ1swXT1uZXcgTnIoMCxlLGkpLHRoaXMuX2FyZ1sxXT1uZXcgTnIoMSxuLGkpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXTtyLmdldFByZWNpc2lvbk1vZGVsKCkuY29tcGFyZVRvKG8uZ2V0UHJlY2lzaW9uTW9kZWwoKSk+PTA/dGhpcy5zZXRDb21wdXRhdGlvblByZWNpc2lvbihyLmdldFByZWNpc2lvbk1vZGVsKCkpOnRoaXMuc2V0Q29tcHV0YXRpb25QcmVjaXNpb24oby5nZXRQcmVjaXNpb25Nb2RlbCgpKSx0aGlzLl9hcmc9bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5fYXJnWzBdPW5ldyBOcigwLHIscyksdGhpcy5fYXJnWzFdPW5ldyBOcigxLG8scyl9fTtDci5wcm90b3R5cGUuZ2V0QXJnR2VvbWV0cnk9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2FyZ1t0XS5nZXRHZW9tZXRyeSgpfSxDci5wcm90b3R5cGUuc2V0Q29tcHV0YXRpb25QcmVjaXNpb249ZnVuY3Rpb24odCl7dGhpcy5fcmVzdWx0UHJlY2lzaW9uTW9kZWw9dCx0aGlzLl9saS5zZXRQcmVjaXNpb25Nb2RlbCh0aGlzLl9yZXN1bHRQcmVjaXNpb25Nb2RlbCl9LENyLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxDci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gQ3J9O3ZhciBTcj1mdW5jdGlvbigpe307U3IucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFNyLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBTcn0sU3IubWFwPWZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBsdCYmTyhhcmd1bWVudHNbMV0sU3IuTWFwT3ApKXtmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49bmV3IE50LGk9MDtpPHQuZ2V0TnVtR2VvbWV0cmllcygpO2krKyl7dmFyIHI9ZS5tYXAodC5nZXRHZW9tZXRyeU4oaSkpO251bGwhPT1yJiZuLmFkZChyKX1yZXR1cm4gdC5nZXRGYWN0b3J5KCkuYnVpbGRHZW9tZXRyeShuKX1pZihPKGFyZ3VtZW50c1swXSx2dCkmJk8oYXJndW1lbnRzWzFdLFNyLk1hcE9wKSl7Zm9yKHZhciBvPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxhPW5ldyBOdCx1PW8uaXRlcmF0b3IoKTt1Lmhhc05leHQoKTspe3ZhciBsPXUubmV4dCgpLGM9cy5tYXAobCk7bnVsbCE9PWMmJmEuYWRkKGMpfXJldHVybiBhfX0sU3IuTWFwT3A9ZnVuY3Rpb24oKXt9O3ZhciBMcj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3QuY2FsbCh0aGlzLGUsbiksdGhpcy5fcHRMb2NhdG9yPW5ldyBTaSx0aGlzLl9nZW9tRmFjdD1udWxsLHRoaXMuX3Jlc3VsdEdlb209bnVsbCx0aGlzLl9ncmFwaD1udWxsLHRoaXMuX2VkZ2VMaXN0PW5ldyBIbix0aGlzLl9yZXN1bHRQb2x5TGlzdD1uZXcgTnQsdGhpcy5fcmVzdWx0TGluZUxpc3Q9bmV3IE50LHRoaXMuX3Jlc3VsdFBvaW50TGlzdD1uZXcgTnQsdGhpcy5fZ3JhcGg9bmV3IFllKG5ldyBrbiksdGhpcy5fZ2VvbUZhY3Q9ZS5nZXRGYWN0b3J5KCl9cmV0dXJuIHQmJihlLl9fcHJvdG9fXz10KSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUucHJvdG90eXBlLmluc2VydFVuaXF1ZUVkZ2U9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZWRnZUxpc3QuZmluZEVxdWFsRWRnZSh0KTtpZihudWxsIT09ZSl7dmFyIG49ZS5nZXRMYWJlbCgpLGk9dC5nZXRMYWJlbCgpO2UuaXNQb2ludHdpc2VFcXVhbCh0KXx8KGk9bmV3IFBlKHQuZ2V0TGFiZWwoKSkpLmZsaXAoKTt2YXIgcj1lLmdldERlcHRoKCk7ci5pc051bGwoKSYmci5hZGQobiksci5hZGQoaSksbi5tZXJnZShpKX1lbHNlIHRoaXMuX2VkZ2VMaXN0LmFkZCh0KX0sZS5wcm90b3R5cGUuZ2V0R3JhcGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZ3JhcGh9LGUucHJvdG90eXBlLmNhbmNlbER1cGxpY2F0ZVJlc3VsdEVkZ2VzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuX2dyYXBoLmdldEVkZ2VFbmRzKCkuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpLG49ZS5nZXRTeW0oKTtlLmlzSW5SZXN1bHQoKSYmbi5pc0luUmVzdWx0KCkmJihlLnNldEluUmVzdWx0KCExKSxuLnNldEluUmVzdWx0KCExKSl9fSxlLnByb3RvdHlwZS5pc0NvdmVyZWRCeUxBPWZ1bmN0aW9uKHQpe3JldHVybiEhdGhpcy5pc0NvdmVyZWQodCx0aGlzLl9yZXN1bHRMaW5lTGlzdCl8fCEhdGhpcy5pc0NvdmVyZWQodCx0aGlzLl9yZXN1bHRQb2x5TGlzdCl9LGUucHJvdG90eXBlLmNvbXB1dGVHZW9tZXRyeT1mdW5jdGlvbih0LG4saSxyKXt2YXIgbz1uZXcgTnQ7cmV0dXJuIG8uYWRkQWxsKHQpLG8uYWRkQWxsKG4pLG8uYWRkQWxsKGkpLG8uaXNFbXB0eSgpP2UuY3JlYXRlRW1wdHlSZXN1bHQocix0aGlzLl9hcmdbMF0uZ2V0R2VvbWV0cnkoKSx0aGlzLl9hcmdbMV0uZ2V0R2VvbWV0cnkoKSx0aGlzLl9nZW9tRmFjdCk6dGhpcy5fZ2VvbUZhY3QuYnVpbGRHZW9tZXRyeShvKX0sZS5wcm90b3R5cGUubWVyZ2VTeW1MYWJlbHM9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5fZ3JhcGguZ2V0Tm9kZXMoKS5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dC5uZXh0KCkuZ2V0RWRnZXMoKS5tZXJnZVN5bUxhYmVscygpfX0sZS5wcm90b3R5cGUuaXNDb3ZlcmVkPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPWUuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2lmKHRoaXMuX3B0TG9jYXRvci5sb2NhdGUodCxpKSE9PWIuRVhURVJJT1IpcmV0dXJuITB9cmV0dXJuITF9LGUucHJvdG90eXBlLnJlcGxhY2VDb2xsYXBzZWRFZGdlcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgTnQsZT10aGlzLl9lZGdlTGlzdC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bi5pc0NvbGxhcHNlZCgpJiYoZS5yZW1vdmUoKSx0LmFkZChuLmdldENvbGxhcHNlZEVkZ2UoKSkpfXRoaXMuX2VkZ2VMaXN0LmFkZEFsbCh0KX0sZS5wcm90b3R5cGUudXBkYXRlTm9kZUxhYmVsbGluZz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLl9ncmFwaC5nZXROb2RlcygpLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKSxuPWUuZ2V0RWRnZXMoKS5nZXRMYWJlbCgpO2UuZ2V0TGFiZWwoKS5tZXJnZShuKX19LGUucHJvdG90eXBlLmdldFJlc3VsdEdlb21ldHJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNvbXB1dGVPdmVybGF5KHQpLHRoaXMuX3Jlc3VsdEdlb219LGUucHJvdG90eXBlLmluc2VydFVuaXF1ZUVkZ2VzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLmluc2VydFVuaXF1ZUVkZ2Uobil9fSxlLnByb3RvdHlwZS5jb21wdXRlT3ZlcmxheT1mdW5jdGlvbih0KXt0aGlzLmNvcHlQb2ludHMoMCksdGhpcy5jb3B5UG9pbnRzKDEpLHRoaXMuX2FyZ1swXS5jb21wdXRlU2VsZk5vZGVzKHRoaXMuX2xpLCExKSx0aGlzLl9hcmdbMV0uY29tcHV0ZVNlbGZOb2Rlcyh0aGlzLl9saSwhMSksdGhpcy5fYXJnWzBdLmNvbXB1dGVFZGdlSW50ZXJzZWN0aW9ucyh0aGlzLl9hcmdbMV0sdGhpcy5fbGksITApO3ZhciBlPW5ldyBOdDt0aGlzLl9hcmdbMF0uY29tcHV0ZVNwbGl0RWRnZXMoZSksdGhpcy5fYXJnWzFdLmNvbXB1dGVTcGxpdEVkZ2VzKGUpLHRoaXMuaW5zZXJ0VW5pcXVlRWRnZXMoZSksdGhpcy5jb21wdXRlTGFiZWxzRnJvbURlcHRocygpLHRoaXMucmVwbGFjZUNvbGxhcHNlZEVkZ2VzKCksWWkuY2hlY2tWYWxpZCh0aGlzLl9lZGdlTGlzdC5nZXRFZGdlcygpKSx0aGlzLl9ncmFwaC5hZGRFZGdlcyh0aGlzLl9lZGdlTGlzdC5nZXRFZGdlcygpKSx0aGlzLmNvbXB1dGVMYWJlbGxpbmcoKSx0aGlzLmxhYmVsSW5jb21wbGV0ZU5vZGVzKCksdGhpcy5maW5kUmVzdWx0QXJlYUVkZ2VzKHQpLHRoaXMuY2FuY2VsRHVwbGljYXRlUmVzdWx0RWRnZXMoKTt2YXIgbj1uZXcga2UodGhpcy5fZ2VvbUZhY3QpO24uYWRkKHRoaXMuX2dyYXBoKSx0aGlzLl9yZXN1bHRQb2x5TGlzdD1uLmdldFBvbHlnb25zKCk7dmFyIGk9bmV3IGppKHRoaXMsdGhpcy5fZ2VvbUZhY3QsdGhpcy5fcHRMb2NhdG9yKTt0aGlzLl9yZXN1bHRMaW5lTGlzdD1pLmJ1aWxkKHQpO3ZhciByPW5ldyBIaSh0aGlzLHRoaXMuX2dlb21GYWN0LHRoaXMuX3B0TG9jYXRvcik7dGhpcy5fcmVzdWx0UG9pbnRMaXN0PXIuYnVpbGQodCksdGhpcy5fcmVzdWx0R2VvbT10aGlzLmNvbXB1dGVHZW9tZXRyeSh0aGlzLl9yZXN1bHRQb2ludExpc3QsdGhpcy5fcmVzdWx0TGluZUxpc3QsdGhpcy5fcmVzdWx0UG9seUxpc3QsdCl9LGUucHJvdG90eXBlLmxhYmVsSW5jb21wbGV0ZU5vZGU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9wdExvY2F0b3IubG9jYXRlKHQuZ2V0Q29vcmRpbmF0ZSgpLHRoaXMuX2FyZ1tlXS5nZXRHZW9tZXRyeSgpKTt0LmdldExhYmVsKCkuc2V0TG9jYXRpb24oZSxuKX0sZS5wcm90b3R5cGUuY29weVBvaW50cz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5fYXJnW3RdLmdldE5vZGVJdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7dGhpcy5fZ3JhcGguYWRkTm9kZShuLmdldENvb3JkaW5hdGUoKSkuc2V0TGFiZWwodCxuLmdldExhYmVsKCkuZ2V0TG9jYXRpb24odCkpfX0sZS5wcm90b3R5cGUuZmluZFJlc3VsdEFyZWFFZGdlcz1mdW5jdGlvbih0KXtmb3IodmFyIG49dGhpcy5fZ3JhcGguZ2V0RWRnZUVuZHMoKS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCkscj1pLmdldExhYmVsKCk7ci5pc0FyZWEoKSYmIWkuaXNJbnRlcmlvckFyZWFFZGdlKCkmJmUuaXNSZXN1bHRPZk9wKHIuZ2V0TG9jYXRpb24oMCxTZS5SSUdIVCksci5nZXRMb2NhdGlvbigxLFNlLlJJR0hUKSx0KSYmaS5zZXRJblJlc3VsdCghMCl9fSxlLnByb3RvdHlwZS5jb21wdXRlTGFiZWxzRnJvbURlcHRocz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLl9lZGdlTGlzdC5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCksbj1lLmdldExhYmVsKCksaT1lLmdldERlcHRoKCk7aWYoIWkuaXNOdWxsKCkpe2kubm9ybWFsaXplKCk7Zm9yKHZhciByPTA7cjwyO3IrKyluLmlzTnVsbChyKXx8IW4uaXNBcmVhKCl8fGkuaXNOdWxsKHIpfHwoMD09PWkuZ2V0RGVsdGEocik/bi50b0xpbmUocik6KHR0LmlzVHJ1ZSghaS5pc051bGwocixTZS5MRUZUKSxcImRlcHRoIG9mIExFRlQgc2lkZSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcIiksbi5zZXRMb2NhdGlvbihyLFNlLkxFRlQsaS5nZXRMb2NhdGlvbihyLFNlLkxFRlQpKSx0dC5pc1RydWUoIWkuaXNOdWxsKHIsU2UuUklHSFQpLFwiZGVwdGggb2YgUklHSFQgc2lkZSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcIiksbi5zZXRMb2NhdGlvbihyLFNlLlJJR0hULGkuZ2V0TG9jYXRpb24ocixTZS5SSUdIVCkpKSl9fX0sZS5wcm90b3R5cGUuY29tcHV0ZUxhYmVsbGluZz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLl9ncmFwaC5nZXROb2RlcygpLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt0Lm5leHQoKS5nZXRFZGdlcygpLmNvbXB1dGVMYWJlbGxpbmcodGhpcy5fYXJnKX10aGlzLm1lcmdlU3ltTGFiZWxzKCksdGhpcy51cGRhdGVOb2RlTGFiZWxsaW5nKCl9LGUucHJvdG90eXBlLmxhYmVsSW5jb21wbGV0ZU5vZGVzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuX2dyYXBoLmdldE5vZGVzKCkuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpLG49ZS5nZXRMYWJlbCgpO2UuaXNJc29sYXRlZCgpJiYobi5pc051bGwoMCk/dGhpcy5sYWJlbEluY29tcGxldGVOb2RlKGUsMCk6dGhpcy5sYWJlbEluY29tcGxldGVOb2RlKGUsMSkpLGUuZ2V0RWRnZXMoKS51cGRhdGVMYWJlbGxpbmcobil9fSxlLnByb3RvdHlwZS5pc0NvdmVyZWRCeUE9ZnVuY3Rpb24odCl7cmV0dXJuISF0aGlzLmlzQ292ZXJlZCh0LHRoaXMuX3Jlc3VsdFBvbHlMaXN0KX0sZS5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZS5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX0oQ3IpO0xyLm92ZXJsYXlPcD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIG5ldyBMcih0LGUpLmdldFJlc3VsdEdlb21ldHJ5KG4pfSxMci5pbnRlcnNlY3Rpb249ZnVuY3Rpb24odCxlKXtpZih0LmlzRW1wdHkoKXx8ZS5pc0VtcHR5KCkpcmV0dXJuIExyLmNyZWF0ZUVtcHR5UmVzdWx0KExyLklOVEVSU0VDVElPTix0LGUsdC5nZXRGYWN0b3J5KCkpO2lmKHQuaXNHZW9tZXRyeUNvbGxlY3Rpb24oKSl7dmFyIG49ZTtyZXR1cm4ga2kubWFwKHQse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW1NyLk1hcE9wXX0sbWFwOmZ1bmN0aW9uKHQpe3JldHVybiB0LmludGVyc2VjdGlvbihuKX19KX1yZXR1cm4gdC5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbih0KSx0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKGUpLG9yLm92ZXJsYXlPcCh0LGUsTHIuSU5URVJTRUNUSU9OKX0sTHIuc3ltRGlmZmVyZW5jZT1mdW5jdGlvbih0LGUpe2lmKHQuaXNFbXB0eSgpfHxlLmlzRW1wdHkoKSl7aWYodC5pc0VtcHR5KCkmJmUuaXNFbXB0eSgpKXJldHVybiBMci5jcmVhdGVFbXB0eVJlc3VsdChMci5TWU1ESUZGRVJFTkNFLHQsZSx0LmdldEZhY3RvcnkoKSk7aWYodC5pc0VtcHR5KCkpcmV0dXJuIGUuY29weSgpO2lmKGUuaXNFbXB0eSgpKXJldHVybiB0LmNvcHkoKX1yZXR1cm4gdC5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbih0KSx0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKGUpLG9yLm92ZXJsYXlPcCh0LGUsTHIuU1lNRElGRkVSRU5DRSl9LExyLnJlc3VsdERpbWVuc2lvbj1mdW5jdGlvbih0LGUsbil7dmFyIGk9ZS5nZXREaW1lbnNpb24oKSxyPW4uZ2V0RGltZW5zaW9uKCksbz0tMTtzd2l0Y2godCl7Y2FzZSBMci5JTlRFUlNFQ1RJT046bz1NYXRoLm1pbihpLHIpO2JyZWFrO2Nhc2UgTHIuVU5JT046bz1NYXRoLm1heChpLHIpO2JyZWFrO2Nhc2UgTHIuRElGRkVSRU5DRTpvPWk7YnJlYWs7Y2FzZSBMci5TWU1ESUZGRVJFTkNFOm89TWF0aC5tYXgoaSxyKX1yZXR1cm4gb30sTHIuY3JlYXRlRW1wdHlSZXN1bHQ9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9bnVsbDtzd2l0Y2goTHIucmVzdWx0RGltZW5zaW9uKHQsZSxuKSl7Y2FzZS0xOnI9aS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24obmV3IEFycmF5KDApLmZpbGwobnVsbCkpO2JyZWFrO2Nhc2UgMDpyPWkuY3JlYXRlUG9pbnQoKTticmVhaztjYXNlIDE6cj1pLmNyZWF0ZUxpbmVTdHJpbmcoKTticmVhaztjYXNlIDI6cj1pLmNyZWF0ZVBvbHlnb24oKX1yZXR1cm4gcn0sTHIuZGlmZmVyZW5jZT1mdW5jdGlvbih0LGUpe3JldHVybiB0LmlzRW1wdHkoKT9Mci5jcmVhdGVFbXB0eVJlc3VsdChMci5ESUZGRVJFTkNFLHQsZSx0LmdldEZhY3RvcnkoKSk6ZS5pc0VtcHR5KCk/dC5jb3B5KCk6KHQuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24odCksdC5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbihlKSxvci5vdmVybGF5T3AodCxlLExyLkRJRkZFUkVOQ0UpKX0sTHIuaXNSZXN1bHRPZk9wPWZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPXQuZ2V0TG9jYXRpb24oMCksaT10LmdldExvY2F0aW9uKDEpO3JldHVybiBMci5pc1Jlc3VsdE9mT3AobixpLGUpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0sbz1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl07c3dpdGNoKHI9PT1iLkJPVU5EQVJZJiYocj1iLklOVEVSSU9SKSxvPT09Yi5CT1VOREFSWSYmKG89Yi5JTlRFUklPUikscyl7Y2FzZSBMci5JTlRFUlNFQ1RJT046cmV0dXJuIHI9PT1iLklOVEVSSU9SJiZvPT09Yi5JTlRFUklPUjtjYXNlIExyLlVOSU9OOnJldHVybiByPT09Yi5JTlRFUklPUnx8bz09PWIuSU5URVJJT1I7Y2FzZSBMci5ESUZGRVJFTkNFOnJldHVybiByPT09Yi5JTlRFUklPUiYmbyE9PWIuSU5URVJJT1I7Y2FzZSBMci5TWU1ESUZGRVJFTkNFOnJldHVybiByPT09Yi5JTlRFUklPUiYmbyE9PWIuSU5URVJJT1J8fHIhPT1iLklOVEVSSU9SJiZvPT09Yi5JTlRFUklPUn1yZXR1cm4hMX19LExyLklOVEVSU0VDVElPTj0xLExyLlVOSU9OPTIsTHIuRElGRkVSRU5DRT0zLExyLlNZTURJRkZFUkVOQ0U9NDt2YXIgYnI9ZnVuY3Rpb24oKXt0aGlzLl9nPW51bGwsdGhpcy5fYm91bmRhcnlEaXN0YW5jZVRvbGVyYW5jZT1udWxsLHRoaXMuX2xpbmV3b3JrPW51bGwsdGhpcy5fcHRMb2NhdG9yPW5ldyBTaSx0aGlzLl9zZWc9bmV3IGRuO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLl9nPXQsdGhpcy5fYm91bmRhcnlEaXN0YW5jZVRvbGVyYW5jZT1lLHRoaXMuX2xpbmV3b3JrPXRoaXMuZXh0cmFjdExpbmV3b3JrKHQpfTtici5wcm90b3R5cGUuaXNXaXRoaW5Ub2xlcmFuY2VPZkJvdW5kYXJ5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5fbGluZXdvcmsuZ2V0TnVtR2VvbWV0cmllcygpO2UrKylmb3IodmFyIG49dGhpcy5fbGluZXdvcmsuZ2V0R2VvbWV0cnlOKGUpLmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLGk9MDtpPG4uc2l6ZSgpLTE7aSsrKXtuLmdldENvb3JkaW5hdGUoaSx0aGlzLl9zZWcucDApLG4uZ2V0Q29vcmRpbmF0ZShpKzEsdGhpcy5fc2VnLnAxKTtpZih0aGlzLl9zZWcuZGlzdGFuY2UodCk8PXRoaXMuX2JvdW5kYXJ5RGlzdGFuY2VUb2xlcmFuY2UpcmV0dXJuITB9cmV0dXJuITF9LGJyLnByb3RvdHlwZS5nZXRMb2NhdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5pc1dpdGhpblRvbGVyYW5jZU9mQm91bmRhcnkodCk/Yi5CT1VOREFSWTp0aGlzLl9wdExvY2F0b3IubG9jYXRlKHQsdGhpcy5fZyl9LGJyLnByb3RvdHlwZS5leHRyYWN0TGluZXdvcms9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHdyO3QuYXBwbHkoZSk7dmFyIG49ZS5nZXRMaW5ld29yaygpLGk9X2UudG9MaW5lU3RyaW5nQXJyYXkobik7cmV0dXJuIHQuZ2V0RmFjdG9yeSgpLmNyZWF0ZU11bHRpTGluZVN0cmluZyhpKX0sYnIucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LGJyLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBicn07dmFyIHdyPWZ1bmN0aW9uKCl7dGhpcy5fbGluZXdvcms9bnVsbCx0aGlzLl9saW5ld29yaz1uZXcgTnR9O3dyLnByb3RvdHlwZS5nZXRMaW5ld29yaz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9saW5ld29ya30sd3IucHJvdG90eXBlLmZpbHRlcj1mdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgJHQpe3ZhciBlPXQ7dGhpcy5fbGluZXdvcmsuYWRkKGUuZ2V0RXh0ZXJpb3JSaW5nKCkpO2Zvcih2YXIgbj0wO248ZS5nZXROdW1JbnRlcmlvclJpbmcoKTtuKyspdGhpcy5fbGluZXdvcmsuYWRkKGUuZ2V0SW50ZXJpb3JSaW5nTihuKSl9fSx3ci5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bVnRdfSx3ci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gd3J9O3ZhciBPcj1mdW5jdGlvbigpe3RoaXMuX2c9bnVsbCx0aGlzLl9kb0xlZnQ9ITAsdGhpcy5fZG9SaWdodD0hMDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fZz10fTtPci5wcm90b3R5cGUuZXh0cmFjdFBvaW50cz1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPXQuZ2V0Q29vcmRpbmF0ZXMoKSxyPTA7cjxpLmxlbmd0aC0xO3IrKyl0aGlzLmNvbXB1dGVPZmZzZXRQb2ludHMoaVtyXSxpW3IrMV0sZSxuKX0sT3IucHJvdG90eXBlLnNldFNpZGVzVG9HZW5lcmF0ZT1mdW5jdGlvbih0LGUpe3RoaXMuX2RvTGVmdD10LHRoaXMuX2RvUmlnaHQ9ZX0sT3IucHJvdG90eXBlLmdldFBvaW50cz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IE50LG49Q2kuZ2V0TGluZXModGhpcy5fZykuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO3RoaXMuZXh0cmFjdFBvaW50cyhpLHQsZSl9cmV0dXJuIGV9LE9yLnByb3RvdHlwZS5jb21wdXRlT2Zmc2V0UG9pbnRzPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPWUueC10Lngsbz1lLnktdC55LHM9TWF0aC5zcXJ0KHIqcitvKm8pLGE9bipyL3MsdT1uKm8vcyxsPShlLngrdC54KS8yLGM9KGUueSt0LnkpLzI7aWYodGhpcy5fZG9MZWZ0KXt2YXIgcD1uZXcgTihsLXUsYythKTtpLmFkZChwKX1pZih0aGlzLl9kb1JpZ2h0KXt2YXIgaD1uZXcgTihsK3UsYy1hKTtpLmFkZChoKX19LE9yLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxPci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gT3J9O3ZhciBUcj1mdW5jdGlvbiB0KCl7dGhpcy5fZ2VvbT1udWxsLHRoaXMuX2xvY0ZpbmRlcj1udWxsLHRoaXMuX2xvY2F0aW9uPW5ldyBBcnJheSgzKS5maWxsKG51bGwpLHRoaXMuX2ludmFsaWRMb2NhdGlvbj1udWxsLHRoaXMuX2JvdW5kYXJ5RGlzdGFuY2VUb2xlcmFuY2U9dC5UT0xFUkFOQ0UsdGhpcy5fdGVzdENvb3Jkcz1uZXcgTnQ7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9YXJndW1lbnRzWzJdO3RoaXMuX2JvdW5kYXJ5RGlzdGFuY2VUb2xlcmFuY2U9dC5jb21wdXRlQm91bmRhcnlEaXN0YW5jZVRvbGVyYW5jZShlLG4pLHRoaXMuX2dlb209W2UsbixpXSx0aGlzLl9sb2NGaW5kZXI9W25ldyBicih0aGlzLl9nZW9tWzBdLHRoaXMuX2JvdW5kYXJ5RGlzdGFuY2VUb2xlcmFuY2UpLG5ldyBicih0aGlzLl9nZW9tWzFdLHRoaXMuX2JvdW5kYXJ5RGlzdGFuY2VUb2xlcmFuY2UpLG5ldyBicih0aGlzLl9nZW9tWzJdLHRoaXMuX2JvdW5kYXJ5RGlzdGFuY2VUb2xlcmFuY2UpXX0sUnI9e1RPTEVSQU5DRTp7Y29uZmlndXJhYmxlOiEwfX07VHIucHJvdG90eXBlLnJlcG9ydFJlc3VsdD1mdW5jdGlvbih0LGUsbil7WC5vdXQucHJpbnRsbihcIk92ZXJsYXkgcmVzdWx0IGludmFsaWQgLSBBOlwiK2IudG9Mb2NhdGlvblN5bWJvbChlWzBdKStcIiBCOlwiK2IudG9Mb2NhdGlvblN5bWJvbChlWzFdKStcIiBleHBlY3RlZDpcIisobj9cImlcIjpcImVcIikrXCIgYWN0dWFsOlwiK2IudG9Mb2NhdGlvblN5bWJvbChlWzJdKSl9LFRyLnByb3RvdHlwZS5pc1ZhbGlkPWZ1bmN0aW9uKHQpe3RoaXMuYWRkVGVzdFB0cyh0aGlzLl9nZW9tWzBdKSx0aGlzLmFkZFRlc3RQdHModGhpcy5fZ2VvbVsxXSk7dmFyIGU9dGhpcy5jaGVja1ZhbGlkKHQpO3JldHVybiBlfSxUci5wcm90b3R5cGUuY2hlY2tWYWxpZD1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9MDtlPHRoaXMuX3Rlc3RDb29yZHMuc2l6ZSgpO2UrKyl7dmFyIG49dGhpcy5fdGVzdENvb3Jkcy5nZXQoZSk7aWYoIXRoaXMuY2hlY2tWYWxpZCh0LG4pKXJldHVybiB0aGlzLl9pbnZhbGlkTG9jYXRpb249biwhMX1yZXR1cm4hMH1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdO3JldHVybiB0aGlzLl9sb2NhdGlvblswXT10aGlzLl9sb2NGaW5kZXJbMF0uZ2V0TG9jYXRpb24ociksdGhpcy5fbG9jYXRpb25bMV09dGhpcy5fbG9jRmluZGVyWzFdLmdldExvY2F0aW9uKHIpLHRoaXMuX2xvY2F0aW9uWzJdPXRoaXMuX2xvY0ZpbmRlclsyXS5nZXRMb2NhdGlvbihyKSwhIVRyLmhhc0xvY2F0aW9uKHRoaXMuX2xvY2F0aW9uLGIuQk9VTkRBUlkpfHx0aGlzLmlzVmFsaWRSZXN1bHQoaSx0aGlzLl9sb2NhdGlvbil9fSxUci5wcm90b3R5cGUuYWRkVGVzdFB0cz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgT3IodCk7dGhpcy5fdGVzdENvb3Jkcy5hZGRBbGwoZS5nZXRQb2ludHMoNSp0aGlzLl9ib3VuZGFyeURpc3RhbmNlVG9sZXJhbmNlKSl9LFRyLnByb3RvdHlwZS5pc1ZhbGlkUmVzdWx0PWZ1bmN0aW9uKHQsZSl7dmFyIG49THIuaXNSZXN1bHRPZk9wKGVbMF0sZVsxXSx0KSxpPSEobl5lWzJdPT09Yi5JTlRFUklPUik7cmV0dXJuIGl8fHRoaXMucmVwb3J0UmVzdWx0KHQsZSxuKSxpfSxUci5wcm90b3R5cGUuZ2V0SW52YWxpZExvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ludmFsaWRMb2NhdGlvbn0sVHIucHJvdG90eXBlLmludGVyZmFjZXNfPWZ1bmN0aW9uKCl7cmV0dXJuW119LFRyLnByb3RvdHlwZS5nZXRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBUcn0sVHIuaGFzTG9jYXRpb249ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPDM7bisrKWlmKHRbbl09PT1lKXJldHVybiEwO3JldHVybiExfSxUci5jb21wdXRlQm91bmRhcnlEaXN0YW5jZVRvbGVyYW5jZT1mdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLm1pbihKaS5jb21wdXRlU2l6ZUJhc2VkU25hcFRvbGVyYW5jZSh0KSxKaS5jb21wdXRlU2l6ZUJhc2VkU25hcFRvbGVyYW5jZShlKSl9LFRyLmlzVmFsaWQ9ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIG5ldyBUcih0LGUsaSkuaXNWYWxpZChuKX0sUnIuVE9MRVJBTkNFLmdldD1mdW5jdGlvbigpe3JldHVybiAxZS02fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhUcixScik7dmFyIFByPWZ1bmN0aW9uIHQoZSl7dGhpcy5fZ2VvbUZhY3Rvcnk9bnVsbCx0aGlzLl9za2lwRW1wdHk9ITEsdGhpcy5faW5wdXRHZW9tcz1udWxsLHRoaXMuX2dlb21GYWN0b3J5PXQuZXh0cmFjdEZhY3RvcnkoZSksdGhpcy5faW5wdXRHZW9tcz1lfTtQci5wcm90b3R5cGUuZXh0cmFjdEVsZW1lbnRzPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09PXQpcmV0dXJuIG51bGw7Zm9yKHZhciBuPTA7bjx0LmdldE51bUdlb21ldHJpZXMoKTtuKyspe3ZhciBpPXQuZ2V0R2VvbWV0cnlOKG4pO3RoaXMuX3NraXBFbXB0eSYmaS5pc0VtcHR5KCl8fGUuYWRkKGkpfX0sUHIucHJvdG90eXBlLmNvbWJpbmU9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IE50LGU9dGhpcy5faW5wdXRHZW9tcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7dGhpcy5leHRyYWN0RWxlbWVudHMobix0KX1yZXR1cm4gMD09PXQuc2l6ZSgpP251bGwhPT10aGlzLl9nZW9tRmFjdG9yeT90aGlzLl9nZW9tRmFjdG9yeS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24obnVsbCk6bnVsbDp0aGlzLl9nZW9tRmFjdG9yeS5idWlsZEdlb21ldHJ5KHQpfSxQci5wcm90b3R5cGUuaW50ZXJmYWNlc189ZnVuY3Rpb24oKXtyZXR1cm5bXX0sUHIucHJvdG90eXBlLmdldENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFByfSxQci5jb21iaW5lPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gbmV3IFByKHQpLmNvbWJpbmUoKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3JldHVybiBuZXcgUHIoUHIuY3JlYXRlTGlzdChlLG4pKS5jb21iaW5lKCl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXTtyZXR1cm4gbmV3IFByKFByLmNyZWF0ZUxpc3QoaSxyLG8pKS5jb21iaW5lKCl9fSxQci5leHRyYWN0RmFjdG9yeT1mdW5jdGlvbih0KXtyZXR1cm4gdC5pc0VtcHR5KCk/bnVsbDp0Lml0ZXJhdG9yKCkubmV4dCgpLmdldEZhY3RvcnkoKX0sUHIuY3JlYXRlTGlzdD1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1uZXcgTnQ7cmV0dXJuIG4uYWRkKHQpLG4uYWRkKGUpLG59aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXSxzPW5ldyBOdDtyZXR1cm4gcy5hZGQoaSkscy5hZGQocikscy5hZGQobyksc319O3ZhciBEcj1mdW5jdGlvbigpe3RoaXMuX2lucHV0UG9seXM9bnVsbCx0aGlzLl9nZW9tRmFjdG9yeT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLl9pbnB1dFBvbHlzPXQsbnVsbD09PXRoaXMuX2lucHV0UG9seXMmJih0aGlzLl9pbnB1dFBvbHlzPW5ldyBOdCl9LE1yPXtTVFJUUkVFX05PREVfQ0FQQUNJVFk6e2NvbmZpZ3VyYWJsZTohMH19O0RyLnByb3RvdHlwZS5yZWR1Y2VUb0dlb21ldHJpZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBOdCxuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpLHI9bnVsbDtPKGkseHQpP3I9dGhpcy51bmlvblRyZWUoaSk6aSBpbnN0YW5jZW9mIGx0JiYocj1pKSxlLmFkZChyKX1yZXR1cm4gZX0sRHIucHJvdG90eXBlLmV4dHJhY3RCeUVudmVsb3BlPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9bmV3IE50LHI9MDtyPGUuZ2V0TnVtR2VvbWV0cmllcygpO3IrKyl7dmFyIG89ZS5nZXRHZW9tZXRyeU4ocik7by5nZXRFbnZlbG9wZUludGVybmFsKCkuaW50ZXJzZWN0cyh0KT9pLmFkZChvKTpuLmFkZChvKX1yZXR1cm4gdGhpcy5fZ2VvbUZhY3RvcnkuYnVpbGRHZW9tZXRyeShpKX0sRHIucHJvdG90eXBlLnVuaW9uT3B0aW1pemVkPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5nZXRFbnZlbG9wZUludGVybmFsKCksaT1lLmdldEVudmVsb3BlSW50ZXJuYWwoKTtpZighbi5pbnRlcnNlY3RzKGkpKXtyZXR1cm4gUHIuY29tYmluZSh0LGUpfWlmKHQuZ2V0TnVtR2VvbWV0cmllcygpPD0xJiZlLmdldE51bUdlb21ldHJpZXMoKTw9MSlyZXR1cm4gdGhpcy51bmlvbkFjdHVhbCh0LGUpO3ZhciByPW4uaW50ZXJzZWN0aW9uKGkpO3JldHVybiB0aGlzLnVuaW9uVXNpbmdFbnZlbG9wZUludGVyc2VjdGlvbih0LGUscil9LERyLnByb3RvdHlwZS51bmlvbj1mdW5jdGlvbigpe2lmKG51bGw9PT10aGlzLl9pbnB1dFBvbHlzKXRocm93IG5ldyBFcnJvcihcInVuaW9uKCkgbWV0aG9kIGNhbm5vdCBiZSBjYWxsZWQgdHdpY2VcIik7aWYodGhpcy5faW5wdXRQb2x5cy5pc0VtcHR5KCkpcmV0dXJuIG51bGw7dGhpcy5fZ2VvbUZhY3Rvcnk9dGhpcy5faW5wdXRQb2x5cy5pdGVyYXRvcigpLm5leHQoKS5nZXRGYWN0b3J5KCk7Zm9yKHZhciB0PW5ldyBzbihEci5TVFJUUkVFX05PREVfQ0FQQUNJVFkpLGU9dGhpcy5faW5wdXRQb2x5cy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7dC5pbnNlcnQobi5nZXRFbnZlbG9wZUludGVybmFsKCksbil9dGhpcy5faW5wdXRQb2x5cz1udWxsO3ZhciBpPXQuaXRlbXNUcmVlKCk7cmV0dXJuIHRoaXMudW5pb25UcmVlKGkpfSxEci5wcm90b3R5cGUuYmluYXJ5VW5pb249ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmJpbmFyeVVuaW9uKHQsMCx0LnNpemUoKSl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPWFyZ3VtZW50c1syXTtpZihpLW48PTEpe3ZhciByPURyLmdldEdlb21ldHJ5KGUsbik7cmV0dXJuIHRoaXMudW5pb25TYWZlKHIsbnVsbCl9aWYoaS1uPT0yKXJldHVybiB0aGlzLnVuaW9uU2FmZShEci5nZXRHZW9tZXRyeShlLG4pLERyLmdldEdlb21ldHJ5KGUsbisxKSk7dmFyIG89TWF0aC50cnVuYygoaStuKS8yKSxzPXRoaXMuYmluYXJ5VW5pb24oZSxuLG8pLGE9dGhpcy5iaW5hcnlVbmlvbihlLG8saSk7cmV0dXJuIHRoaXMudW5pb25TYWZlKHMsYSl9fSxEci5wcm90b3R5cGUucmVwZWF0ZWRVbmlvbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2U9bnVsbD09PWU/aS5jb3B5KCk6ZS51bmlvbihpKX1yZXR1cm4gZX0sRHIucHJvdG90eXBlLnVuaW9uU2FmZT1mdW5jdGlvbih0LGUpe3JldHVybiBudWxsPT09dCYmbnVsbD09PWU/bnVsbDpudWxsPT09dD9lLmNvcHkoKTpudWxsPT09ZT90LmNvcHkoKTp0aGlzLnVuaW9uT3B0aW1pemVkKHQsZSl9LERyLnByb3RvdHlwZS51bmlvbkFjdHVhbD1mdW5jdGlvbih0LGUpe3JldHVybiBEci5yZXN0cmljdFRvUG9seWdvbnModC51bmlvbihlKSl9LERyLnByb3RvdHlwZS51bmlvblRyZWU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5yZWR1Y2VUb0dlb21ldHJpZXModCk7cmV0dXJuIHRoaXMuYmluYXJ5VW5pb24oZSl9LERyLnByb3RvdHlwZS51bmlvblVzaW5nRW52ZWxvcGVJbnRlcnNlY3Rpb249ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW5ldyBOdCxyPXRoaXMuZXh0cmFjdEJ5RW52ZWxvcGUobix0LGkpLG89dGhpcy5leHRyYWN0QnlFbnZlbG9wZShuLGUsaSkscz10aGlzLnVuaW9uQWN0dWFsKHIsbyk7aS5hZGQocyk7cmV0dXJuIFByLmNvbWJpbmUoaSl9LERyLnByb3RvdHlwZS5idWZmZXJVbmlvbj1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHQuZ2V0KDApLmdldEZhY3RvcnkoKS5idWlsZEdlb21ldHJ5KHQpLmJ1ZmZlcigwKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3JldHVybiBlLmdldEZhY3RvcnkoKS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24oW2Usbl0pLmJ1ZmZlcigwKX19LERyLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxEci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gRHJ9LERyLnJlc3RyaWN0VG9Qb2x5Z29ucz1mdW5jdGlvbih0KXtpZihPKHQsWnQpKXJldHVybiB0O3ZhciBlPU5pLmdldFBvbHlnb25zKHQpO3JldHVybiAxPT09ZS5zaXplKCk/ZS5nZXQoMCk6dC5nZXRGYWN0b3J5KCkuY3JlYXRlTXVsdGlQb2x5Z29uKF9lLnRvUG9seWdvbkFycmF5KGUpKX0sRHIuZ2V0R2VvbWV0cnk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT49dC5zaXplKCk/bnVsbDp0LmdldChlKX0sRHIudW5pb249ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBEcih0KS51bmlvbigpfSxNci5TVFJUUkVFX05PREVfQ0FQQUNJVFkuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDR9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKERyLE1yKTt2YXIgQXI9ZnVuY3Rpb24oKXt9O0FyLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVybltdfSxBci5wcm90b3R5cGUuZ2V0Q2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gQXJ9LEFyLnVuaW9uPWZ1bmN0aW9uKHQsZSl7aWYodC5pc0VtcHR5KCl8fGUuaXNFbXB0eSgpKXtpZih0LmlzRW1wdHkoKSYmZS5pc0VtcHR5KCkpcmV0dXJuIExyLmNyZWF0ZUVtcHR5UmVzdWx0KExyLlVOSU9OLHQsZSx0LmdldEZhY3RvcnkoKSk7aWYodC5pc0VtcHR5KCkpcmV0dXJuIGUuY29weSgpO2lmKGUuaXNFbXB0eSgpKXJldHVybiB0LmNvcHkoKX1yZXR1cm4gdC5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbih0KSx0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKGUpLG9yLm92ZXJsYXlPcCh0LGUsTHIuVU5JT04pfSx0Lkdlb0pTT05SZWFkZXI9TmUsdC5HZW9KU09OV3JpdGVyPUNlLHQuT3ZlcmxheU9wPUxyLHQuVW5pb25PcD1Bcix0LkJ1ZmZlck9wPWRpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90dXJmLWpzdHMvanN0cy5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(9);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(10);\n\nvar _package = __webpack_require__(11);\n\nvar _LPM = __webpack_require__(12);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nvar _LPM3 = __webpack_require__(13);\n\nvar _LPM4 = _interopRequireDefault(_LPM3);\n\nvar _LPM5 = __webpack_require__(0);\n\nvar _LPM6 = _interopRequireDefault(_LPM5);\n\n__webpack_require__(15);\n\n__webpack_require__(16);\n\n__webpack_require__(17);\n\n__webpack_require__(18);\n\n__webpack_require__(19);\n\n__webpack_require__(20);\n\nvar _LPM7 = __webpack_require__(2);\n\nvar _LPM8 = _interopRequireDefault(_LPM7);\n\n__webpack_require__(27);\n\n__webpack_require__(28);\n\n__webpack_require__(29);\n\n__webpack_require__(30);\n\n__webpack_require__(31);\n\n__webpack_require__(32);\n\n__webpack_require__(33);\n\n__webpack_require__(34);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    Map: _LPM2.default,\n    Toolbar: _LPM4.default,\n    Draw: _LPM6.default,\n    Edit: _LPM8.default,\n    version: _package.version,\n    initialize: function initialize() {\n        this.addInitHooks();\n    },\n    addInitHooks: function addInitHooks() {\n        function initMap() {\n            if (!this.options.pmIgnore) {\n                this.pm = new L.PM.Map(this);\n            }\n        }\n\n        L.Map.addInitHook(initMap);\n\n        function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        }\n\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        function initMarker() {\n            if (!this.options.pmIgnore) {\n                this.pm = new L.PM.Edit.Marker(this);\n            }\n        }\n\n        L.Marker.addInitHook(initMarker);\n\n        function initPolyline() {\n            if (!this.options.pmIgnore) {\n                this.pm = new L.PM.Edit.Line(this);\n            }\n        }\n\n        L.Polyline.addInitHook(initPolyline);\n\n        function initPolygon() {\n            if (!this.options.pmIgnore) {\n                this.pm = new L.PM.Edit.Poly(this);\n            }\n        }\n\n        L.Polygon.addInitHook(initPolygon);\n\n        function initRectangle() {\n            if (!this.options.pmIgnore) {\n                this.pm = new L.PM.Edit.Rectangle(this);\n            }\n        }\n\n        L.Rectangle.addInitHook(initRectangle);\n\n        function initCircle() {\n            if (!this.options.pmIgnore) {\n                this.pm = new L.PM.Edit.Circle(this);\n            }\n        }\n\n        L.Circle.addInitHook(initCircle);\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9qcy9MLlBNLmpzP2FhNjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3BvbHlmaWxscy5qcycpO1xuXG52YXIgX3BhY2thZ2UgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcblxudmFyIF9MUE0gPSByZXF1aXJlKCcuL0wuUE0uTWFwJyk7XG5cbnZhciBfTFBNMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xQTSk7XG5cbnZhciBfTFBNMyA9IHJlcXVpcmUoJy4vVG9vbGJhci9MLlBNLlRvb2xiYXInKTtcblxudmFyIF9MUE00ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTFBNMyk7XG5cbnZhciBfTFBNNSA9IHJlcXVpcmUoJy4vRHJhdy9MLlBNLkRyYXcnKTtcblxudmFyIF9MUE02ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTFBNNSk7XG5cbnJlcXVpcmUoJy4vRHJhdy9MLlBNLkRyYXcuTWFya2VyJyk7XG5cbnJlcXVpcmUoJy4vRHJhdy9MLlBNLkRyYXcuTGluZScpO1xuXG5yZXF1aXJlKCcuL0RyYXcvTC5QTS5EcmF3LlBvbHknKTtcblxucmVxdWlyZSgnLi9EcmF3L0wuUE0uRHJhdy5SZWN0YW5nbGUnKTtcblxucmVxdWlyZSgnLi9EcmF3L0wuUE0uRHJhdy5DaXJjbGUnKTtcblxucmVxdWlyZSgnLi9EcmF3L0wuUE0uRHJhdy5DdXQnKTtcblxudmFyIF9MUE03ID0gcmVxdWlyZSgnLi9FZGl0L0wuUE0uRWRpdCcpO1xuXG52YXIgX0xQTTggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MUE03KTtcblxucmVxdWlyZSgnLi9FZGl0L0wuUE0uRWRpdC5MYXllckdyb3VwJyk7XG5cbnJlcXVpcmUoJy4vRWRpdC9MLlBNLkVkaXQuTWFya2VyJyk7XG5cbnJlcXVpcmUoJy4vRWRpdC9MLlBNLkVkaXQuTGluZScpO1xuXG5yZXF1aXJlKCcuL0VkaXQvTC5QTS5FZGl0LlBvbHknKTtcblxucmVxdWlyZSgnLi9FZGl0L0wuUE0uRWRpdC5SZWN0YW5nbGUnKTtcblxucmVxdWlyZSgnLi9FZGl0L0wuUE0uRWRpdC5DaXJjbGUnKTtcblxucmVxdWlyZSgnLi4vY3NzL2xheWVycy5jc3MnKTtcblxucmVxdWlyZSgnLi4vY3NzL2NvbnRyb2xzLmNzcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbipcbiogQSBMZWFmbGV0IFBsdWdpbiBGb3IgRWRpdGluZyBHZW9tZXRyeSBMYXllcnMgaW4gTGVhZmxldCAxLjBcbiogYnkgU3VtaXQgS3VtYXIgKEBUd2VldHNPZlN1bWl0KVxuKiBHaXRodWIgUmVwbzogaHR0cHM6Ly9naXRodWIuY29tL2NvZGVvZnN1bWl0L2xlYWZsZXQucG1cbiovXG5cbkwuUE0gPSBMLlBNIHx8IHtcbiAgICBNYXA6IF9MUE0yLmRlZmF1bHQsXG4gICAgVG9vbGJhcjogX0xQTTQuZGVmYXVsdCxcbiAgICBEcmF3OiBfTFBNNi5kZWZhdWx0LFxuICAgIEVkaXQ6IF9MUE04LmRlZmF1bHQsXG4gICAgdmVyc2lvbjogX3BhY2thZ2UudmVyc2lvbixcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmFkZEluaXRIb29rcygpO1xuICAgIH0sXG4gICAgYWRkSW5pdEhvb2tzOiBmdW5jdGlvbiBhZGRJbml0SG9va3MoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGluaXRNYXAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5wbUlnbm9yZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucG0gPSBuZXcgTC5QTS5NYXAodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBMLk1hcC5hZGRJbml0SG9vayhpbml0TWFwKTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0TGF5ZXJHcm91cCgpIHtcbiAgICAgICAgICAgIHRoaXMucG0gPSBuZXcgTC5QTS5FZGl0LkxheWVyR3JvdXAodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBMLkxheWVyR3JvdXAuYWRkSW5pdEhvb2soaW5pdExheWVyR3JvdXApO1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRNYXJrZXIoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5wbUlnbm9yZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucG0gPSBuZXcgTC5QTS5FZGl0Lk1hcmtlcih0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEwuTWFya2VyLmFkZEluaXRIb29rKGluaXRNYXJrZXIpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRQb2x5bGluZSgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnBtSWdub3JlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbSA9IG5ldyBMLlBNLkVkaXQuTGluZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEwuUG9seWxpbmUuYWRkSW5pdEhvb2soaW5pdFBvbHlsaW5lKTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0UG9seWdvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnBtSWdub3JlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbSA9IG5ldyBMLlBNLkVkaXQuUG9seSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEwuUG9seWdvbi5hZGRJbml0SG9vayhpbml0UG9seWdvbik7XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdFJlY3RhbmdsZSgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnBtSWdub3JlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbSA9IG5ldyBMLlBNLkVkaXQuUmVjdGFuZ2xlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgTC5SZWN0YW5nbGUuYWRkSW5pdEhvb2soaW5pdFJlY3RhbmdsZSk7XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdENpcmNsZSgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnBtSWdub3JlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbSA9IG5ldyBMLlBNLkVkaXQuQ2lyY2xlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgTC5DaXJjbGUuYWRkSW5pdEhvb2soaW5pdENpcmNsZSk7XG4gICAgfVxufTtcblxuLy8gaW5pdGlhbGl6ZSBsZWFmbGV0LnBtXG5MLlBNLmluaXRpYWxpemUoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9MLlBNLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* eslint-disable */\n\n// Array.findIndex Polyfill\nArray.prototype.findIndex = Array.prototype.findIndex || function (callback) {\n    if (this === null) {\n        throw new TypeError('Array.prototype.findIndex called on null or undefined');\n    } else if (typeof callback !== 'function') {\n        throw new TypeError('callback must be a function');\n    }\n    var list = Object(this);\n    // Makes sures is always has an positive integer as length.\n    var length = list.length >>> 0;\n    var thisArg = arguments[1];\n    for (var i = 0; i < length; i++) {\n        if (callback.call(thisArg, list[i], i, list)) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n// Array.find Polyfill for IE<12.\n// Requested here: https://github.com/codeofsumit/leaflet.pm/issues/173\nArray.prototype.find = Array.prototype.find || function (callback) {\n    if (this === null) {\n        throw new TypeError('Array.prototype.find called on null or undefined');\n    } else if (typeof callback !== 'function') {\n        throw new TypeError('callback must be a function');\n    }\n    var list = Object(this);\n    // Makes sures is always has an positive integer as length.\n    var length = list.length >>> 0;\n    var thisArg = arguments[1];\n    for (var i = 0; i < length; i++) {\n        var element = list[i];\n        if (callback.call(thisArg, element, i, list)) {\n            return element;\n        }\n    }\n};\n\n// Polyfill for Object.assign()\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\nif (typeof Object.assign != 'function') {\n    Object.assign = function (target) {\n        'use strict';\n\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        target = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source != null) {\n                for (var key in source) {\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n}\n\n// Polyfill for Element.remove()\n// https://developer.mozilla.org/de/docs/Web/API/ChildNode/remove#Polyfill\n(function (arr) {\n    arr.forEach(function (item) {\n        if (item.hasOwnProperty('remove')) {\n            return;\n        }\n        Object.defineProperty(item, 'remove', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: function remove() {\n                this.parentNode.removeChild(this);\n            }\n        });\n    });\n})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcG9seWZpbGxzLmpzP2MyNmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vLyBBcnJheS5maW5kSW5kZXggUG9seWZpbGxcbkFycmF5LnByb3RvdHlwZS5maW5kSW5kZXggPSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4IHx8IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICh0aGlzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maW5kSW5kZXggY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xuICAgIC8vIE1ha2VzIHN1cmVzIGlzIGFsd2F5cyBoYXMgYW4gcG9zaXRpdmUgaW50ZWdlciBhcyBsZW5ndGguXG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgbGlzdFtpXSwgaSwgbGlzdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn07XG5cbi8vIEFycmF5LmZpbmQgUG9seWZpbGwgZm9yIElFPDEyLlxuLy8gUmVxdWVzdGVkIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9jb2Rlb2ZzdW1pdC9sZWFmbGV0LnBtL2lzc3Vlcy8xNzNcbkFycmF5LnByb3RvdHlwZS5maW5kID0gQXJyYXkucHJvdG90eXBlLmZpbmQgfHwgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmQgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xuICAgIC8vIE1ha2VzIHN1cmVzIGlzIGFsd2F5cyBoYXMgYW4gcG9zaXRpdmUgaW50ZWdlciBhcyBsZW5ndGguXG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBsaXN0W2ldO1xuICAgICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBlbGVtZW50LCBpLCBsaXN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBQb2x5ZmlsbCBmb3IgT2JqZWN0LmFzc2lnbigpXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kZS9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduI1BvbHlmaWxsXG5pZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT0gJ2Z1bmN0aW9uJykge1xuICAgIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xufVxuXG4vLyBQb2x5ZmlsbCBmb3IgRWxlbWVudC5yZW1vdmUoKVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL0NoaWxkTm9kZS9yZW1vdmUjUG9seWZpbGxcbihmdW5jdGlvbiAoYXJyKSB7XG4gICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3JlbW92ZScpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0ZW0sICdyZW1vdmUnLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KShbRWxlbWVudC5wcm90b3R5cGUsIENoYXJhY3RlckRhdGEucHJvdG90eXBlLCBEb2N1bWVudFR5cGUucHJvdG90eXBlXSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvcG9seWZpbGxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"leaflet.pm\",\"version\":\"0.23.0\",\"description\":\"A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\",\"keywords\":[\"leaflet\",\"polygon management\",\"geometry editing\",\"map data\",\"map overlay\",\"polygon\",\"geojson\",\"leaflet-draw\",\"data-field-geojson\",\"ui-leaflet-draw\"],\"files\":[\"dist\"],\"main\":\"dist/leaflet.pm.min.js\",\"dependencies\":{\"@turf/difference\":\"^5.0.4\",\"@turf/intersect\":\"^5.0.4\",\"@turf/kinks\":\"^5.0.4\"},\"devDependencies\":{\"babel-core\":\"^6.26.0\",\"babel-loader\":\"^7.1.2\",\"babel-preset-env\":\"^1.6.1\",\"css-loader\":\"^0.28.0\",\"eslint\":\"^4.11.0\",\"eslint-config-airbnb-base\":\"^12.1.0\",\"eslint-plugin-import\":\"^2.8.0\",\"extract-text-webpack-plugin\":\"^3.0.2\",\"file-loader\":\"^0.11.1\",\"leaflet\":\"^1.2.0\",\"style-loader\":\"^0.19.0\",\"tape\":\"^4.8.0\",\"tape-run\":\"^3.0.0\",\"uglifyjs-webpack-plugin\":\"^1.1.0\",\"url-loader\":\"^0.6.2\",\"webpack\":\"^3.8.1\"},\"peerDependencies\":{\"leaflet\":\"^1.2.0\"},\"scripts\":{\"start\":\"npm run dev\",\"dev\":\"./node_modules/.bin/webpack --config=webpack.dev.js\",\"test\":\"browserify ./spec/test.spec.js | tape-run\",\"build\":\"./node_modules/.bin/webpack --config=webpack.build.js\",\"prepare\":\"npm run build\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/codeofsumit/leaflet.pm.git\"},\"author\":{\"name\":\"Sumit Kumar\",\"email\":\"sk@outlook.com\",\"url\":\"http://twitter.com/TweetsOfSumit\"},\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/codeofsumit/leaflet.pm/issues\"},\"homepage\":\"https://leafletpm.now.sh\"}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlLmpzb24/ZWQ4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcImxlYWZsZXQucG1cIixcInZlcnNpb25cIjpcIjAuMjMuMFwiLFwiZGVzY3JpcHRpb25cIjpcIkEgTGVhZmxldCBQbHVnaW4gRm9yIEVkaXRpbmcgR2VvbWV0cnkgTGF5ZXJzIGluIExlYWZsZXQgMS4wXCIsXCJrZXl3b3Jkc1wiOltcImxlYWZsZXRcIixcInBvbHlnb24gbWFuYWdlbWVudFwiLFwiZ2VvbWV0cnkgZWRpdGluZ1wiLFwibWFwIGRhdGFcIixcIm1hcCBvdmVybGF5XCIsXCJwb2x5Z29uXCIsXCJnZW9qc29uXCIsXCJsZWFmbGV0LWRyYXdcIixcImRhdGEtZmllbGQtZ2VvanNvblwiLFwidWktbGVhZmxldC1kcmF3XCJdLFwiZmlsZXNcIjpbXCJkaXN0XCJdLFwibWFpblwiOlwiZGlzdC9sZWFmbGV0LnBtLm1pbi5qc1wiLFwiZGVwZW5kZW5jaWVzXCI6e1wiQHR1cmYvZGlmZmVyZW5jZVwiOlwiXjUuMC40XCIsXCJAdHVyZi9pbnRlcnNlY3RcIjpcIl41LjAuNFwiLFwiQHR1cmYva2lua3NcIjpcIl41LjAuNFwifSxcImRldkRlcGVuZGVuY2llc1wiOntcImJhYmVsLWNvcmVcIjpcIl42LjI2LjBcIixcImJhYmVsLWxvYWRlclwiOlwiXjcuMS4yXCIsXCJiYWJlbC1wcmVzZXQtZW52XCI6XCJeMS42LjFcIixcImNzcy1sb2FkZXJcIjpcIl4wLjI4LjBcIixcImVzbGludFwiOlwiXjQuMTEuMFwiLFwiZXNsaW50LWNvbmZpZy1haXJibmItYmFzZVwiOlwiXjEyLjEuMFwiLFwiZXNsaW50LXBsdWdpbi1pbXBvcnRcIjpcIl4yLjguMFwiLFwiZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXCI6XCJeMy4wLjJcIixcImZpbGUtbG9hZGVyXCI6XCJeMC4xMS4xXCIsXCJsZWFmbGV0XCI6XCJeMS4yLjBcIixcInN0eWxlLWxvYWRlclwiOlwiXjAuMTkuMFwiLFwidGFwZVwiOlwiXjQuOC4wXCIsXCJ0YXBlLXJ1blwiOlwiXjMuMC4wXCIsXCJ1Z2xpZnlqcy13ZWJwYWNrLXBsdWdpblwiOlwiXjEuMS4wXCIsXCJ1cmwtbG9hZGVyXCI6XCJeMC42LjJcIixcIndlYnBhY2tcIjpcIl4zLjguMVwifSxcInBlZXJEZXBlbmRlbmNpZXNcIjp7XCJsZWFmbGV0XCI6XCJeMS4yLjBcIn0sXCJzY3JpcHRzXCI6e1wic3RhcnRcIjpcIm5wbSBydW4gZGV2XCIsXCJkZXZcIjpcIi4vbm9kZV9tb2R1bGVzLy5iaW4vd2VicGFjayAtLWNvbmZpZz13ZWJwYWNrLmRldi5qc1wiLFwidGVzdFwiOlwiYnJvd3NlcmlmeSAuL3NwZWMvdGVzdC5zcGVjLmpzIHwgdGFwZS1ydW5cIixcImJ1aWxkXCI6XCIuL25vZGVfbW9kdWxlcy8uYmluL3dlYnBhY2sgLS1jb25maWc9d2VicGFjay5idWlsZC5qc1wiLFwicHJlcGFyZVwiOlwibnBtIHJ1biBidWlsZFwifSxcInJlcG9zaXRvcnlcIjp7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9jb2Rlb2ZzdW1pdC9sZWFmbGV0LnBtLmdpdFwifSxcImF1dGhvclwiOntcIm5hbWVcIjpcIlN1bWl0IEt1bWFyXCIsXCJlbWFpbFwiOlwic2tAb3V0bG9vay5jb21cIixcInVybFwiOlwiaHR0cDovL3R3aXR0ZXIuY29tL1R3ZWV0c09mU3VtaXRcIn0sXCJsaWNlbnNlXCI6XCJNSVRcIixcImJ1Z3NcIjp7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9jb2Rlb2ZzdW1pdC9sZWFmbGV0LnBtL2lzc3Vlc1wifSxcImhvbWVwYWdlXCI6XCJodHRwczovL2xlYWZsZXRwbS5ub3cuc2hcIn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3BhY2thZ2UuanNvblxuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar Map = L.Class.extend({\n    initialize: function initialize(map) {\n        var _this = this;\n\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n\n        this.map.on('layerremove', function (e) {\n            if (e.layer.pm && !e.layer._pmTempLayer) {\n                _this.map.fire('pm:remove', e);\n            }\n        });\n\n        this._globalRemovalMode = false;\n    },\n    addControls: function addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    removeControls: function removeControls() {\n        this.Toolbar.removeControls();\n    },\n    toggleControls: function toggleControls() {\n        this.Toolbar.toggleControls();\n    },\n    controlsVisible: function controlsVisible() {\n        return this.Toolbar.isVisible;\n    },\n    enableDraw: function enableDraw() {\n        var shape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Poly';\n        var options = arguments[1];\n\n        this.Draw.enable(shape, options);\n    },\n    disableDraw: function disableDraw() {\n        var shape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Poly';\n\n        this.Draw.disable(shape);\n    },\n    setPathOptions: function setPathOptions(options) {\n        this.Draw.setPathOptions(options);\n    },\n    removeLayer: function removeLayer(e) {\n        var layer = e.target;\n        if (!layer._layers && (!layer.pm || !layer.pm.dragging())) {\n            e.target.remove();\n        }\n    },\n    toggleGlobalRemovalMode: function toggleGlobalRemovalMode() {\n        var _this2 = this;\n\n        // toggle global edit mode\n        if (this.globalRemovalEnabled()) {\n            this._globalRemovalMode = false;\n            this.map.eachLayer(function (layer) {\n                layer.off('click', _this2.removeLayer);\n            });\n        } else {\n            this._globalRemovalMode = true;\n            this.map.eachLayer(function (layer) {\n                if (layer.pm) {\n                    layer.on('click', _this2.removeLayer);\n                }\n            });\n        }\n\n        // toogle the button in the toolbar\n        this.Toolbar.toggleButton('deleteLayer', this._globalRemovalMode);\n    },\n    globalRemovalEnabled: function globalRemovalEnabled() {\n        return this._globalRemovalMode;\n    },\n    globalEditEnabled: function globalEditEnabled() {\n        return this._globalEditMode;\n    },\n    enableGlobalEditMode: function enableGlobalEditMode(options) {\n        // find all layers handles by leaflet.pm\n        var layers = [];\n        this.map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline || layer instanceof L.Marker || layer instanceof L.Circle) {\n                layers.push(layer);\n            }\n        });\n\n        // filter out layers that don't have the leaflet.pm instance\n        layers = layers.filter(function (layer) {\n            return !!layer.pm;\n        });\n\n        // filter out everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(function (layer) {\n            return !layer._pmTempLayer;\n        });\n\n        this._globalEditMode = true;\n\n        layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n\n        // toggle the button in the toolbar\n        this.Toolbar.toggleButton('editPolygon', this._globalEditMode);\n\n        // fire event\n        this._fireEditModeEvent(true);\n    },\n    disableGlobalEditMode: function disableGlobalEditMode() {\n        // find all layers handles by leaflet.pm\n        var layers = [];\n        this.map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline || layer instanceof L.Marker || layer instanceof L.Circle) {\n                layers.push(layer);\n            }\n        });\n\n        // filter out layers that don't have the leaflet.pm instance\n        layers = layers.filter(function (layer) {\n            return !!layer.pm;\n        });\n\n        // filter out everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(function (layer) {\n            return !layer._pmTempLayer;\n        });\n\n        this._globalEditMode = false;\n\n        layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n\n        // toggle the button in the toolbar\n        this.Toolbar.toggleButton('editPolygon', this._globalEditMode);\n\n        // fire event\n        this._fireEditModeEvent(false);\n    },\n    _fireEditModeEvent: function _fireEditModeEvent(enabled) {\n        this.map.fire('pm:globaleditmodetoggled', {\n            enabled: enabled,\n            map: this.map\n        });\n    },\n    toggleGlobalEditMode: function toggleGlobalEditMode(options) {\n        if (this.globalEditEnabled()) {\n            // disable\n            this.disableGlobalEditMode();\n        } else {\n            // enable\n            this.enableGlobalEditMode(options);\n        }\n    }\n});\n\nexports.default = Map;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvTC5QTS5NYXAuanM/ZGUwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbnZhciBNYXAgPSBMLkNsYXNzLmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShtYXApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5EcmF3ID0gbmV3IEwuUE0uRHJhdyhtYXApO1xuICAgICAgICB0aGlzLlRvb2xiYXIgPSBuZXcgTC5QTS5Ub29sYmFyKG1hcCk7XG5cbiAgICAgICAgdGhpcy5tYXAub24oJ2xheWVycmVtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmxheWVyLnBtICYmICFlLmxheWVyLl9wbVRlbXBMYXllcikge1xuICAgICAgICAgICAgICAgIF90aGlzLm1hcC5maXJlKCdwbTpyZW1vdmUnLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fZ2xvYmFsUmVtb3ZhbE1vZGUgPSBmYWxzZTtcbiAgICB9LFxuICAgIGFkZENvbnRyb2xzOiBmdW5jdGlvbiBhZGRDb250cm9scyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuVG9vbGJhci5hZGRDb250cm9scyhvcHRpb25zKTtcbiAgICB9LFxuICAgIHJlbW92ZUNvbnRyb2xzOiBmdW5jdGlvbiByZW1vdmVDb250cm9scygpIHtcbiAgICAgICAgdGhpcy5Ub29sYmFyLnJlbW92ZUNvbnRyb2xzKCk7XG4gICAgfSxcbiAgICB0b2dnbGVDb250cm9sczogZnVuY3Rpb24gdG9nZ2xlQ29udHJvbHMoKSB7XG4gICAgICAgIHRoaXMuVG9vbGJhci50b2dnbGVDb250cm9scygpO1xuICAgIH0sXG4gICAgY29udHJvbHNWaXNpYmxlOiBmdW5jdGlvbiBjb250cm9sc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlRvb2xiYXIuaXNWaXNpYmxlO1xuICAgIH0sXG4gICAgZW5hYmxlRHJhdzogZnVuY3Rpb24gZW5hYmxlRHJhdygpIHtcbiAgICAgICAgdmFyIHNoYXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnUG9seSc7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzWzFdO1xuXG4gICAgICAgIHRoaXMuRHJhdy5lbmFibGUoc2hhcGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgZGlzYWJsZURyYXc6IGZ1bmN0aW9uIGRpc2FibGVEcmF3KCkge1xuICAgICAgICB2YXIgc2hhcGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdQb2x5JztcblxuICAgICAgICB0aGlzLkRyYXcuZGlzYWJsZShzaGFwZSk7XG4gICAgfSxcbiAgICBzZXRQYXRoT3B0aW9uczogZnVuY3Rpb24gc2V0UGF0aE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLkRyYXcuc2V0UGF0aE9wdGlvbnMob3B0aW9ucyk7XG4gICAgfSxcbiAgICByZW1vdmVMYXllcjogZnVuY3Rpb24gcmVtb3ZlTGF5ZXIoZSkge1xuICAgICAgICB2YXIgbGF5ZXIgPSBlLnRhcmdldDtcbiAgICAgICAgaWYgKCFsYXllci5fbGF5ZXJzICYmICghbGF5ZXIucG0gfHwgIWxheWVyLnBtLmRyYWdnaW5nKCkpKSB7XG4gICAgICAgICAgICBlLnRhcmdldC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdG9nZ2xlR2xvYmFsUmVtb3ZhbE1vZGU6IGZ1bmN0aW9uIHRvZ2dsZUdsb2JhbFJlbW92YWxNb2RlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyB0b2dnbGUgZ2xvYmFsIGVkaXQgbW9kZVxuICAgICAgICBpZiAodGhpcy5nbG9iYWxSZW1vdmFsRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9nbG9iYWxSZW1vdmFsTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5tYXAuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgICAgIGxheWVyLm9mZignY2xpY2snLCBfdGhpczIucmVtb3ZlTGF5ZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9nbG9iYWxSZW1vdmFsTW9kZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm1hcC5lYWNoTGF5ZXIoZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLnBtKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyLm9uKCdjbGljaycsIF90aGlzMi5yZW1vdmVMYXllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0b29nbGUgdGhlIGJ1dHRvbiBpbiB0aGUgdG9vbGJhclxuICAgICAgICB0aGlzLlRvb2xiYXIudG9nZ2xlQnV0dG9uKCdkZWxldGVMYXllcicsIHRoaXMuX2dsb2JhbFJlbW92YWxNb2RlKTtcbiAgICB9LFxuICAgIGdsb2JhbFJlbW92YWxFbmFibGVkOiBmdW5jdGlvbiBnbG9iYWxSZW1vdmFsRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dsb2JhbFJlbW92YWxNb2RlO1xuICAgIH0sXG4gICAgZ2xvYmFsRWRpdEVuYWJsZWQ6IGZ1bmN0aW9uIGdsb2JhbEVkaXRFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2xvYmFsRWRpdE1vZGU7XG4gICAgfSxcbiAgICBlbmFibGVHbG9iYWxFZGl0TW9kZTogZnVuY3Rpb24gZW5hYmxlR2xvYmFsRWRpdE1vZGUob3B0aW9ucykge1xuICAgICAgICAvLyBmaW5kIGFsbCBsYXllcnMgaGFuZGxlcyBieSBsZWFmbGV0LnBtXG4gICAgICAgIHZhciBsYXllcnMgPSBbXTtcbiAgICAgICAgdGhpcy5tYXAuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgaWYgKGxheWVyIGluc3RhbmNlb2YgTC5Qb2x5bGluZSB8fCBsYXllciBpbnN0YW5jZW9mIEwuTWFya2VyIHx8IGxheWVyIGluc3RhbmNlb2YgTC5DaXJjbGUpIHtcbiAgICAgICAgICAgICAgICBsYXllcnMucHVzaChsYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGZpbHRlciBvdXQgbGF5ZXJzIHRoYXQgZG9uJ3QgaGF2ZSB0aGUgbGVhZmxldC5wbSBpbnN0YW5jZVxuICAgICAgICBsYXllcnMgPSBsYXllcnMuZmlsdGVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgcmV0dXJuICEhbGF5ZXIucG07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGZpbHRlciBvdXQgZXZlcnl0aGluZyB0aGF0J3MgbGVhZmxldC5wbSBzcGVjaWZpYyB0ZW1wb3Jhcnkgc3R1ZmZcbiAgICAgICAgbGF5ZXJzID0gbGF5ZXJzLmZpbHRlcihmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAhbGF5ZXIuX3BtVGVtcExheWVyO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9nbG9iYWxFZGl0TW9kZSA9IHRydWU7XG5cbiAgICAgICAgbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICBsYXllci5wbS5lbmFibGUob3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRvZ2dsZSB0aGUgYnV0dG9uIGluIHRoZSB0b29sYmFyXG4gICAgICAgIHRoaXMuVG9vbGJhci50b2dnbGVCdXR0b24oJ2VkaXRQb2x5Z29uJywgdGhpcy5fZ2xvYmFsRWRpdE1vZGUpO1xuXG4gICAgICAgIC8vIGZpcmUgZXZlbnRcbiAgICAgICAgdGhpcy5fZmlyZUVkaXRNb2RlRXZlbnQodHJ1ZSk7XG4gICAgfSxcbiAgICBkaXNhYmxlR2xvYmFsRWRpdE1vZGU6IGZ1bmN0aW9uIGRpc2FibGVHbG9iYWxFZGl0TW9kZSgpIHtcbiAgICAgICAgLy8gZmluZCBhbGwgbGF5ZXJzIGhhbmRsZXMgYnkgbGVhZmxldC5wbVxuICAgICAgICB2YXIgbGF5ZXJzID0gW107XG4gICAgICAgIHRoaXMubWFwLmVhY2hMYXllcihmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIGlmIChsYXllciBpbnN0YW5jZW9mIEwuUG9seWxpbmUgfHwgbGF5ZXIgaW5zdGFuY2VvZiBMLk1hcmtlciB8fCBsYXllciBpbnN0YW5jZW9mIEwuQ2lyY2xlKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBmaWx0ZXIgb3V0IGxheWVycyB0aGF0IGRvbid0IGhhdmUgdGhlIGxlYWZsZXQucG0gaW5zdGFuY2VcbiAgICAgICAgbGF5ZXJzID0gbGF5ZXJzLmZpbHRlcihmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWxheWVyLnBtO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBmaWx0ZXIgb3V0IGV2ZXJ5dGhpbmcgdGhhdCdzIGxlYWZsZXQucG0gc3BlY2lmaWMgdGVtcG9yYXJ5IHN0dWZmXG4gICAgICAgIGxheWVycyA9IGxheWVycy5maWx0ZXIoZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gIWxheWVyLl9wbVRlbXBMYXllcjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fZ2xvYmFsRWRpdE1vZGUgPSBmYWxzZTtcblxuICAgICAgICBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIGxheWVyLnBtLmRpc2FibGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdG9nZ2xlIHRoZSBidXR0b24gaW4gdGhlIHRvb2xiYXJcbiAgICAgICAgdGhpcy5Ub29sYmFyLnRvZ2dsZUJ1dHRvbignZWRpdFBvbHlnb24nLCB0aGlzLl9nbG9iYWxFZGl0TW9kZSk7XG5cbiAgICAgICAgLy8gZmlyZSBldmVudFxuICAgICAgICB0aGlzLl9maXJlRWRpdE1vZGVFdmVudChmYWxzZSk7XG4gICAgfSxcbiAgICBfZmlyZUVkaXRNb2RlRXZlbnQ6IGZ1bmN0aW9uIF9maXJlRWRpdE1vZGVFdmVudChlbmFibGVkKSB7XG4gICAgICAgIHRoaXMubWFwLmZpcmUoJ3BtOmdsb2JhbGVkaXRtb2RldG9nZ2xlZCcsIHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGVuYWJsZWQsXG4gICAgICAgICAgICBtYXA6IHRoaXMubWFwXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgdG9nZ2xlR2xvYmFsRWRpdE1vZGU6IGZ1bmN0aW9uIHRvZ2dsZUdsb2JhbEVkaXRNb2RlKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2xvYmFsRWRpdEVuYWJsZWQoKSkge1xuICAgICAgICAgICAgLy8gZGlzYWJsZVxuICAgICAgICAgICAgdGhpcy5kaXNhYmxlR2xvYmFsRWRpdE1vZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVuYWJsZVxuICAgICAgICAgICAgdGhpcy5lbmFibGVHbG9iYWxFZGl0TW9kZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNYXA7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvTC5QTS5NYXAuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _L = __webpack_require__(14);\n\nvar _L2 = _interopRequireDefault(_L);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nL.Control.PMButton = _L2.default; /**\n                                  * The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n                                  */\n\n\nvar Toolbar = L.Class.extend({\n    options: {\n        drawMarker: true,\n        drawPolygon: true,\n        drawPolyline: true,\n        drawCircle: true,\n        drawRectangle: true,\n        editMode: true,\n        cutPolygon: true,\n        dragPolygon: false,\n        removalMode: true,\n        position: 'topleft'\n    },\n    initialize: function initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.isVisible = false;\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n    getButtons: function getButtons() {\n        return this.buttons;\n    },\n    addControls: function addControls() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;\n\n        // adds all buttons to the map specified inside options\n\n        // make button renaming backwards compatible\n        if (typeof options.editPolygon !== 'undefined') {\n            options.editMode = options.editPolygon;\n        }\n        if (typeof options.deleteLayer !== 'undefined') {\n            options.removalMode = options.deleteLayer;\n        }\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n        this.isVisible = true;\n    },\n    removeControls: function removeControls() {\n        // grab all buttons to loop through\n        var buttons = this.getButtons();\n\n        // remove all buttons\n        for (var btn in buttons) {\n            buttons[btn].remove();\n        }\n\n        this.isVisible = false;\n    },\n    toggleControls: function toggleControls() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;\n\n        if (this.isVisible) {\n            this.removeControls();\n        } else {\n            this.addControls(options);\n        }\n    },\n    _addButton: function _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons: function triggerClickOnToggledButtons(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n\n        for (var name in this.buttons) {\n            if (this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton: function toggleButton(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // backwards compatibility with button rename\n        if (name === 'editPolygon') {\n            name = 'editMode';\n        }\n        if (name === 'deleteLayer') {\n            name = 'removalMode';\n        }\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n    },\n    _defineButtons: function _defineButtons() {\n        var _this = this;\n\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        var deleteButton = {\n            className: ' leaflet-pm-icon-delete',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                _this.map.pm.toggleGlobalRemovalMode();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawPolyButton = {\n            className: 'leaflet-pm-icon-polygon',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Poly.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var cutButton = {\n            className: 'leaflet-pm-icon-cut',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // enable polygon drawing mode without snap\n                _this.map.pm.Draw.Cut.toggle({ snappable: true, cursorMarker: true, allowSelfIntersection: false });\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawMarkerButton = {\n            className: 'leaflet-pm-icon-marker',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Marker.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawLineButton = {\n            className: 'leaflet-pm-icon-polyline',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Line.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawCircleButton = {\n            className: 'leaflet-pm-icon-circle',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Circle.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawRectangleButton = {\n            className: 'leaflet-pm-icon-rectangle',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Rectangle.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var editButton = {\n            className: 'leaflet-pm-icon-edit',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                _this.map.pm.toggleGlobalEditMode();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var dragButton = {\n            className: 'leaflet-pm-icon-drag',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {},\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        this._addButton('drawMarker', new L.Control.PMButton(drawMarkerButton));\n        this._addButton('drawPolyline', new L.Control.PMButton(drawLineButton));\n        this._addButton('drawRectangle', new L.Control.PMButton(drawRectangleButton));\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('drawCircle', new L.Control.PMButton(drawCircleButton));\n        this._addButton('cutPolygon', new L.Control.PMButton(cutButton));\n        this._addButton('editMode', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('removalMode', new L.Control.PMButton(deleteButton));\n    },\n    _showHideButtons: function _showHideButtons() {\n        // remove all buttons, that's because the Toolbar can be added again with\n        // different options so it's basically a reset and add again\n        this.removeControls();\n\n        var buttons = this.getButtons();\n        for (var btn in buttons) {\n            if (this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].setPosition(this.options.position);\n                buttons[btn].addTo(this.map);\n            }\n        }\n    }\n});\n\nexports.default = Toolbar;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize: function initialize(options) {\n        this._button = L.Util.setOptions(this, options);\n    },\n    onAdd: function onAdd(map) {\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode);\n\n        return this._container;\n    },\n    onRemove: function onRemove() {\n        this.buttonsDomNode.remove();\n\n        return this._container;\n    },\n    getText: function getText() {\n        return this._button.text;\n    },\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _triggerClick: function _triggerClick(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton: function _makeButton(button) {\n        var _this = this;\n\n        var newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) {\n            L.DomUtil.addClass(newButton, 'active');\n        }\n\n        var image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', function () {\n            if (_this._button.disableOtherButtons) {\n                _this._map.pm.Toolbar.triggerClickOnToggledButtons(_this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n    _applyStyleClasses: function _applyStyleClasses() {\n        if (!this._container) {\n            return;\n        }\n\n        if (!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode, 'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode, 'active');\n        }\n    },\n    _clicked: function _clicked() {\n        if (this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    }\n});\n\nexports.default = PMButton;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvVG9vbGJhci9MLkNvbnRyb2xzLmpzPzg5ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgUE1CdXR0b24gPSBMLkNvbnRyb2wuZXh0ZW5kKHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIHBvc2l0aW9uOiAndG9wbGVmdCdcbiAgICB9LFxuICAgIC8vIFRPRE86IGNsZWFuIHVwIHZhcmlhYmxlIG5hbWVzIGxpa2UgX2J1dHRvbiBzaG91bGQgYmUgX29wdGlvbnMgYW5kIHRoYXQgZG9tTm9kZVZhcmlhYmxlIHN0dWZmXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2J1dHRvbiA9IEwuVXRpbC5zZXRPcHRpb25zKHRoaXMsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgb25BZGQ6IGZ1bmN0aW9uIG9uQWRkKG1hcCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG5cbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gdGhpcy5fbWFwLnBtLlRvb2xiYXIuY29udGFpbmVyO1xuICAgICAgICB0aGlzLmJ1dHRvbnNEb21Ob2RlID0gdGhpcy5fbWFrZUJ1dHRvbih0aGlzLl9idXR0b24pO1xuICAgICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5idXR0b25zRG9tTm9kZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAgICB9LFxuICAgIG9uUmVtb3ZlOiBmdW5jdGlvbiBvblJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5idXR0b25zRG9tTm9kZS5yZW1vdmUoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICAgIH0sXG4gICAgZ2V0VGV4dDogZnVuY3Rpb24gZ2V0VGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvbi50ZXh0O1xuICAgIH0sXG4gICAgZ2V0SWNvblVybDogZnVuY3Rpb24gZ2V0SWNvblVybCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvbi5pY29uVXJsO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fYnV0dG9uID0ge307XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH0sXG4gICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoZSkge1xuICAgICAgICBpZiAodHlwZW9mIGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uLnRvZ2dsZVN0YXR1cyA9IGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9idXR0b24udG9nZ2xlU3RhdHVzID0gIXRoaXMuX2J1dHRvbi50b2dnbGVTdGF0dXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXBwbHlTdHlsZUNsYXNzZXMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uLnRvZ2dsZVN0YXR1cztcbiAgICB9LFxuICAgIHRvZ2dsZWQ6IGZ1bmN0aW9uIHRvZ2dsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b24udG9nZ2xlU3RhdHVzO1xuICAgIH0sXG4gICAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZShmYWxzZSk7XG4gICAgfSxcbiAgICBfdHJpZ2dlckNsaWNrOiBmdW5jdGlvbiBfdHJpZ2dlckNsaWNrKGUpIHtcbiAgICAgICAgdGhpcy5fYnV0dG9uLm9uQ2xpY2soZSk7XG4gICAgICAgIHRoaXMuX2NsaWNrZWQoZSk7XG4gICAgICAgIHRoaXMuX2J1dHRvbi5hZnRlckNsaWNrKGUpO1xuICAgIH0sXG4gICAgX21ha2VCdXR0b246IGZ1bmN0aW9uIF9tYWtlQnV0dG9uKGJ1dHRvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBuZXdCdXR0b24gPSBMLkRvbVV0aWwuY3JlYXRlKCdhJywgJ2xlYWZsZXQtYnV0dG9ucy1jb250cm9sLWJ1dHRvbicsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIGlmIChidXR0b24udG9nZ2xlU3RhdHVzKSB7XG4gICAgICAgICAgICBMLkRvbVV0aWwuYWRkQ2xhc3MobmV3QnV0dG9uLCAnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW1hZ2UgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnLCAnY29udHJvbC1pY29uJywgbmV3QnV0dG9uKTtcbiAgICAgICAgaWYgKGJ1dHRvbi5pY29uVXJsKSB7XG4gICAgICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIGJ1dHRvbi5pY29uVXJsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9uLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgTC5Eb21VdGlsLmFkZENsYXNzKGltYWdlLCBidXR0b24uY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBiZWZvcmUgdGhlIGFjdHVhbCBjbGljaywgdHJpZ2dlciBhIGNsaWNrIG9uIGN1cnJlbnRseSB0b2dnbGVkIGJ1dHRvbnMgdG9cbiAgICAgICAgLy8gdW50b2dnbGUgdGhlbSBhbmQgdGhlaXIgZnVuY3Rpb25hbGl0eVxuICAgICAgICBMLkRvbUV2ZW50LmFkZExpc3RlbmVyKG5ld0J1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9idXR0b24uZGlzYWJsZU90aGVyQnV0dG9ucykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9tYXAucG0uVG9vbGJhci50cmlnZ2VyQ2xpY2tPblRvZ2dsZWRCdXR0b25zKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIEwuRG9tRXZlbnQuYWRkTGlzdGVuZXIobmV3QnV0dG9uLCAnY2xpY2snLCB0aGlzLl90cmlnZ2VyQ2xpY2ssIHRoaXMpO1xuXG4gICAgICAgIEwuRG9tRXZlbnQuZGlzYWJsZUNsaWNrUHJvcGFnYXRpb24obmV3QnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIG5ld0J1dHRvbjtcbiAgICB9LFxuICAgIF9hcHBseVN0eWxlQ2xhc3NlczogZnVuY3Rpb24gX2FwcGx5U3R5bGVDbGFzc2VzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9idXR0b24udG9nZ2xlU3RhdHVzKSB7XG4gICAgICAgICAgICBMLkRvbVV0aWwucmVtb3ZlQ2xhc3ModGhpcy5idXR0b25zRG9tTm9kZSwgJ2FjdGl2ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTC5Eb21VdGlsLmFkZENsYXNzKHRoaXMuYnV0dG9uc0RvbU5vZGUsICdhY3RpdmUnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2NsaWNrZWQ6IGZ1bmN0aW9uIF9jbGlja2VkKCkge1xuICAgICAgICBpZiAodGhpcy5fYnV0dG9uLmRvVG9nZ2xlKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUE1CdXR0b247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvVG9vbGJhci9MLkNvbnRyb2xzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(0);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Marker = _LPM2.default.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Marker';\n        this.toolbarButtonName = 'drawMarker';\n    },\n    enable: function enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // change enabled state\n        this._enabled = true;\n\n        // create a marker on click on the map\n        this._map.on('click', this._createMarker, this);\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // this is the hintmarker on the mouse cursor\n        this._hintMarker = L.marker([0, 0], this.options.markerStyle);\n        this._hintMarker._pmTempLayer = true;\n        this._hintMarker.addTo(this._map);\n\n        // this is just to keep the snappable mixin happy\n        this._layer = this._hintMarker;\n\n        // sync hint marker with mouse cursor\n        this._map.on('mousemove', this._syncHintMarker, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape, workingLayer: this._layer });\n\n        // enable edit mode for existing markers\n        this._map.eachLayer(function (layer) {\n            if (layer instanceof L.Marker && layer.pm) {\n                layer.pm.enable();\n            }\n        });\n    },\n    disable: function disable() {\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        // undbind click event, don't create a marker on click anymore\n        this._map.off('click', this._createMarker, this);\n\n        // remove hint marker\n        this._hintMarker.remove();\n\n        // remove event listener to sync hint marker\n        this._map.off('mousemove', this._syncHintMarker, this);\n\n        // disable dragging and removing for all markers\n        this._map.eachLayer(function (layer) {\n            if (layer instanceof L.Marker && layer.pm && !layer._pmTempLayer) {\n                layer.pm.disable();\n            }\n        });\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n\n        // change enabled state\n        this._enabled = false;\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _createMarker: function _createMarker(e) {\n        if (!e.latlng) {\n            return;\n        }\n\n        // assign the coordinate of the click to the hintMarker, that's necessary for\n        // mobile where the marker can't follow a cursor\n        if (!this._hintMarker._snapped) {\n            this._hintMarker.setLatLng(e.latlng);\n        }\n\n        // get coordinate for new vertex by hintMarker (cursor marker)\n        var latlng = this._hintMarker.getLatLng();\n\n        // create marker\n        var marker = new L.Marker(latlng, this.options.markerStyle);\n\n        // add marker to the map\n        marker.addTo(this._map);\n\n        // enable editing for the marker\n        marker.pm.enable();\n\n        // fire the pm:create event and pass shape and marker\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            marker: marker, // DEPRECATED\n            layer: marker\n        });\n\n        this._cleanupSnapping();\n    },\n    _syncHintMarker: function _syncHintMarker(e) {\n        // move the cursor marker\n        this._hintMarker.setLatLng(e.latlng);\n\n        // if snapping is enabled, do it\n        if (this.options.snappable) {\n            var fakeDragEvent = e;\n            fakeDragEvent.target = this._hintMarker;\n            this._handleSnapping(fakeDragEvent);\n        }\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvRHJhdy9MLlBNLkRyYXcuTWFya2VyLmpzP2M3NjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX0xQTSA9IHJlcXVpcmUoJy4vTC5QTS5EcmF3Jyk7XG5cbnZhciBfTFBNMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xQTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbl9MUE0yLmRlZmF1bHQuTWFya2VyID0gX0xQTTIuZGVmYXVsdC5leHRlbmQoe1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUobWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fc2hhcGUgPSAnTWFya2VyJztcbiAgICAgICAgdGhpcy50b29sYmFyQnV0dG9uTmFtZSA9ICdkcmF3TWFya2VyJztcbiAgICB9LFxuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpbmsgYWJvdXQgaWYgdGhlc2Ugb3B0aW9ucyBjb3VsZCBiZSBwYXNzZWQgZ2xvYmFsbHkgZm9yIGFsbFxuICAgICAgICAvLyBpbnN0YW5jZXMgb2YgTC5QTS5EcmF3LiBTbyBhIGRldiBjb3VsZCBzZXQgZHJhd2luZyBzdHlsZSBvbmUgdGltZSBhcyBzb21lIGtpbmQgb2YgY29uZmlnXG4gICAgICAgIEwuVXRpbC5zZXRPcHRpb25zKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIGNoYW5nZSBlbmFibGVkIHN0YXRlXG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhIG1hcmtlciBvbiBjbGljayBvbiB0aGUgbWFwXG4gICAgICAgIHRoaXMuX21hcC5vbignY2xpY2snLCB0aGlzLl9jcmVhdGVNYXJrZXIsIHRoaXMpO1xuXG4gICAgICAgIC8vIHRvZ2dsZSB0aGUgZHJhdyBidXR0b24gb2YgdGhlIFRvb2xiYXIgaW4gY2FzZSBkcmF3aW5nIG1vZGUgZ290IGVuYWJsZWQgd2l0aG91dCB0aGUgYnV0dG9uXG4gICAgICAgIHRoaXMuX21hcC5wbS5Ub29sYmFyLnRvZ2dsZUJ1dHRvbih0aGlzLnRvb2xiYXJCdXR0b25OYW1lLCB0cnVlKTtcblxuICAgICAgICAvLyB0aGlzIGlzIHRoZSBoaW50bWFya2VyIG9uIHRoZSBtb3VzZSBjdXJzb3JcbiAgICAgICAgdGhpcy5faGludE1hcmtlciA9IEwubWFya2VyKFswLCAwXSwgdGhpcy5vcHRpb25zLm1hcmtlclN0eWxlKTtcbiAgICAgICAgdGhpcy5faGludE1hcmtlci5fcG1UZW1wTGF5ZXIgPSB0cnVlO1xuICAgICAgICB0aGlzLl9oaW50TWFya2VyLmFkZFRvKHRoaXMuX21hcCk7XG5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IHRvIGtlZXAgdGhlIHNuYXBwYWJsZSBtaXhpbiBoYXBweVxuICAgICAgICB0aGlzLl9sYXllciA9IHRoaXMuX2hpbnRNYXJrZXI7XG5cbiAgICAgICAgLy8gc3luYyBoaW50IG1hcmtlciB3aXRoIG1vdXNlIGN1cnNvclxuICAgICAgICB0aGlzLl9tYXAub24oJ21vdXNlbW92ZScsIHRoaXMuX3N5bmNIaW50TWFya2VyLCB0aGlzKTtcblxuICAgICAgICAvLyBmaXJlIGRyYXdzdGFydCBldmVudFxuICAgICAgICB0aGlzLl9tYXAuZmlyZSgncG06ZHJhd3N0YXJ0JywgeyBzaGFwZTogdGhpcy5fc2hhcGUsIHdvcmtpbmdMYXllcjogdGhpcy5fbGF5ZXIgfSk7XG5cbiAgICAgICAgLy8gZW5hYmxlIGVkaXQgbW9kZSBmb3IgZXhpc3RpbmcgbWFya2Vyc1xuICAgICAgICB0aGlzLl9tYXAuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgaWYgKGxheWVyIGluc3RhbmNlb2YgTC5NYXJrZXIgJiYgbGF5ZXIucG0pIHtcbiAgICAgICAgICAgICAgICBsYXllci5wbS5lbmFibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgICAvLyBjYW5jZWwsIGlmIGRyYXdpbmcgbW9kZSBpc24ndCBldmVuIGVuYWJsZWRcbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1bmRiaW5kIGNsaWNrIGV2ZW50LCBkb24ndCBjcmVhdGUgYSBtYXJrZXIgb24gY2xpY2sgYW55bW9yZVxuICAgICAgICB0aGlzLl9tYXAub2ZmKCdjbGljaycsIHRoaXMuX2NyZWF0ZU1hcmtlciwgdGhpcyk7XG5cbiAgICAgICAgLy8gcmVtb3ZlIGhpbnQgbWFya2VyXG4gICAgICAgIHRoaXMuX2hpbnRNYXJrZXIucmVtb3ZlKCk7XG5cbiAgICAgICAgLy8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVyIHRvIHN5bmMgaGludCBtYXJrZXJcbiAgICAgICAgdGhpcy5fbWFwLm9mZignbW91c2Vtb3ZlJywgdGhpcy5fc3luY0hpbnRNYXJrZXIsIHRoaXMpO1xuXG4gICAgICAgIC8vIGRpc2FibGUgZHJhZ2dpbmcgYW5kIHJlbW92aW5nIGZvciBhbGwgbWFya2Vyc1xuICAgICAgICB0aGlzLl9tYXAuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgaWYgKGxheWVyIGluc3RhbmNlb2YgTC5NYXJrZXIgJiYgbGF5ZXIucG0gJiYgIWxheWVyLl9wbVRlbXBMYXllcikge1xuICAgICAgICAgICAgICAgIGxheWVyLnBtLmRpc2FibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZmlyZSBkcmF3ZW5kIGV2ZW50XG4gICAgICAgIHRoaXMuX21hcC5maXJlKCdwbTpkcmF3ZW5kJywgeyBzaGFwZTogdGhpcy5fc2hhcGUgfSk7XG5cbiAgICAgICAgLy8gdG9nZ2xlIHRoZSBkcmF3IGJ1dHRvbiBvZiB0aGUgVG9vbGJhciBpbiBjYXNlIGRyYXdpbmcgbW9kZSBnb3QgZGlzYWJsZWQgd2l0aG91dCB0aGUgYnV0dG9uXG4gICAgICAgIHRoaXMuX21hcC5wbS5Ub29sYmFyLnRvZ2dsZUJ1dHRvbih0aGlzLnRvb2xiYXJCdXR0b25OYW1lLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gY2hhbmdlIGVuYWJsZWQgc3RhdGVcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZW5hYmxlZDogZnVuY3Rpb24gZW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZWQ7XG4gICAgfSxcbiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2NyZWF0ZU1hcmtlcjogZnVuY3Rpb24gX2NyZWF0ZU1hcmtlcihlKSB7XG4gICAgICAgIGlmICghZS5sYXRsbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFzc2lnbiB0aGUgY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2sgdG8gdGhlIGhpbnRNYXJrZXIsIHRoYXQncyBuZWNlc3NhcnkgZm9yXG4gICAgICAgIC8vIG1vYmlsZSB3aGVyZSB0aGUgbWFya2VyIGNhbid0IGZvbGxvdyBhIGN1cnNvclxuICAgICAgICBpZiAoIXRoaXMuX2hpbnRNYXJrZXIuX3NuYXBwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2hpbnRNYXJrZXIuc2V0TGF0TG5nKGUubGF0bG5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCBjb29yZGluYXRlIGZvciBuZXcgdmVydGV4IGJ5IGhpbnRNYXJrZXIgKGN1cnNvciBtYXJrZXIpXG4gICAgICAgIHZhciBsYXRsbmcgPSB0aGlzLl9oaW50TWFya2VyLmdldExhdExuZygpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBtYXJrZXJcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBMLk1hcmtlcihsYXRsbmcsIHRoaXMub3B0aW9ucy5tYXJrZXJTdHlsZSk7XG5cbiAgICAgICAgLy8gYWRkIG1hcmtlciB0byB0aGUgbWFwXG4gICAgICAgIG1hcmtlci5hZGRUbyh0aGlzLl9tYXApO1xuXG4gICAgICAgIC8vIGVuYWJsZSBlZGl0aW5nIGZvciB0aGUgbWFya2VyXG4gICAgICAgIG1hcmtlci5wbS5lbmFibGUoKTtcblxuICAgICAgICAvLyBmaXJlIHRoZSBwbTpjcmVhdGUgZXZlbnQgYW5kIHBhc3Mgc2hhcGUgYW5kIG1hcmtlclxuICAgICAgICB0aGlzLl9tYXAuZmlyZSgncG06Y3JlYXRlJywge1xuICAgICAgICAgICAgc2hhcGU6IHRoaXMuX3NoYXBlLFxuICAgICAgICAgICAgbWFya2VyOiBtYXJrZXIsIC8vIERFUFJFQ0FURURcbiAgICAgICAgICAgIGxheWVyOiBtYXJrZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY2xlYW51cFNuYXBwaW5nKCk7XG4gICAgfSxcbiAgICBfc3luY0hpbnRNYXJrZXI6IGZ1bmN0aW9uIF9zeW5jSGludE1hcmtlcihlKSB7XG4gICAgICAgIC8vIG1vdmUgdGhlIGN1cnNvciBtYXJrZXJcbiAgICAgICAgdGhpcy5faGludE1hcmtlci5zZXRMYXRMbmcoZS5sYXRsbmcpO1xuXG4gICAgICAgIC8vIGlmIHNuYXBwaW5nIGlzIGVuYWJsZWQsIGRvIGl0XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc25hcHBhYmxlKSB7XG4gICAgICAgICAgICB2YXIgZmFrZURyYWdFdmVudCA9IGU7XG4gICAgICAgICAgICBmYWtlRHJhZ0V2ZW50LnRhcmdldCA9IHRoaXMuX2hpbnRNYXJrZXI7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVTbmFwcGluZyhmYWtlRHJhZ0V2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL0RyYXcvTC5QTS5EcmF3Lk1hcmtlci5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _kinks = __webpack_require__(6);\n\nvar _kinks2 = _interopRequireDefault(_kinks);\n\nvar _LPM = __webpack_require__(0);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Line = _LPM2.default.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Line';\n        this.toolbarButtonName = 'drawPolyline';\n        this._doesSelfIntersect = false;\n    },\n    enable: function enable(options) {\n        L.Util.setOptions(this, options);\n\n        // fallback option for finishOnDoubleClick\n        // TODO: remove in a later release\n        if (this.options.finishOnDoubleClick && !this.options.finishOn) {\n            this.options.finishOn = 'dblclick';\n        }\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup._pmTempLayer = true;\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._layer = L.polyline([], this.options.templineStyle);\n        this._layer._pmTempLayer = true;\n        this._layerGroup.addLayer(this._layer);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n\n        // this is the hintmarker on the mouse cursor\n        this._hintMarker = L.marker(this._map.getCenter(), {\n            icon: L.divIcon({ className: 'marker-icon cursor-marker' })\n        });\n        this._hintMarker._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintMarker);\n\n        // show the hintmarker if the option is set\n        if (this.options.cursorMarker) {\n            L.DomUtil.addClass(this._hintMarker._icon, 'visible');\n        }\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createVertex, this);\n\n        // finish on layer event\n        // #http://leafletjs.com/reference-1.2.0.html#interactive-layer-click\n        if (this.options.finishOn) {\n            this._map.on(this.options.finishOn, this._finishShape, this);\n        }\n\n        // prevent zoom on double click if finishOn is === dblclick\n        if (this.options.finishOn === 'dblclick') {\n            this.tempMapDoubleClickZoomState = this._map.doubleClickZoom._enabled;\n\n            if (this.tempMapDoubleClickZoomState) {\n                this._map.doubleClickZoom.disable();\n            }\n        }\n\n        // sync hint marker with mouse cursor\n        this._map.on('mousemove', this._syncHintMarker, this);\n\n        // sync the hintline with hint marker\n        this._hintMarker.on('move', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape, workingLayer: this._layer });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // an array used in the snapping mixin.\n        // TODO: think about moving this somewhere else?\n        this._otherSnapLayers = [];\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createVertex, this);\n        this._map.off('mousemove', this._syncHintMarker, this);\n        if (this.options.finishOn) {\n            this._map.off(this.options.finishOn, this._finishShape, this);\n        }\n\n        if (this.tempMapDoubleClickZoomState) {\n            this._map.doubleClickZoom.enable();\n        }\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n\n        // cleanup snapping\n        if (this.options.snappable) {\n            this._cleanupSnapping();\n        }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    hasSelfIntersection: function hasSelfIntersection() {\n        // check for self intersection of the layer and return true/false\n        var selfIntersection = (0, _kinks2.default)(this._layer.toGeoJSON());\n        return selfIntersection.features.length > 0;\n    },\n    _syncHintLine: function _syncHintLine() {\n        var polyPoints = this._layer.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n\n            // set coords for hintline from marker to last vertex of drawin polyline\n            this._hintline.setLatLngs([lastPolygonPoint, this._hintMarker.getLatLng()]);\n        }\n    },\n    _syncHintMarker: function _syncHintMarker(e) {\n        // move the cursor marker\n        this._hintMarker.setLatLng(e.latlng);\n\n        // if snapping is enabled, do it\n        if (this.options.snappable) {\n            var fakeDragEvent = e;\n            fakeDragEvent.target = this._hintMarker;\n            this._handleSnapping(fakeDragEvent);\n        }\n\n        // if self-intersection is forbidden, handle it\n        if (!this.options.allowSelfIntersection) {\n            this._handleSelfIntersection();\n        }\n    },\n    _handleSelfIntersection: function _handleSelfIntersection() {\n        // ok we need to check the self intersection here\n        // problem: during draw, the marker on the cursor is not yet part\n        // of the layer. So we need to clone the layer, add the\n        // potential new vertex (cursor markers latlngs) and check the self\n        // intersection on the clone. Phew... - let's do it 💪\n\n        // clone layer (polyline is enough, even when it's a polygon)\n        var clone = L.polyline(this._layer.getLatLngs());\n\n        // add the vertex\n        clone.addLatLng(this._hintMarker.getLatLng());\n\n        // check the self intersection\n        var selfIntersection = (0, _kinks2.default)(clone.toGeoJSON());\n        this._doesSelfIntersect = selfIntersection.features.length > 0;\n\n        // change the style based on self intersection\n        if (this._doesSelfIntersect) {\n            this._hintline.setStyle({\n                color: 'red'\n            });\n        } else {\n            this._hintline.setStyle({\n                color: '#3388ff'\n            });\n        }\n    },\n    _createVertex: function _createVertex(e) {\n        if (!this.options.allowSelfIntersection && this._doesSelfIntersect) {\n            return;\n        }\n\n        // assign the coordinate of the click to the hintMarker, that's necessary for\n        // mobile where the marker can't follow a cursor\n        if (!this._hintMarker._snapped) {\n            this._hintMarker.setLatLng(e.latlng);\n        }\n\n        // get coordinate for new vertex by hintMarker (cursor marker)\n        var latlng = this._hintMarker.getLatLng();\n\n        // check if the first and this vertex have the same latlng\n        if (latlng.equals(this._layer.getLatLngs()[0])) {\n            // yes? finish the polygon\n            this._finishShape(e);\n\n            // \"why?\", you ask? Because this happens when we snap the last vertex to the first one\n            // and then click without hitting the last marker. Click happens on the map\n            // in 99% of cases it's because the user wants to finish the polygon. So...\n            return;\n        }\n\n        // is this the first point?\n        var first = this._layer.getLatLngs().length === 0;\n\n        this._layer.addLatLng(latlng);\n        var newMarker = this._createMarker(latlng, first);\n\n        this._hintline.setLatLngs([latlng, latlng]);\n\n        this._layer.fire('pm:vertexadded', {\n            shape: this._shape,\n            workingLayer: this._layer,\n            marker: newMarker,\n            latlng: latlng\n        });\n    },\n    _finishShape: function _finishShape() {\n        // if self intersection is not allowed, do not finish the shape!\n        if (!this.options.allowSelfIntersection && this._doesSelfIntersect) {\n            return;\n        }\n\n        // get coordinates, create the leaflet shape and add it to the map\n        var coords = this._layer.getLatLngs();\n        var polylineLayer = L.polyline(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polylineLayer\n        });\n\n        if (this.options.snappable) {\n            this._cleanupSnapping();\n        }\n    },\n    _createMarker: function _createMarker(latlng) {\n        // create the new marker\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // a click on any marker finishes this shape\n        marker.on('click', this._finishShape, this);\n\n        return marker;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(0);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Poly = _LPM2.default.Line.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    _finishShape: function _finishShape() {\n        // if self intersection is not allowed, do not finish the shape!\n        if (!this.options.allowSelfIntersection && this._doesSelfIntersect) {\n            return;\n        }\n\n        // get coordinates, create the leaflet shape and add it to the map\n        var coords = this._layer.getLatLngs();\n        var polygonLayer = L.polygon(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n\n        // clean up snapping states\n        this._cleanupSnapping();\n\n        // remove the first vertex from \"other snapping layers\"\n        this._otherSnapLayers.splice(this._tempSnapLayerIndex, 1);\n        delete this._tempSnapLayerIndex;\n    },\n    _createMarker: function _createMarker(latlng, first) {\n        // create the new marker\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        // mark this marker as temporary\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // if the first marker gets clicked again, finish this shape\n        if (first) {\n            marker.on('click', this._finishShape, this);\n\n            // add the first vertex to \"other snapping layers\" so the polygon is easier to finish\n            this._tempSnapLayerIndex = this._otherSnapLayers.push(marker) - 1;\n\n            if (this.options.snappable) {\n                this._cleanupSnapping();\n            }\n        }\n\n        return marker;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvRHJhdy9MLlBNLkRyYXcuUG9seS5qcz8zMDYyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9MUE0gPSByZXF1aXJlKCcuL0wuUE0uRHJhdycpO1xuXG52YXIgX0xQTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MUE0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5fTFBNMi5kZWZhdWx0LlBvbHkgPSBfTFBNMi5kZWZhdWx0LkxpbmUuZXh0ZW5kKHtcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiBpbml0aWFsaXplKG1hcCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX3NoYXBlID0gJ1BvbHknO1xuICAgICAgICB0aGlzLnRvb2xiYXJCdXR0b25OYW1lID0gJ2RyYXdQb2x5Z29uJztcbiAgICB9LFxuICAgIF9maW5pc2hTaGFwZTogZnVuY3Rpb24gX2ZpbmlzaFNoYXBlKCkge1xuICAgICAgICAvLyBpZiBzZWxmIGludGVyc2VjdGlvbiBpcyBub3QgYWxsb3dlZCwgZG8gbm90IGZpbmlzaCB0aGUgc2hhcGUhXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFsbG93U2VsZkludGVyc2VjdGlvbiAmJiB0aGlzLl9kb2VzU2VsZkludGVyc2VjdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2V0IGNvb3JkaW5hdGVzLCBjcmVhdGUgdGhlIGxlYWZsZXQgc2hhcGUgYW5kIGFkZCBpdCB0byB0aGUgbWFwXG4gICAgICAgIHZhciBjb29yZHMgPSB0aGlzLl9sYXllci5nZXRMYXRMbmdzKCk7XG4gICAgICAgIHZhciBwb2x5Z29uTGF5ZXIgPSBMLnBvbHlnb24oY29vcmRzLCB0aGlzLm9wdGlvbnMucGF0aE9wdGlvbnMpLmFkZFRvKHRoaXMuX21hcCk7XG5cbiAgICAgICAgLy8gZGlzYWJsZSBkcmF3aW5nXG4gICAgICAgIHRoaXMuZGlzYWJsZSgpO1xuXG4gICAgICAgIC8vIGZpcmUgdGhlIHBtOmNyZWF0ZSBldmVudCBhbmQgcGFzcyBzaGFwZSBhbmQgbGF5ZXJcbiAgICAgICAgdGhpcy5fbWFwLmZpcmUoJ3BtOmNyZWF0ZScsIHtcbiAgICAgICAgICAgIHNoYXBlOiB0aGlzLl9zaGFwZSxcbiAgICAgICAgICAgIGxheWVyOiBwb2x5Z29uTGF5ZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2xlYW4gdXAgc25hcHBpbmcgc3RhdGVzXG4gICAgICAgIHRoaXMuX2NsZWFudXBTbmFwcGluZygpO1xuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgZmlyc3QgdmVydGV4IGZyb20gXCJvdGhlciBzbmFwcGluZyBsYXllcnNcIlxuICAgICAgICB0aGlzLl9vdGhlclNuYXBMYXllcnMuc3BsaWNlKHRoaXMuX3RlbXBTbmFwTGF5ZXJJbmRleCwgMSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl90ZW1wU25hcExheWVySW5kZXg7XG4gICAgfSxcbiAgICBfY3JlYXRlTWFya2VyOiBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKGxhdGxuZywgZmlyc3QpIHtcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBuZXcgbWFya2VyXG4gICAgICAgIHZhciBtYXJrZXIgPSBuZXcgTC5NYXJrZXIobGF0bG5nLCB7XG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgaWNvbjogTC5kaXZJY29uKHsgY2xhc3NOYW1lOiAnbWFya2VyLWljb24nIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG1hcmsgdGhpcyBtYXJrZXIgYXMgdGVtcG9yYXJ5XG4gICAgICAgIG1hcmtlci5fcG1UZW1wTGF5ZXIgPSB0cnVlO1xuXG4gICAgICAgIC8vIGFkZCBpdCB0byB0aGUgbWFwXG4gICAgICAgIHRoaXMuX2xheWVyR3JvdXAuYWRkTGF5ZXIobWFya2VyKTtcblxuICAgICAgICAvLyBpZiB0aGUgZmlyc3QgbWFya2VyIGdldHMgY2xpY2tlZCBhZ2FpbiwgZmluaXNoIHRoaXMgc2hhcGVcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBtYXJrZXIub24oJ2NsaWNrJywgdGhpcy5fZmluaXNoU2hhcGUsIHRoaXMpO1xuXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGZpcnN0IHZlcnRleCB0byBcIm90aGVyIHNuYXBwaW5nIGxheWVyc1wiIHNvIHRoZSBwb2x5Z29uIGlzIGVhc2llciB0byBmaW5pc2hcbiAgICAgICAgICAgIHRoaXMuX3RlbXBTbmFwTGF5ZXJJbmRleCA9IHRoaXMuX290aGVyU25hcExheWVycy5wdXNoKG1hcmtlcikgLSAxO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNuYXBwYWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFudXBTbmFwcGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9EcmF3L0wuUE0uRHJhdy5Qb2x5LmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(0);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Rectangle = _LPM2.default.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Rectangle';\n        this.toolbarButtonName = 'drawRectangle';\n    },\n    enable: function enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup._pmTempLayer = true;\n        this._layerGroup.addTo(this._map);\n\n        // the rectangle we want to draw\n        this._layer = L.rectangle([[0, 0], [0, 0]], this.options.pathOptions);\n        this._layer._pmTempLayer = true;\n\n        // this is the marker at the origin of the rectangle\n        // this needs to be present, for tracking purposes, but we'll make it invisible if a user doesn't want to see it!\n        this._startMarker = L.marker([0, 0], {\n            icon: L.divIcon({ className: 'marker-icon rect-start-marker' }),\n            draggable: true,\n            zIndexOffset: 100,\n            opacity: this.options.cursorMarker ? 1 : 0\n        });\n        this._startMarker._pmTempLayer = true;\n        this._layerGroup.addLayer(this._startMarker);\n\n        // this is the hintmarker on the mouse cursor\n        this._hintMarker = L.marker([0, 0], {\n            icon: L.divIcon({ className: 'marker-icon cursor-marker' })\n        });\n        this._hintMarker._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintMarker);\n\n        // show the hintmarker if the option is set\n        if (this.options.cursorMarker) {\n            L.DomUtil.addClass(this._hintMarker._icon, 'visible');\n\n            // Add two more matching style markers, if cursor marker is rendered\n            this._styleMarkers = [];\n            for (var i = 0; i < 2; i += 1) {\n                var styleMarker = L.marker([0, 0], {\n                    icon: L.divIcon({ className: 'marker-icon rect-style-marker' }),\n                    draggable: true,\n                    zIndexOffset: 100\n                });\n                styleMarker._pmTempLayer = true;\n                this._layerGroup.addLayer(styleMarker);\n\n                this._styleMarkers.push(styleMarker);\n            }\n        }\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._placeStartingMarkers, this);\n\n        // sync hint marker with mouse cursor\n        this._map.on('mousemove', this._syncHintMarker, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape, workingLayer: this._layer });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // an array used in the snapping mixin.\n        // TODO: think about moving this somewhere else?\n        this._otherSnapLayers = [];\n    },\n    disable: function disable() {\n        // disable drawing mode\n\n        // cancel, if drawing mode isn't event enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._finishShape, this);\n        this._map.off('click', this._placeStartingMarkers, this);\n        this._map.off('mousemove', this._syncHintMarker, this);\n\n        // remove helping layers\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n\n        // cleanup snapping\n        if (this.options.snappable) {\n            this._cleanupSnapping();\n        }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _placeStartingMarkers: function _placeStartingMarkers(e) {\n        // assign the coordinate of the click to the hintMarker, that's necessary for\n        // mobile where the marker can't follow a cursor\n        if (!this._hintMarker._snapped) {\n            this._hintMarker.setLatLng(e.latlng);\n        }\n\n        // get coordinate for new vertex by hintMarker (cursor marker)\n        var latlng = this._hintMarker.getLatLng();\n\n        // show and place start marker\n        L.DomUtil.addClass(this._startMarker._icon, 'visible');\n        this._startMarker.setLatLng(latlng);\n\n        // if we have the other two visibilty markers, show and place them now\n        if (this.options.cursorMarker && this._styleMarkers) {\n            this._styleMarkers.forEach(function (styleMarker) {\n                L.DomUtil.addClass(styleMarker._icon, 'visible');\n                styleMarker.setLatLng(latlng);\n            });\n        }\n\n        this._map.off('click', this._placeStartingMarkers, this);\n        this._map.on('click', this._finishShape, this);\n\n        this._setRectangleOrigin();\n    },\n    _setRectangleOrigin: function _setRectangleOrigin() {\n        var latlng = this._startMarker.getLatLng();\n\n        if (latlng) {\n            // show it first\n            this._layerGroup.addLayer(this._layer);\n\n            this._layer.setLatLngs([latlng, latlng]);\n\n            this._hintMarker.on('move', this._syncRectangleSize, this);\n        }\n    },\n    _syncHintMarker: function _syncHintMarker(e) {\n        // move the cursor marker\n        this._hintMarker.setLatLng(e.latlng);\n\n        // if snapping is enabled, do it\n        if (this.options.snappable) {\n            var fakeDragEvent = e;\n            fakeDragEvent.target = this._hintMarker;\n            this._handleSnapping(fakeDragEvent);\n        }\n    },\n    _syncRectangleSize: function _syncRectangleSize() {\n        var _this = this;\n\n        // Create a box using corners A & B (A = Starting Position, B = Current Mouse Position)\n        var A = this._startMarker.getLatLng();\n        var B = this._hintMarker.getLatLng();\n\n        this._layer.setBounds([A, B]);\n\n        // Add matching style markers, if cursor marker is shown\n        if (this.options.cursorMarker && this._styleMarkers) {\n            var corners = this._findCorners();\n            var unmarkedCorners = [];\n\n            // Find two corners not currently occupied by starting marker and hint marker\n            corners.forEach(function (corner) {\n                if (!corner.equals(_this._startMarker.getLatLng()) && !corner.equals(_this._hintMarker.getLatLng())) {\n                    unmarkedCorners.push(corner);\n                }\n            });\n\n            // Reposition style markers\n            unmarkedCorners.forEach(function (unmarkedCorner, index) {\n                _this._styleMarkers[index].setLatLng(unmarkedCorner);\n            });\n        }\n    },\n    _finishShape: function _finishShape() {\n        // create the final rectangle layer, based on opposite corners A & B\n        var A = this._startMarker.getLatLng();\n        var B = this._hintMarker.getLatLng();\n        var rectangleLayer = L.rectangle([A, B], this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: rectangleLayer\n        });\n    },\n    _findCorners: function _findCorners() {\n        var corners = this._layer.getBounds();\n\n        var northwest = corners.getNorthWest();\n        var northeast = corners.getNorthEast();\n        var southeast = corners.getSouthEast();\n        var southwest = corners.getSouthWest();\n\n        return [northwest, northeast, southeast, southwest];\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(0);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Circle = _LPM2.default.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Circle';\n        this.toolbarButtonName = 'drawCircle';\n    },\n    enable: function enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        this.options.radius = 0;\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup._pmTempLayer = true;\n        this._layerGroup.addTo(this._map);\n\n        // this is the circle we want to draw\n        this._layer = L.circle([0, 0], this.options.templineStyle);\n        this._layer._pmTempLayer = true;\n        this._layerGroup.addLayer(this._layer);\n\n        // this is the marker in the center of the circle\n        this._centerMarker = L.marker([0, 0], {\n            icon: L.divIcon({ className: 'marker-icon' }),\n            draggable: false,\n            zIndexOffset: 100\n        });\n        this._centerMarker._pmTempLayer = true;\n        this._layerGroup.addLayer(this._centerMarker);\n\n        // this is the hintmarker on the mouse cursor\n        this._hintMarker = L.marker([0, 0], {\n            icon: L.divIcon({ className: 'marker-icon cursor-marker' })\n        });\n        this._hintMarker._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintMarker);\n\n        // show the hintmarker if the option is set\n        if (this.options.cursorMarker) {\n            L.DomUtil.addClass(this._hintMarker._icon, 'visible');\n        }\n\n        // this is the hintline from the hint marker to the center marker\n        this._hintline = L.polyline([], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._placeCenterMarker, this);\n\n        // sync hint marker with mouse cursor\n        this._map.on('mousemove', this._syncHintMarker, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape, workingLayer: this._layer });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // an array used in the snapping mixin.\n        // TODO: think about moving this somewhere else?\n        this._otherSnapLayers = [];\n    },\n    disable: function disable() {\n        // disable drawing mode\n\n        // cancel, if drawing mode isn't event enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._finishShape, this);\n        this._map.off('click', this._placeCenterMarker, this);\n        this._map.off('mousemove', this._syncHintMarker, this);\n\n        // remove helping layers\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n\n        // cleanup snapping\n        if (this.options.snappable) {\n            this._cleanupSnapping();\n        }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _syncHintLine: function _syncHintLine() {\n        var latlng = this._centerMarker.getLatLng();\n\n        // set coords for hintline from marker to last vertex of drawin polyline\n        this._hintline.setLatLngs([latlng, this._hintMarker.getLatLng()]);\n    },\n    _syncCircleRadius: function _syncCircleRadius() {\n        var A = this._centerMarker.getLatLng();\n        var B = this._hintMarker.getLatLng();\n\n        var distance = A.distanceTo(B);\n\n        this._layer.setRadius(distance);\n    },\n    _syncHintMarker: function _syncHintMarker(e) {\n        // move the cursor marker\n        this._hintMarker.setLatLng(e.latlng);\n\n        // if snapping is enabled, do it\n        if (this.options.snappable) {\n            var fakeDragEvent = e;\n            fakeDragEvent.target = this._hintMarker;\n            this._handleSnapping(fakeDragEvent);\n        }\n    },\n    _placeCenterMarker: function _placeCenterMarker(e) {\n        // assign the coordinate of the click to the hintMarker, that's necessary for\n        // mobile where the marker can't follow a cursor\n        if (!this._hintMarker._snapped) {\n            this._hintMarker.setLatLng(e.latlng);\n        }\n\n        // get coordinate for new vertex by hintMarker (cursor marker)\n        var latlng = this._hintMarker.getLatLng();\n\n        this._centerMarker.setLatLng(latlng);\n\n        this._map.off('click', this._placeCenterMarker, this);\n        this._map.on('click', this._finishShape, this);\n\n        this._placeCircleCenter();\n    },\n    _placeCircleCenter: function _placeCircleCenter() {\n        var latlng = this._centerMarker.getLatLng();\n\n        if (latlng) {\n            this._layer.setLatLng(latlng);\n\n            // sync the hintline with hint marker\n            this._hintMarker.on('move', this._syncHintLine, this);\n            this._hintMarker.on('move', this._syncCircleRadius, this);\n\n            this._layer.fire('pm:centerplaced', {\n                shape: this._shape,\n                workingLayer: this._layer,\n                latlng: latlng\n            });\n        }\n    },\n    _finishShape: function _finishShape() {\n        // calc the radius\n        var center = this._centerMarker.getLatLng();\n        var cursor = this._hintMarker.getLatLng();\n        var radius = center.distanceTo(cursor);\n\n        // create the final circle layer\n        var circleLayer = L.circle(center, { radius: radius }).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: circleLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng) {\n        // create the new marker\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        return marker;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _intersect = __webpack_require__(21);\n\nvar _intersect2 = _interopRequireDefault(_intersect);\n\nvar _difference = __webpack_require__(24);\n\nvar _difference2 = _interopRequireDefault(_difference);\n\nvar _LPM = __webpack_require__(0);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Cut = _LPM2.default.Poly.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Cut';\n        this.toolbarButtonName = 'cutPolygon';\n    },\n    _cut: function _cut(layer) {\n        var _this = this;\n\n        var all = this._map._layers;\n\n        // find all layers that intersect with `layer`, the just drawn cutting layer\n        var layers = Object.keys(all)\n        // convert object to array\n        .map(function (l) {\n            return all[l];\n        })\n        // only layers handled by leaflet.pm\n        .filter(function (l) {\n            return l.pm;\n        })\n        // only polygons\n        .filter(function (l) {\n            return l instanceof L.Polygon;\n        })\n        // exclude the drawn one\n        .filter(function (l) {\n            return l !== layer;\n        })\n        // only layers with intersections\n        .filter(function (l) {\n            try {\n                return !!(0, _intersect2.default)(layer.toGeoJSON(), l.toGeoJSON());\n            } catch (e) {\n                console.error('You cant cut polygons with self-intersections');\n                return false;\n            }\n        });\n\n        // the resulting layers after the cut\n        var resultingLayers = [];\n\n        // loop through all layers that intersect with the drawn (cutting) layer\n        layers.forEach(function (l) {\n            // find layer difference\n            var diff = (0, _difference2.default)(l.toGeoJSON(), layer.toGeoJSON());\n\n            // if result is a multipolygon, split it into regular polygons\n            // TODO: remove as soon as multipolygons are supported\n            if (diff.geometry.type === 'MultiPolygon') {\n                var geoJSONs = diff.geometry.coordinates.reduce(function (arr, coords) {\n                    arr.push({ type: 'Polygon', coordinates: coords });\n                    return arr;\n                }, []);\n\n                // add new layers to map\n                geoJSONs.forEach(function (g) {\n                    var newL = L.geoJSON(g, l.options);\n                    resultingLayers.push(newL);\n                    newL.addTo(_this._map);\n\n                    // give the new layer the original options\n                    newL.pm.enable(_this.options);\n                    newL.pm.disable();\n                });\n            } else {\n                // add new layer to map\n                var newL = L.geoJSON(diff, l.options).addTo(_this._map);\n                resultingLayers.push(newL);\n                newL.addTo(_this._map);\n\n                // give the new layer the original options\n                newL.pm.enable(_this.options);\n                newL.pm.disable();\n            }\n\n            // fire pm:cut on the cutted layer\n            l.fire('pm:cut', {\n                shape: _this._shape,\n                layer: l,\n                resultingLayers: resultingLayers\n            });\n\n            // fire pm:cut on the map for each cutted layer\n            _this._map.fire('pm:cut', {\n                shape: _this._shape,\n                cuttedLayer: l,\n                resultingLayers: resultingLayers\n            });\n\n            // add templayer prop so pm:remove isn't fired\n            l._pmTempLayer = true;\n            layer._pmTempLayer = true;\n\n            // remove old layer and cutting layer\n            l.remove();\n            layer.remove();\n        });\n    },\n    _finishShape: function _finishShape() {\n        var coords = this._layer.getLatLngs();\n        var polygonLayer = L.polygon(coords, this.options.pathOptions);\n        this._cut(polygonLayer);\n\n        // disable drawing\n        this.disable();\n\n        // clean up snapping states\n        this._cleanupSnapping();\n\n        // remove the first vertex from \"other snapping layers\"\n        this._otherSnapLayers.splice(this._tempSnapLayerIndex, 1);\n        delete this._tempSnapLayerIndex;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvRHJhdy9MLlBNLkRyYXcuQ3V0LmpzPzFiMzUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyc2VjdCA9IHJlcXVpcmUoJ0B0dXJmL2ludGVyc2VjdCcpO1xuXG52YXIgX2ludGVyc2VjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnRlcnNlY3QpO1xuXG52YXIgX2RpZmZlcmVuY2UgPSByZXF1aXJlKCdAdHVyZi9kaWZmZXJlbmNlJyk7XG5cbnZhciBfZGlmZmVyZW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaWZmZXJlbmNlKTtcblxudmFyIF9MUE0gPSByZXF1aXJlKCcuL0wuUE0uRHJhdycpO1xuXG52YXIgX0xQTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MUE0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5fTFBNMi5kZWZhdWx0LkN1dCA9IF9MUE0yLmRlZmF1bHQuUG9seS5leHRlbmQoe1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUobWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fc2hhcGUgPSAnQ3V0JztcbiAgICAgICAgdGhpcy50b29sYmFyQnV0dG9uTmFtZSA9ICdjdXRQb2x5Z29uJztcbiAgICB9LFxuICAgIF9jdXQ6IGZ1bmN0aW9uIF9jdXQobGF5ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgYWxsID0gdGhpcy5fbWFwLl9sYXllcnM7XG5cbiAgICAgICAgLy8gZmluZCBhbGwgbGF5ZXJzIHRoYXQgaW50ZXJzZWN0IHdpdGggYGxheWVyYCwgdGhlIGp1c3QgZHJhd24gY3V0dGluZyBsYXllclxuICAgICAgICB2YXIgbGF5ZXJzID0gT2JqZWN0LmtleXMoYWxsKVxuICAgICAgICAvLyBjb252ZXJ0IG9iamVjdCB0byBhcnJheVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxsW2xdO1xuICAgICAgICB9KVxuICAgICAgICAvLyBvbmx5IGxheWVycyBoYW5kbGVkIGJ5IGxlYWZsZXQucG1cbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgcmV0dXJuIGwucG07XG4gICAgICAgIH0pXG4gICAgICAgIC8vIG9ubHkgcG9seWdvbnNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgcmV0dXJuIGwgaW5zdGFuY2VvZiBMLlBvbHlnb247XG4gICAgICAgIH0pXG4gICAgICAgIC8vIGV4Y2x1ZGUgdGhlIGRyYXduIG9uZVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICByZXR1cm4gbCAhPT0gbGF5ZXI7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIG9ubHkgbGF5ZXJzIHdpdGggaW50ZXJzZWN0aW9uc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhISgwLCBfaW50ZXJzZWN0Mi5kZWZhdWx0KShsYXllci50b0dlb0pTT04oKSwgbC50b0dlb0pTT04oKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignWW91IGNhbnQgY3V0IHBvbHlnb25zIHdpdGggc2VsZi1pbnRlcnNlY3Rpb25zJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0aGUgcmVzdWx0aW5nIGxheWVycyBhZnRlciB0aGUgY3V0XG4gICAgICAgIHZhciByZXN1bHRpbmdMYXllcnMgPSBbXTtcblxuICAgICAgICAvLyBsb29wIHRocm91Z2ggYWxsIGxheWVycyB0aGF0IGludGVyc2VjdCB3aXRoIHRoZSBkcmF3biAoY3V0dGluZykgbGF5ZXJcbiAgICAgICAgbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIC8vIGZpbmQgbGF5ZXIgZGlmZmVyZW5jZVxuICAgICAgICAgICAgdmFyIGRpZmYgPSAoMCwgX2RpZmZlcmVuY2UyLmRlZmF1bHQpKGwudG9HZW9KU09OKCksIGxheWVyLnRvR2VvSlNPTigpKTtcblxuICAgICAgICAgICAgLy8gaWYgcmVzdWx0IGlzIGEgbXVsdGlwb2x5Z29uLCBzcGxpdCBpdCBpbnRvIHJlZ3VsYXIgcG9seWdvbnNcbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSBhcyBzb29uIGFzIG11bHRpcG9seWdvbnMgYXJlIHN1cHBvcnRlZFxuICAgICAgICAgICAgaWYgKGRpZmYuZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2VvSlNPTnMgPSBkaWZmLmdlb21ldHJ5LmNvb3JkaW5hdGVzLnJlZHVjZShmdW5jdGlvbiAoYXJyLCBjb29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goeyB0eXBlOiAnUG9seWdvbicsIGNvb3JkaW5hdGVzOiBjb29yZHMgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgICAgICAgfSwgW10pO1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkIG5ldyBsYXllcnMgdG8gbWFwXG4gICAgICAgICAgICAgICAgZ2VvSlNPTnMuZm9yRWFjaChmdW5jdGlvbiAoZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TCA9IEwuZ2VvSlNPTihnLCBsLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRpbmdMYXllcnMucHVzaChuZXdMKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3TC5hZGRUbyhfdGhpcy5fbWFwKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBnaXZlIHRoZSBuZXcgbGF5ZXIgdGhlIG9yaWdpbmFsIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgbmV3TC5wbS5lbmFibGUoX3RoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0wucG0uZGlzYWJsZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhZGQgbmV3IGxheWVyIHRvIG1hcFxuICAgICAgICAgICAgICAgIHZhciBuZXdMID0gTC5nZW9KU09OKGRpZmYsIGwub3B0aW9ucykuYWRkVG8oX3RoaXMuX21hcCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0aW5nTGF5ZXJzLnB1c2gobmV3TCk7XG4gICAgICAgICAgICAgICAgbmV3TC5hZGRUbyhfdGhpcy5fbWFwKTtcblxuICAgICAgICAgICAgICAgIC8vIGdpdmUgdGhlIG5ldyBsYXllciB0aGUgb3JpZ2luYWwgb3B0aW9uc1xuICAgICAgICAgICAgICAgIG5ld0wucG0uZW5hYmxlKF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIG5ld0wucG0uZGlzYWJsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaXJlIHBtOmN1dCBvbiB0aGUgY3V0dGVkIGxheWVyXG4gICAgICAgICAgICBsLmZpcmUoJ3BtOmN1dCcsIHtcbiAgICAgICAgICAgICAgICBzaGFwZTogX3RoaXMuX3NoYXBlLFxuICAgICAgICAgICAgICAgIGxheWVyOiBsLFxuICAgICAgICAgICAgICAgIHJlc3VsdGluZ0xheWVyczogcmVzdWx0aW5nTGF5ZXJzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gZmlyZSBwbTpjdXQgb24gdGhlIG1hcCBmb3IgZWFjaCBjdXR0ZWQgbGF5ZXJcbiAgICAgICAgICAgIF90aGlzLl9tYXAuZmlyZSgncG06Y3V0Jywge1xuICAgICAgICAgICAgICAgIHNoYXBlOiBfdGhpcy5fc2hhcGUsXG4gICAgICAgICAgICAgICAgY3V0dGVkTGF5ZXI6IGwsXG4gICAgICAgICAgICAgICAgcmVzdWx0aW5nTGF5ZXJzOiByZXN1bHRpbmdMYXllcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhZGQgdGVtcGxheWVyIHByb3Agc28gcG06cmVtb3ZlIGlzbid0IGZpcmVkXG4gICAgICAgICAgICBsLl9wbVRlbXBMYXllciA9IHRydWU7XG4gICAgICAgICAgICBsYXllci5fcG1UZW1wTGF5ZXIgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkIGxheWVyIGFuZCBjdXR0aW5nIGxheWVyXG4gICAgICAgICAgICBsLnJlbW92ZSgpO1xuICAgICAgICAgICAgbGF5ZXIucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgX2ZpbmlzaFNoYXBlOiBmdW5jdGlvbiBfZmluaXNoU2hhcGUoKSB7XG4gICAgICAgIHZhciBjb29yZHMgPSB0aGlzLl9sYXllci5nZXRMYXRMbmdzKCk7XG4gICAgICAgIHZhciBwb2x5Z29uTGF5ZXIgPSBMLnBvbHlnb24oY29vcmRzLCB0aGlzLm9wdGlvbnMucGF0aE9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9jdXQocG9seWdvbkxheWVyKTtcblxuICAgICAgICAvLyBkaXNhYmxlIGRyYXdpbmdcbiAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG5cbiAgICAgICAgLy8gY2xlYW4gdXAgc25hcHBpbmcgc3RhdGVzXG4gICAgICAgIHRoaXMuX2NsZWFudXBTbmFwcGluZygpO1xuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgZmlyc3QgdmVydGV4IGZyb20gXCJvdGhlciBzbmFwcGluZyBsYXllcnNcIlxuICAgICAgICB0aGlzLl9vdGhlclNuYXBMYXllcnMuc3BsaWNlKHRoaXMuX3RlbXBTbmFwTGF5ZXJJbmRleCwgMSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl90ZW1wU25hcExheWVySW5kZXg7XG4gICAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvRHJhdy9MLlBNLkRyYXcuQ3V0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_turf_jsts__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_turf_jsts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_turf_jsts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__turf_truncate__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__turf_invariant__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__turf_helpers__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__turf_clean_coords__ = __webpack_require__(23);\n\n\n\n\n\n\n// depend on jsts for now http://bjornharrtell.github.io/jsts/\n/**\n * Takes two {@link Polygon|polygons} and finds their intersection. If they share a border, returns the border; if they don't intersect, returns undefined.\n *\n * @name intersect\n * @param {Feature<Polygon>} poly1 the first polygon\n * @param {Feature<Polygon>} poly2 the second polygon\n * @returns {Feature|null} returns a feature representing the point(s) they share (in case of a {@link Point}  or {@link MultiPoint}), the borders they share (in case of a {@link LineString} or a {@link MultiLineString}), the area they share (in case of {@link Polygon} or {@link MultiPolygon}). If they do not share any point, returns `null`.\n * @example\n * var poly1 = turf.polygon([[\n *   [-122.801742, 45.48565],\n *   [-122.801742, 45.60491],\n *   [-122.584762, 45.60491],\n *   [-122.584762, 45.48565],\n *   [-122.801742, 45.48565]\n * ]]);\n *\n * var poly2 = turf.polygon([[\n *   [-122.520217, 45.535693],\n *   [-122.64038, 45.553967],\n *   [-122.720031, 45.526554],\n *   [-122.669906, 45.507309],\n *   [-122.723464, 45.446643],\n *   [-122.532577, 45.408574],\n *   [-122.487258, 45.477466],\n *   [-122.520217, 45.535693]\n * ]]);\n *\n * var intersection = turf.intersect(poly1, poly2);\n *\n * //addToMap\n * var addToMap = [poly1, poly2, intersection];\n */\nfunction intersect(poly1, poly2) {\n    var geom1 = Object(__WEBPACK_IMPORTED_MODULE_2__turf_invariant__[\"b\" /* getGeom */])(poly1);\n    var geom2 = Object(__WEBPACK_IMPORTED_MODULE_2__turf_invariant__[\"b\" /* getGeom */])(poly2);\n\n    // Return null if geometry is too narrow in coordinate precision\n    // fixes topology errors with JSTS\n    // https://github.com/Turfjs/turf/issues/463\n    // https://github.com/Turfjs/turf/pull/1004\n    if (Object(__WEBPACK_IMPORTED_MODULE_4__turf_clean_coords__[\"a\" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_1__turf_truncate__[\"a\" /* default */])(geom2, {precision: 4})).coordinates[0].length < 4) return null;\n    if (Object(__WEBPACK_IMPORTED_MODULE_4__turf_clean_coords__[\"a\" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_1__turf_truncate__[\"a\" /* default */])(geom1, {precision: 4})).coordinates[0].length < 4) return null;\n\n    var reader = new __WEBPACK_IMPORTED_MODULE_0_turf_jsts__[\"GeoJSONReader\"]();\n    var a = reader.read(Object(__WEBPACK_IMPORTED_MODULE_1__turf_truncate__[\"a\" /* default */])(geom1));\n    var b = reader.read(Object(__WEBPACK_IMPORTED_MODULE_1__turf_truncate__[\"a\" /* default */])(geom2));\n    var intersection = __WEBPACK_IMPORTED_MODULE_0_turf_jsts__[\"OverlayOp\"].intersection(a, b);\n\n    // https://github.com/Turfjs/turf/issues/951\n    if (intersection.isEmpty()) return null;\n\n    var writer = new __WEBPACK_IMPORTED_MODULE_0_turf_jsts__[\"GeoJSONWriter\"]();\n    var geom = writer.write(intersection);\n    return Object(__WEBPACK_IMPORTED_MODULE_3__turf_helpers__[\"a\" /* feature */])(geom);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (intersect);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvaW50ZXJzZWN0L21haW4ubWpzPzIwYzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2VvSlNPTlJlYWRlciwgR2VvSlNPTldyaXRlciwgT3ZlcmxheU9wIH0gZnJvbSAndHVyZi1qc3RzJztcbmltcG9ydCB0cnVuY2F0ZSBmcm9tICdAdHVyZi90cnVuY2F0ZSc7XG5pbXBvcnQgeyBnZXRHZW9tIH0gZnJvbSAnQHR1cmYvaW52YXJpYW50JztcbmltcG9ydCB7IGZlYXR1cmUgfSBmcm9tICdAdHVyZi9oZWxwZXJzJztcbmltcG9ydCBjbGVhbkNvb3JkcyBmcm9tICdAdHVyZi9jbGVhbi1jb29yZHMnO1xuXG4vLyBkZXBlbmQgb24ganN0cyBmb3Igbm93IGh0dHA6Ly9iam9ybmhhcnJ0ZWxsLmdpdGh1Yi5pby9qc3RzL1xuLyoqXG4gKiBUYWtlcyB0d28ge0BsaW5rIFBvbHlnb258cG9seWdvbnN9IGFuZCBmaW5kcyB0aGVpciBpbnRlcnNlY3Rpb24uIElmIHRoZXkgc2hhcmUgYSBib3JkZXIsIHJldHVybnMgdGhlIGJvcmRlcjsgaWYgdGhleSBkb24ndCBpbnRlcnNlY3QsIHJldHVybnMgdW5kZWZpbmVkLlxuICpcbiAqIEBuYW1lIGludGVyc2VjdFxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb24+fSBwb2x5MSB0aGUgZmlyc3QgcG9seWdvblxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb24+fSBwb2x5MiB0aGUgc2Vjb25kIHBvbHlnb25cbiAqIEByZXR1cm5zIHtGZWF0dXJlfG51bGx9IHJldHVybnMgYSBmZWF0dXJlIHJlcHJlc2VudGluZyB0aGUgcG9pbnQocykgdGhleSBzaGFyZSAoaW4gY2FzZSBvZiBhIHtAbGluayBQb2ludH0gIG9yIHtAbGluayBNdWx0aVBvaW50fSksIHRoZSBib3JkZXJzIHRoZXkgc2hhcmUgKGluIGNhc2Ugb2YgYSB7QGxpbmsgTGluZVN0cmluZ30gb3IgYSB7QGxpbmsgTXVsdGlMaW5lU3RyaW5nfSksIHRoZSBhcmVhIHRoZXkgc2hhcmUgKGluIGNhc2Ugb2Yge0BsaW5rIFBvbHlnb259IG9yIHtAbGluayBNdWx0aVBvbHlnb259KS4gSWYgdGhleSBkbyBub3Qgc2hhcmUgYW55IHBvaW50LCByZXR1cm5zIGBudWxsYC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seTEgPSB0dXJmLnBvbHlnb24oW1tcbiAqICAgWy0xMjIuODAxNzQyLCA0NS40ODU2NV0sXG4gKiAgIFstMTIyLjgwMTc0MiwgNDUuNjA0OTFdLFxuICogICBbLTEyMi41ODQ3NjIsIDQ1LjYwNDkxXSxcbiAqICAgWy0xMjIuNTg0NzYyLCA0NS40ODU2NV0sXG4gKiAgIFstMTIyLjgwMTc0MiwgNDUuNDg1NjVdXG4gKiBdXSk7XG4gKlxuICogdmFyIHBvbHkyID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgIFstMTIyLjUyMDIxNywgNDUuNTM1NjkzXSxcbiAqICAgWy0xMjIuNjQwMzgsIDQ1LjU1Mzk2N10sXG4gKiAgIFstMTIyLjcyMDAzMSwgNDUuNTI2NTU0XSxcbiAqICAgWy0xMjIuNjY5OTA2LCA0NS41MDczMDldLFxuICogICBbLTEyMi43MjM0NjQsIDQ1LjQ0NjY0M10sXG4gKiAgIFstMTIyLjUzMjU3NywgNDUuNDA4NTc0XSxcbiAqICAgWy0xMjIuNDg3MjU4LCA0NS40Nzc0NjZdLFxuICogICBbLTEyMi41MjAyMTcsIDQ1LjUzNTY5M11cbiAqIF1dKTtcbiAqXG4gKiB2YXIgaW50ZXJzZWN0aW9uID0gdHVyZi5pbnRlcnNlY3QocG9seTEsIHBvbHkyKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9seTEsIHBvbHkyLCBpbnRlcnNlY3Rpb25dO1xuICovXG5mdW5jdGlvbiBpbnRlcnNlY3QocG9seTEsIHBvbHkyKSB7XG4gICAgdmFyIGdlb20xID0gZ2V0R2VvbShwb2x5MSk7XG4gICAgdmFyIGdlb20yID0gZ2V0R2VvbShwb2x5Mik7XG5cbiAgICAvLyBSZXR1cm4gbnVsbCBpZiBnZW9tZXRyeSBpcyB0b28gbmFycm93IGluIGNvb3JkaW5hdGUgcHJlY2lzaW9uXG4gICAgLy8gZml4ZXMgdG9wb2xvZ3kgZXJyb3JzIHdpdGggSlNUU1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9UdXJmanMvdHVyZi9pc3N1ZXMvNDYzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1R1cmZqcy90dXJmL3B1bGwvMTAwNFxuICAgIGlmIChjbGVhbkNvb3Jkcyh0cnVuY2F0ZShnZW9tMiwge3ByZWNpc2lvbjogNH0pKS5jb29yZGluYXRlc1swXS5sZW5ndGggPCA0KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoY2xlYW5Db29yZHModHJ1bmNhdGUoZ2VvbTEsIHtwcmVjaXNpb246IDR9KSkuY29vcmRpbmF0ZXNbMF0ubGVuZ3RoIDwgNCkgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgcmVhZGVyID0gbmV3IEdlb0pTT05SZWFkZXIoKTtcbiAgICB2YXIgYSA9IHJlYWRlci5yZWFkKHRydW5jYXRlKGdlb20xKSk7XG4gICAgdmFyIGIgPSByZWFkZXIucmVhZCh0cnVuY2F0ZShnZW9tMikpO1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBPdmVybGF5T3AuaW50ZXJzZWN0aW9uKGEsIGIpO1xuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1R1cmZqcy90dXJmL2lzc3Vlcy85NTFcbiAgICBpZiAoaW50ZXJzZWN0aW9uLmlzRW1wdHkoKSkgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgd3JpdGVyID0gbmV3IEdlb0pTT05Xcml0ZXIoKTtcbiAgICB2YXIgZ2VvbSA9IHdyaXRlci53cml0ZShpbnRlcnNlY3Rpb24pO1xuICAgIHJldHVybiBmZWF0dXJlKGdlb20pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnRlcnNlY3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9pbnRlcnNlY3QvbWFpbi5tanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_meta__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__turf_helpers__ = __webpack_require__(1);\n\n\n\n/**\n * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.\n *\n * @name truncate\n * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] coordinate decimal precision\n * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} layer with truncated geometry\n * @example\n * var point = turf.point([\n *     70.46923055566859,\n *     58.11088890802906,\n *     1508\n * ]);\n * var options = {precision: 3, coordinates: 2};\n * var truncated = turf.truncate(point, options);\n * //=truncated.geometry.coordinates => [70.469, 58.111]\n *\n * //addToMap\n * var addToMap = [truncated];\n */\nfunction truncate(geojson, options) {\n    // Optional parameters\n    options = options || {};\n    if (!Object(__WEBPACK_IMPORTED_MODULE_1__turf_helpers__[\"c\" /* isObject */])(options)) throw new Error('options is invalid');\n    var precision = options.precision;\n    var coordinates = options.coordinates;\n    var mutate = options.mutate;\n\n    // default params\n    precision = (precision === undefined || precision === null || isNaN(precision)) ? 6 : precision;\n    coordinates = (coordinates === undefined || coordinates === null || isNaN(coordinates)) ? 3 : coordinates;\n\n    // validation\n    if (!geojson) throw new Error('<geojson> is required');\n    if (typeof precision !== 'number') throw new Error('<precision> must be a number');\n    if (typeof coordinates !== 'number') throw new Error('<coordinates> must be a number');\n\n    // prevent input mutation\n    if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));\n\n    var factor = Math.pow(10, precision);\n\n    // Truncate Coordinates\n    Object(__WEBPACK_IMPORTED_MODULE_0__turf_meta__[\"a\" /* coordEach */])(geojson, function (coords) {\n        truncateCoords(coords, factor, coordinates);\n    });\n    return geojson;\n}\n\n/**\n * Truncate Coordinates - Mutates coordinates in place\n *\n * @private\n * @param {Array<any>} coords Geometry Coordinates\n * @param {number} factor rounding factor for coordinate decimal precision\n * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)\n * @returns {Array<any>} mutated coordinates\n */\nfunction truncateCoords(coords, factor, coordinates) {\n    // Remove extra coordinates (usually elevation coordinates and more)\n    if (coords.length > coordinates) coords.splice(coordinates, coords.length);\n\n    // Truncate coordinate decimals\n    for (var i = 0; i < coords.length; i++) {\n        coords[i] = Math.round(coords[i] * factor) / factor;\n    }\n    return coords;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (truncate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvdHJ1bmNhdGUvbWFpbi5tanM/NDgwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb29yZEVhY2ggfSBmcm9tICdAdHVyZi9tZXRhJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnQHR1cmYvaGVscGVycyc7XG5cbi8qKlxuICogVGFrZXMgYSBHZW9KU09OIEZlYXR1cmUgb3IgRmVhdHVyZUNvbGxlY3Rpb24gYW5kIHRydW5jYXRlcyB0aGUgcHJlY2lzaW9uIG9mIHRoZSBnZW9tZXRyeS5cbiAqXG4gKiBAbmFtZSB0cnVuY2F0ZVxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIGFueSBHZW9KU09OIEZlYXR1cmUsIEZlYXR1cmVDb2xsZWN0aW9uLCBHZW9tZXRyeSBvciBHZW9tZXRyeUNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5wcmVjaXNpb249Nl0gY29vcmRpbmF0ZSBkZWNpbWFsIHByZWNpc2lvblxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNvb3JkaW5hdGVzPTNdIG1heGltdW0gbnVtYmVyIG9mIGNvb3JkaW5hdGVzIChwcmltYXJseSB1c2VkIHRvIHJlbW92ZSB6IGNvb3JkaW5hdGVzKVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5tdXRhdGU9ZmFsc2VdIGFsbG93cyBHZW9KU09OIGlucHV0IHRvIGJlIG11dGF0ZWQgKHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGluY3JlYXNlIGlmIHRydWUpXG4gKiBAcmV0dXJucyB7R2VvSlNPTn0gbGF5ZXIgd2l0aCB0cnVuY2F0ZWQgZ2VvbWV0cnlcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnQgPSB0dXJmLnBvaW50KFtcbiAqICAgICA3MC40NjkyMzA1NTU2Njg1OSxcbiAqICAgICA1OC4xMTA4ODg5MDgwMjkwNixcbiAqICAgICAxNTA4XG4gKiBdKTtcbiAqIHZhciBvcHRpb25zID0ge3ByZWNpc2lvbjogMywgY29vcmRpbmF0ZXM6IDJ9O1xuICogdmFyIHRydW5jYXRlZCA9IHR1cmYudHJ1bmNhdGUocG9pbnQsIG9wdGlvbnMpO1xuICogLy89dHJ1bmNhdGVkLmdlb21ldHJ5LmNvb3JkaW5hdGVzID0+IFs3MC40NjksIDU4LjExMV1cbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbdHJ1bmNhdGVkXTtcbiAqL1xuZnVuY3Rpb24gdHJ1bmNhdGUoZ2VvanNvbiwgb3B0aW9ucykge1xuICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoIWlzT2JqZWN0KG9wdGlvbnMpKSB0aHJvdyBuZXcgRXJyb3IoJ29wdGlvbnMgaXMgaW52YWxpZCcpO1xuICAgIHZhciBwcmVjaXNpb24gPSBvcHRpb25zLnByZWNpc2lvbjtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvcHRpb25zLmNvb3JkaW5hdGVzO1xuICAgIHZhciBtdXRhdGUgPSBvcHRpb25zLm11dGF0ZTtcblxuICAgIC8vIGRlZmF1bHQgcGFyYW1zXG4gICAgcHJlY2lzaW9uID0gKHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkIHx8IHByZWNpc2lvbiA9PT0gbnVsbCB8fCBpc05hTihwcmVjaXNpb24pKSA/IDYgOiBwcmVjaXNpb247XG4gICAgY29vcmRpbmF0ZXMgPSAoY29vcmRpbmF0ZXMgPT09IHVuZGVmaW5lZCB8fCBjb29yZGluYXRlcyA9PT0gbnVsbCB8fCBpc05hTihjb29yZGluYXRlcykpID8gMyA6IGNvb3JkaW5hdGVzO1xuXG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghZ2VvanNvbikgdGhyb3cgbmV3IEVycm9yKCc8Z2VvanNvbj4gaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAodHlwZW9mIHByZWNpc2lvbiAhPT0gJ251bWJlcicpIHRocm93IG5ldyBFcnJvcignPHByZWNpc2lvbj4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgIGlmICh0eXBlb2YgY29vcmRpbmF0ZXMgIT09ICdudW1iZXInKSB0aHJvdyBuZXcgRXJyb3IoJzxjb29yZGluYXRlcz4gbXVzdCBiZSBhIG51bWJlcicpO1xuXG4gICAgLy8gcHJldmVudCBpbnB1dCBtdXRhdGlvblxuICAgIGlmIChtdXRhdGUgPT09IGZhbHNlIHx8IG11dGF0ZSA9PT0gdW5kZWZpbmVkKSBnZW9qc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnZW9qc29uKSk7XG5cbiAgICB2YXIgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG5cbiAgICAvLyBUcnVuY2F0ZSBDb29yZGluYXRlc1xuICAgIGNvb3JkRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIHRydW5jYXRlQ29vcmRzKGNvb3JkcywgZmFjdG9yLCBjb29yZGluYXRlcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGdlb2pzb247XG59XG5cbi8qKlxuICogVHJ1bmNhdGUgQ29vcmRpbmF0ZXMgLSBNdXRhdGVzIGNvb3JkaW5hdGVzIGluIHBsYWNlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gY29vcmRzIEdlb21ldHJ5IENvb3JkaW5hdGVzXG4gKiBAcGFyYW0ge251bWJlcn0gZmFjdG9yIHJvdW5kaW5nIGZhY3RvciBmb3IgY29vcmRpbmF0ZSBkZWNpbWFsIHByZWNpc2lvblxuICogQHBhcmFtIHtudW1iZXJ9IGNvb3JkaW5hdGVzIG1heGltdW0gbnVtYmVyIG9mIGNvb3JkaW5hdGVzIChwcmltYXJseSB1c2VkIHRvIHJlbW92ZSB6IGNvb3JkaW5hdGVzKVxuICogQHJldHVybnMge0FycmF5PGFueT59IG11dGF0ZWQgY29vcmRpbmF0ZXNcbiAqL1xuZnVuY3Rpb24gdHJ1bmNhdGVDb29yZHMoY29vcmRzLCBmYWN0b3IsIGNvb3JkaW5hdGVzKSB7XG4gICAgLy8gUmVtb3ZlIGV4dHJhIGNvb3JkaW5hdGVzICh1c3VhbGx5IGVsZXZhdGlvbiBjb29yZGluYXRlcyBhbmQgbW9yZSlcbiAgICBpZiAoY29vcmRzLmxlbmd0aCA+IGNvb3JkaW5hdGVzKSBjb29yZHMuc3BsaWNlKGNvb3JkaW5hdGVzLCBjb29yZHMubGVuZ3RoKTtcblxuICAgIC8vIFRydW5jYXRlIGNvb3JkaW5hdGUgZGVjaW1hbHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb29yZHNbaV0gPSBNYXRoLnJvdW5kKGNvb3Jkc1tpXSAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBjb29yZHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRydW5jYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvdHJ1bmNhdGUvbWFpbi5tanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_helpers__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__turf_invariant__ = __webpack_require__(4);\n\n\n\n/**\n * Removes redundant coordinates from any GeoJSON Geometry.\n *\n * @name cleanCoords\n * @param {Geometry|Feature} geojson Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated\n * @returns {Geometry|Feature} the cleaned input Feature/Geometry\n * @example\n * var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\n * var multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n *\n * turf.cleanCoords(line).geometry.coordinates;\n * //= [[0, 0], [0, 10]]\n *\n * turf.cleanCoords(multiPoint).geometry.coordinates;\n * //= [[0, 0], [2, 2]]\n */\nfunction cleanCoords(geojson, options) {\n    // Backwards compatible with v4.0\n    var mutate = (typeof options === 'object') ? options.mutate : options;\n    if (!geojson) throw new Error('geojson is required');\n    var type = Object(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__[\"c\" /* getType */])(geojson);\n\n    // Store new \"clean\" points in this Array\n    var newCoords = [];\n\n    switch (type) {\n    case 'LineString':\n        newCoords = cleanLine(geojson);\n        break;\n    case 'MultiLineString':\n    case 'Polygon':\n        Object(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__[\"a\" /* getCoords */])(geojson).forEach(function (line) {\n            newCoords.push(cleanLine(line));\n        });\n        break;\n    case 'MultiPolygon':\n        Object(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__[\"a\" /* getCoords */])(geojson).forEach(function (polygons) {\n            var polyPoints = [];\n            polygons.forEach(function (ring) {\n                polyPoints.push(cleanLine(ring));\n            });\n            newCoords.push(polyPoints);\n        });\n        break;\n    case 'Point':\n        return geojson;\n    case 'MultiPoint':\n        var existing = {};\n        Object(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__[\"a\" /* getCoords */])(geojson).forEach(function (coord) {\n            var key = coord.join('-');\n            if (!existing.hasOwnProperty(key)) {\n                newCoords.push(coord);\n                existing[key] = true;\n            }\n        });\n        break;\n    default:\n        throw new Error(type + ' geometry not supported');\n    }\n\n    // Support input mutation\n    if (geojson.coordinates) {\n        if (mutate === true) {\n            geojson.coordinates = newCoords;\n            return geojson;\n        }\n        return {type: type, coordinates: newCoords};\n    } else {\n        if (mutate === true) {\n            geojson.geometry.coordinates = newCoords;\n            return geojson;\n        }\n        return Object(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__[\"a\" /* feature */])({type: type, coordinates: newCoords}, geojson.properties, geojson.bbox, geojson.id);\n    }\n}\n\n/**\n * Clean Coords\n *\n * @private\n * @param {Array<number>|LineString} line Line\n * @returns {Array<number>} Cleaned coordinates\n */\nfunction cleanLine(line) {\n    var points = Object(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__[\"a\" /* getCoords */])(line);\n    // handle \"clean\" segment\n    if (points.length === 2 && !equals(points[0], points[1])) return points;\n\n    var prevPoint, point, nextPoint;\n    var newPoints = [];\n    var secondToLast = points.length - 1;\n\n    newPoints.push(points[0]);\n    for (var i = 1; i < secondToLast; i++) {\n        prevPoint = points[i - 1];\n        point = points[i];\n        nextPoint = points[i + 1];\n\n        if (!isPointOnLineSegment(prevPoint, nextPoint, point)) {\n            newPoints.push(point);\n        }\n    }\n    newPoints.push(nextPoint);\n    return newPoints;\n}\n\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Position} pt1 point\n * @param {Position} pt2 point\n * @returns {boolean} true if they are equals\n */\nfunction equals(pt1, pt2) {\n    return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n\n/**\n * Returns if `point` is on the segment between `start` and `end`.\n * Borrowed from `@turf/boolean-point-on-line` to speed up the evaluation (instead of using the module as dependency)\n *\n * @private\n * @param {Position} start coord pair of start of line\n * @param {Position} end coord pair of end of line\n * @param {Position} point coord pair of point to check\n * @returns {boolean} true/false\n */\nfunction isPointOnLineSegment(start, end, point) {\n    var x = point[0], y = point[1];\n    var startX = start[0], startY = start[1];\n    var endX = end[0], endY = end[1];\n\n    var dxc = x - startX;\n    var dyc = y - startY;\n    var dxl = endX - startX;\n    var dyl = endY - startY;\n    var cross = dxc * dyl - dyc * dxl;\n\n    if (cross !== 0) return false;\n    else if (Math.abs(dxl) >= Math.abs(dyl)) return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;\n    else return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (cleanCoords);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvY2xlYW4tY29vcmRzL21haW4ubWpzPzdhNTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmVhdHVyZSB9IGZyb20gJ0B0dXJmL2hlbHBlcnMnO1xuaW1wb3J0IHsgZ2V0Q29vcmRzLCBnZXRUeXBlIH0gZnJvbSAnQHR1cmYvaW52YXJpYW50JztcblxuLyoqXG4gKiBSZW1vdmVzIHJlZHVuZGFudCBjb29yZGluYXRlcyBmcm9tIGFueSBHZW9KU09OIEdlb21ldHJ5LlxuICpcbiAqIEBuYW1lIGNsZWFuQ29vcmRzXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmV9IGdlb2pzb24gRmVhdHVyZSBvciBHZW9tZXRyeVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm11dGF0ZT1mYWxzZV0gYWxsb3dzIEdlb0pTT04gaW5wdXQgdG8gYmUgbXV0YXRlZFxuICogQHJldHVybnMge0dlb21ldHJ5fEZlYXR1cmV9IHRoZSBjbGVhbmVkIGlucHV0IEZlYXR1cmUvR2VvbWV0cnlcbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhbWzAsIDBdLCBbMCwgMl0sIFswLCA1XSwgWzAsIDhdLCBbMCwgOF0sIFswLCAxMF1dKTtcbiAqIHZhciBtdWx0aVBvaW50ID0gdHVyZi5tdWx0aVBvaW50KFtbMCwgMF0sIFswLCAwXSwgWzIsIDJdXSk7XG4gKlxuICogdHVyZi5jbGVhbkNvb3JkcyhsaW5lKS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAqIC8vPSBbWzAsIDBdLCBbMCwgMTBdXVxuICpcbiAqIHR1cmYuY2xlYW5Db29yZHMobXVsdGlQb2ludCkuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gKiAvLz0gW1swLCAwXSwgWzIsIDJdXVxuICovXG5mdW5jdGlvbiBjbGVhbkNvb3JkcyhnZW9qc29uLCBvcHRpb25zKSB7XG4gICAgLy8gQmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCB2NC4wXG4gICAgdmFyIG11dGF0ZSA9ICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpID8gb3B0aW9ucy5tdXRhdGUgOiBvcHRpb25zO1xuICAgIGlmICghZ2VvanNvbikgdGhyb3cgbmV3IEVycm9yKCdnZW9qc29uIGlzIHJlcXVpcmVkJyk7XG4gICAgdmFyIHR5cGUgPSBnZXRUeXBlKGdlb2pzb24pO1xuXG4gICAgLy8gU3RvcmUgbmV3IFwiY2xlYW5cIiBwb2ludHMgaW4gdGhpcyBBcnJheVxuICAgIHZhciBuZXdDb29yZHMgPSBbXTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICBuZXdDb29yZHMgPSBjbGVhbkxpbmUoZ2VvanNvbik7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6XG4gICAgY2FzZSAnUG9seWdvbic6XG4gICAgICAgIGdldENvb3JkcyhnZW9qc29uKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgICAgICBuZXdDb29yZHMucHVzaChjbGVhbkxpbmUobGluZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgZ2V0Q29vcmRzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKHBvbHlnb25zKSB7XG4gICAgICAgICAgICB2YXIgcG9seVBvaW50cyA9IFtdO1xuICAgICAgICAgICAgcG9seWdvbnMuZm9yRWFjaChmdW5jdGlvbiAocmluZykge1xuICAgICAgICAgICAgICAgIHBvbHlQb2ludHMucHVzaChjbGVhbkxpbmUocmluZykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXdDb29yZHMucHVzaChwb2x5UG9pbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICAgIHZhciBleGlzdGluZyA9IHt9O1xuICAgICAgICBnZXRDb29yZHMoZ2VvanNvbikuZm9yRWFjaChmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBjb29yZC5qb2luKCctJyk7XG4gICAgICAgICAgICBpZiAoIWV4aXN0aW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXdDb29yZHMucHVzaChjb29yZCk7XG4gICAgICAgICAgICAgICAgZXhpc3Rpbmdba2V5XSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodHlwZSArICcgZ2VvbWV0cnkgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQgaW5wdXQgbXV0YXRpb25cbiAgICBpZiAoZ2VvanNvbi5jb29yZGluYXRlcykge1xuICAgICAgICBpZiAobXV0YXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBnZW9qc29uLmNvb3JkaW5hdGVzID0gbmV3Q29vcmRzO1xuICAgICAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogbmV3Q29vcmRzfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXV0YXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzID0gbmV3Q29vcmRzO1xuICAgICAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZlYXR1cmUoe3R5cGU6IHR5cGUsIGNvb3JkaW5hdGVzOiBuZXdDb29yZHN9LCBnZW9qc29uLnByb3BlcnRpZXMsIGdlb2pzb24uYmJveCwgZ2VvanNvbi5pZCk7XG4gICAgfVxufVxuXG4vKipcbiAqIENsZWFuIENvb3Jkc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj58TGluZVN0cmluZ30gbGluZSBMaW5lXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gQ2xlYW5lZCBjb29yZGluYXRlc1xuICovXG5mdW5jdGlvbiBjbGVhbkxpbmUobGluZSkge1xuICAgIHZhciBwb2ludHMgPSBnZXRDb29yZHMobGluZSk7XG4gICAgLy8gaGFuZGxlIFwiY2xlYW5cIiBzZWdtZW50XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDIgJiYgIWVxdWFscyhwb2ludHNbMF0sIHBvaW50c1sxXSkpIHJldHVybiBwb2ludHM7XG5cbiAgICB2YXIgcHJldlBvaW50LCBwb2ludCwgbmV4dFBvaW50O1xuICAgIHZhciBuZXdQb2ludHMgPSBbXTtcbiAgICB2YXIgc2Vjb25kVG9MYXN0ID0gcG9pbnRzLmxlbmd0aCAtIDE7XG5cbiAgICBuZXdQb2ludHMucHVzaChwb2ludHNbMF0pO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc2Vjb25kVG9MYXN0OyBpKyspIHtcbiAgICAgICAgcHJldlBvaW50ID0gcG9pbnRzW2kgLSAxXTtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgIG5leHRQb2ludCA9IHBvaW50c1tpICsgMV07XG5cbiAgICAgICAgaWYgKCFpc1BvaW50T25MaW5lU2VnbWVudChwcmV2UG9pbnQsIG5leHRQb2ludCwgcG9pbnQpKSB7XG4gICAgICAgICAgICBuZXdQb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3UG9pbnRzLnB1c2gobmV4dFBvaW50KTtcbiAgICByZXR1cm4gbmV3UG9pbnRzO1xufVxuXG4vKipcbiAqIENvbXBhcmVzIHR3byBwb2ludHMgYW5kIHJldHVybnMgaWYgdGhleSBhcmUgZXF1YWxzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UG9zaXRpb259IHB0MSBwb2ludFxuICogQHBhcmFtIHtQb3NpdGlvbn0gcHQyIHBvaW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGV5IGFyZSBlcXVhbHNcbiAqL1xuZnVuY3Rpb24gZXF1YWxzKHB0MSwgcHQyKSB7XG4gICAgcmV0dXJuIHB0MVswXSA9PT0gcHQyWzBdICYmIHB0MVsxXSA9PT0gcHQyWzFdO1xufVxuXG4vKipcbiAqIFJldHVybnMgaWYgYHBvaW50YCBpcyBvbiB0aGUgc2VnbWVudCBiZXR3ZWVuIGBzdGFydGAgYW5kIGBlbmRgLlxuICogQm9ycm93ZWQgZnJvbSBgQHR1cmYvYm9vbGVhbi1wb2ludC1vbi1saW5lYCB0byBzcGVlZCB1cCB0aGUgZXZhbHVhdGlvbiAoaW5zdGVhZCBvZiB1c2luZyB0aGUgbW9kdWxlIGFzIGRlcGVuZGVuY3kpXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UG9zaXRpb259IHN0YXJ0IGNvb3JkIHBhaXIgb2Ygc3RhcnQgb2YgbGluZVxuICogQHBhcmFtIHtQb3NpdGlvbn0gZW5kIGNvb3JkIHBhaXIgb2YgZW5kIG9mIGxpbmVcbiAqIEBwYXJhbSB7UG9zaXRpb259IHBvaW50IGNvb3JkIHBhaXIgb2YgcG9pbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlL2ZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUG9pbnRPbkxpbmVTZWdtZW50KHN0YXJ0LCBlbmQsIHBvaW50KSB7XG4gICAgdmFyIHggPSBwb2ludFswXSwgeSA9IHBvaW50WzFdO1xuICAgIHZhciBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgdmFyIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XG5cbiAgICB2YXIgZHhjID0geCAtIHN0YXJ0WDtcbiAgICB2YXIgZHljID0geSAtIHN0YXJ0WTtcbiAgICB2YXIgZHhsID0gZW5kWCAtIHN0YXJ0WDtcbiAgICB2YXIgZHlsID0gZW5kWSAtIHN0YXJ0WTtcbiAgICB2YXIgY3Jvc3MgPSBkeGMgKiBkeWwgLSBkeWMgKiBkeGw7XG5cbiAgICBpZiAoY3Jvc3MgIT09IDApIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIGlmIChNYXRoLmFicyhkeGwpID49IE1hdGguYWJzKGR5bCkpIHJldHVybiBkeGwgPiAwID8gc3RhcnRYIDw9IHggJiYgeCA8PSBlbmRYIDogZW5kWCA8PSB4ICYmIHggPD0gc3RhcnRYO1xuICAgIGVsc2UgcmV0dXJuIGR5bCA+IDAgPyBzdGFydFkgPD0geSAmJiB5IDw9IGVuZFkgOiBlbmRZIDw9IHkgJiYgeSA8PSBzdGFydFk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsZWFuQ29vcmRzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvY2xlYW4tY29vcmRzL21haW4ubWpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_turf_jsts__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_turf_jsts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_turf_jsts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__turf_area__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__turf_helpers__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__turf_invariant__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__turf_meta__ = __webpack_require__(3);\n\n\n\n\n\n\n/**\n * Finds the difference between two {@link Polygon|polygons} by clipping the second polygon from the first.\n *\n * @name difference\n * @param {Feature<Polygon|MultiPolygon>} polygon1 input Polygon feature\n * @param {Feature<Polygon|MultiPolygon>} polygon2 Polygon feature to difference from polygon1\n * @returns {Feature<Polygon|MultiPolygon>|null} a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)\n * @example\n * var polygon1 = turf.polygon([[\n *   [128, -26],\n *   [141, -26],\n *   [141, -21],\n *   [128, -21],\n *   [128, -26]\n * ]], {\n *   \"fill\": \"#F00\",\n *   \"fill-opacity\": 0.1\n * });\n * var polygon2 = turf.polygon([[\n *   [126, -28],\n *   [140, -28],\n *   [140, -20],\n *   [126, -20],\n *   [126, -28]\n * ]], {\n *   \"fill\": \"#00F\",\n *   \"fill-opacity\": 0.1\n * });\n *\n * var difference = turf.difference(polygon1, polygon2);\n *\n * //addToMap\n * var addToMap = [polygon1, polygon2, difference];\n */\nfunction difference(polygon1, polygon2) {\n    var geom1 = Object(__WEBPACK_IMPORTED_MODULE_3__turf_invariant__[\"b\" /* getGeom */])(polygon1);\n    var geom2 = Object(__WEBPACK_IMPORTED_MODULE_3__turf_invariant__[\"b\" /* getGeom */])(polygon2);\n    var properties = polygon1.properties || {};\n\n    // Issue #721 - JSTS can't handle empty polygons\n    geom1 = removeEmptyPolygon(geom1);\n    geom2 = removeEmptyPolygon(geom2);\n    if (!geom1) return null;\n    if (!geom2) return Object(__WEBPACK_IMPORTED_MODULE_2__turf_helpers__[\"a\" /* feature */])(geom1, properties);\n\n    // JSTS difference operation\n    var reader = new __WEBPACK_IMPORTED_MODULE_0_turf_jsts__[\"GeoJSONReader\"]();\n    var a = reader.read(geom1);\n    var b = reader.read(geom2);\n    var differenced = __WEBPACK_IMPORTED_MODULE_0_turf_jsts__[\"OverlayOp\"].difference(a, b);\n    if (differenced.isEmpty()) return null;\n    var writer = new __WEBPACK_IMPORTED_MODULE_0_turf_jsts__[\"GeoJSONWriter\"]();\n    var geom = writer.write(differenced);\n\n    return Object(__WEBPACK_IMPORTED_MODULE_2__turf_helpers__[\"a\" /* feature */])(geom, properties);\n}\n\n/**\n * Detect Empty Polygon\n *\n * @private\n * @param {Geometry<Polygon|MultiPolygon>} geom Geometry Object\n * @returns {Geometry<Polygon|MultiPolygon>|null} removed any polygons with no areas\n */\nfunction removeEmptyPolygon(geom) {\n    switch (geom.type) {\n    case 'Polygon':\n        if (Object(__WEBPACK_IMPORTED_MODULE_1__turf_area__[\"a\" /* default */])(geom) > 1) return geom;\n        return null;\n    case 'MultiPolygon':\n        var coordinates = [];\n        Object(__WEBPACK_IMPORTED_MODULE_4__turf_meta__[\"b\" /* flattenEach */])(geom, function (feature$$1) {\n            if (Object(__WEBPACK_IMPORTED_MODULE_1__turf_area__[\"a\" /* default */])(feature$$1) > 1) coordinates.push(feature$$1.geometry.coordinates);\n        });\n        if (coordinates.length) return {type: 'MultiPolygon', coordinates: coordinates};\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (difference);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvZGlmZmVyZW5jZS9tYWluLm1qcz9mZjNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlb0pTT05SZWFkZXIsIEdlb0pTT05Xcml0ZXIsIE92ZXJsYXlPcCB9IGZyb20gJ3R1cmYtanN0cyc7XG5pbXBvcnQgYXJlYSBmcm9tICdAdHVyZi9hcmVhJztcbmltcG9ydCB7IGZlYXR1cmUgfSBmcm9tICdAdHVyZi9oZWxwZXJzJztcbmltcG9ydCB7IGdldEdlb20gfSBmcm9tICdAdHVyZi9pbnZhcmlhbnQnO1xuaW1wb3J0IHsgZmxhdHRlbkVhY2ggfSBmcm9tICdAdHVyZi9tZXRhJztcblxuLyoqXG4gKiBGaW5kcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byB7QGxpbmsgUG9seWdvbnxwb2x5Z29uc30gYnkgY2xpcHBpbmcgdGhlIHNlY29uZCBwb2x5Z29uIGZyb20gdGhlIGZpcnN0LlxuICpcbiAqIEBuYW1lIGRpZmZlcmVuY2VcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IHBvbHlnb24xIGlucHV0IFBvbHlnb24gZmVhdHVyZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb258TXVsdGlQb2x5Z29uPn0gcG9seWdvbjIgUG9seWdvbiBmZWF0dXJlIHRvIGRpZmZlcmVuY2UgZnJvbSBwb2x5Z29uMVxuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbnxNdWx0aVBvbHlnb24+fG51bGx9IGEgUG9seWdvbiBvciBNdWx0aVBvbHlnb24gZmVhdHVyZSBzaG93aW5nIHRoZSBhcmVhIG9mIGBwb2x5Z29uMWAgZXhjbHVkaW5nIHRoZSBhcmVhIG9mIGBwb2x5Z29uMmAgKGlmIGVtcHR5IHJldHVybnMgYG51bGxgKVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uMSA9IHR1cmYucG9seWdvbihbW1xuICogICBbMTI4LCAtMjZdLFxuICogICBbMTQxLCAtMjZdLFxuICogICBbMTQxLCAtMjFdLFxuICogICBbMTI4LCAtMjFdLFxuICogICBbMTI4LCAtMjZdXG4gKiBdXSwge1xuICogICBcImZpbGxcIjogXCIjRjAwXCIsXG4gKiAgIFwiZmlsbC1vcGFjaXR5XCI6IDAuMVxuICogfSk7XG4gKiB2YXIgcG9seWdvbjIgPSB0dXJmLnBvbHlnb24oW1tcbiAqICAgWzEyNiwgLTI4XSxcbiAqICAgWzE0MCwgLTI4XSxcbiAqICAgWzE0MCwgLTIwXSxcbiAqICAgWzEyNiwgLTIwXSxcbiAqICAgWzEyNiwgLTI4XVxuICogXV0sIHtcbiAqICAgXCJmaWxsXCI6IFwiIzAwRlwiLFxuICogICBcImZpbGwtb3BhY2l0eVwiOiAwLjFcbiAqIH0pO1xuICpcbiAqIHZhciBkaWZmZXJlbmNlID0gdHVyZi5kaWZmZXJlbmNlKHBvbHlnb24xLCBwb2x5Z29uMik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvbHlnb24xLCBwb2x5Z29uMiwgZGlmZmVyZW5jZV07XG4gKi9cbmZ1bmN0aW9uIGRpZmZlcmVuY2UocG9seWdvbjEsIHBvbHlnb24yKSB7XG4gICAgdmFyIGdlb20xID0gZ2V0R2VvbShwb2x5Z29uMSk7XG4gICAgdmFyIGdlb20yID0gZ2V0R2VvbShwb2x5Z29uMik7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBwb2x5Z29uMS5wcm9wZXJ0aWVzIHx8IHt9O1xuXG4gICAgLy8gSXNzdWUgIzcyMSAtIEpTVFMgY2FuJ3QgaGFuZGxlIGVtcHR5IHBvbHlnb25zXG4gICAgZ2VvbTEgPSByZW1vdmVFbXB0eVBvbHlnb24oZ2VvbTEpO1xuICAgIGdlb20yID0gcmVtb3ZlRW1wdHlQb2x5Z29uKGdlb20yKTtcbiAgICBpZiAoIWdlb20xKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoIWdlb20yKSByZXR1cm4gZmVhdHVyZShnZW9tMSwgcHJvcGVydGllcyk7XG5cbiAgICAvLyBKU1RTIGRpZmZlcmVuY2Ugb3BlcmF0aW9uXG4gICAgdmFyIHJlYWRlciA9IG5ldyBHZW9KU09OUmVhZGVyKCk7XG4gICAgdmFyIGEgPSByZWFkZXIucmVhZChnZW9tMSk7XG4gICAgdmFyIGIgPSByZWFkZXIucmVhZChnZW9tMik7XG4gICAgdmFyIGRpZmZlcmVuY2VkID0gT3ZlcmxheU9wLmRpZmZlcmVuY2UoYSwgYik7XG4gICAgaWYgKGRpZmZlcmVuY2VkLmlzRW1wdHkoKSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHdyaXRlciA9IG5ldyBHZW9KU09OV3JpdGVyKCk7XG4gICAgdmFyIGdlb20gPSB3cml0ZXIud3JpdGUoZGlmZmVyZW5jZWQpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoZ2VvbSwgcHJvcGVydGllcyk7XG59XG5cbi8qKlxuICogRGV0ZWN0IEVtcHR5IFBvbHlnb25cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtHZW9tZXRyeTxQb2x5Z29ufE11bHRpUG9seWdvbj59IGdlb20gR2VvbWV0cnkgT2JqZWN0XG4gKiBAcmV0dXJucyB7R2VvbWV0cnk8UG9seWdvbnxNdWx0aVBvbHlnb24+fG51bGx9IHJlbW92ZWQgYW55IHBvbHlnb25zIHdpdGggbm8gYXJlYXNcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRW1wdHlQb2x5Z29uKGdlb20pIHtcbiAgICBzd2l0Y2ggKGdlb20udHlwZSkge1xuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICBpZiAoYXJlYShnZW9tKSA+IDEpIHJldHVybiBnZW9tO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlICdNdWx0aVBvbHlnb24nOlxuICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBbXTtcbiAgICAgICAgZmxhdHRlbkVhY2goZ2VvbSwgZnVuY3Rpb24gKGZlYXR1cmUkJDEpIHtcbiAgICAgICAgICAgIGlmIChhcmVhKGZlYXR1cmUkJDEpID4gMSkgY29vcmRpbmF0ZXMucHVzaChmZWF0dXJlJCQxLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGgpIHJldHVybiB7dHlwZTogJ011bHRpUG9seWdvbicsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBkaWZmZXJlbmNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvZGlmZmVyZW5jZS9tYWluLm1qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_meta__ = __webpack_require__(3);\n\n\n/**\n * Takes one or more features and returns their area in square meters.\n *\n * @name area\n * @param {GeoJSON} geojson input GeoJSON feature(s)\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson) {\n    return Object(__WEBPACK_IMPORTED_MODULE_0__turf_meta__[\"c\" /* geomReduce */])(geojson, function (value, geom) {\n        return value + calculateArea(geom);\n    }, 0);\n}\n\nvar RADIUS = 6378137;\n// var FLATTENING_DENOM = 298.257223563;\n// var FLATTENING = 1 / FLATTENING_DENOM;\n// var POLAR_RADIUS = RADIUS * (1 - FLATTENING);\n\n/**\n * Calculate Area\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON\n * @returns {number} area\n */\nfunction calculateArea(geojson) {\n    var area = 0, i;\n    switch (geojson.type) {\n    case 'Polygon':\n        return polygonArea(geojson.coordinates);\n    case 'MultiPolygon':\n        for (i = 0; i < geojson.coordinates.length; i++) {\n            area += polygonArea(geojson.coordinates[i]);\n        }\n        return area;\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n        return 0;\n    case 'GeometryCollection':\n        for (i = 0; i < geojson.geometries.length; i++) {\n            area += calculateArea(geojson.geometries[i]);\n        }\n        return area;\n    }\n}\n\nfunction polygonArea(coords) {\n    var area = 0;\n    if (coords && coords.length > 0) {\n        area += Math.abs(ringArea(coords[0]));\n        for (var i = 1; i < coords.length; i++) {\n            area -= Math.abs(ringArea(coords[i]));\n        }\n    }\n    return area;\n}\n\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords) {\n    var p1;\n    var p2;\n    var p3;\n    var lowerIndex;\n    var middleIndex;\n    var upperIndex;\n    var i;\n    var area = 0;\n    var coordsLength = coords.length;\n\n    if (coordsLength > 2) {\n        for (i = 0; i < coordsLength; i++) {\n            if (i === coordsLength - 2) { // i = N-2\n                lowerIndex = coordsLength - 2;\n                middleIndex = coordsLength - 1;\n                upperIndex = 0;\n            } else if (i === coordsLength - 1) { // i = N-1\n                lowerIndex = coordsLength - 1;\n                middleIndex = 0;\n                upperIndex = 1;\n            } else { // i = 0 to N-3\n                lowerIndex = i;\n                middleIndex = i + 1;\n                upperIndex = i + 2;\n            }\n            p1 = coords[lowerIndex];\n            p2 = coords[middleIndex];\n            p3 = coords[upperIndex];\n            area += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n        }\n\n        area = area * RADIUS * RADIUS / 2;\n    }\n\n    return area;\n}\n\nfunction rad(_) {\n    return _ * Math.PI / 180;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (area);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvYXJlYS9tYWluLm1qcz8yMDkxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlb21SZWR1Y2UgfSBmcm9tICdAdHVyZi9tZXRhJztcblxuLyoqXG4gKiBUYWtlcyBvbmUgb3IgbW9yZSBmZWF0dXJlcyBhbmQgcmV0dXJucyB0aGVpciBhcmVhIGluIHNxdWFyZSBtZXRlcnMuXG4gKlxuICogQG5hbWUgYXJlYVxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIGlucHV0IEdlb0pTT04gZmVhdHVyZShzKVxuICogQHJldHVybnMge251bWJlcn0gYXJlYSBpbiBzcXVhcmUgbWV0ZXJzXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvbHlnb24gPSB0dXJmLnBvbHlnb24oW1tbMTI1LCAtMTVdLCBbMTEzLCAtMjJdLCBbMTU0LCAtMjddLCBbMTQ0LCAtMTVdLCBbMTI1LCAtMTVdXV0pO1xuICpcbiAqIHZhciBhcmVhID0gdHVyZi5hcmVhKHBvbHlnb24pO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5Z29uXVxuICogcG9seWdvbi5wcm9wZXJ0aWVzLmFyZWEgPSBhcmVhXG4gKi9cbmZ1bmN0aW9uIGFyZWEoZ2VvanNvbikge1xuICAgIHJldHVybiBnZW9tUmVkdWNlKGdlb2pzb24sIGZ1bmN0aW9uICh2YWx1ZSwgZ2VvbSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgKyBjYWxjdWxhdGVBcmVhKGdlb20pO1xuICAgIH0sIDApO1xufVxuXG52YXIgUkFESVVTID0gNjM3ODEzNztcbi8vIHZhciBGTEFUVEVOSU5HX0RFTk9NID0gMjk4LjI1NzIyMzU2Mztcbi8vIHZhciBGTEFUVEVOSU5HID0gMSAvIEZMQVRURU5JTkdfREVOT007XG4vLyB2YXIgUE9MQVJfUkFESVVTID0gUkFESVVTICogKDEgLSBGTEFUVEVOSU5HKTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgQXJlYVxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0dlb0pTT059IGdlb2pzb24gR2VvSlNPTlxuICogQHJldHVybnMge251bWJlcn0gYXJlYVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVBcmVhKGdlb2pzb24pIHtcbiAgICB2YXIgYXJlYSA9IDAsIGk7XG4gICAgc3dpdGNoIChnZW9qc29uLnR5cGUpIHtcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgcmV0dXJuIHBvbHlnb25BcmVhKGdlb2pzb24uY29vcmRpbmF0ZXMpO1xuICAgIGNhc2UgJ011bHRpUG9seWdvbic6XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBnZW9qc29uLmNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmVhICs9IHBvbHlnb25BcmVhKGdlb2pzb24uY29vcmRpbmF0ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcmVhO1xuICAgIGNhc2UgJ1BvaW50JzpcbiAgICBjYXNlICdNdWx0aVBvaW50JzpcbiAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxuICAgICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdHZW9tZXRyeUNvbGxlY3Rpb24nOlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvanNvbi5nZW9tZXRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmVhICs9IGNhbGN1bGF0ZUFyZWEoZ2VvanNvbi5nZW9tZXRyaWVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJlYTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBvbHlnb25BcmVhKGNvb3Jkcykge1xuICAgIHZhciBhcmVhID0gMDtcbiAgICBpZiAoY29vcmRzICYmIGNvb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFyZWEgKz0gTWF0aC5hYnMocmluZ0FyZWEoY29vcmRzWzBdKSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmVhIC09IE1hdGguYWJzKHJpbmdBcmVhKGNvb3Jkc1tpXSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcmVhO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBDYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGFyZWEgb2YgdGhlIHBvbHlnb24gd2VyZSBpdCBwcm9qZWN0ZWQgb250byB0aGUgZWFydGguXG4gKiBOb3RlIHRoYXQgdGhpcyBhcmVhIHdpbGwgYmUgcG9zaXRpdmUgaWYgcmluZyBpcyBvcmllbnRlZCBjbG9ja3dpc2UsIG90aGVyd2lzZSBpdCB3aWxsIGJlIG5lZ2F0aXZlLlxuICpcbiAqIFJlZmVyZW5jZTpcbiAqIFJvYmVydC4gRy4gQ2hhbWJlcmxhaW4gYW5kIFdpbGxpYW0gSC4gRHVxdWV0dGUsIFwiU29tZSBBbGdvcml0aG1zIGZvciBQb2x5Z29ucyBvbiBhIFNwaGVyZVwiLCBKUEwgUHVibGljYXRpb24gMDctMDMsIEpldCBQcm9wdWxzaW9uXG4gKiBMYWJvcmF0b3J5LCBQYXNhZGVuYSwgQ0EsIEp1bmUgMjAwNyBodHRwOi8vdHJzLW5ldy5qcGwubmFzYS5nb3YvZHNwYWNlL2hhbmRsZS8yMDE0LzQwNDA5XG4gKlxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRzIFJpbmcgQ29vcmRpbmF0ZXNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhcHByb3hpbWF0ZSBzaWduZWQgZ2VvZGVzaWMgYXJlYSBvZiB0aGUgcG9seWdvbiBpbiBzcXVhcmUgbWV0ZXJzLlxuICovXG5mdW5jdGlvbiByaW5nQXJlYShjb29yZHMpIHtcbiAgICB2YXIgcDE7XG4gICAgdmFyIHAyO1xuICAgIHZhciBwMztcbiAgICB2YXIgbG93ZXJJbmRleDtcbiAgICB2YXIgbWlkZGxlSW5kZXg7XG4gICAgdmFyIHVwcGVySW5kZXg7XG4gICAgdmFyIGk7XG4gICAgdmFyIGFyZWEgPSAwO1xuICAgIHZhciBjb29yZHNMZW5ndGggPSBjb29yZHMubGVuZ3RoO1xuXG4gICAgaWYgKGNvb3Jkc0xlbmd0aCA+IDIpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb3Jkc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gY29vcmRzTGVuZ3RoIC0gMikgeyAvLyBpID0gTi0yXG4gICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IGNvb3Jkc0xlbmd0aCAtIDI7XG4gICAgICAgICAgICAgICAgbWlkZGxlSW5kZXggPSBjb29yZHNMZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSBjb29yZHNMZW5ndGggLSAxKSB7IC8vIGkgPSBOLTFcbiAgICAgICAgICAgICAgICBsb3dlckluZGV4ID0gY29vcmRzTGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgdXBwZXJJbmRleCA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpID0gMCB0byBOLTNcbiAgICAgICAgICAgICAgICBsb3dlckluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSBpICsgMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAxID0gY29vcmRzW2xvd2VySW5kZXhdO1xuICAgICAgICAgICAgcDIgPSBjb29yZHNbbWlkZGxlSW5kZXhdO1xuICAgICAgICAgICAgcDMgPSBjb29yZHNbdXBwZXJJbmRleF07XG4gICAgICAgICAgICBhcmVhICs9IChyYWQocDNbMF0pIC0gcmFkKHAxWzBdKSkgKiBNYXRoLnNpbihyYWQocDJbMV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZWEgPSBhcmVhICogUkFESVVTICogUkFESVVTIC8gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJlYTtcbn1cblxuZnVuY3Rpb24gcmFkKF8pIHtcbiAgICByZXR1cm4gXyAqIE1hdGguUEkgLyAxODA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFyZWE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9hcmVhL21haW4ubWpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar DragMixin = {\n    _initDraggableLayer: function _initDraggableLayer() {\n        // temporary coord variable for delta calculation\n        this._tempDragCoord = null;\n\n        // add CSS class\n        var el = this._layer._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        this._originalMapDragState = this._layer._map.dragging._enabled;\n\n        // can we reliably save the map's draggable state?\n        // (if the mouse up event happens outside the container, then the map can become undraggable)\n        this._safeToCacheDragState = true;\n\n        this._layer.on('mousedown', this._dragMixinOnMouseDown, this);\n    },\n    _dragMixinOnMouseUp: function _dragMixinOnMouseUp() {\n        var _this = this;\n\n        var el = this._layer._path;\n\n        // re-enable map drag\n        if (this._originalMapDragState) {\n            this._layer._map.dragging.enable();\n        }\n\n        // if mouseup event fired, it's safe to cache the map draggable state on the next mouse down\n        this._safeToCacheDragState = true;\n\n        // clear up mousemove event\n        this._layer._map.off('mousemove', this._dragMixinOnMouseMove, this);\n\n        // clear up mouseup event\n        this._layer.off('mouseup', this._dragMixinOnMouseUp, this);\n\n        // if no drag happened, don't do anything\n        if (!this._dragging) {\n            return false;\n        }\n\n        // show markers again\n        this._initMarkers();\n\n        // timeout to prevent click event after drag :-/\n        // TODO: do it better as soon as leaflet has a way to do it better :-)\n        window.setTimeout(function () {\n            // set state\n            _this._dragging = false;\n            L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n            // fire pm:dragend event\n            _this._layer.fire('pm:dragend');\n\n            // fire edit\n            _this._fireEdit();\n        }, 10);\n\n        return true;\n    },\n    _dragMixinOnMouseMove: function _dragMixinOnMouseMove(e) {\n        var el = this._layer._path;\n\n        if (!this._dragging) {\n            // set state\n            this._dragging = true;\n            L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n            // bring it to front to prevent drag interception\n            this._layer.bringToFront();\n\n            // disbale map drag\n            if (this._originalMapDragState) {\n                this._layer._map.dragging.disable();\n            }\n\n            // hide markers\n            this._markerGroup.clearLayers();\n\n            // fire pm:dragstart event\n            this._layer.fire('pm:dragstart');\n        }\n\n        this._onLayerDrag(e);\n    },\n    _dragMixinOnMouseDown: function _dragMixinOnMouseDown(e) {\n        // save current map dragging state\n        if (this._safeToCacheDragState) {\n            this._originalMapDragState = this._layer._map.dragging._enabled;\n\n            // don't cache the state again until another mouse up is registered\n            this._safeToCacheDragState = false;\n        }\n\n        // save for delta calculation\n        this._tempDragCoord = e.latlng;\n\n        this._layer.on('mouseup', this._dragMixinOnMouseUp, this);\n\n        // listen to mousemove on map (instead of polygon),\n        // otherwise fast mouse movements stop the drag\n        this._layer._map.on('mousemove', this._dragMixinOnMouseMove, this);\n    },\n    dragging: function dragging() {\n        return this._dragging;\n    },\n    _onLayerDrag: function _onLayerDrag(e) {\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // move the coordinates by the delta\n        var moveCoords = function moveCoords(coords) {\n            return coords.map(function (currentLatLng) {\n                var c = {\n                    lat: currentLatLng.lat + deltaLatLng.lat,\n                    lng: currentLatLng.lng + deltaLatLng.lng\n                };\n                return c;\n            });\n        };\n\n        // create the new coordinates array\n        var newCoords = void 0;\n\n        if (this.isPolygon()) {\n            newCoords = this._layer._latlngs.map(moveCoords, this);\n        } else {\n            newCoords = moveCoords(this._layer._latlngs);\n        }\n\n        // set new coordinates and redraw\n        this._layer.setLatLngs(newCoords).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._layer.fire('pm:drag');\n    }\n};\n\nexports.default = DragMixin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvTWl4aW5zL0RyYWcuanM/MmZlMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbnZhciBEcmFnTWl4aW4gPSB7XG4gICAgX2luaXREcmFnZ2FibGVMYXllcjogZnVuY3Rpb24gX2luaXREcmFnZ2FibGVMYXllcigpIHtcbiAgICAgICAgLy8gdGVtcG9yYXJ5IGNvb3JkIHZhcmlhYmxlIGZvciBkZWx0YSBjYWxjdWxhdGlvblxuICAgICAgICB0aGlzLl90ZW1wRHJhZ0Nvb3JkID0gbnVsbDtcblxuICAgICAgICAvLyBhZGQgQ1NTIGNsYXNzXG4gICAgICAgIHZhciBlbCA9IHRoaXMuX2xheWVyLl9wYXRoO1xuICAgICAgICBMLkRvbVV0aWwuYWRkQ2xhc3MoZWwsICdsZWFmbGV0LXBtLWRyYWdnYWJsZScpO1xuXG4gICAgICAgIHRoaXMuX29yaWdpbmFsTWFwRHJhZ1N0YXRlID0gdGhpcy5fbGF5ZXIuX21hcC5kcmFnZ2luZy5fZW5hYmxlZDtcblxuICAgICAgICAvLyBjYW4gd2UgcmVsaWFibHkgc2F2ZSB0aGUgbWFwJ3MgZHJhZ2dhYmxlIHN0YXRlP1xuICAgICAgICAvLyAoaWYgdGhlIG1vdXNlIHVwIGV2ZW50IGhhcHBlbnMgb3V0c2lkZSB0aGUgY29udGFpbmVyLCB0aGVuIHRoZSBtYXAgY2FuIGJlY29tZSB1bmRyYWdnYWJsZSlcbiAgICAgICAgdGhpcy5fc2FmZVRvQ2FjaGVEcmFnU3RhdGUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2xheWVyLm9uKCdtb3VzZWRvd24nLCB0aGlzLl9kcmFnTWl4aW5Pbk1vdXNlRG93biwgdGhpcyk7XG4gICAgfSxcbiAgICBfZHJhZ01peGluT25Nb3VzZVVwOiBmdW5jdGlvbiBfZHJhZ01peGluT25Nb3VzZVVwKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBlbCA9IHRoaXMuX2xheWVyLl9wYXRoO1xuXG4gICAgICAgIC8vIHJlLWVuYWJsZSBtYXAgZHJhZ1xuICAgICAgICBpZiAodGhpcy5fb3JpZ2luYWxNYXBEcmFnU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyLl9tYXAuZHJhZ2dpbmcuZW5hYmxlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBtb3VzZXVwIGV2ZW50IGZpcmVkLCBpdCdzIHNhZmUgdG8gY2FjaGUgdGhlIG1hcCBkcmFnZ2FibGUgc3RhdGUgb24gdGhlIG5leHQgbW91c2UgZG93blxuICAgICAgICB0aGlzLl9zYWZlVG9DYWNoZURyYWdTdGF0ZSA9IHRydWU7XG5cbiAgICAgICAgLy8gY2xlYXIgdXAgbW91c2Vtb3ZlIGV2ZW50XG4gICAgICAgIHRoaXMuX2xheWVyLl9tYXAub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLl9kcmFnTWl4aW5Pbk1vdXNlTW92ZSwgdGhpcyk7XG5cbiAgICAgICAgLy8gY2xlYXIgdXAgbW91c2V1cCBldmVudFxuICAgICAgICB0aGlzLl9sYXllci5vZmYoJ21vdXNldXAnLCB0aGlzLl9kcmFnTWl4aW5Pbk1vdXNlVXAsIHRoaXMpO1xuXG4gICAgICAgIC8vIGlmIG5vIGRyYWcgaGFwcGVuZWQsIGRvbid0IGRvIGFueXRoaW5nXG4gICAgICAgIGlmICghdGhpcy5fZHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cgbWFya2VycyBhZ2FpblxuICAgICAgICB0aGlzLl9pbml0TWFya2VycygpO1xuXG4gICAgICAgIC8vIHRpbWVvdXQgdG8gcHJldmVudCBjbGljayBldmVudCBhZnRlciBkcmFnIDotL1xuICAgICAgICAvLyBUT0RPOiBkbyBpdCBiZXR0ZXIgYXMgc29vbiBhcyBsZWFmbGV0IGhhcyBhIHdheSB0byBkbyBpdCBiZXR0ZXIgOi0pXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHNldCBzdGF0ZVxuICAgICAgICAgICAgX3RoaXMuX2RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBMLkRvbVV0aWwucmVtb3ZlQ2xhc3MoZWwsICdsZWFmbGV0LXBtLWRyYWdnaW5nJyk7XG5cbiAgICAgICAgICAgIC8vIGZpcmUgcG06ZHJhZ2VuZCBldmVudFxuICAgICAgICAgICAgX3RoaXMuX2xheWVyLmZpcmUoJ3BtOmRyYWdlbmQnKTtcblxuICAgICAgICAgICAgLy8gZmlyZSBlZGl0XG4gICAgICAgICAgICBfdGhpcy5fZmlyZUVkaXQoKTtcbiAgICAgICAgfSwgMTApO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgX2RyYWdNaXhpbk9uTW91c2VNb3ZlOiBmdW5jdGlvbiBfZHJhZ01peGluT25Nb3VzZU1vdmUoZSkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLl9sYXllci5fcGF0aDtcblxuICAgICAgICBpZiAoIXRoaXMuX2RyYWdnaW5nKSB7XG4gICAgICAgICAgICAvLyBzZXQgc3RhdGVcbiAgICAgICAgICAgIHRoaXMuX2RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIEwuRG9tVXRpbC5hZGRDbGFzcyhlbCwgJ2xlYWZsZXQtcG0tZHJhZ2dpbmcnKTtcblxuICAgICAgICAgICAgLy8gYnJpbmcgaXQgdG8gZnJvbnQgdG8gcHJldmVudCBkcmFnIGludGVyY2VwdGlvblxuICAgICAgICAgICAgdGhpcy5fbGF5ZXIuYnJpbmdUb0Zyb250KCk7XG5cbiAgICAgICAgICAgIC8vIGRpc2JhbGUgbWFwIGRyYWdcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcmlnaW5hbE1hcERyYWdTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xheWVyLl9tYXAuZHJhZ2dpbmcuZGlzYWJsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBoaWRlIG1hcmtlcnNcbiAgICAgICAgICAgIHRoaXMuX21hcmtlckdyb3VwLmNsZWFyTGF5ZXJzKCk7XG5cbiAgICAgICAgICAgIC8vIGZpcmUgcG06ZHJhZ3N0YXJ0IGV2ZW50XG4gICAgICAgICAgICB0aGlzLl9sYXllci5maXJlKCdwbTpkcmFnc3RhcnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29uTGF5ZXJEcmFnKGUpO1xuICAgIH0sXG4gICAgX2RyYWdNaXhpbk9uTW91c2VEb3duOiBmdW5jdGlvbiBfZHJhZ01peGluT25Nb3VzZURvd24oZSkge1xuICAgICAgICAvLyBzYXZlIGN1cnJlbnQgbWFwIGRyYWdnaW5nIHN0YXRlXG4gICAgICAgIGlmICh0aGlzLl9zYWZlVG9DYWNoZURyYWdTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBEcmFnU3RhdGUgPSB0aGlzLl9sYXllci5fbWFwLmRyYWdnaW5nLl9lbmFibGVkO1xuXG4gICAgICAgICAgICAvLyBkb24ndCBjYWNoZSB0aGUgc3RhdGUgYWdhaW4gdW50aWwgYW5vdGhlciBtb3VzZSB1cCBpcyByZWdpc3RlcmVkXG4gICAgICAgICAgICB0aGlzLl9zYWZlVG9DYWNoZURyYWdTdGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2F2ZSBmb3IgZGVsdGEgY2FsY3VsYXRpb25cbiAgICAgICAgdGhpcy5fdGVtcERyYWdDb29yZCA9IGUubGF0bG5nO1xuXG4gICAgICAgIHRoaXMuX2xheWVyLm9uKCdtb3VzZXVwJywgdGhpcy5fZHJhZ01peGluT25Nb3VzZVVwLCB0aGlzKTtcblxuICAgICAgICAvLyBsaXN0ZW4gdG8gbW91c2Vtb3ZlIG9uIG1hcCAoaW5zdGVhZCBvZiBwb2x5Z29uKSxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIGZhc3QgbW91c2UgbW92ZW1lbnRzIHN0b3AgdGhlIGRyYWdcbiAgICAgICAgdGhpcy5fbGF5ZXIuX21hcC5vbignbW91c2Vtb3ZlJywgdGhpcy5fZHJhZ01peGluT25Nb3VzZU1vdmUsIHRoaXMpO1xuICAgIH0sXG4gICAgZHJhZ2dpbmc6IGZ1bmN0aW9uIGRyYWdnaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHJhZ2dpbmc7XG4gICAgfSxcbiAgICBfb25MYXllckRyYWc6IGZ1bmN0aW9uIF9vbkxheWVyRHJhZyhlKSB7XG4gICAgICAgIC8vIGxhdExuZyBvZiBtb3VzZSBldmVudFxuICAgICAgICB2YXIgbGF0bG5nID0gZS5sYXRsbmc7XG5cbiAgICAgICAgLy8gZGVsdGEgY29vcmRzIChob3cgZmFyIHdhcyBkcmFnZ2VkKVxuICAgICAgICB2YXIgZGVsdGFMYXRMbmcgPSB7XG4gICAgICAgICAgICBsYXQ6IGxhdGxuZy5sYXQgLSB0aGlzLl90ZW1wRHJhZ0Nvb3JkLmxhdCxcbiAgICAgICAgICAgIGxuZzogbGF0bG5nLmxuZyAtIHRoaXMuX3RlbXBEcmFnQ29vcmQubG5nXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gbW92ZSB0aGUgY29vcmRpbmF0ZXMgYnkgdGhlIGRlbHRhXG4gICAgICAgIHZhciBtb3ZlQ29vcmRzID0gZnVuY3Rpb24gbW92ZUNvb3Jkcyhjb29yZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBjb29yZHMubWFwKGZ1bmN0aW9uIChjdXJyZW50TGF0TG5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdDogY3VycmVudExhdExuZy5sYXQgKyBkZWx0YUxhdExuZy5sYXQsXG4gICAgICAgICAgICAgICAgICAgIGxuZzogY3VycmVudExhdExuZy5sbmcgKyBkZWx0YUxhdExuZy5sbmdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBuZXcgY29vcmRpbmF0ZXMgYXJyYXlcbiAgICAgICAgdmFyIG5ld0Nvb3JkcyA9IHZvaWQgMDtcblxuICAgICAgICBpZiAodGhpcy5pc1BvbHlnb24oKSkge1xuICAgICAgICAgICAgbmV3Q29vcmRzID0gdGhpcy5fbGF5ZXIuX2xhdGxuZ3MubWFwKG1vdmVDb29yZHMsIHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3Q29vcmRzID0gbW92ZUNvb3Jkcyh0aGlzLl9sYXllci5fbGF0bG5ncyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgbmV3IGNvb3JkaW5hdGVzIGFuZCByZWRyYXdcbiAgICAgICAgdGhpcy5fbGF5ZXIuc2V0TGF0TG5ncyhuZXdDb29yZHMpLnJlZHJhdygpO1xuXG4gICAgICAgIC8vIHNhdmUgY3VycmVudCBsYXRsbmcgZm9yIG5leHQgZGVsdGEgY2FsY3VsYXRpb25cbiAgICAgICAgdGhpcy5fdGVtcERyYWdDb29yZCA9IGxhdGxuZztcblxuICAgICAgICAvLyBmaXJlIHBtOmRyYWdzdGFydCBldmVudFxuICAgICAgICB0aGlzLl9sYXllci5maXJlKCdwbTpkcmFnJyk7XG4gICAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRHJhZ01peGluO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL01peGlucy9EcmFnLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(2);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\n_LPM2.default.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = this.findLayers();\n\n        // init all layers of the group\n        this._layers.forEach(function (layer) {\n            return _this._initLayer(layer);\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n            _this._layers = _this.findLayers();\n\n            // init the newly added layer\n            if (e.layer.pm) {\n                _this._initLayer(e.layer);\n            }\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    findLayers: function findLayers() {\n        // get all layers of the layer group\n        var layers = this._layerGroup.getLayers();\n\n        // filter out layers that don't have leaflet.pm\n        layers = layers.filter(function (layer) {\n            return !!layer.pm;\n        });\n\n        // return them\n        return layers;\n    },\n    _initLayer: function _initLayer(layer) {\n        var _this2 = this;\n\n        // available events\n        var availableEvents = ['pm:edit', 'pm:update', 'pm:remove', 'pm:dragstart', 'pm:drag', 'pm:dragend', 'pm:snap', 'pm:unsnap', 'pm:cut', 'pm:intersect', 'pm:raiseMarkers', 'pm:markerdragend', 'pm:markerdragstart', 'pm:vertexadded', 'pm:vertexremoved', 'pm:centerplaced'];\n\n        // listen to the events of the layers in this group\n        availableEvents.forEach(function (event) {\n            layer.on(event, _this2._fireEvent, _this2);\n        });\n\n        // add reference for the group to each layer inside said group\n        layer.pm._layerGroup = this._layerGroup;\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n        var enabled = this._layers.find(function (layer) {\n            return layer.pm.enabled();\n        });\n        return !!enabled;\n    },\n    dragging: function dragging() {\n        var dragging = this._layers.find(function (layer) {\n            return layer.pm.dragging();\n        });\n        return !!dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvRWRpdC9MLlBNLkVkaXQuTGF5ZXJHcm91cC5qcz9hMWYzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9MUE0gPSByZXF1aXJlKCcuL0wuUE0uRWRpdCcpO1xuXG52YXIgX0xQTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MUE0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBMYXllckdyb3VwIGRvZXNuJ3QgaW5oZXJpdCBmcm9tIEwuUE0uRWRpdCBiZWNhdXNlIGl0J3MganVzdCBjYWxsaW5nIEwuUE0uRWRpdC5Qb2x5XG4vLyAod2hpY2ggaW5oZXJpdHMgZnJvbSBMLlBNLkVkaXQpIGZvciBlYWNoIGxheWVyLFxuLy8gc28gaXQncyBub3QgcmVhbGx5IGEgcGFyZW50IGNsYXNzXG5fTFBNMi5kZWZhdWx0LkxheWVyR3JvdXAgPSBMLkNsYXNzLmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShsYXllckdyb3VwKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fbGF5ZXJHcm91cCA9IGxheWVyR3JvdXA7XG4gICAgICAgIHRoaXMuX2xheWVycyA9IHRoaXMuZmluZExheWVycygpO1xuXG4gICAgICAgIC8vIGluaXQgYWxsIGxheWVycyBvZiB0aGUgZ3JvdXBcbiAgICAgICAgdGhpcy5fbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2luaXRMYXllcihsYXllcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGlmIGEgbmV3IGxheWVyIGlzIGFkZGVkIHRvIHRoZSBncm91cCwgcmVpbml0aWFsaXplXG4gICAgICAgIC8vIFRoaXMgb25seSB3b3JrcyBmb3IgRmVhdHVyZUdyb3Vwcywgbm90IExheWVyR3JvdXBzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFmbGV0L0xlYWZsZXQvaXNzdWVzLzQ4NjFcbiAgICAgICAgdGhpcy5fbGF5ZXJHcm91cC5vbignbGF5ZXJhZGQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMuX2xheWVycyA9IF90aGlzLmZpbmRMYXllcnMoKTtcblxuICAgICAgICAgICAgLy8gaW5pdCB0aGUgbmV3bHkgYWRkZWQgbGF5ZXJcbiAgICAgICAgICAgIGlmIChlLmxheWVyLnBtKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2luaXRMYXllcihlLmxheWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgZWRpdGluZyB3YXMgYWxyZWFkeSBlbmFibGVkIGZvciB0aGlzIGdyb3VwLCBlbmFibGUgaXQgYWdhaW5cbiAgICAgICAgICAgIC8vIHNvIHRoZSBuZXcgbGF5ZXJzIGFyZSBlbmFibGVkXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQucG0uZW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW5hYmxlKF90aGlzLmdldE9wdGlvbnMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZmluZExheWVyczogZnVuY3Rpb24gZmluZExheWVycygpIHtcbiAgICAgICAgLy8gZ2V0IGFsbCBsYXllcnMgb2YgdGhlIGxheWVyIGdyb3VwXG4gICAgICAgIHZhciBsYXllcnMgPSB0aGlzLl9sYXllckdyb3VwLmdldExheWVycygpO1xuXG4gICAgICAgIC8vIGZpbHRlciBvdXQgbGF5ZXJzIHRoYXQgZG9uJ3QgaGF2ZSBsZWFmbGV0LnBtXG4gICAgICAgIGxheWVycyA9IGxheWVycy5maWx0ZXIoZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gISFsYXllci5wbTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoZW1cbiAgICAgICAgcmV0dXJuIGxheWVycztcbiAgICB9LFxuICAgIF9pbml0TGF5ZXI6IGZ1bmN0aW9uIF9pbml0TGF5ZXIobGF5ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gYXZhaWxhYmxlIGV2ZW50c1xuICAgICAgICB2YXIgYXZhaWxhYmxlRXZlbnRzID0gWydwbTplZGl0JywgJ3BtOnVwZGF0ZScsICdwbTpyZW1vdmUnLCAncG06ZHJhZ3N0YXJ0JywgJ3BtOmRyYWcnLCAncG06ZHJhZ2VuZCcsICdwbTpzbmFwJywgJ3BtOnVuc25hcCcsICdwbTpjdXQnLCAncG06aW50ZXJzZWN0JywgJ3BtOnJhaXNlTWFya2VycycsICdwbTptYXJrZXJkcmFnZW5kJywgJ3BtOm1hcmtlcmRyYWdzdGFydCcsICdwbTp2ZXJ0ZXhhZGRlZCcsICdwbTp2ZXJ0ZXhyZW1vdmVkJywgJ3BtOmNlbnRlcnBsYWNlZCddO1xuXG4gICAgICAgIC8vIGxpc3RlbiB0byB0aGUgZXZlbnRzIG9mIHRoZSBsYXllcnMgaW4gdGhpcyBncm91cFxuICAgICAgICBhdmFpbGFibGVFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGxheWVyLm9uKGV2ZW50LCBfdGhpczIuX2ZpcmVFdmVudCwgX3RoaXMyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIHJlZmVyZW5jZSBmb3IgdGhlIGdyb3VwIHRvIGVhY2ggbGF5ZXIgaW5zaWRlIHNhaWQgZ3JvdXBcbiAgICAgICAgbGF5ZXIucG0uX2xheWVyR3JvdXAgPSB0aGlzLl9sYXllckdyb3VwO1xuICAgIH0sXG4gICAgX2ZpcmVFdmVudDogZnVuY3Rpb24gX2ZpcmVFdmVudChlKSB7XG4gICAgICAgIHRoaXMuX2xheWVyR3JvdXAuZmlyZUV2ZW50KGUudHlwZSwgZSk7XG4gICAgfSxcbiAgICB0b2dnbGVFZGl0OiBmdW5jdGlvbiB0b2dnbGVFZGl0KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2xheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgbGF5ZXIucG0udG9nZ2xlRWRpdChvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZShvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIGxheWVyLnBtLmVuYWJsZShvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgIGxheWVyLnBtLmRpc2FibGUoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBlbmFibGVkOiBmdW5jdGlvbiBlbmFibGVkKCkge1xuICAgICAgICB2YXIgZW5hYmxlZCA9IHRoaXMuX2xheWVycy5maW5kKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgcmV0dXJuIGxheWVyLnBtLmVuYWJsZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAhIWVuYWJsZWQ7XG4gICAgfSxcbiAgICBkcmFnZ2luZzogZnVuY3Rpb24gZHJhZ2dpbmcoKSB7XG4gICAgICAgIHZhciBkcmFnZ2luZyA9IHRoaXMuX2xheWVycy5maW5kKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgcmV0dXJuIGxheWVyLnBtLmRyYWdnaW5nKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gISFkcmFnZ2luZztcbiAgICB9LFxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL0VkaXQvTC5QTS5FZGl0LkxheWVyR3JvdXAuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(2);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Marker = _LPM2.default.extend({\n    initialize: function initialize(layer) {\n        // layer is a marker in this case :-)\n        this._layer = layer;\n        this._enabled = false;\n\n        // register dragend event e.g. to fire pm:edit\n        this._layer.on('dragend', this._onDragEnd, this);\n    },\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n    enable: function enable() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            draggable: true,\n            snappable: true\n        };\n\n        this.options = options;\n\n        this._map = this._layer._map;\n\n        if (this.enabled()) {\n            return;\n        }\n        this._enabled = true;\n\n        // enable removal for the marker\n        this._layer.on('contextmenu', this._removeMarker, this);\n\n        // enable dragging and removal for the marker\n        if (this.options.draggable) {\n            this._layer.dragging.enable();\n        }\n\n        // enable snapping\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    disable: function disable() {\n        this._enabled = false;\n\n        // disable dragging and removal for the marker\n        this._layer.dragging.disable();\n        this._layer.off('contextmenu', this._removeMarker, this);\n\n        if (this._layerEdited) {\n            this._layer.fire('pm:update', {});\n        }\n        this._layerEdited = false;\n    },\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        marker.remove();\n        marker.fire('pm:remove');\n    },\n    _onDragEnd: function _onDragEnd(e) {\n        var marker = e.target;\n\n        // fire the pm:edit event and pass shape and marker\n        marker.fire('pm:edit');\n        this._layerEdited = true;\n    },\n\n\n    // overwrite initSnappableMarkers from Snapping.js Mixin\n    _initSnappableMarkers: function _initSnappableMarkers() {\n        var marker = this._layer;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        marker.off('drag', this._handleSnapping, this);\n        marker.on('drag', this._handleSnapping, this);\n\n        marker.off('dragend', this._cleanupSnapping, this);\n        marker.on('dragend', this._cleanupSnapping, this);\n\n        marker.off('pm:dragstart', this._unsnap, this);\n        marker.on('pm:dragstart', this._unsnap, this);\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvRWRpdC9MLlBNLkVkaXQuTWFya2VyLmpzP2QwOTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX0xQTSA9IHJlcXVpcmUoJy4vTC5QTS5FZGl0Jyk7XG5cbnZhciBfTFBNMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xQTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbl9MUE0yLmRlZmF1bHQuTWFya2VyID0gX0xQTTIuZGVmYXVsdC5leHRlbmQoe1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUobGF5ZXIpIHtcbiAgICAgICAgLy8gbGF5ZXIgaXMgYSBtYXJrZXIgaW4gdGhpcyBjYXNlIDotKVxuICAgICAgICB0aGlzLl9sYXllciA9IGxheWVyO1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gcmVnaXN0ZXIgZHJhZ2VuZCBldmVudCBlLmcuIHRvIGZpcmUgcG06ZWRpdFxuICAgICAgICB0aGlzLl9sYXllci5vbignZHJhZ2VuZCcsIHRoaXMuX29uRHJhZ0VuZCwgdGhpcyk7XG4gICAgfSxcbiAgICB0b2dnbGVFZGl0OiBmdW5jdGlvbiB0b2dnbGVFZGl0KG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUob3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7XG4gICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICBzbmFwcGFibGU6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIHRoaXMuX21hcCA9IHRoaXMuX2xheWVyLl9tYXA7XG5cbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gZW5hYmxlIHJlbW92YWwgZm9yIHRoZSBtYXJrZXJcbiAgICAgICAgdGhpcy5fbGF5ZXIub24oJ2NvbnRleHRtZW51JywgdGhpcy5fcmVtb3ZlTWFya2VyLCB0aGlzKTtcblxuICAgICAgICAvLyBlbmFibGUgZHJhZ2dpbmcgYW5kIHJlbW92YWwgZm9yIHRoZSBtYXJrZXJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcmFnZ2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyLmRyYWdnaW5nLmVuYWJsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5hYmxlIHNuYXBwaW5nXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc25hcHBhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0U25hcHBhYmxlTWFya2VycygpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBlbmFibGVkOiBmdW5jdGlvbiBlbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBkaXNhYmxlIGRyYWdnaW5nIGFuZCByZW1vdmFsIGZvciB0aGUgbWFya2VyXG4gICAgICAgIHRoaXMuX2xheWVyLmRyYWdnaW5nLmRpc2FibGUoKTtcbiAgICAgICAgdGhpcy5fbGF5ZXIub2ZmKCdjb250ZXh0bWVudScsIHRoaXMuX3JlbW92ZU1hcmtlciwgdGhpcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2xheWVyRWRpdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXllci5maXJlKCdwbTp1cGRhdGUnLCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGF5ZXJFZGl0ZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIF9yZW1vdmVNYXJrZXI6IGZ1bmN0aW9uIF9yZW1vdmVNYXJrZXIoZSkge1xuICAgICAgICB2YXIgbWFya2VyID0gZS50YXJnZXQ7XG4gICAgICAgIG1hcmtlci5yZW1vdmUoKTtcbiAgICAgICAgbWFya2VyLmZpcmUoJ3BtOnJlbW92ZScpO1xuICAgIH0sXG4gICAgX29uRHJhZ0VuZDogZnVuY3Rpb24gX29uRHJhZ0VuZChlKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSBlLnRhcmdldDtcblxuICAgICAgICAvLyBmaXJlIHRoZSBwbTplZGl0IGV2ZW50IGFuZCBwYXNzIHNoYXBlIGFuZCBtYXJrZXJcbiAgICAgICAgbWFya2VyLmZpcmUoJ3BtOmVkaXQnKTtcbiAgICAgICAgdGhpcy5fbGF5ZXJFZGl0ZWQgPSB0cnVlO1xuICAgIH0sXG5cblxuICAgIC8vIG92ZXJ3cml0ZSBpbml0U25hcHBhYmxlTWFya2VycyBmcm9tIFNuYXBwaW5nLmpzIE1peGluXG4gICAgX2luaXRTbmFwcGFibGVNYXJrZXJzOiBmdW5jdGlvbiBfaW5pdFNuYXBwYWJsZU1hcmtlcnMoKSB7XG4gICAgICAgIHZhciBtYXJrZXIgPSB0aGlzLl9sYXllcjtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuc25hcERpc3RhbmNlID0gdGhpcy5vcHRpb25zLnNuYXBEaXN0YW5jZSB8fCAzMDtcblxuICAgICAgICBtYXJrZXIub2ZmKCdkcmFnJywgdGhpcy5faGFuZGxlU25hcHBpbmcsIHRoaXMpO1xuICAgICAgICBtYXJrZXIub24oJ2RyYWcnLCB0aGlzLl9oYW5kbGVTbmFwcGluZywgdGhpcyk7XG5cbiAgICAgICAgbWFya2VyLm9mZignZHJhZ2VuZCcsIHRoaXMuX2NsZWFudXBTbmFwcGluZywgdGhpcyk7XG4gICAgICAgIG1hcmtlci5vbignZHJhZ2VuZCcsIHRoaXMuX2NsZWFudXBTbmFwcGluZywgdGhpcyk7XG5cbiAgICAgICAgbWFya2VyLm9mZigncG06ZHJhZ3N0YXJ0JywgdGhpcy5fdW5zbmFwLCB0aGlzKTtcbiAgICAgICAgbWFya2VyLm9uKCdwbTpkcmFnc3RhcnQnLCB0aGlzLl91bnNuYXAsIHRoaXMpO1xuICAgIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL0VkaXQvTC5QTS5FZGl0Lk1hcmtlci5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _kinks = __webpack_require__(6);\n\nvar _kinks2 = _interopRequireDefault(_kinks);\n\nvar _LPM = __webpack_require__(2);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Line = _LPM2.default.extend({\n    initialize: function initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n    },\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n    enable: function enable(options) {\n        L.Util.setOptions(this, options);\n\n        this._map = this._layer._map;\n\n        // cancel when map isn't available, this happens when the polygon is removed before this fires\n        if (!this._map) {\n            return;\n        }\n\n        if (!this.enabled()) {\n            // if it was already enabled, disable first\n            // we don't block enabling again because new options might be passed\n            this.disable();\n        }\n\n        // change state\n        this._enabled = true;\n\n        // init markers\n        this._initMarkers();\n\n        // if polygon gets removed from map, disable edit mode\n        this._layer.on('remove', this._onLayerRemove, this);\n\n        if (!this.options.allowSelfIntersection) {\n            this._layer.on('pm:vertexremoved', this._handleSelfIntersectionOnVertexRemoval, this);\n        }\n\n        if (this.options.draggable) {\n            this._initDraggableLayer();\n        }\n\n        if (!this.options.allowSelfIntersection) {\n            this._handleLayerStyle();\n        }\n    },\n    _onLayerRemove: function _onLayerRemove(e) {\n        this.disable(e.target);\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    disable: function disable() {\n        var poly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._layer;\n\n        // if it's not enabled, it doesn't need to be disabled\n        if (!this.enabled()) {\n            return false;\n        }\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove onRemove listener\n        this._layer.off('remove', this._onLayerRemove);\n\n        if (!this.options.allowSelfIntersection) {\n            this._layer.off('pm:vertexremoved', this._handleSelfIntersectionOnVertexRemoval);\n        }\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n\n        // remove invalid class if layer has self intersection\n        if (this.hasSelfIntersection()) {\n            L.DomUtil.removeClass(el, 'leaflet-pm-invalid');\n        }\n\n        if (this._layerEdited) {\n            this._layer.fire('pm:update', {});\n        }\n        this._layerEdited = false;\n\n        return true;\n    },\n    hasSelfIntersection: function hasSelfIntersection() {\n        // check for self intersection of the layer and return true/false\n        var selfIntersection = (0, _kinks2.default)(this._layer.toGeoJSON());\n        return selfIntersection.features.length > 0;\n    },\n    _handleSelfIntersectionOnVertexRemoval: function _handleSelfIntersectionOnVertexRemoval() {\n        // check for selfintersection again (mainly to reset the style)\n        this._handleLayerStyle(true);\n\n        if (this.hasSelfIntersection()) {\n            // reset coordinates\n            this._layer.setLatLngs(this._coordsBeforeEdit);\n            this._coordsBeforeEdit = null;\n\n            // re-enable markers for the new coords\n            this._initMarkers();\n        }\n    },\n    _handleLayerStyle: function _handleLayerStyle(flash) {\n        var el = this._layer._path;\n\n        if (this.hasSelfIntersection()) {\n            if (L.DomUtil.hasClass(el, 'leaflet-pm-invalid')) {\n                return;\n            }\n\n            // if it does self-intersect, mark or flash it red\n            if (flash) {\n                L.DomUtil.addClass(el, 'leaflet-pm-invalid');\n                window.setTimeout(function () {\n                    L.DomUtil.removeClass(el, 'leaflet-pm-invalid');\n                }, 200);\n            } else {\n                L.DomUtil.addClass(el, 'leaflet-pm-invalid');\n            }\n\n            // fire intersect event\n            this._layer.fire('pm:intersect', {\n                intersection: (0, _kinks2.default)(this._layer.toGeoJSON())\n            });\n        } else {\n            // if not, reset the style to the default color\n            L.DomUtil.removeClass(el, 'leaflet-pm-invalid');\n        }\n    },\n    _initMarkers: function _initMarkers() {\n        var _this = this;\n\n        var map = this._map;\n        var coords = this._layer.getLatLngs();\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        this._markerGroup._pmTempLayer = true;\n        map.addLayer(this._markerGroup);\n\n        // handle coord-rings (outer, inner, etc)\n        var handleRing = function handleRing(coordsArr) {\n            // the marker array, it includes only the markers of vertexes (no middle markers)\n            var ringArr = coordsArr.map(_this._createMarker, _this);\n\n            // create small markers in the middle of the regular markers\n            coordsArr.map(function (v, k) {\n                var nextIndex = void 0;\n\n                if (_this.isPolygon()) {\n                    nextIndex = (k + 1) % coordsArr.length;\n                } else {\n                    nextIndex = k + 1;\n                }\n                return _this._createMiddleMarker(ringArr[k], ringArr[nextIndex]);\n            });\n\n            return ringArr;\n        };\n\n        this._markers = [];\n\n        if (this.isPolygon()) {\n            // coords is a multidimansional array, handle all rings\n            this._markers = coords.map(handleRing, this);\n        } else {\n            // coords is one dimensional, handle the ring\n            this._markers = handleRing(coords);\n        }\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng) {\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('move', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this2 = this;\n\n        // cancel if there are no two markers\n        if (!leftM || !rightM) {\n            return false;\n        }\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var middleIcon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(middleIcon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n            // TODO: This is a workaround. Remove the moveend listener and\n            // callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n\n        return middleMarker;\n    },\n\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        // and push into marker array\n        // and associate polygon coordinate with marker coordinate\n        var latlng = newM.getLatLng();\n        var coords = this._layer._latlngs;\n\n        var _findMarkerIndex = this.findMarkerIndex(this._markers, rightM),\n            ringIndex = _findMarkerIndex.ringIndex,\n            index = _findMarkerIndex.index;\n\n        // define the coordsRing that is edited\n\n\n        var coordsRing = ringIndex > -1 ? coords[ringIndex] : coords;\n\n        // define the markers array that is edited\n        var markerArr = ringIndex > -1 ? this._markers[ringIndex] : this._markers;\n\n        // add coordinate to coordinate array\n        coordsRing.splice(index, 0, latlng);\n\n        // add marker to marker array\n        markerArr.splice(index, 0, newM);\n\n        // set new latlngs to update polygon\n        this._layer.setLatLngs(coords);\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        this._layer.fire('pm:vertexadded', {\n            layer: this._layer,\n            marker: newM,\n            index: index,\n            ringIndex: ringIndex\n            // TODO: maybe add latlng as well?\n        });\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    _removeMarker: function _removeMarker(e) {\n        // if self intersection isn't allowed, save the coords upon dragstart\n        // in case we need to reset the layer\n        if (!this.options.allowSelfIntersection) {\n            var c = this._layer.getLatLngs();\n            this._coordsBeforeEdit = JSON.parse(JSON.stringify(c));\n        }\n\n        // the marker that should be removed\n        var marker = e.target;\n\n        // coords of the layer\n        var coords = this._layer.getLatLngs();\n\n        // find the coord ring index and index of the marker\n\n        var _findMarkerIndex2 = this.findMarkerIndex(this._markers, marker),\n            ringIndex = _findMarkerIndex2.ringIndex,\n            index = _findMarkerIndex2.index;\n\n        // define the coordsRing that is edited\n\n\n        var coordsRing = ringIndex > -1 ? coords[ringIndex] : coords;\n\n        // define the markers array that is edited\n        var markerArr = ringIndex > -1 ? this._markers[ringIndex] : this._markers;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        var isMiddleMarker = this.findMarkerIndex(this._markers, marker).index === -1;\n        if (isMiddleMarker) {\n            return;\n        }\n\n        // remove coordinate\n        coordsRing.splice(index, 1);\n\n        // set new latlngs to the polygon\n        this._layer.setLatLngs(coords);\n\n        // if the ring of the poly has no coordinates left, remove the ring\n        if (coordsRing.length <= 1) {\n            // remove coords ring\n            coords.splice(ringIndex, 1);\n\n            // set new coords\n            this._layer.setLatLngs(coords);\n\n            // re-enable editing so unnecessary markers are removed\n            // TODO: kind of an ugly workaround maybe do it better?\n            this.disable();\n            this.enable(this.options);\n        }\n\n        // if no coords are left, remove the layer\n        if (coords.length < 1) {\n            this._layer.remove();\n        }\n\n        // now handle the middle markers\n        // remove the marker and the middlemarkers next to it from the map\n        if (marker._middleMarkerPrev) {\n            this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        }\n        if (marker._middleMarkerNext) {\n            this._markerGroup.removeLayer(marker._middleMarkerNext);\n        }\n\n        // remove the marker from the map\n        this._markerGroup.removeLayer(marker);\n\n        var rightMarkerIndex = void 0;\n        var leftMarkerIndex = void 0;\n\n        if (this.isPolygon()) {\n            // find neighbor marker-indexes\n            rightMarkerIndex = (index + 1) % markerArr.length;\n            leftMarkerIndex = (index + (markerArr.length - 1)) % markerArr.length;\n        } else {\n            // find neighbor marker-indexes\n            leftMarkerIndex = index - 1 < 0 ? undefined : index - 1;\n            rightMarkerIndex = index + 1 >= markerArr.length ? undefined : index + 1;\n        }\n\n        // don't create middlemarkers if there is only one marker left\n        if (rightMarkerIndex !== leftMarkerIndex) {\n            var leftM = markerArr[leftMarkerIndex];\n            var rightM = markerArr[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array\n        markerArr.splice(index, 1);\n\n        // fire edit event\n        this._fireEdit();\n\n        // fire vertex removal event\n        this._layer.fire('pm:vertexremoved', {\n            layer: this._layer,\n            marker: marker,\n            index: index,\n            ringIndex: ringIndex\n            // TODO: maybe add latlng as well?\n        });\n    },\n    findMarkerIndex: function findMarkerIndex(markers, marker) {\n        // find the index of a marker in the markers array and returns the parent index as well in case of a multidimensional array\n        // Multidimensional arrays would mean the layer has multiple coordinate rings (like holes in polygons)\n        var index = void 0;\n        var ringIndex = void 0;\n\n        if (!this.isPolygon()) {\n            index = markers.findIndex(function (m) {\n                return marker._leaflet_id === m._leaflet_id;\n            });\n        } else {\n            ringIndex = markers.findIndex(function (inner) {\n                index = inner.findIndex(function (m) {\n                    return marker._leaflet_id === m._leaflet_id;\n                });\n                return index > -1;\n            });\n        }\n\n        return {\n            index: index,\n            ringIndex: ringIndex\n        };\n    },\n    updatePolygonCoordsFromMarkerDrag: function updatePolygonCoordsFromMarkerDrag(marker) {\n        // update polygon coords\n        var coords = this._layer.getLatLngs();\n\n        var _findMarkerIndex3 = this.findMarkerIndex(this._markers, marker),\n            ringIndex = _findMarkerIndex3.ringIndex,\n            index = _findMarkerIndex3.index;\n\n        var ring = ringIndex > -1 ? coords[ringIndex] : coords;\n\n        ring.splice(index, 1, marker.getLatLng());\n\n        // set new coords on layer\n        this._layer.setLatLngs(coords).redraw();\n    },\n    _onMarkerDrag: function _onMarkerDrag(e) {\n        // dragged marker\n        var marker = e.target;\n\n        // only continue if this is NOT a middle marker\n        var isMiddleMarker = this.findMarkerIndex(this._markers, marker).index === -1;\n        if (isMiddleMarker) {\n            return;\n        }\n\n        this.updatePolygonCoordsFromMarkerDrag(marker);\n\n        // the dragged markers neighbors\n\n        var _findMarkerIndex4 = this.findMarkerIndex(this._markers, marker),\n            ringIndex = _findMarkerIndex4.ringIndex,\n            index = _findMarkerIndex4.index;\n\n        var markerArr = ringIndex > -1 ? this._markers[ringIndex] : this._markers;\n\n        // find the indizes of next and previous markers\n        var nextMarkerIndex = (index + 1) % markerArr.length;\n        var prevMarkerIndex = (index + markerArr.length - 1) % markerArr.length;\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n\n        // get latlng of prev and next marker\n        var prevMarkerLatLng = markerArr[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = markerArr[nextMarkerIndex].getLatLng();\n\n        if (marker._middleMarkerNext) {\n            var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n            marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n        }\n\n        if (marker._middleMarkerPrev) {\n            var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n            marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n        }\n\n        // if self intersection is not allowed, handle it\n        if (!this.options.allowSelfIntersection) {\n            this._handleLayerStyle();\n        }\n    },\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n        var marker = e.target;\n\n        var _findMarkerIndex5 = this.findMarkerIndex(this._markers, marker),\n            ringIndex = _findMarkerIndex5.ringIndex,\n            index = _findMarkerIndex5.index;\n\n        // if self intersection is not allowed but this edit caused a self intersection,\n        // reset and cancel; do not fire events\n\n\n        if (!this.options.allowSelfIntersection && this.hasSelfIntersection()) {\n            // reset coordinates\n            this._layer.setLatLngs(this._coordsBeforeEdit);\n            this._coordsBeforeEdit = null;\n\n            // re-enable markers for the new coords\n            this._initMarkers();\n\n            // check for selfintersection again (mainly to reset the style)\n            this._handleLayerStyle();\n            return;\n        }\n\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e,\n            ringIndex: ringIndex,\n            index: index\n        });\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDragStart: function _onMarkerDragStart(e) {\n        var marker = e.target;\n\n        var _findMarkerIndex6 = this.findMarkerIndex(this._markers, marker),\n            ringIndex = _findMarkerIndex6.ringIndex,\n            index = _findMarkerIndex6.index;\n\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e,\n            ringIndex: ringIndex,\n            index: index\n        });\n\n        // if self intersection isn't allowed, save the coords upon dragstart\n        // in case we need to reset the layer\n        if (!this.options.allowSelfIntersection) {\n            this._coordsBeforeEdit = this._layer.getLatLngs();\n        }\n    },\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._layerEdited = true;\n        this._layer.fire('pm:edit');\n    },\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._map;\n        var p1 = map.project(latlng1);\n        var p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvRWRpdC9MLlBNLkVkaXQuTGluZS5qcz85NDg2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9raW5rcyA9IHJlcXVpcmUoJ0B0dXJmL2tpbmtzJyk7XG5cbnZhciBfa2lua3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2lua3MpO1xuXG52YXIgX0xQTSA9IHJlcXVpcmUoJy4vTC5QTS5FZGl0Jyk7XG5cbnZhciBfTFBNMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xQTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbl9MUE0yLmRlZmF1bHQuTGluZSA9IF9MUE0yLmRlZmF1bHQuZXh0ZW5kKHtcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiBpbml0aWFsaXplKGxheWVyKSB7XG4gICAgICAgIHRoaXMuX2xheWVyID0gbGF5ZXI7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIHRvZ2dsZUVkaXQ6IGZ1bmN0aW9uIHRvZ2dsZUVkaXQob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZShvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZShvcHRpb25zKSB7XG4gICAgICAgIEwuVXRpbC5zZXRPcHRpb25zKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX21hcCA9IHRoaXMuX2xheWVyLl9tYXA7XG5cbiAgICAgICAgLy8gY2FuY2VsIHdoZW4gbWFwIGlzbid0IGF2YWlsYWJsZSwgdGhpcyBoYXBwZW5zIHdoZW4gdGhlIHBvbHlnb24gaXMgcmVtb3ZlZCBiZWZvcmUgdGhpcyBmaXJlc1xuICAgICAgICBpZiAoIXRoaXMuX21hcCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQoKSkge1xuICAgICAgICAgICAgLy8gaWYgaXQgd2FzIGFscmVhZHkgZW5hYmxlZCwgZGlzYWJsZSBmaXJzdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgYmxvY2sgZW5hYmxpbmcgYWdhaW4gYmVjYXVzZSBuZXcgb3B0aW9ucyBtaWdodCBiZSBwYXNzZWRcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hhbmdlIHN0YXRlXG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIGluaXQgbWFya2Vyc1xuICAgICAgICB0aGlzLl9pbml0TWFya2VycygpO1xuXG4gICAgICAgIC8vIGlmIHBvbHlnb24gZ2V0cyByZW1vdmVkIGZyb20gbWFwLCBkaXNhYmxlIGVkaXQgbW9kZVxuICAgICAgICB0aGlzLl9sYXllci5vbigncmVtb3ZlJywgdGhpcy5fb25MYXllclJlbW92ZSwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dTZWxmSW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXllci5vbigncG06dmVydGV4cmVtb3ZlZCcsIHRoaXMuX2hhbmRsZVNlbGZJbnRlcnNlY3Rpb25PblZlcnRleFJlbW92YWwsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcmFnZ2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXREcmFnZ2FibGVMYXllcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dTZWxmSW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVMYXllclN0eWxlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9vbkxheWVyUmVtb3ZlOiBmdW5jdGlvbiBfb25MYXllclJlbW92ZShlKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZShlLnRhcmdldCk7XG4gICAgfSxcbiAgICBlbmFibGVkOiBmdW5jdGlvbiBlbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgIHZhciBwb2x5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLl9sYXllcjtcblxuICAgICAgICAvLyBpZiBpdCdzIG5vdCBlbmFibGVkLCBpdCBkb2Vzbid0IG5lZWQgdG8gYmUgZGlzYWJsZWRcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudCBkaXNhYmxpbmcgaWYgcG9seWdvbiBpcyBiZWluZyBkcmFnZ2VkXG4gICAgICAgIGlmIChwb2x5LnBtLl9kcmFnZ2luZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHBvbHkucG0uX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcG9seS5wbS5fbWFya2VyR3JvdXAuY2xlYXJMYXllcnMoKTtcblxuICAgICAgICAvLyBjbGVhbiB1cCBkcmFnZ2FibGVcbiAgICAgICAgcG9seS5vZmYoJ21vdXNlZG93bicpO1xuICAgICAgICBwb2x5Lm9mZignbW91c2V1cCcpO1xuXG4gICAgICAgIC8vIHJlbW92ZSBvblJlbW92ZSBsaXN0ZW5lclxuICAgICAgICB0aGlzLl9sYXllci5vZmYoJ3JlbW92ZScsIHRoaXMuX29uTGF5ZXJSZW1vdmUpO1xuXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFsbG93U2VsZkludGVyc2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXIub2ZmKCdwbTp2ZXJ0ZXhyZW1vdmVkJywgdGhpcy5faGFuZGxlU2VsZkludGVyc2VjdGlvbk9uVmVydGV4UmVtb3ZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgZHJhZ2dhYmxlIGNsYXNzXG4gICAgICAgIHZhciBlbCA9IHBvbHkuX3BhdGg7XG4gICAgICAgIEwuRG9tVXRpbC5yZW1vdmVDbGFzcyhlbCwgJ2xlYWZsZXQtcG0tZHJhZ2dhYmxlJyk7XG5cbiAgICAgICAgLy8gcmVtb3ZlIGludmFsaWQgY2xhc3MgaWYgbGF5ZXIgaGFzIHNlbGYgaW50ZXJzZWN0aW9uXG4gICAgICAgIGlmICh0aGlzLmhhc1NlbGZJbnRlcnNlY3Rpb24oKSkge1xuICAgICAgICAgICAgTC5Eb21VdGlsLnJlbW92ZUNsYXNzKGVsLCAnbGVhZmxldC1wbS1pbnZhbGlkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbGF5ZXJFZGl0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyLmZpcmUoJ3BtOnVwZGF0ZScsIHt9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXllckVkaXRlZCA9IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzU2VsZkludGVyc2VjdGlvbjogZnVuY3Rpb24gaGFzU2VsZkludGVyc2VjdGlvbigpIHtcbiAgICAgICAgLy8gY2hlY2sgZm9yIHNlbGYgaW50ZXJzZWN0aW9uIG9mIHRoZSBsYXllciBhbmQgcmV0dXJuIHRydWUvZmFsc2VcbiAgICAgICAgdmFyIHNlbGZJbnRlcnNlY3Rpb24gPSAoMCwgX2tpbmtzMi5kZWZhdWx0KSh0aGlzLl9sYXllci50b0dlb0pTT04oKSk7XG4gICAgICAgIHJldHVybiBzZWxmSW50ZXJzZWN0aW9uLmZlYXR1cmVzLmxlbmd0aCA+IDA7XG4gICAgfSxcbiAgICBfaGFuZGxlU2VsZkludGVyc2VjdGlvbk9uVmVydGV4UmVtb3ZhbDogZnVuY3Rpb24gX2hhbmRsZVNlbGZJbnRlcnNlY3Rpb25PblZlcnRleFJlbW92YWwoKSB7XG4gICAgICAgIC8vIGNoZWNrIGZvciBzZWxmaW50ZXJzZWN0aW9uIGFnYWluIChtYWlubHkgdG8gcmVzZXQgdGhlIHN0eWxlKVxuICAgICAgICB0aGlzLl9oYW5kbGVMYXllclN0eWxlKHRydWUpO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc1NlbGZJbnRlcnNlY3Rpb24oKSkge1xuICAgICAgICAgICAgLy8gcmVzZXQgY29vcmRpbmF0ZXNcbiAgICAgICAgICAgIHRoaXMuX2xheWVyLnNldExhdExuZ3ModGhpcy5fY29vcmRzQmVmb3JlRWRpdCk7XG4gICAgICAgICAgICB0aGlzLl9jb29yZHNCZWZvcmVFZGl0ID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gcmUtZW5hYmxlIG1hcmtlcnMgZm9yIHRoZSBuZXcgY29vcmRzXG4gICAgICAgICAgICB0aGlzLl9pbml0TWFya2VycygpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfaGFuZGxlTGF5ZXJTdHlsZTogZnVuY3Rpb24gX2hhbmRsZUxheWVyU3R5bGUoZmxhc2gpIHtcbiAgICAgICAgdmFyIGVsID0gdGhpcy5fbGF5ZXIuX3BhdGg7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzU2VsZkludGVyc2VjdGlvbigpKSB7XG4gICAgICAgICAgICBpZiAoTC5Eb21VdGlsLmhhc0NsYXNzKGVsLCAnbGVhZmxldC1wbS1pbnZhbGlkJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIGl0IGRvZXMgc2VsZi1pbnRlcnNlY3QsIG1hcmsgb3IgZmxhc2ggaXQgcmVkXG4gICAgICAgICAgICBpZiAoZmxhc2gpIHtcbiAgICAgICAgICAgICAgICBMLkRvbVV0aWwuYWRkQ2xhc3MoZWwsICdsZWFmbGV0LXBtLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIEwuRG9tVXRpbC5yZW1vdmVDbGFzcyhlbCwgJ2xlYWZsZXQtcG0taW52YWxpZCcpO1xuICAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEwuRG9tVXRpbC5hZGRDbGFzcyhlbCwgJ2xlYWZsZXQtcG0taW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaXJlIGludGVyc2VjdCBldmVudFxuICAgICAgICAgICAgdGhpcy5fbGF5ZXIuZmlyZSgncG06aW50ZXJzZWN0Jywge1xuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbjogKDAsIF9raW5rczIuZGVmYXVsdCkodGhpcy5fbGF5ZXIudG9HZW9KU09OKCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIG5vdCwgcmVzZXQgdGhlIHN0eWxlIHRvIHRoZSBkZWZhdWx0IGNvbG9yXG4gICAgICAgICAgICBMLkRvbVV0aWwucmVtb3ZlQ2xhc3MoZWwsICdsZWFmbGV0LXBtLWludmFsaWQnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2luaXRNYXJrZXJzOiBmdW5jdGlvbiBfaW5pdE1hcmtlcnMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIG1hcCA9IHRoaXMuX21hcDtcbiAgICAgICAgdmFyIGNvb3JkcyA9IHRoaXMuX2xheWVyLmdldExhdExuZ3MoKTtcblxuICAgICAgICAvLyBjbGVhbnVwIG9sZCBvbmVzIGZpcnN0XG4gICAgICAgIGlmICh0aGlzLl9tYXJrZXJHcm91cCkge1xuICAgICAgICAgICAgdGhpcy5fbWFya2VyR3JvdXAuY2xlYXJMYXllcnMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBtYXJrZXJHcm91cCB0byBtYXAsIG1hcmtlckdyb3VwIGluY2x1ZGVzIHJlZ3VsYXIgYW5kIG1pZGRsZSBtYXJrZXJzXG4gICAgICAgIHRoaXMuX21hcmtlckdyb3VwID0gbmV3IEwuTGF5ZXJHcm91cCgpO1xuICAgICAgICB0aGlzLl9tYXJrZXJHcm91cC5fcG1UZW1wTGF5ZXIgPSB0cnVlO1xuICAgICAgICBtYXAuYWRkTGF5ZXIodGhpcy5fbWFya2VyR3JvdXApO1xuXG4gICAgICAgIC8vIGhhbmRsZSBjb29yZC1yaW5ncyAob3V0ZXIsIGlubmVyLCBldGMpXG4gICAgICAgIHZhciBoYW5kbGVSaW5nID0gZnVuY3Rpb24gaGFuZGxlUmluZyhjb29yZHNBcnIpIHtcbiAgICAgICAgICAgIC8vIHRoZSBtYXJrZXIgYXJyYXksIGl0IGluY2x1ZGVzIG9ubHkgdGhlIG1hcmtlcnMgb2YgdmVydGV4ZXMgKG5vIG1pZGRsZSBtYXJrZXJzKVxuICAgICAgICAgICAgdmFyIHJpbmdBcnIgPSBjb29yZHNBcnIubWFwKF90aGlzLl9jcmVhdGVNYXJrZXIsIF90aGlzKTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIHNtYWxsIG1hcmtlcnMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgcmVndWxhciBtYXJrZXJzXG4gICAgICAgICAgICBjb29yZHNBcnIubWFwKGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRJbmRleCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc1BvbHlnb24oKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSAoayArIDEpICUgY29vcmRzQXJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSBrICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9jcmVhdGVNaWRkbGVNYXJrZXIocmluZ0FycltrXSwgcmluZ0FycltuZXh0SW5kZXhdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmluZ0FycjtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9tYXJrZXJzID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuaXNQb2x5Z29uKCkpIHtcbiAgICAgICAgICAgIC8vIGNvb3JkcyBpcyBhIG11bHRpZGltYW5zaW9uYWwgYXJyYXksIGhhbmRsZSBhbGwgcmluZ3NcbiAgICAgICAgICAgIHRoaXMuX21hcmtlcnMgPSBjb29yZHMubWFwKGhhbmRsZVJpbmcsIHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY29vcmRzIGlzIG9uZSBkaW1lbnNpb25hbCwgaGFuZGxlIHRoZSByaW5nXG4gICAgICAgICAgICB0aGlzLl9tYXJrZXJzID0gaGFuZGxlUmluZyhjb29yZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zbmFwcGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRTbmFwcGFibGVNYXJrZXJzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvLyBjcmVhdGVzIGluaXRpYWwgbWFya2VycyBmb3IgY29vcmRpbmF0ZXNcbiAgICBfY3JlYXRlTWFya2VyOiBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKGxhdGxuZykge1xuICAgICAgICB2YXIgbWFya2VyID0gbmV3IEwuTWFya2VyKGxhdGxuZywge1xuICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgaWNvbjogTC5kaXZJY29uKHsgY2xhc3NOYW1lOiAnbWFya2VyLWljb24nIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1hcmtlci5fcG1UZW1wTGF5ZXIgPSB0cnVlO1xuXG4gICAgICAgIG1hcmtlci5vbignZHJhZ3N0YXJ0JywgdGhpcy5fb25NYXJrZXJEcmFnU3RhcnQsIHRoaXMpO1xuICAgICAgICBtYXJrZXIub24oJ21vdmUnLCB0aGlzLl9vbk1hcmtlckRyYWcsIHRoaXMpO1xuICAgICAgICBtYXJrZXIub24oJ2RyYWdlbmQnLCB0aGlzLl9vbk1hcmtlckRyYWdFbmQsIHRoaXMpO1xuICAgICAgICBtYXJrZXIub24oJ2NvbnRleHRtZW51JywgdGhpcy5fcmVtb3ZlTWFya2VyLCB0aGlzKTtcblxuICAgICAgICB0aGlzLl9tYXJrZXJHcm91cC5hZGRMYXllcihtYXJrZXIpO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXI7XG4gICAgfSxcblxuXG4gICAgLy8gY3JlYXRlcyB0aGUgbWlkZGxlIG1hcmtlcyBiZXR3ZWVuIGNvb3JkaW5hdGVzXG4gICAgX2NyZWF0ZU1pZGRsZU1hcmtlcjogZnVuY3Rpb24gX2NyZWF0ZU1pZGRsZU1hcmtlcihsZWZ0TSwgcmlnaHRNKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIGNhbmNlbCBpZiB0aGVyZSBhcmUgbm8gdHdvIG1hcmtlcnNcbiAgICAgICAgaWYgKCFsZWZ0TSB8fCAhcmlnaHRNKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGF0bG5nID0gdGhpcy5fY2FsY01pZGRsZUxhdExuZyhsZWZ0TS5nZXRMYXRMbmcoKSwgcmlnaHRNLmdldExhdExuZygpKTtcblxuICAgICAgICB2YXIgbWlkZGxlTWFya2VyID0gdGhpcy5fY3JlYXRlTWFya2VyKGxhdGxuZyk7XG4gICAgICAgIHZhciBtaWRkbGVJY29uID0gTC5kaXZJY29uKHsgY2xhc3NOYW1lOiAnbWFya2VyLWljb24gbWFya2VyLWljb24tbWlkZGxlJyB9KTtcbiAgICAgICAgbWlkZGxlTWFya2VyLnNldEljb24obWlkZGxlSWNvbik7XG5cbiAgICAgICAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gdGhpcyBtaWRkbGUgbWFya2VycyBvbiB0aGUgbmVpZ2hib29yIHJlZ3VsYXIgbWFya2Vyc1xuICAgICAgICBsZWZ0TS5fbWlkZGxlTWFya2VyTmV4dCA9IG1pZGRsZU1hcmtlcjtcbiAgICAgICAgcmlnaHRNLl9taWRkbGVNYXJrZXJQcmV2ID0gbWlkZGxlTWFya2VyO1xuXG4gICAgICAgIG1pZGRsZU1hcmtlci5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoZSBuZXh0IHR3byBsaW5lcyBpbnNpZGUgX2FkZE1hcmtlcigpIGFzIHNvb24gYXNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFmbGV0L0xlYWZsZXQvaXNzdWVzLzQ0ODRcbiAgICAgICAgICAgIC8vIGlzIGZpeGVkXG4gICAgICAgICAgICB2YXIgaWNvbiA9IEwuZGl2SWNvbih7IGNsYXNzTmFtZTogJ21hcmtlci1pY29uJyB9KTtcbiAgICAgICAgICAgIG1pZGRsZU1hcmtlci5zZXRJY29uKGljb24pO1xuXG4gICAgICAgICAgICBfdGhpczIuX2FkZE1hcmtlcihtaWRkbGVNYXJrZXIsIGxlZnRNLCByaWdodE0pO1xuICAgICAgICB9KTtcbiAgICAgICAgbWlkZGxlTWFya2VyLm9uKCdtb3Zlc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBUaGlzIGlzIGEgd29ya2Fyb3VuZC4gUmVtb3ZlIHRoZSBtb3ZlZW5kIGxpc3RlbmVyIGFuZFxuICAgICAgICAgICAgLy8gY2FsbGJhY2sgYXMgc29vbiBhcyB0aGlzIGlzIGZpeGVkOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0xlYWZsZXQvTGVhZmxldC9pc3N1ZXMvNDQ4NFxuICAgICAgICAgICAgbWlkZGxlTWFya2VyLm9uKCdtb3ZlZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpY29uID0gTC5kaXZJY29uKHsgY2xhc3NOYW1lOiAnbWFya2VyLWljb24nIH0pO1xuICAgICAgICAgICAgICAgIG1pZGRsZU1hcmtlci5zZXRJY29uKGljb24pO1xuXG4gICAgICAgICAgICAgICAgbWlkZGxlTWFya2VyLm9mZignbW92ZWVuZCcpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF90aGlzMi5fYWRkTWFya2VyKG1pZGRsZU1hcmtlciwgbGVmdE0sIHJpZ2h0TSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtaWRkbGVNYXJrZXI7XG4gICAgfSxcblxuXG4gICAgLy8gYWRkcyBhIG5ldyBtYXJrZXIgZnJvbSBhIG1pZGRsZW1hcmtlclxuICAgIF9hZGRNYXJrZXI6IGZ1bmN0aW9uIF9hZGRNYXJrZXIobmV3TSwgbGVmdE0sIHJpZ2h0TSkge1xuICAgICAgICAvLyBmaXJzdCwgbWFrZSB0aGlzIG1pZGRsZW1hcmtlciBhIHJlZ3VsYXIgbWFya2VyXG4gICAgICAgIG5ld00ub2ZmKCdtb3Zlc3RhcnQnKTtcbiAgICAgICAgbmV3TS5vZmYoJ2NsaWNrJyk7XG5cbiAgICAgICAgLy8gbm93LCBjcmVhdGUgdGhlIHBvbHlnb24gY29vcmRpbmF0ZSBwb2ludCBmb3IgdGhhdCBtYXJrZXJcbiAgICAgICAgLy8gYW5kIHB1c2ggaW50byBtYXJrZXIgYXJyYXlcbiAgICAgICAgLy8gYW5kIGFzc29jaWF0ZSBwb2x5Z29uIGNvb3JkaW5hdGUgd2l0aCBtYXJrZXIgY29vcmRpbmF0ZVxuICAgICAgICB2YXIgbGF0bG5nID0gbmV3TS5nZXRMYXRMbmcoKTtcbiAgICAgICAgdmFyIGNvb3JkcyA9IHRoaXMuX2xheWVyLl9sYXRsbmdzO1xuXG4gICAgICAgIHZhciBfZmluZE1hcmtlckluZGV4ID0gdGhpcy5maW5kTWFya2VySW5kZXgodGhpcy5fbWFya2VycywgcmlnaHRNKSxcbiAgICAgICAgICAgIHJpbmdJbmRleCA9IF9maW5kTWFya2VySW5kZXgucmluZ0luZGV4LFxuICAgICAgICAgICAgaW5kZXggPSBfZmluZE1hcmtlckluZGV4LmluZGV4O1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgY29vcmRzUmluZyB0aGF0IGlzIGVkaXRlZFxuXG5cbiAgICAgICAgdmFyIGNvb3Jkc1JpbmcgPSByaW5nSW5kZXggPiAtMSA/IGNvb3Jkc1tyaW5nSW5kZXhdIDogY29vcmRzO1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgbWFya2VycyBhcnJheSB0aGF0IGlzIGVkaXRlZFxuICAgICAgICB2YXIgbWFya2VyQXJyID0gcmluZ0luZGV4ID4gLTEgPyB0aGlzLl9tYXJrZXJzW3JpbmdJbmRleF0gOiB0aGlzLl9tYXJrZXJzO1xuXG4gICAgICAgIC8vIGFkZCBjb29yZGluYXRlIHRvIGNvb3JkaW5hdGUgYXJyYXlcbiAgICAgICAgY29vcmRzUmluZy5zcGxpY2UoaW5kZXgsIDAsIGxhdGxuZyk7XG5cbiAgICAgICAgLy8gYWRkIG1hcmtlciB0byBtYXJrZXIgYXJyYXlcbiAgICAgICAgbWFya2VyQXJyLnNwbGljZShpbmRleCwgMCwgbmV3TSk7XG5cbiAgICAgICAgLy8gc2V0IG5ldyBsYXRsbmdzIHRvIHVwZGF0ZSBwb2x5Z29uXG4gICAgICAgIHRoaXMuX2xheWVyLnNldExhdExuZ3MoY29vcmRzKTtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIG5ldyBtaWRkbGVtYXJrZXJzXG4gICAgICAgIHRoaXMuX2NyZWF0ZU1pZGRsZU1hcmtlcihsZWZ0TSwgbmV3TSk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZU1pZGRsZU1hcmtlcihuZXdNLCByaWdodE0pO1xuXG4gICAgICAgIC8vIGZpcmUgZWRpdCBldmVudFxuICAgICAgICB0aGlzLl9maXJlRWRpdCgpO1xuXG4gICAgICAgIHRoaXMuX2xheWVyLmZpcmUoJ3BtOnZlcnRleGFkZGVkJywge1xuICAgICAgICAgICAgbGF5ZXI6IHRoaXMuX2xheWVyLFxuICAgICAgICAgICAgbWFya2VyOiBuZXdNLFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgcmluZ0luZGV4OiByaW5nSW5kZXhcbiAgICAgICAgICAgIC8vIFRPRE86IG1heWJlIGFkZCBsYXRsbmcgYXMgd2VsbD9cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zbmFwcGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRTbmFwcGFibGVNYXJrZXJzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9yZW1vdmVNYXJrZXI6IGZ1bmN0aW9uIF9yZW1vdmVNYXJrZXIoZSkge1xuICAgICAgICAvLyBpZiBzZWxmIGludGVyc2VjdGlvbiBpc24ndCBhbGxvd2VkLCBzYXZlIHRoZSBjb29yZHMgdXBvbiBkcmFnc3RhcnRcbiAgICAgICAgLy8gaW4gY2FzZSB3ZSBuZWVkIHRvIHJlc2V0IHRoZSBsYXllclxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd1NlbGZJbnRlcnNlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBjID0gdGhpcy5fbGF5ZXIuZ2V0TGF0TG5ncygpO1xuICAgICAgICAgICAgdGhpcy5fY29vcmRzQmVmb3JlRWRpdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIG1hcmtlciB0aGF0IHNob3VsZCBiZSByZW1vdmVkXG4gICAgICAgIHZhciBtYXJrZXIgPSBlLnRhcmdldDtcblxuICAgICAgICAvLyBjb29yZHMgb2YgdGhlIGxheWVyXG4gICAgICAgIHZhciBjb29yZHMgPSB0aGlzLl9sYXllci5nZXRMYXRMbmdzKCk7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgY29vcmQgcmluZyBpbmRleCBhbmQgaW5kZXggb2YgdGhlIG1hcmtlclxuXG4gICAgICAgIHZhciBfZmluZE1hcmtlckluZGV4MiA9IHRoaXMuZmluZE1hcmtlckluZGV4KHRoaXMuX21hcmtlcnMsIG1hcmtlciksXG4gICAgICAgICAgICByaW5nSW5kZXggPSBfZmluZE1hcmtlckluZGV4Mi5yaW5nSW5kZXgsXG4gICAgICAgICAgICBpbmRleCA9IF9maW5kTWFya2VySW5kZXgyLmluZGV4O1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgY29vcmRzUmluZyB0aGF0IGlzIGVkaXRlZFxuXG5cbiAgICAgICAgdmFyIGNvb3Jkc1JpbmcgPSByaW5nSW5kZXggPiAtMSA/IGNvb3Jkc1tyaW5nSW5kZXhdIDogY29vcmRzO1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgbWFya2VycyBhcnJheSB0aGF0IGlzIGVkaXRlZFxuICAgICAgICB2YXIgbWFya2VyQXJyID0gcmluZ0luZGV4ID4gLTEgPyB0aGlzLl9tYXJrZXJzW3JpbmdJbmRleF0gOiB0aGlzLl9tYXJrZXJzO1xuXG4gICAgICAgIC8vIG9ubHkgY29udGludWUgaWYgdGhpcyBpcyBOT1QgYSBtaWRkbGUgbWFya2VyICh0aG9zZSBjYW4ndCBiZSBkZWxldGVkKVxuICAgICAgICB2YXIgaXNNaWRkbGVNYXJrZXIgPSB0aGlzLmZpbmRNYXJrZXJJbmRleCh0aGlzLl9tYXJrZXJzLCBtYXJrZXIpLmluZGV4ID09PSAtMTtcbiAgICAgICAgaWYgKGlzTWlkZGxlTWFya2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgY29vcmRpbmF0ZVxuICAgICAgICBjb29yZHNSaW5nLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgLy8gc2V0IG5ldyBsYXRsbmdzIHRvIHRoZSBwb2x5Z29uXG4gICAgICAgIHRoaXMuX2xheWVyLnNldExhdExuZ3MoY29vcmRzKTtcblxuICAgICAgICAvLyBpZiB0aGUgcmluZyBvZiB0aGUgcG9seSBoYXMgbm8gY29vcmRpbmF0ZXMgbGVmdCwgcmVtb3ZlIHRoZSByaW5nXG4gICAgICAgIGlmIChjb29yZHNSaW5nLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgY29vcmRzIHJpbmdcbiAgICAgICAgICAgIGNvb3Jkcy5zcGxpY2UocmluZ0luZGV4LCAxKTtcblxuICAgICAgICAgICAgLy8gc2V0IG5ldyBjb29yZHNcbiAgICAgICAgICAgIHRoaXMuX2xheWVyLnNldExhdExuZ3MoY29vcmRzKTtcblxuICAgICAgICAgICAgLy8gcmUtZW5hYmxlIGVkaXRpbmcgc28gdW5uZWNlc3NhcnkgbWFya2VycyBhcmUgcmVtb3ZlZFxuICAgICAgICAgICAgLy8gVE9ETzoga2luZCBvZiBhbiB1Z2x5IHdvcmthcm91bmQgbWF5YmUgZG8gaXQgYmV0dGVyP1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm8gY29vcmRzIGFyZSBsZWZ0LCByZW1vdmUgdGhlIGxheWVyXG4gICAgICAgIGlmIChjb29yZHMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBub3cgaGFuZGxlIHRoZSBtaWRkbGUgbWFya2Vyc1xuICAgICAgICAvLyByZW1vdmUgdGhlIG1hcmtlciBhbmQgdGhlIG1pZGRsZW1hcmtlcnMgbmV4dCB0byBpdCBmcm9tIHRoZSBtYXBcbiAgICAgICAgaWYgKG1hcmtlci5fbWlkZGxlTWFya2VyUHJldikge1xuICAgICAgICAgICAgdGhpcy5fbWFya2VyR3JvdXAucmVtb3ZlTGF5ZXIobWFya2VyLl9taWRkbGVNYXJrZXJQcmV2KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWFya2VyLl9taWRkbGVNYXJrZXJOZXh0KSB7XG4gICAgICAgICAgICB0aGlzLl9tYXJrZXJHcm91cC5yZW1vdmVMYXllcihtYXJrZXIuX21pZGRsZU1hcmtlck5leHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBtYXJrZXIgZnJvbSB0aGUgbWFwXG4gICAgICAgIHRoaXMuX21hcmtlckdyb3VwLnJlbW92ZUxheWVyKG1hcmtlcik7XG5cbiAgICAgICAgdmFyIHJpZ2h0TWFya2VySW5kZXggPSB2b2lkIDA7XG4gICAgICAgIHZhciBsZWZ0TWFya2VySW5kZXggPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNQb2x5Z29uKCkpIHtcbiAgICAgICAgICAgIC8vIGZpbmQgbmVpZ2hib3IgbWFya2VyLWluZGV4ZXNcbiAgICAgICAgICAgIHJpZ2h0TWFya2VySW5kZXggPSAoaW5kZXggKyAxKSAlIG1hcmtlckFyci5sZW5ndGg7XG4gICAgICAgICAgICBsZWZ0TWFya2VySW5kZXggPSAoaW5kZXggKyAobWFya2VyQXJyLmxlbmd0aCAtIDEpKSAlIG1hcmtlckFyci5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmaW5kIG5laWdoYm9yIG1hcmtlci1pbmRleGVzXG4gICAgICAgICAgICBsZWZ0TWFya2VySW5kZXggPSBpbmRleCAtIDEgPCAwID8gdW5kZWZpbmVkIDogaW5kZXggLSAxO1xuICAgICAgICAgICAgcmlnaHRNYXJrZXJJbmRleCA9IGluZGV4ICsgMSA+PSBtYXJrZXJBcnIubGVuZ3RoID8gdW5kZWZpbmVkIDogaW5kZXggKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG9uJ3QgY3JlYXRlIG1pZGRsZW1hcmtlcnMgaWYgdGhlcmUgaXMgb25seSBvbmUgbWFya2VyIGxlZnRcbiAgICAgICAgaWYgKHJpZ2h0TWFya2VySW5kZXggIT09IGxlZnRNYXJrZXJJbmRleCkge1xuICAgICAgICAgICAgdmFyIGxlZnRNID0gbWFya2VyQXJyW2xlZnRNYXJrZXJJbmRleF07XG4gICAgICAgICAgICB2YXIgcmlnaHRNID0gbWFya2VyQXJyW3JpZ2h0TWFya2VySW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlTWlkZGxlTWFya2VyKGxlZnRNLCByaWdodE0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBtYXJrZXIgZnJvbSB0aGUgbWFya2VycyBhcnJheVxuICAgICAgICBtYXJrZXJBcnIuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICAvLyBmaXJlIGVkaXQgZXZlbnRcbiAgICAgICAgdGhpcy5fZmlyZUVkaXQoKTtcblxuICAgICAgICAvLyBmaXJlIHZlcnRleCByZW1vdmFsIGV2ZW50XG4gICAgICAgIHRoaXMuX2xheWVyLmZpcmUoJ3BtOnZlcnRleHJlbW92ZWQnLCB7XG4gICAgICAgICAgICBsYXllcjogdGhpcy5fbGF5ZXIsXG4gICAgICAgICAgICBtYXJrZXI6IG1hcmtlcixcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIHJpbmdJbmRleDogcmluZ0luZGV4XG4gICAgICAgICAgICAvLyBUT0RPOiBtYXliZSBhZGQgbGF0bG5nIGFzIHdlbGw/XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZmluZE1hcmtlckluZGV4OiBmdW5jdGlvbiBmaW5kTWFya2VySW5kZXgobWFya2VycywgbWFya2VyKSB7XG4gICAgICAgIC8vIGZpbmQgdGhlIGluZGV4IG9mIGEgbWFya2VyIGluIHRoZSBtYXJrZXJzIGFycmF5IGFuZCByZXR1cm5zIHRoZSBwYXJlbnQgaW5kZXggYXMgd2VsbCBpbiBjYXNlIG9mIGEgbXVsdGlkaW1lbnNpb25hbCBhcnJheVxuICAgICAgICAvLyBNdWx0aWRpbWVuc2lvbmFsIGFycmF5cyB3b3VsZCBtZWFuIHRoZSBsYXllciBoYXMgbXVsdGlwbGUgY29vcmRpbmF0ZSByaW5ncyAobGlrZSBob2xlcyBpbiBwb2x5Z29ucylcbiAgICAgICAgdmFyIGluZGV4ID0gdm9pZCAwO1xuICAgICAgICB2YXIgcmluZ0luZGV4ID0gdm9pZCAwO1xuXG4gICAgICAgIGlmICghdGhpcy5pc1BvbHlnb24oKSkge1xuICAgICAgICAgICAgaW5kZXggPSBtYXJrZXJzLmZpbmRJbmRleChmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXJrZXIuX2xlYWZsZXRfaWQgPT09IG0uX2xlYWZsZXRfaWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJpbmdJbmRleCA9IG1hcmtlcnMuZmluZEluZGV4KGZ1bmN0aW9uIChpbm5lcikge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5uZXIuZmluZEluZGV4KGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXJrZXIuX2xlYWZsZXRfaWQgPT09IG0uX2xlYWZsZXRfaWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID4gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICByaW5nSW5kZXg6IHJpbmdJbmRleFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdXBkYXRlUG9seWdvbkNvb3Jkc0Zyb21NYXJrZXJEcmFnOiBmdW5jdGlvbiB1cGRhdGVQb2x5Z29uQ29vcmRzRnJvbU1hcmtlckRyYWcobWFya2VyKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBwb2x5Z29uIGNvb3Jkc1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fbGF5ZXIuZ2V0TGF0TG5ncygpO1xuXG4gICAgICAgIHZhciBfZmluZE1hcmtlckluZGV4MyA9IHRoaXMuZmluZE1hcmtlckluZGV4KHRoaXMuX21hcmtlcnMsIG1hcmtlciksXG4gICAgICAgICAgICByaW5nSW5kZXggPSBfZmluZE1hcmtlckluZGV4My5yaW5nSW5kZXgsXG4gICAgICAgICAgICBpbmRleCA9IF9maW5kTWFya2VySW5kZXgzLmluZGV4O1xuXG4gICAgICAgIHZhciByaW5nID0gcmluZ0luZGV4ID4gLTEgPyBjb29yZHNbcmluZ0luZGV4XSA6IGNvb3JkcztcblxuICAgICAgICByaW5nLnNwbGljZShpbmRleCwgMSwgbWFya2VyLmdldExhdExuZygpKTtcblxuICAgICAgICAvLyBzZXQgbmV3IGNvb3JkcyBvbiBsYXllclxuICAgICAgICB0aGlzLl9sYXllci5zZXRMYXRMbmdzKGNvb3JkcykucmVkcmF3KCk7XG4gICAgfSxcbiAgICBfb25NYXJrZXJEcmFnOiBmdW5jdGlvbiBfb25NYXJrZXJEcmFnKGUpIHtcbiAgICAgICAgLy8gZHJhZ2dlZCBtYXJrZXJcbiAgICAgICAgdmFyIG1hcmtlciA9IGUudGFyZ2V0O1xuXG4gICAgICAgIC8vIG9ubHkgY29udGludWUgaWYgdGhpcyBpcyBOT1QgYSBtaWRkbGUgbWFya2VyXG4gICAgICAgIHZhciBpc01pZGRsZU1hcmtlciA9IHRoaXMuZmluZE1hcmtlckluZGV4KHRoaXMuX21hcmtlcnMsIG1hcmtlcikuaW5kZXggPT09IC0xO1xuICAgICAgICBpZiAoaXNNaWRkbGVNYXJrZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlUG9seWdvbkNvb3Jkc0Zyb21NYXJrZXJEcmFnKG1hcmtlcik7XG5cbiAgICAgICAgLy8gdGhlIGRyYWdnZWQgbWFya2VycyBuZWlnaGJvcnNcblxuICAgICAgICB2YXIgX2ZpbmRNYXJrZXJJbmRleDQgPSB0aGlzLmZpbmRNYXJrZXJJbmRleCh0aGlzLl9tYXJrZXJzLCBtYXJrZXIpLFxuICAgICAgICAgICAgcmluZ0luZGV4ID0gX2ZpbmRNYXJrZXJJbmRleDQucmluZ0luZGV4LFxuICAgICAgICAgICAgaW5kZXggPSBfZmluZE1hcmtlckluZGV4NC5pbmRleDtcblxuICAgICAgICB2YXIgbWFya2VyQXJyID0gcmluZ0luZGV4ID4gLTEgPyB0aGlzLl9tYXJrZXJzW3JpbmdJbmRleF0gOiB0aGlzLl9tYXJrZXJzO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIGluZGl6ZXMgb2YgbmV4dCBhbmQgcHJldmlvdXMgbWFya2Vyc1xuICAgICAgICB2YXIgbmV4dE1hcmtlckluZGV4ID0gKGluZGV4ICsgMSkgJSBtYXJrZXJBcnIubGVuZ3RoO1xuICAgICAgICB2YXIgcHJldk1hcmtlckluZGV4ID0gKGluZGV4ICsgbWFya2VyQXJyLmxlbmd0aCAtIDEpICUgbWFya2VyQXJyLmxlbmd0aDtcblxuICAgICAgICAvLyB1cGRhdGUgbWlkZGxlIG1hcmtlcnMgb24gdGhlIGxlZnQgYW5kIHJpZ2h0XG4gICAgICAgIC8vIGJlIGF3YXJlIHRoYXQgXCJuZXh0XCIgYW5kIFwicHJldlwiIG1pZ2h0IGJlIGludGVyY2hhbmdlZCwgZGVwZW5kaW5nIG9uIHRoZSBnZW9qc29uIGFycmF5XG4gICAgICAgIHZhciBtYXJrZXJMYXRMbmcgPSBtYXJrZXIuZ2V0TGF0TG5nKCk7XG5cbiAgICAgICAgLy8gZ2V0IGxhdGxuZyBvZiBwcmV2IGFuZCBuZXh0IG1hcmtlclxuICAgICAgICB2YXIgcHJldk1hcmtlckxhdExuZyA9IG1hcmtlckFycltwcmV2TWFya2VySW5kZXhdLmdldExhdExuZygpO1xuICAgICAgICB2YXIgbmV4dE1hcmtlckxhdExuZyA9IG1hcmtlckFycltuZXh0TWFya2VySW5kZXhdLmdldExhdExuZygpO1xuXG4gICAgICAgIGlmIChtYXJrZXIuX21pZGRsZU1hcmtlck5leHQpIHtcbiAgICAgICAgICAgIHZhciBtaWRkbGVNYXJrZXJOZXh0TGF0TG5nID0gdGhpcy5fY2FsY01pZGRsZUxhdExuZyhtYXJrZXJMYXRMbmcsIG5leHRNYXJrZXJMYXRMbmcpO1xuICAgICAgICAgICAgbWFya2VyLl9taWRkbGVNYXJrZXJOZXh0LnNldExhdExuZyhtaWRkbGVNYXJrZXJOZXh0TGF0TG5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXJrZXIuX21pZGRsZU1hcmtlclByZXYpIHtcbiAgICAgICAgICAgIHZhciBtaWRkbGVNYXJrZXJQcmV2TGF0TG5nID0gdGhpcy5fY2FsY01pZGRsZUxhdExuZyhtYXJrZXJMYXRMbmcsIHByZXZNYXJrZXJMYXRMbmcpO1xuICAgICAgICAgICAgbWFya2VyLl9taWRkbGVNYXJrZXJQcmV2LnNldExhdExuZyhtaWRkbGVNYXJrZXJQcmV2TGF0TG5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHNlbGYgaW50ZXJzZWN0aW9uIGlzIG5vdCBhbGxvd2VkLCBoYW5kbGUgaXRcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dTZWxmSW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVMYXllclN0eWxlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9vbk1hcmtlckRyYWdFbmQ6IGZ1bmN0aW9uIF9vbk1hcmtlckRyYWdFbmQoZSkge1xuICAgICAgICB2YXIgbWFya2VyID0gZS50YXJnZXQ7XG5cbiAgICAgICAgdmFyIF9maW5kTWFya2VySW5kZXg1ID0gdGhpcy5maW5kTWFya2VySW5kZXgodGhpcy5fbWFya2VycywgbWFya2VyKSxcbiAgICAgICAgICAgIHJpbmdJbmRleCA9IF9maW5kTWFya2VySW5kZXg1LnJpbmdJbmRleCxcbiAgICAgICAgICAgIGluZGV4ID0gX2ZpbmRNYXJrZXJJbmRleDUuaW5kZXg7XG5cbiAgICAgICAgLy8gaWYgc2VsZiBpbnRlcnNlY3Rpb24gaXMgbm90IGFsbG93ZWQgYnV0IHRoaXMgZWRpdCBjYXVzZWQgYSBzZWxmIGludGVyc2VjdGlvbixcbiAgICAgICAgLy8gcmVzZXQgYW5kIGNhbmNlbDsgZG8gbm90IGZpcmUgZXZlbnRzXG5cblxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd1NlbGZJbnRlcnNlY3Rpb24gJiYgdGhpcy5oYXNTZWxmSW50ZXJzZWN0aW9uKCkpIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IGNvb3JkaW5hdGVzXG4gICAgICAgICAgICB0aGlzLl9sYXllci5zZXRMYXRMbmdzKHRoaXMuX2Nvb3Jkc0JlZm9yZUVkaXQpO1xuICAgICAgICAgICAgdGhpcy5fY29vcmRzQmVmb3JlRWRpdCA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIHJlLWVuYWJsZSBtYXJrZXJzIGZvciB0aGUgbmV3IGNvb3Jkc1xuICAgICAgICAgICAgdGhpcy5faW5pdE1hcmtlcnMoKTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHNlbGZpbnRlcnNlY3Rpb24gYWdhaW4gKG1haW5seSB0byByZXNldCB0aGUgc3R5bGUpXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVMYXllclN0eWxlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXllci5maXJlKCdwbTptYXJrZXJkcmFnZW5kJywge1xuICAgICAgICAgICAgbWFya2VyRXZlbnQ6IGUsXG4gICAgICAgICAgICByaW5nSW5kZXg6IHJpbmdJbmRleCxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBmaXJlIGVkaXQgZXZlbnRcbiAgICAgICAgdGhpcy5fZmlyZUVkaXQoKTtcbiAgICB9LFxuICAgIF9vbk1hcmtlckRyYWdTdGFydDogZnVuY3Rpb24gX29uTWFya2VyRHJhZ1N0YXJ0KGUpIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IGUudGFyZ2V0O1xuXG4gICAgICAgIHZhciBfZmluZE1hcmtlckluZGV4NiA9IHRoaXMuZmluZE1hcmtlckluZGV4KHRoaXMuX21hcmtlcnMsIG1hcmtlciksXG4gICAgICAgICAgICByaW5nSW5kZXggPSBfZmluZE1hcmtlckluZGV4Ni5yaW5nSW5kZXgsXG4gICAgICAgICAgICBpbmRleCA9IF9maW5kTWFya2VySW5kZXg2LmluZGV4O1xuXG4gICAgICAgIHRoaXMuX2xheWVyLmZpcmUoJ3BtOm1hcmtlcmRyYWdzdGFydCcsIHtcbiAgICAgICAgICAgIG1hcmtlckV2ZW50OiBlLFxuICAgICAgICAgICAgcmluZ0luZGV4OiByaW5nSW5kZXgsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaWYgc2VsZiBpbnRlcnNlY3Rpb24gaXNuJ3QgYWxsb3dlZCwgc2F2ZSB0aGUgY29vcmRzIHVwb24gZHJhZ3N0YXJ0XG4gICAgICAgIC8vIGluIGNhc2Ugd2UgbmVlZCB0byByZXNldCB0aGUgbGF5ZXJcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dTZWxmSW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9jb29yZHNCZWZvcmVFZGl0ID0gdGhpcy5fbGF5ZXIuZ2V0TGF0TG5ncygpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfZmlyZUVkaXQ6IGZ1bmN0aW9uIF9maXJlRWRpdCgpIHtcbiAgICAgICAgLy8gZmlyZSBlZGl0IGV2ZW50XG4gICAgICAgIHRoaXMuX2xheWVyRWRpdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fbGF5ZXIuZmlyZSgncG06ZWRpdCcpO1xuICAgIH0sXG4gICAgX2NhbGNNaWRkbGVMYXRMbmc6IGZ1bmN0aW9uIF9jYWxjTWlkZGxlTGF0TG5nKGxhdGxuZzEsIGxhdGxuZzIpIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBtaWRkbGUgY29vcmRpbmF0ZXMgYmV0d2VlbiB0d28gbWFya2Vyc1xuICAgICAgICAvLyBUT0RPOiBwdXQgdGhpcyBpbnRvIGEgdXRpbHMuanMgb3Igc29tZXRoaW5nXG5cbiAgICAgICAgdmFyIG1hcCA9IHRoaXMuX21hcDtcbiAgICAgICAgdmFyIHAxID0gbWFwLnByb2plY3QobGF0bG5nMSk7XG4gICAgICAgIHZhciBwMiA9IG1hcC5wcm9qZWN0KGxhdGxuZzIpO1xuXG4gICAgICAgIHZhciBsYXRsbmcgPSBtYXAudW5wcm9qZWN0KHAxLl9hZGQocDIpLl9kaXZpZGVCeSgyKSk7XG5cbiAgICAgICAgcmV0dXJuIGxhdGxuZztcbiAgICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9FZGl0L0wuUE0uRWRpdC5MaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(2);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Poly = _LPM2.default.Line.extend({\n    // this is a bit weird but... Polygons are completely supported by L.PM.Edit.Line now 😲.\n    // I'll keep this class in case there is something Polygon-specific that we'd need in the future.\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvRWRpdC9MLlBNLkVkaXQuUG9seS5qcz9mMGUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9MUE0gPSByZXF1aXJlKCcuL0wuUE0uRWRpdCcpO1xuXG52YXIgX0xQTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MUE0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5fTFBNMi5kZWZhdWx0LlBvbHkgPSBfTFBNMi5kZWZhdWx0LkxpbmUuZXh0ZW5kKHtcbiAgICAvLyB0aGlzIGlzIGEgYml0IHdlaXJkIGJ1dC4uLiBQb2x5Z29ucyBhcmUgY29tcGxldGVseSBzdXBwb3J0ZWQgYnkgTC5QTS5FZGl0LkxpbmUgbm93IPCfmLIuXG4gICAgLy8gSSdsbCBrZWVwIHRoaXMgY2xhc3MgaW4gY2FzZSB0aGVyZSBpcyBzb21ldGhpbmcgUG9seWdvbi1zcGVjaWZpYyB0aGF0IHdlJ2QgbmVlZCBpbiB0aGUgZnV0dXJlLlxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvRWRpdC9MLlBNLkVkaXQuUG9seS5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(2);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Rectangle = _LPM2.default.Poly.extend({\n\n    // initializes Rectangle Markers\n    _initMarkers: function _initMarkers() {\n        var map = this._map;\n        var corners = this._findCorners();\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        this._markerGroup._pmTempLayer = true;\n        map.addLayer(this._markerGroup);\n\n        // create markers for four corners of rectangle\n        this._markers = [];\n        // nest set of corner markers in a 2D array so that we can Cut this Rectangle, if needed\n        this._markers[0] = corners.map(this._createMarker, this);\n        // convenience alias, for better readability\n        this._cornerMarkers = this._markers[0];\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n        marker.on('pm:snap', this._adjustRectangleForMarkerSnap, this);\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n\n    // Empty callback for 'contextmenu' binding set in L.PM.Edit.Line.js's _createMarker method (AKA, right-click on marker event)\n    // (A Rectangle is designed to always remain a \"true\" rectangle -- if you want it editable, use Polygon Tool instead!!!)\n    _removeMarker: function _removeMarker() {\n        // The method, it does nothing!!!\n        return null;\n    },\n    _onMarkerDragStart: function _onMarkerDragStart(e) {\n        // dragged marker\n        var draggedMarker = e.target;\n\n        // Store/update a reference to marker in opposite corner\n        var corners = this._findCorners();\n        draggedMarker._oppositeCornerLatLng = corners[(draggedMarker._index + 2) % 4];\n\n        // Automatically unsnap all markers on drag start (they'll snap back if close enough to another snappable object)\n        // (Without this, it's occasionally possible for a marker to get stuck as 'snapped,' which prevents Rectangle resizing)\n        draggedMarker._snapped = false;\n\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e\n        });\n    },\n    _onMarkerDrag: function _onMarkerDrag(e) {\n        // dragged marker\n        var draggedMarker = e.target;\n\n        // only continue if this is NOT a middle marker (should NEVER be one, but this is just a safety check)\n        if (draggedMarker._index === undefined) {\n            return;\n        }\n\n        // If marker is currently snapped to an object, then ignore all drag events (as this resets rectangle shape)\n        if (!draggedMarker._snapped) {\n            this._adjustRectangleForMarkerMove(draggedMarker);\n        }\n    },\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n        var corners = this._findCorners();\n\n        // Reposition ALL markers (so that indices are correctly correlated with corner order (NW, NE, SE, SW))\n        this._adjustAllMarkers(corners);\n\n        // Clean-up data attributes\n        this._cornerMarkers.forEach(function (m) {\n            delete m._oppositeCornerLatLng;\n        });\n\n        // Update bounding box\n        this._layer.setLatLngs(corners);\n\n        // Redraw the shape a final time\n        this._layer.redraw();\n\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e\n        });\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n\n    // adjusts the rectangle's size and bounds whenever a marker is moved\n    // params: movedMarker -- the Marker object\n    _adjustRectangleForMarkerMove: function _adjustRectangleForMarkerMove(movedMarker) {\n        // update moved marker coordinates\n        L.extend(movedMarker._origLatLng, movedMarker._latlng);\n\n        // update rectangle boundaries, based on moved marker's new LatLng and cached opposite corner's LatLng\n        var movedLatLng = movedMarker.getLatLng();\n        this._layer.setBounds(L.latLngBounds(movedLatLng, movedMarker._oppositeCornerLatLng));\n\n        // Reposition the markers at each corner\n        this._adjustAdjacentMarkers(movedMarker);\n\n        // Redraw the shape (to update altered rectangle)\n        this._layer.redraw();\n    },\n\n\n    // adjusts the rectangle's size and bounds whenever a marker snaps to another polygon\n    // params: e -- the snap event\n    _adjustRectangleForMarkerSnap: function _adjustRectangleForMarkerSnap(e) {\n        if (!this.options.snappable) {\n            return;\n        }\n\n        var snappedMarker = e.target;\n        this._adjustRectangleForMarkerMove(snappedMarker);\n    },\n\n\n    // adjusts the position of all Markers\n    // params: markerLatLngs -- an array of exactly LatLng objects\n    _adjustAllMarkers: function _adjustAllMarkers(markerLatLngs) {\n        if (!markerLatLngs.length || markerLatLngs.length != 4) {\n            console.error('_adjustAllMarkers() requires an array of EXACTLY 4 LatLng coordinates');\n            return;\n        }\n\n        this._cornerMarkers.forEach(function (marker, index) {\n            marker.setLatLng(markerLatLngs[index]);\n        });\n    },\n\n\n    // adjusts the position of the two Markers adjacent to the Marker specified\n    // params: anchorMarker -- the Marker object used to determine adjacent Markers\n    _adjustAdjacentMarkers: function _adjustAdjacentMarkers(anchorMarker) {\n        if (!anchorMarker || !anchorMarker.getLatLng || !anchorMarker._oppositeCornerLatLng) {\n            console.error('_adjustAdjacentMarkers() requires a valid Marker object');\n            return;\n        }\n\n        var anchorLatLng = anchorMarker.getLatLng();\n        var oppositeLatLng = anchorMarker._oppositeCornerLatLng;\n\n        // Find two corners not currently occupied by dragged marker and its opposite corner\n        var unmarkedCorners = [];\n        var corners = this._findCorners();\n\n        corners.forEach(function (corner) {\n            if (!corner.equals(anchorLatLng) && !corner.equals(oppositeLatLng)) {\n                unmarkedCorners.push(corner);\n            }\n        });\n\n        // reposition markers for those corners\n        var unmarkedCornerIndex = 0;\n        if (unmarkedCorners.length == 2) {\n            this._cornerMarkers.forEach(function (marker) {\n                var markerLatLng = marker.getLatLng();\n                if (!markerLatLng.equals(anchorLatLng) && !markerLatLng.equals(oppositeLatLng)) {\n                    marker.setLatLng(unmarkedCorners[unmarkedCornerIndex]);\n                    unmarkedCornerIndex += 1;\n                }\n            });\n        }\n    },\n\n\n    // finds the 4 corners of the current bounding box\n    // returns array of 4 LatLng objects in this order: Northwest corner, Northeast corner, Southeast corner, Southwest corner\n    _findCorners: function _findCorners() {\n        var corners = this._layer.getBounds();\n\n        var northwest = corners.getNorthWest();\n        var northeast = corners.getNorthEast();\n        var southeast = corners.getSouthEast();\n        var southwest = corners.getSouthWest();\n\n        return [northwest, northeast, southeast, southwest];\n    }\n}); // Corner detection based on Leaflet Draw's Edit.Rectangle.js Class:\n// https://github.com/Leaflet/Leaflet.draw/blob/master/src/edit/handler/Edit.Rectangle.js//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _LPM = __webpack_require__(2);\n\nvar _LPM2 = _interopRequireDefault(_LPM);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_LPM2.default.Circle = _LPM2.default.extend({\n    initialize: function initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n    },\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    enable: function enable(options) {\n        var _this = this;\n\n        L.Util.setOptions(this, options);\n\n        this._map = this._layer._map;\n\n        if (!this.enabled()) {\n            // if it was already enabled, disable first\n            // we don't block enabling again because new options might be passed\n            this.disable();\n        }\n\n        // change state\n        this._enabled = true;\n\n        // // init markers\n        this._initMarkers();\n\n        // if polygon gets removed from map, disable edit mode\n        this._layer.on('remove', function (e) {\n            _this.disable(e.target);\n        });\n    },\n    disable: function disable() {\n        var layer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._layer;\n\n        // if it's not enabled, it doesn't need to be disabled\n        if (!this.enabled()) {\n            return false;\n        }\n\n        // prevent disabling if layer is being dragged\n        if (layer.pm._dragging) {\n            return false;\n        }\n        layer.pm._enabled = false;\n        layer.pm._layerGroup.clearLayers();\n\n        // clean up draggable\n        layer.off('mousedown');\n        layer.off('mouseup');\n\n        // remove draggable class\n        var el = layer._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n\n        if (this._layerEdited) {\n            this._layer.fire('pm:update', {});\n        }\n        this._layerEdited = false;\n\n        return true;\n    },\n    _initMarkers: function _initMarkers() {\n        var map = this._map;\n\n        // cleanup old ones first\n        if (this._layerGroup) {\n            this._layerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._layerGroup = new L.LayerGroup();\n        map.addLayer(this._layerGroup);\n\n        // create marker for each coordinate\n        var center = this._layer.getLatLng();\n        var radius = this._layer._radius;\n\n        var outer = this._getLatLngOnCircle(center, radius);\n\n        this._centerMarker = this._createCenterMarker(center);\n        this._outerMarker = this._createOuterMarker(outer);\n        this._markers = [this._centerMarker, this._outerMarker];\n        this._createHintLine(this._centerMarker, this._outerMarker);\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    _getLatLngOnCircle: function _getLatLngOnCircle(center, radius) {\n        var pointA = this._map.project(center);\n        var pointB = L.point(pointA.x + radius, pointA.y);\n\n        return this._map.unproject(pointB);\n    },\n    _resizeCircle: function _resizeCircle() {\n        this._syncHintLine();\n        this._syncCircleRadius();\n        this._fireEdit();\n    },\n    _moveCircle: function _moveCircle(e) {\n        var center = e.latlng;\n        this._layer.setLatLng(center);\n\n        var radius = this._layer._radius;\n\n        var outer = this._getLatLngOnCircle(center, radius);\n        this._outerMarker.setLatLng(outer);\n        this._syncHintLine();\n        this._fireEdit();\n\n        this._layer.fire('pm:centerplaced', {\n            layer: this._layer,\n            latlng: center\n        });\n    },\n    _onMarkerDragStart: function _onMarkerDragStart(e) {\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e\n        });\n    },\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e\n        });\n    },\n    _syncCircleRadius: function _syncCircleRadius() {\n        var A = this._centerMarker.getLatLng();\n        var B = this._outerMarker.getLatLng();\n\n        var distance = A.distanceTo(B);\n\n        this._layer.setRadius(distance);\n    },\n    _syncHintLine: function _syncHintLine() {\n        var A = this._centerMarker.getLatLng();\n        var B = this._outerMarker.getLatLng();\n\n        // set coords for hintline from marker to last vertex of drawin polyline\n        this._hintline.setLatLngs([A, B]);\n    },\n    _createHintLine: function _createHintLine(markerA, markerB) {\n        var A = markerA.getLatLng();\n        var B = markerB.getLatLng();\n        this._hintline = L.polyline([A, B], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n    },\n    _createCenterMarker: function _createCenterMarker(latlng) {\n        var marker = this._createMarker(latlng);\n\n        marker.on('move', this._moveCircle, this);\n        // marker.on('contextmenu', this._removeMarker, this);\n\n        return marker;\n    },\n    _createOuterMarker: function _createOuterMarker(latlng) {\n        var marker = this._createMarker(latlng);\n        marker.on('move', this._resizeCircle, this);\n        // marker.on('contextmenu', this._removeMarker, this);\n\n        return marker;\n    },\n    _createMarker: function _createMarker(latlng) {\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n\n        this._layerGroup.addLayer(marker);\n\n        return marker;\n    },\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._layer.fire('pm:edit');\n        this._layerEdited = true;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2xheWVycy5jc3M/MzE4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Nzcy9sYXllcnMuY3NzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2NvbnRyb2xzLmNzcz84MjNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY3NzL2NvbnRyb2xzLmNzc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ })
/******/ ]);